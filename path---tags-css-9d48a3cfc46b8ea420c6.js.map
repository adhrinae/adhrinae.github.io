{"version":3,"sources":["webpack:///path---tags-css-9d48a3cfc46b8ea420c6.js","webpack:///./.cache/json/tags-css.json"],"names":["webpackJsonp","459","module","exports","pathContext","postsByTag","excerpt","html","id","frontmatter","date","path","title","tags","category","tagName"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,aAAeC,QAAA,2MAAAC,KAAA;AAAkujCC,GAAA,+GAAAC,aAAwXC,KAAA,aAAAC,KAAA,yBAAAC,MAAA,iBAAAC,MAAA,4BAAAC,SAAA,eAAyIC,QAAA","file":"path---tags-css-9d48a3cfc46b8ea420c6.js","sourcesContent":["webpackJsonp([209063065961547],{\n\n/***/ 459:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"postsByTag\":[{\"excerpt\":\"다음 프로젝트에서 본격적으로 타입스크립트를 사용한 리액트 애플리케이션을 도입하고자 하는데, CSS를 입히기 위한 도구로  TypeStyle 을 활용하는 방안을 검토중이다. 그래서  egghead의 강좌 를 가볍게 따라가며 내용을 정리해보았다. 이 정도면 충분히 도입할 만한 가치가 있어 보인다. 적어도 스타일 속성 이름으로 오타가 날 일은 없어 보이며 JS…\",\"html\":\"<p>다음 프로젝트에서 본격적으로 타입스크립트를 사용한 리액트 애플리케이션을 도입하고자 하는데, CSS를 입히기 위한 도구로 <a href=\\\"https://typestyle.github.io\\\">TypeStyle</a>을 활용하는 방안을 검토중이다.</p>\\n<p>그래서 <a href=\\\"https://egghead.io/courses/maintainable-css-using-typestyle\\\">egghead의 강좌</a>를 가볍게 따라가며 내용을 정리해보았다. 이 정도면 충분히 도입할 만한 가치가 있어 보인다.</p>\\n<p>적어도 스타일 속성 이름으로 오타가 날 일은 없어 보이며 JS를 적극적으로 활용하여 동적인 스타일을 입힐 수 있으리라 기대한다.</p>\\n<p>참고로 아래의 예제 코드는 모두 리액트 애플리케이션을 개발한다는 전제하에 소개하고 있다. 하지만 TypeStyle 자체는 어느 환경에서나 사용 가능하다.</p>\\n<h2 id=\\\"기본-사용법\\\"><a href=\\\"#%EA%B8%B0%EB%B3%B8-%EC%82%AC%EC%9A%A9%EB%B2%95\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>기본 사용법</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> ReactDOM <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span><span class=\\\"token punctuation\\\">,</span>\\n  position<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'relative'</span> \\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>className<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n    Hello TypeStyle<span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p><code>style</code> 함수로 생성된 내용이 스타일이 적용된 임의의 클래스 이름을 만들게 되고 DOM은 바로 클래스 이름을 사용하면 되도록 구성되어 있다.</p>\\n<p>이 과정에서 객체 형식으로 되어있는 key-value 값은 이미 라이브러리에 CSS 스펙에 맞게 정의되어 있기 때문에 오타가 날 시 컴파일러가 친절하게 에러를 잡아준다.</p>\\n<h2 id=\\\"스타일-믹스인\\\"><a href=\\\"#%EC%8A%A4%ED%83%80%EC%9D%BC-%EB%AF%B9%EC%8A%A4%EC%9D%B8\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>스타일 믹스인</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token comment\\\">// 위 코드와 동일한 DOM 랜더링</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fontSize</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> valueStr <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">typeof</span> value <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'string'</span>\\n    <span class=\\\"token operator\\\">?</span> value\\n    <span class=\\\"token punctuation\\\">:</span> value <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'px'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    fontSize<span class=\\\"token punctuation\\\">:</span> valueStr\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> fontColor <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">fontSize</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'3em'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  fontColor\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p>위의 코드 처럼 <code>style</code> 함수는 객체를 믹스인 할 수 있다. 프로퍼티가 맞는 순수 객체가 들어가면 아무 없이 작동하기 때문에 위의 <code>fontSize</code> 함수처럼 상황에 맞게 적절한 객체를 리턴하는 함수를 만들어서 다양한 상황에 맞게 사용할 수 있다.</p>\\n<h2 id=\\\"미디어-쿼리\\\"><a href=\\\"#%EB%AF%B8%EB%94%94%EC%96%B4-%EC%BF%BC%EB%A6%AC\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>미디어 쿼리</h2>\\n<p><code>media</code> 함수로 간단히 미디어 쿼리를 생성할 수 있다. 생성된 쿼리를 <code>style</code> 함수 안에 넣으면 자동으로 Nested 쿼리 형식으로 생성된다. 수동으로 Nested 쿼리를 입력하고자 할 때는 <code>style</code> 함수 안에 넣는 객체에 <code>$nest</code> 속성을 사용하면 된다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style<span class=\\\"token punctuation\\\">,</span> media <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span> \\n    color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span><span class=\\\"token punctuation\\\">,</span>\\n    transition<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'font-size .2s'</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">media</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> minWidth<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">500</span><span class=\\\"token punctuation\\\">,</span> maxWidth<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">700</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'30px'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">media</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> minWidth<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">701</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'50px'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"수도-클래스pseudo-class-작성\\\"><a href=\\\"#%EC%88%98%EB%8F%84-%ED%81%B4%EB%9E%98%EC%8A%A4pseudo-class-%EC%9E%91%EC%84%B1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>수도 클래스(pseudo class) 작성</h2>\\n<p>Sass, Less와 유사한 형태로 계층 화된 쿼리를 작성할 수 있다. 위에서 언급한 <code>$nest</code> 속성을 선택하면 해당 클래스의 계층 쿼리를 작성할 수 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span> \\n    color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span><span class=\\\"token punctuation\\\">,</span>\\n    transition<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'font-size .2s'</span><span class=\\\"token punctuation\\\">,</span>\\n    $nest<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token string\\\">'&amp;:focus'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// .class:focus</span>\\n        fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'30px'</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token string\\\">'&amp;&amp;:hover'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// .class.class:focus</span>\\n        fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'50px'</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"css-클래스-조합하기\\\"><a href=\\\"#css-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%A1%B0%ED%95%A9%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>CSS 클래스 조합하기</h2>\\n<p>클래스를 조합하는건 <code>style</code> 함수로 만들어진 클래스들을 분기에 따라 추가하고 제거하도록 만들면 된다. 다만 이 과정에서 있는 경우와 없는 경우에 따라 문자열을 조합하는게 번거로울 수 있는데, <code>classes</code> 함수가 귀찮은 부분을 쉽게 해결하도록 도와준다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">const</span> baseClassName <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span> color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'#333'</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> errorClassName <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span> backgroundColor<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">AppProps</span> <span class=\\\"token punctuation\\\">{</span>\\n  className<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n  hasError<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">boolean</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">App</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> className<span class=\\\"token punctuation\\\">,</span> hasError <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">:</span> AppProps<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">classes</span><span class=\\\"token punctuation\\\">(</span>\\n      baseClassName<span class=\\\"token punctuation\\\">,</span>\\n      className<span class=\\\"token punctuation\\\">,</span>\\n      hasError <span class=\\\"token operator\\\">&amp;&amp;</span> errorClassName\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n    Hello world\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"keyframes-함수로-애니메이션-만들기\\\"><a href=\\\"#keyframes-%ED%95%A8%EC%88%98%EB%A1%9C-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98-%EB%A7%8C%EB%93%A4%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Keyframes 함수로 애니메이션 만들기</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style<span class=\\\"token punctuation\\\">,</span> keyframes <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> colorAnimationName <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">keyframes</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token string\\\">'0%'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'black'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token string\\\">'50%'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'blue'</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'20px'</span><span class=\\\"token punctuation\\\">,</span>\\n    animationName<span class=\\\"token punctuation\\\">:</span> colorAnimationName<span class=\\\"token punctuation\\\">,</span>\\n    animationDuration<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'1s'</span><span class=\\\"token punctuation\\\">,</span>\\n    animationIterationCount<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'infinite'</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p><code>colorAnimationName</code> 을 일일이 변수로 분리 할 필요는 없다. 한번만 사용할거면 <code>animationName</code> 속성에 바로 <code>keyframes</code> 를 사용한 객체를 리턴하도록 만들면 된다.</p>\\n<h2 id=\\\"일반-css를-사용하기\\\"><a href=\\\"#%EC%9D%BC%EB%B0%98-css%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>일반 CSS를 사용하기</h2>\\n<p><code>cssRaw</code> 함수를 사용하고 그 안에 일반 CSS를 문자열로 집어넣으면 그대로 글로벌 스타일로 변환된다. 그리고 그 파일안에 있는 컴포넌트에 전부 영향을 준다. 특정 이름을 가진 클래스를 만들고, 간단하게 기존 스타일을 마이그레이션 하거나 NormalizeCSS 등을 바로 가져올 때도 유용하게 사용할 수 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style<span class=\\\"token punctuation\\\">,</span> cssRaw <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">cssRaw</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n.red {\\n  color: red;\\n}\\n`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">cssRaw</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n.bold {\\n  font-weight: bold;\\n}\\n`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span> fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'30px'</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>className <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">' red bold'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span> <span class=\\\"token comment\\\">// red, bold 클래스 사용 가능</span>\\n    Hello world\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"구형-브라우저용-속성-사용하기\\\"><a href=\\\"#%EA%B5%AC%ED%98%95-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%9A%A9-%EC%86%8D%EC%84%B1-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>구형 브라우저용 속성 사용하기</h2>\\n<p><code>rgba</code> 같은 구형 브라우저에서 지원되지 않는 속성을 사용하면서 구형 브라우저를 지원하는 용도로 <code>rgb</code> 를 사용하는 경우, CSS 파일에서는 보통 같은 속성을 두번 작성해서 문제를 해결할 수 있다. 하지만 TypeStyle은 객체를 파싱하기 때문에 같은 속성 값을 두번 선언할 수는 없다.</p>\\n<p>하지만 배열을 사용하면 한 속성에 배열의 요소를 순차적으로 따라 스타일을 적용하도록 만들 수 있으며, 비슷한 원리를 vendor prefix에도 적용할 수 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style<span class=\\\"token punctuation\\\">,</span> types <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> scroll<span class=\\\"token punctuation\\\">:</span> types<span class=\\\"token punctuation\\\">.</span>NestedCSSProperties <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token string\\\">'-webkit-overflow-scrolling'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'touch'</span><span class=\\\"token punctuation\\\">,</span>\\n  overflow<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'auto'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  scroll<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'30px'</span><span class=\\\"token punctuation\\\">,</span>\\n    backgroundColor<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token string\\\">'rgb(200, 54, 54)'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 구형 브라우저용</span>\\n      <span class=\\\"token string\\\">'rgba(200, 54, 54, 0.5)'</span> <span class=\\\"token comment\\\">// 요즘 브라우저용</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"정적-페이지-만들어보기\\\"><a href=\\\"#%EC%A0%95%EC%A0%81-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>정적 페이지 만들어보기</h2>\\n<p><code>getStyles</code> 함수는 현재 작성된 파일 안에 정의된 TypeStyle 스타일을 문자열로 변환하는 기능을 한다. 이를 이용해서 간단한 HTML 페이지를 만들 수 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token comment\\\">// app.tsx</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> fs <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> ReactDOMServer <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-dom/server'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style<span class=\\\"token punctuation\\\">,</span> getStyles <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span><span class=\\\"token punctuation\\\">,</span>\\n  fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'30px'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">App</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>className<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n    Hello World\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> html <span class=\\\"token operator\\\">=</span> ReactDOMServer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">renderToStaticMarkup</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&lt;</span>App <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> css <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getStyles</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">renderPage</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> html<span class=\\\"token punctuation\\\">,</span> css <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> html<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span> css<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n&lt;html>\\n  &lt;head>\\n    &lt;style></span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>css<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">&lt;/style>\\n  &lt;/head>\\n  &lt;body>\\n    </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>html<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\n  &lt;/body>\\n&lt;/html>\\n`</span></span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> renderedPage <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">renderPage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> html<span class=\\\"token punctuation\\\">,</span> css <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nfs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeFileSync</span><span class=\\\"token punctuation\\\">(</span>__dirname <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'/index.html'</span><span class=\\\"token punctuation\\\">,</span> renderedPage<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code><span class=\\\"token comment\\\">&lt;!-- 결과물 --></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>html</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>style</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token style language-css\\\"><span class=\\\"token selector\\\">.fyuerk</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span>red<span class=\\\"token punctuation\\\">;</span><span class=\\\"token property\\\">font-size</span><span class=\\\"token punctuation\\\">:</span>30px<span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>style</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>fyuerk<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>Hello World<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>html</span><span class=\\\"token punctuation\\\">></span></span>\\n</code></pre>\\n      </div>\\n<p>위 방식을 응용하여 서버 사이드 랜더링에서도 스타일을 적용할 수 있다. <a href=\\\"https://egghead.io/lessons/css-render-html-css-server-side-using-typestyle\\\">영상 참고.</a></p>\",\"id\":\"/Users/rinae/Dev/blog/src/pages/posts/2018-01-16-typestyle-basic/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-01-16\",\"path\":\"/posts/typestyle-basic\",\"title\":\"TypeStyle 사용하기\",\"tags\":[\"TypeScript\",\"React\",\"CSS\"],\"category\":\"TypeStyle\"}}],\"tagName\":\"CSS\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tags-css-9d48a3cfc46b8ea420c6.js","module.exports = {\"pathContext\":{\"postsByTag\":[{\"excerpt\":\"다음 프로젝트에서 본격적으로 타입스크립트를 사용한 리액트 애플리케이션을 도입하고자 하는데, CSS를 입히기 위한 도구로  TypeStyle 을 활용하는 방안을 검토중이다. 그래서  egghead의 강좌 를 가볍게 따라가며 내용을 정리해보았다. 이 정도면 충분히 도입할 만한 가치가 있어 보인다. 적어도 스타일 속성 이름으로 오타가 날 일은 없어 보이며 JS…\",\"html\":\"<p>다음 프로젝트에서 본격적으로 타입스크립트를 사용한 리액트 애플리케이션을 도입하고자 하는데, CSS를 입히기 위한 도구로 <a href=\\\"https://typestyle.github.io\\\">TypeStyle</a>을 활용하는 방안을 검토중이다.</p>\\n<p>그래서 <a href=\\\"https://egghead.io/courses/maintainable-css-using-typestyle\\\">egghead의 강좌</a>를 가볍게 따라가며 내용을 정리해보았다. 이 정도면 충분히 도입할 만한 가치가 있어 보인다.</p>\\n<p>적어도 스타일 속성 이름으로 오타가 날 일은 없어 보이며 JS를 적극적으로 활용하여 동적인 스타일을 입힐 수 있으리라 기대한다.</p>\\n<p>참고로 아래의 예제 코드는 모두 리액트 애플리케이션을 개발한다는 전제하에 소개하고 있다. 하지만 TypeStyle 자체는 어느 환경에서나 사용 가능하다.</p>\\n<h2 id=\\\"기본-사용법\\\"><a href=\\\"#%EA%B8%B0%EB%B3%B8-%EC%82%AC%EC%9A%A9%EB%B2%95\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>기본 사용법</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> ReactDOM <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span><span class=\\\"token punctuation\\\">,</span>\\n  position<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'relative'</span> \\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>className<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n    Hello TypeStyle<span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p><code>style</code> 함수로 생성된 내용이 스타일이 적용된 임의의 클래스 이름을 만들게 되고 DOM은 바로 클래스 이름을 사용하면 되도록 구성되어 있다.</p>\\n<p>이 과정에서 객체 형식으로 되어있는 key-value 값은 이미 라이브러리에 CSS 스펙에 맞게 정의되어 있기 때문에 오타가 날 시 컴파일러가 친절하게 에러를 잡아준다.</p>\\n<h2 id=\\\"스타일-믹스인\\\"><a href=\\\"#%EC%8A%A4%ED%83%80%EC%9D%BC-%EB%AF%B9%EC%8A%A4%EC%9D%B8\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>스타일 믹스인</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token comment\\\">// 위 코드와 동일한 DOM 랜더링</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fontSize</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> valueStr <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">typeof</span> value <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'string'</span>\\n    <span class=\\\"token operator\\\">?</span> value\\n    <span class=\\\"token punctuation\\\">:</span> value <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'px'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    fontSize<span class=\\\"token punctuation\\\">:</span> valueStr\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> fontColor <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">fontSize</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'3em'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  fontColor\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p>위의 코드 처럼 <code>style</code> 함수는 객체를 믹스인 할 수 있다. 프로퍼티가 맞는 순수 객체가 들어가면 아무 없이 작동하기 때문에 위의 <code>fontSize</code> 함수처럼 상황에 맞게 적절한 객체를 리턴하는 함수를 만들어서 다양한 상황에 맞게 사용할 수 있다.</p>\\n<h2 id=\\\"미디어-쿼리\\\"><a href=\\\"#%EB%AF%B8%EB%94%94%EC%96%B4-%EC%BF%BC%EB%A6%AC\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>미디어 쿼리</h2>\\n<p><code>media</code> 함수로 간단히 미디어 쿼리를 생성할 수 있다. 생성된 쿼리를 <code>style</code> 함수 안에 넣으면 자동으로 Nested 쿼리 형식으로 생성된다. 수동으로 Nested 쿼리를 입력하고자 할 때는 <code>style</code> 함수 안에 넣는 객체에 <code>$nest</code> 속성을 사용하면 된다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style<span class=\\\"token punctuation\\\">,</span> media <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span> \\n    color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span><span class=\\\"token punctuation\\\">,</span>\\n    transition<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'font-size .2s'</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">media</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> minWidth<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">500</span><span class=\\\"token punctuation\\\">,</span> maxWidth<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">700</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'30px'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">media</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> minWidth<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">701</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'50px'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"수도-클래스pseudo-class-작성\\\"><a href=\\\"#%EC%88%98%EB%8F%84-%ED%81%B4%EB%9E%98%EC%8A%A4pseudo-class-%EC%9E%91%EC%84%B1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>수도 클래스(pseudo class) 작성</h2>\\n<p>Sass, Less와 유사한 형태로 계층 화된 쿼리를 작성할 수 있다. 위에서 언급한 <code>$nest</code> 속성을 선택하면 해당 클래스의 계층 쿼리를 작성할 수 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span> \\n    color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span><span class=\\\"token punctuation\\\">,</span>\\n    transition<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'font-size .2s'</span><span class=\\\"token punctuation\\\">,</span>\\n    $nest<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token string\\\">'&amp;:focus'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// .class:focus</span>\\n        fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'30px'</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token string\\\">'&amp;&amp;:hover'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// .class.class:focus</span>\\n        fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'50px'</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"css-클래스-조합하기\\\"><a href=\\\"#css-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%A1%B0%ED%95%A9%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>CSS 클래스 조합하기</h2>\\n<p>클래스를 조합하는건 <code>style</code> 함수로 만들어진 클래스들을 분기에 따라 추가하고 제거하도록 만들면 된다. 다만 이 과정에서 있는 경우와 없는 경우에 따라 문자열을 조합하는게 번거로울 수 있는데, <code>classes</code> 함수가 귀찮은 부분을 쉽게 해결하도록 도와준다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">const</span> baseClassName <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span> color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'#333'</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> errorClassName <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span> backgroundColor<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">AppProps</span> <span class=\\\"token punctuation\\\">{</span>\\n  className<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n  hasError<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">boolean</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">App</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> className<span class=\\\"token punctuation\\\">,</span> hasError <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">:</span> AppProps<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">classes</span><span class=\\\"token punctuation\\\">(</span>\\n      baseClassName<span class=\\\"token punctuation\\\">,</span>\\n      className<span class=\\\"token punctuation\\\">,</span>\\n      hasError <span class=\\\"token operator\\\">&amp;&amp;</span> errorClassName\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n    Hello world\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"keyframes-함수로-애니메이션-만들기\\\"><a href=\\\"#keyframes-%ED%95%A8%EC%88%98%EB%A1%9C-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98-%EB%A7%8C%EB%93%A4%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Keyframes 함수로 애니메이션 만들기</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style<span class=\\\"token punctuation\\\">,</span> keyframes <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> colorAnimationName <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">keyframes</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token string\\\">'0%'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'black'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token string\\\">'50%'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'blue'</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'20px'</span><span class=\\\"token punctuation\\\">,</span>\\n    animationName<span class=\\\"token punctuation\\\">:</span> colorAnimationName<span class=\\\"token punctuation\\\">,</span>\\n    animationDuration<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'1s'</span><span class=\\\"token punctuation\\\">,</span>\\n    animationIterationCount<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'infinite'</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p><code>colorAnimationName</code> 을 일일이 변수로 분리 할 필요는 없다. 한번만 사용할거면 <code>animationName</code> 속성에 바로 <code>keyframes</code> 를 사용한 객체를 리턴하도록 만들면 된다.</p>\\n<h2 id=\\\"일반-css를-사용하기\\\"><a href=\\\"#%EC%9D%BC%EB%B0%98-css%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>일반 CSS를 사용하기</h2>\\n<p><code>cssRaw</code> 함수를 사용하고 그 안에 일반 CSS를 문자열로 집어넣으면 그대로 글로벌 스타일로 변환된다. 그리고 그 파일안에 있는 컴포넌트에 전부 영향을 준다. 특정 이름을 가진 클래스를 만들고, 간단하게 기존 스타일을 마이그레이션 하거나 NormalizeCSS 등을 바로 가져올 때도 유용하게 사용할 수 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style<span class=\\\"token punctuation\\\">,</span> cssRaw <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">cssRaw</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n.red {\\n  color: red;\\n}\\n`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">cssRaw</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n.bold {\\n  font-weight: bold;\\n}\\n`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span> fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'30px'</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>className <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">' red bold'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span> <span class=\\\"token comment\\\">// red, bold 클래스 사용 가능</span>\\n    Hello world\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"구형-브라우저용-속성-사용하기\\\"><a href=\\\"#%EA%B5%AC%ED%98%95-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%9A%A9-%EC%86%8D%EC%84%B1-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>구형 브라우저용 속성 사용하기</h2>\\n<p><code>rgba</code> 같은 구형 브라우저에서 지원되지 않는 속성을 사용하면서 구형 브라우저를 지원하는 용도로 <code>rgb</code> 를 사용하는 경우, CSS 파일에서는 보통 같은 속성을 두번 작성해서 문제를 해결할 수 있다. 하지만 TypeStyle은 객체를 파싱하기 때문에 같은 속성 값을 두번 선언할 수는 없다.</p>\\n<p>하지만 배열을 사용하면 한 속성에 배열의 요소를 순차적으로 따라 스타일을 적용하도록 만들 수 있으며, 비슷한 원리를 vendor prefix에도 적용할 수 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style<span class=\\\"token punctuation\\\">,</span> types <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> scroll<span class=\\\"token punctuation\\\">:</span> types<span class=\\\"token punctuation\\\">.</span>NestedCSSProperties <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token string\\\">'-webkit-overflow-scrolling'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'touch'</span><span class=\\\"token punctuation\\\">,</span>\\n  overflow<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'auto'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  scroll<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'30px'</span><span class=\\\"token punctuation\\\">,</span>\\n    backgroundColor<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token string\\\">'rgb(200, 54, 54)'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 구형 브라우저용</span>\\n      <span class=\\\"token string\\\">'rgba(200, 54, 54, 0.5)'</span> <span class=\\\"token comment\\\">// 요즘 브라우저용</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"정적-페이지-만들어보기\\\"><a href=\\\"#%EC%A0%95%EC%A0%81-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>정적 페이지 만들어보기</h2>\\n<p><code>getStyles</code> 함수는 현재 작성된 파일 안에 정의된 TypeStyle 스타일을 문자열로 변환하는 기능을 한다. 이를 이용해서 간단한 HTML 페이지를 만들 수 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token comment\\\">// app.tsx</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> fs <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> ReactDOMServer <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-dom/server'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style<span class=\\\"token punctuation\\\">,</span> getStyles <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span><span class=\\\"token punctuation\\\">,</span>\\n  fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'30px'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">App</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>className<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n    Hello World\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> html <span class=\\\"token operator\\\">=</span> ReactDOMServer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">renderToStaticMarkup</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&lt;</span>App <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> css <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getStyles</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">renderPage</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> html<span class=\\\"token punctuation\\\">,</span> css <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> html<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span> css<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n&lt;html>\\n  &lt;head>\\n    &lt;style></span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>css<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">&lt;/style>\\n  &lt;/head>\\n  &lt;body>\\n    </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>html<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\n  &lt;/body>\\n&lt;/html>\\n`</span></span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> renderedPage <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">renderPage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> html<span class=\\\"token punctuation\\\">,</span> css <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nfs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeFileSync</span><span class=\\\"token punctuation\\\">(</span>__dirname <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'/index.html'</span><span class=\\\"token punctuation\\\">,</span> renderedPage<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code><span class=\\\"token comment\\\">&lt;!-- 결과물 --></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>html</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>style</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token style language-css\\\"><span class=\\\"token selector\\\">.fyuerk</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span>red<span class=\\\"token punctuation\\\">;</span><span class=\\\"token property\\\">font-size</span><span class=\\\"token punctuation\\\">:</span>30px<span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>style</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>fyuerk<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>Hello World<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>html</span><span class=\\\"token punctuation\\\">></span></span>\\n</code></pre>\\n      </div>\\n<p>위 방식을 응용하여 서버 사이드 랜더링에서도 스타일을 적용할 수 있다. <a href=\\\"https://egghead.io/lessons/css-render-html-css-server-side-using-typestyle\\\">영상 참고.</a></p>\",\"id\":\"/Users/rinae/Dev/blog/src/pages/posts/2018-01-16-typestyle-basic/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-01-16\",\"path\":\"/posts/typestyle-basic\",\"title\":\"TypeStyle 사용하기\",\"tags\":[\"TypeScript\",\"React\",\"CSS\"],\"category\":\"TypeStyle\"}}],\"tagName\":\"CSS\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tags-css.json\n// module id = 459\n// module chunks = 209063065961547"],"sourceRoot":""}