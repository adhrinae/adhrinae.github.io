{"version":3,"sources":["webpack:///path---tags-testing-343794e4b3fdec4f9b89.js","webpack:///./.cache/json/tags-testing.json"],"names":["webpackJsonp","485","module","exports","pathContext","postsByTag","excerpt","html","id","frontmatter","date","path","title","tags","category","tagName"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,aAAeC,QAAA,qDAAAC,KAAA;AAA6qlKC,GAAA,uHAAAC,aAAkyHC,KAAA,aAAAC,KAAA,mCAAAC,MAAA,4CAAAC,MAAA,8CAAAC,SAAA,WAA8LR,QAAA,sIAAAC,KAAA,o68BAA+h2BC,GAAA,8JAAAC,aAAkqJC,KAAA,aAAAC,KAAA,0EAAAC,MAAA,gDAAAC,MAAA,8CAAAC,SAAA;AAA2OR,QAAA,sIAAAC,KAAA;AAAow/BC,GAAA,iIAAAC,aAA05CC,KAAA,aAAAC,KAAA,4CAAAC,MAAA,iCAAAC,MAAA,8CAAAC,SAAA,aAA8LR,QAAA,sIAAAC,KAAA,ixMAAohMC,GAAA,8HAAAC,aAA4mBC,KAAA,aAAAC,KAAA,0CAAAC,MAAA,4CAAAC,MAAA,+BAAAC,SAAA,aAAwLR,QAAA,sIAAAC,KAAA;AAAymjCC,GAAA,2HAAAC,aAAs7EC,KAAA,aAAAC,KAAA,uCAAAC,MAAA,6BAAAC,MAAA,sCAAAC,SAAA,aAA6KR,QAAA,2JAAAC,KAAA,kzFAAAC,GAAA,+GAAAC,aAA6mGC,KAAA,aAAAC,KAAA,2BAAAC,MAAA,sDAAAC,MAAA,iBAAAC,SAAA,SAAiKR,QAAA,0LAAAC,KAAA,siNAAAC,GAAA,6IAAAC,aAA8+NC,KAAA,aAAAC,KAAA,yDAAAC,MAAA,mCAAAC,MAAA,gCAAAC,SAAA,iBAAmMR,QAAA,8DAAAC,KAAA,qmaAAssWC,GAAA,sHAAAC,aAAglFC,KAAA,aAAAC,KAAA,kCAAAC,MAAA,mBAAAC,MAAA,yCAAAC,SAAA,iBAAmKC,QAAA","file":"path---tags-testing-343794e4b3fdec4f9b89.js","sourcesContent":["webpackJsonp([79338355588033],{\n\n/***/ 485:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"postsByTag\":[{\"excerpt\":\"본 튜토리얼은  Robin Wieruch 님의  React Testing Tutorial…\",\"html\":\"<p>본 튜토리얼은 <a href=\\\"https://www.robinwieruch.de/about/\\\">Robin Wieruch</a>님의 <a href=\\\"https://www.robinwieruch.de/react-testing-tutorial/\\\">React Testing Tutorial</a> 을 한글로 번역한 것입니다. 번역과 관련된 의견 및 토론은 <a href=\\\"https://github.com/adhrinae/react-testing-tutorial-kr\\\">번역 저장소</a>에 이슈로 남겨주세요.</p>\\n<hr>\\n<p>탄탄한 애플리케이션을 만들기 위해 테스트를 작성하는 것은 소프트웨어 개발을 하면서 아주 중요한 부분입니다. 테스트는 애플리케이션이 어느 정도 확실한 수준까지 동작하고 있는지 자동으로 확인할 수 있는 도구가 됩니다.  그 수준은 질과 양, (커버리지) 그리고 테스트의 종류(단위 테스트, 통합 테스트, E2E 테스트)에 따라 결정됩니다. -- <strong>역주: 앞으로는 E2E(End-to-End) 테스트를 전체 테스트라고 명명하겠습니다. 더 적절한 표현에 관한 의견은 댓글로 남겨주세요.</strong></p>\\n<p>이 글은 <strong>리액트 앱을 테스팅하는데 필요한 모든 주제를 다루고자 합니다.</strong> 여러분은 주로 순수한 비지니스 로직을 다룬 리액트 컴포넌트를 테스트하는 법을 익히게 됩니다. 그리고 다양한 테스팅 라이브러리나 프레임워크를 선보이고 있으므로 각기 다른 경우에 맞추어 사용하시면 됩니다. 리액트 애플리케이션을 위한 테스트 설정 및 작성 방법을 익히게 되며, Mocha, Chai, Sinon, Enzyme, Jest를 테스트 도구로 사용하게 됩니다.</p>\\n<p>만약 <a href=\\\"https://github.com/facebook/create-react-app\\\">create-react-app</a> 기반으로 구성된 애플리케이션을 만들고 계시다면 대부분의 설정에 관한 내용은 넘어가셔도 됩니다. create-react-app 애플리케이션에 기본 테스트 도구로 Jest가 포함되어 있습니다. 여기에 수동으로 Sinon이나 Enzyme을 추가할 수도 있습니다.</p>\\n<p>그렇지 않다면 <a href=\\\"https://www.robinwieruch.de/minimal-react-webpack-babel-setup/\\\">링크를 클릭하여 간단한 리액트 + 웹팩 애플리케이션 설정</a> 을 참고하여 프로젝트를 만드시길 권합니다. 링크 글을 따라 설정이 완료되면 튜토리얼을 따라 테스트 환경을 구축할 수 있습니다.</p>\\n<p>미리 말씀드린대로 이 글은 <strong>리액트 애플리케이션에 각기 다른 테스트 라이브러리를 어떻게 설정하고 적용하는지</strong> 보여드립니다. 대략적으로 <a href=\\\"https://www.google.com/search?q=testing+pyramid\\\">테스팅 피라미드</a> 를 따라가게 될 겁니다. 여기서 테스팅 피라미드를 따라간다는 것은 대부분은 단위 테스트를 작성하고, 이어서 어느 정도의 통합 테스트를 작성한 뒤에 몇 가지 전체 테스트를 작성한다는 뜻입니다. 하지만 리액트 애플리케이션은 주로 함수를 사용하기보다 컴포넌트를 사용하기 때문에 테스트할 때 다른 접근 방식이 있습니다. <a href=\\\"https://adhrinae.github.io/posts/write-mostly-integration-test-kr\\\">\\\"통합 테스트를 주로 작성하고 단위 테스트는 그리 많이 작성하지 않는\\\"</a> 전략입니다. 이 방법은 튜토리얼 뒤에서 다시 설명하겠습니다.</p>\\n<p><strong>대체 단위, 통합, 전체 테스트가 뭘까요?</strong> 일반적으로 단위 테스트란 애플리케이션 일부(주로 컴포넌트)를 독립적으로 테스트하는 것이고, 통합 테스트란 서로 다른 부분(각기 다른 컴포넌트들)이 모여 특정 상황에서 잘 엮여서 작동하는지 확인하는 것입니다. 통합 테스트의 예로 특정 컴포넌트의 모든 필수 속성값(Props)이 자손 컴포넌트에 제대로 전달되었는지 확인하는 경우가 있습니다. 마지막이자 중요한 전체 테스트는 애플리케이션을 브라우저 환경에서 테스트하는 것입니다. 이메일 주소를 넣고 비밀번호를 입력한 뒤에 백엔드 서버로 Form을 제출하는 <a href=\\\"https://www.robinwieruch.de/complete-firebase-authentication-react-tutorial/\\\">회원 가입 과정</a> 전체를 흉내내볼 수도 있습니다.</p>\\n<p>이 튜토리얼의 또 다른 목표는 여러분들에게 너무 복잡하지도 않으면서 전반적으로 적용할 수 있는 몇 가지 <strong>일반적인 테스트 패턴과 모범 사례</strong>를 알려드리는 것입니다. 매번 테스트 자체를 어떻게 작성해야 하는지 고민하지 않고 리액트 컴포넌트를 효율적으로 테스트 하는데 도움이 될 겁니다. 따라서 대부분의 테스트는 컴포넌트 전반에 걸쳐 적용할 수 있는 공통 패턴을 따릅니다. 이러한 테스트 패턴은 <a href=\\\"https://en.wikipedia.org/wiki/Test-driven_development\\\">TDD(테스트 주도 개발)</a> 방법을 적용하게 되면 더욱 흥미로워집니다. 테스트를 먼저 작성하고 컴포넌트를 그 뒤에 작성하게 되지요. 결과적으로 이 가이드가 리액트 테스트의 몇가지 모범 사례를 제시해주고, 리액트 테스트 프레임워크의 생태계를 이해하며 각각의 도구를 어떻게 설정하고 사용하는지 알려드리고자 합니다.</p>\\n<p>예제 코드는 <a href=\\\"https://github.com/rwieruch/react-components-test-setup\\\">Github 저장소</a> 에서 확인하실 수 있습니다.</p>\\n<hr>\\n<!-- TOC -->\\n<ul>\\n<li><a href=\\\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%9C%84%ED%95%9C-%EA%B0%84%EB%8B%A8%ED%95%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\\\">테스트를 위한 간단한 리액트 애플리케이션 설정하기</a></li>\\n<li><a href=\\\"#%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%97%90%EC%84%9C-mocha%EC%99%80-chai-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\\\">리액트에서 Mocha와 Chai 테스트 설정하기</a></li>\\n<li><a href=\\\"#%EB%A6%AC%EC%95%A1%ED%8A%B8-state-%EB%B3%80%EA%B2%BD%EC%9D%84-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0\\\">리액트 State 변경을 단위 테스트하기</a></li>\\n<li><a href=\\\"#%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%97%90-enzyme-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\\\">리액트에 Enzyme 테스트 설정하기</a></li>\\n<li><a href=\\\"#enzyme%EC%9C%BC%EB%A1%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0---%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A5%BC-%EB%8B%A8%EC%9C%84-%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\\\">Enzyme으로 리액트 테스트하기 - 리액트 컴포넌트를 단위, 통합 테스트하는 방법</a></li>\\n<li><a href=\\\"#%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%97%90%EC%84%9C-sinon-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\\\">리액트에서 Sinon 테스트 설정하기</a></li>\\n<li><a href=\\\"#sinon%EC%9C%BC%EB%A1%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0---%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%BD%94%EB%93%9C%EB%A5%BC-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\\\">Sinon으로 리액트 테스트하기 - 비동기 코드를 테스트하는 방법</a></li>\\n<li><a href=\\\"#%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%97%90%EC%84%9C-jest-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\\\">리액트에서 Jest 설정하기</a></li>\\n<li><a href=\\\"#jest%EB%A1%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0---%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%8A%A4%EB%83%85%EC%83%B7-%ED%85%8C%EC%8A%A4%ED%8A%B8\\\">Jest로 리액트 테스트하기 - 컴포넌트 스냅샷 테스트</a></li>\\n<li><a href=\\\"#cypressio%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%A0%84%EC%B2%B4-%ED%85%8C%EC%8A%A4%ED%8A%B8\\\">Cypress.io를 활용한 리액트 전체 테스트</a></li>\\n<li><a href=\\\"#%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%99%80-cicontinuous-integration\\\">리액트 컴포넌트 테스트와 CI(Continuous Integration)</a></li>\\n<li><a href=\\\"#coveralls%EB%A1%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BB%A4%EB%B2%84%EB%A6%AC%EC%A7%80-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0\\\">Coveralls로 리액트 컴포넌트의 테스트 커버리지 확인하기</a></li>\\n<li><a href=\\\"#%EB%A7%88%EC%B9%98%EB%A9%B0\\\">마치며</a></li>\\n<li><a href=\\\"#%EB%B2%88%EC%97%AD-%ED%9B%84%EA%B8%B0\\\">번역 후기</a></li>\\n</ul>\\n<!-- /TOC -->\\n<hr>\\n<h2 id=\\\"테스트를-위한-간단한-리액트-애플리케이션-설정하기\\\"><a href=\\\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%9C%84%ED%95%9C-%EA%B0%84%EB%8B%A8%ED%95%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>테스트를 위한 간단한 리액트 애플리케이션 설정하기</h2>\\n<p>테스트를 설정해서 다양한 라이브러리를 사용해보고 리액트 컴포넌트 테스트를 작성하기 위해, 먼저 테스트가 실행 될 간단한 리액트 애플리케이션이 필요합니다. 일단 기본이 되는 <code class=\\\"language-text\\\">App</code> 컴포넌트를 만들어 보겠습니다. 만약 아래의 과정이 너무 어렵게 느껴진다면, 테스트를 익히시기에 앞서 <a href=\\\"https://github.com/sujinleeme/the-road-to-learn-react-korean\\\">리액트 도움닫기</a> 를 보시고 리액트 자체를 배우셔야 합니다.</p>\\n<p>그럼 <code class=\\\"language-text\\\">src/index.js</code> 파일부터 시작해보겠습니다. 아직 <code class=\\\"language-text\\\">App</code> 컴포넌트는 구현되지 않았지만 불러와서(import) render 함수를 실행해두겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> ReactDOM <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> App <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./App'</span><span class=\\\"token punctuation\\\">;</span>\\n\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>App</span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'app'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>App 컴포넌트는 자신의 고유 상태를 가지고 있는 ES6 클래스입니다. 그리고 더하기 버튼과 빼기 버튼을 누를때마다 숫자를 하나씩 더하거나 빼는게 가능하지요. <code class=\\\"language-text\\\">src/App.js</code> 파일에 작성합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">import</span> React<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> Component <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">App</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n      counter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onIncrement <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onIncrement<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onDecrement <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onDecrement<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">onIncrement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>prevState<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      counter<span class=\\\"token punctuation\\\">:</span> prevState<span class=\\\"token punctuation\\\">.</span>counter <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">onDecrement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>prevState<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      counter<span class=\\\"token punctuation\\\">:</span> prevState<span class=\\\"token punctuation\\\">.</span>counter <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> counter <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span>My Counter<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">{</span>counter<span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span>\\n          <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>button<span class=\\\"token punctuation\\\">\\\"</span></span>\\n          <span class=\\\"token attr-name\\\">onClick</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onIncrement<span class=\\\"token punctuation\\\">}</span></span>\\n        <span class=\\\"token punctuation\\\">></span></span>\\n          Increment\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span>\\n          <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>button<span class=\\\"token punctuation\\\">\\\"</span></span>\\n          <span class=\\\"token attr-name\\\">onClick</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onDecrement<span class=\\\"token punctuation\\\">}</span></span>\\n        <span class=\\\"token punctuation\\\">></span></span>\\n          Decrement\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> App<span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>여러분들에게 이 컴포넌트가 어떻게 작동하는지 전부 명료하게 보이리라 생각합니다. (만약 그렇지 않다면 아까 말씀드린대로 리액트 도움닫기 책을 먼저 읽어주세요)</p>\\n<p>하지만 사용자 경험을 반영한 애플리케이션은 아니네요. 나중애 부분적으로 분리된 부분을 테스트해보기 위해 몇 가지 기능을 추가해보겠습니다. <code class=\\\"language-text\\\">this.setState()</code>  메서드가 실제로는 비동기적으로 작동하기 때문에 <a href=\\\"https://www.robinwieruch.de/learn-react-before-using-redux/\\\">객체를 인자로 넘기는 대신에 함수를 인자로 넘기고 있습니다</a>. 이 때 객체로 인자를 넘길때에 비해 유일한 장점은 콜백 함수 안에서 현재의 상태에 접근할 수 있다는 겁니다. 이에 더해서 컴포넌트와 완전히 별개로 함수 자체를 테스트 할 수 있게 만듭니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">import</span> React<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> Component <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">doIncrement</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>prevState<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  counter<span class=\\\"token punctuation\\\">:</span> prevState<span class=\\\"token punctuation\\\">.</span>counter <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">doDecrement</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>prevState<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  counter<span class=\\\"token punctuation\\\">:</span> prevState<span class=\\\"token punctuation\\\">.</span>counter <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">App</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">onIncrement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>doIncrement<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">onDecrement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>doDecrement<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> App<span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>나중에 테스트 파일에서 이 함수들을 불러오기 위해 컴포넌트에서 내보내기(export)를 설정하겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">import</span> React<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> Component <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">doIncrement</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>prevState<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  counter<span class=\\\"token punctuation\\\">:</span> prevState<span class=\\\"token punctuation\\\">.</span>counter <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">doDecrement</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>prevState<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  counter<span class=\\\"token punctuation\\\">:</span> prevState<span class=\\\"token punctuation\\\">.</span>counter <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">App</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">//...</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> App<span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>이제 컴포넌트의 고유 상태를 변경하기 위해 사용되는 함수들이 컴포넌트와 분리되었기 때문에 별도로 테스트할 수 있게 되었습니다. 나중에 이런 개별 함수를 테스트하는 일을 단위 테스트라고 부르게 됩니다. 이 함수들을 테스트할 때는 함수에 입력값을 넣고 테스트는 기대되는 결과값을 단언(asserts)합니다. 순수 함수(입력 값에 따른 출력값이 동일하며 함수 외부의 환경에 영향을 주고받지 않는 함수)이기 때문에 부수 효과도 없습니다.</p>\\n<p>이제 우리의 애플리케이션에 자손 컴포넌트를 하나 추가해보겠습니다. 나중에 자손 컴포넌트를 활용한 통합 테스트를 하게 됩니다. 개별 컴포넌트를 각자 테스트한다면 단위 테스트를 하는 것이고 두 컴포넌트를 아우르는 환경을 테스트를 하게 되면 통합 테스트가 됩니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token comment\\\">// ...</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">App</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> counter <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span>My Counter<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Counter</span> <span class=\\\"token attr-name\\\">counter</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>counter<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span>\\n          <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>button<span class=\\\"token punctuation\\\">\\\"</span></span>\\n          <span class=\\\"token attr-name\\\">onClick</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onIncrement<span class=\\\"token punctuation\\\">}</span></span>\\n        <span class=\\\"token punctuation\\\">></span></span>\\n          Increment\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span>\\n          <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>button<span class=\\\"token punctuation\\\">\\\"</span></span>\\n          <span class=\\\"token attr-name\\\">onClick</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onDecrement<span class=\\\"token punctuation\\\">}</span></span>\\n        <span class=\\\"token punctuation\\\">></span></span>\\n          Decrement\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">Counter</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> counter <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">{</span>counter<span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> App<span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>보시다시피 컴포넌트가 잘 내보내졌습니다. 이렇게 하면 강좌 뒷부분에서 테스트 파일을 작성할 때 원하는 컴포넌트를 불러올 수 있습니다. 아무리 <code class=\\\"language-text\\\">Counter</code> 컴포넌트가 애플리케이션 전체에 걸쳐 재사용되는 일이 없다 하더라도, 테스트를 위해서 컴포넌트나 함수를 내보내는 게 좋습니다. 이제 다음 장에서 테스트를 설명하기 위한 애플리케이션 준비가 끝났습니다.</p>\\n<h2 id=\\\"리액트에서-mocha와-chai-테스트-설정하기\\\"><a href=\\\"#%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%97%90%EC%84%9C-mocha%EC%99%80-chai-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>리액트에서 Mocha와 Chai 테스트 설정하기</h2>\\n<p>이번 장에서 Mocha(모카)와 Chai(차이)로 리액트 테스트를 실행하기 위해 설정하는 법을 알려드리겠습니다. 내보내진 함수 하나를 가지고 첫 번째 단언(assertion)을 구현하고 실행해보겠습니다. 먼저 특정 프레임워크(역주: 여기서는 애플리케이션 자체를 의미한다고 봅니다) 안에 있는 모든 테스트를 실행시키는 역할을 맡는 실행기가 필요합니다. 그 실행기가 <a href=\\\"https://github.com/mochajs/mocha\\\">Mocha</a> 입니다.Mocha는 리액트 애플리케이션에 사용되는 유명한 테스트 실행기입니다. 이와 달리 또 다른 유명한 테스트 실행기인 Karma(카르마)는 앵귤러 애플리케이션을 테스트하는데 주로 사용됩니다.</p>\\n<p>커맨드 라인에서 Mocha를 개발 의존성 모듈로 설치하겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">npm install --save-dev mocha</code></pre>\\n      </div>\\n<p>그리고 단언을 작성하기 위해 사용되는 요소가 필요합니다. 누군가는 \\\"X는 Y와 같아야 한다(Expect X to be equal to Y)\\\" 라고 알려주어야 하거든요. 우리는 이번에 <a href=\\\"https://github.com/chaijs/chai\\\">Chai</a>를 사용해서 단언을 작성하겠습니다. Chai도 커맨드 라인으로 설치해줍니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">npm install --save-dev chai</code></pre>\\n      </div>\\n<p>리액트 컴포넌트를 테스트 할 때 가상의 브라우저 환경을 만들어주어야 할 필요가 있습니다. 왜냐면 컴포넌트들은 실제로 HTML로 그려지면서 브라우저의 DOM이 될 테니까요. 하지만 테스트 코드는 실제 브라우저에서 실행되지 않기 때문에 컴포넌트를 직접 테스트하기 위한 최소한의 환경을 갖추어야 합니다. 그래서 <a href=\\\"https://github.com/jsdom/jsdom\\\">jsdom</a>도 의존성 모듈로 설치해야 합니다. jsdom은 뒷장에서 만들어 볼 테스트에서 가상의 브라우저 환경을 만들어줍니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">npm install --save-dev jsdom</code></pre>\\n      </div>\\n<p>이렇게 테스트 환경을 구축하기 위한 최소한의 라이브러리들을 설치했습니다. 몇 가지 테스트들을 작성하고 실행해 본 뒤에 나중에는 더 발전된 라이브러리를 사용하여 리액트 컴포넌트 테스트 환경을 보강해볼 예정입니다.</p>\\n<p>이번 장 마지막 과정으로, 테스트를 실제로 실행하기 위해 라이브러리를 설정하는 법을 살펴보겠습니다. <code class=\\\"language-text\\\">src</code> 폴더와 같은 레벨에 <code class=\\\"language-text\\\">test</code> 폴더와 그 안에 필요한 설정 파일들을 만들겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">mkdir test\\ncd test\\ntouch helpers.js dom.js</code></pre>\\n      </div>\\n<p>위의 파일은 커맨드 라인에서 테스트 스크립트를 실행할 때 환경 설정하는데 사용됩니다. 먼저 <code class=\\\"language-text\\\">test/helpers.js</code> 파일부터 보겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> expect <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'chai'</span><span class=\\\"token punctuation\\\">;</span>\\n\\nglobal<span class=\\\"token punctuation\\\">.</span>expect <span class=\\\"token operator\\\">=</span> expect<span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>기껏 한거라곤 <code class=\\\"language-text\\\">expect</code> 함수를 Chai에서 가져와서 할당해둔겁니다. 이 함수는 나중에 테스트 할 때 \\\"X는 Y와 같아야 한다\\\" 는 단언을 작성할 때 사용합니다. 더 나아가 <code class=\\\"language-text\\\">expect</code> 함수는 이 파일을 사용하는 모든 테스트 파일의 전역 함수로 할당됩니다. 그러면 매번 <code class=\\\"language-text\\\">expect</code> 함수를 직접 가져오지 않고도 바로 사용할 수 있게 됩니다. 조금 뒤에는 더 많은 함수를 테스트용 전역 함수로 추가하게 됩니다. 어쨌든 거의 모든 테스트에 사용하는 함수들이니까요.</p>\\n<p><code class=\\\"language-text\\\">test/dom.js</code> 파일에는 가짜 브라우저 환경을 설정해서 리액트 컴포넌트가 HTML로 그려지도록 설정합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token constant\\\">JSDOM</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'jsdom'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> window <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">JSDOM</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'&lt;!doctype html>&lt;html>&lt;body>&lt;/body>&lt;/html>'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">copyProps</span><span class=\\\"token punctuation\\\">(</span>src<span class=\\\"token punctuation\\\">,</span> target<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> props <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getOwnPropertyNames</span><span class=\\\"token punctuation\\\">(</span>src<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span>prop <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">typeof</span> target<span class=\\\"token punctuation\\\">[</span>prop<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'undefined'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">,</span> prop<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token operator\\\">...</span>result<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">[</span>prop<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getOwnPropertyDescriptor</span><span class=\\\"token punctuation\\\">(</span>src<span class=\\\"token punctuation\\\">,</span> prop<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">defineProperties</span><span class=\\\"token punctuation\\\">(</span>target<span class=\\\"token punctuation\\\">,</span> props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nglobal<span class=\\\"token punctuation\\\">.</span>window <span class=\\\"token operator\\\">=</span> window<span class=\\\"token punctuation\\\">;</span>\\nglobal<span class=\\\"token punctuation\\\">.</span>document <span class=\\\"token operator\\\">=</span> window<span class=\\\"token punctuation\\\">.</span>document<span class=\\\"token punctuation\\\">;</span>\\nglobal<span class=\\\"token punctuation\\\">.</span>navigator <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  userAgent<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'node.js'</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">copyProps</span><span class=\\\"token punctuation\\\">(</span>window<span class=\\\"token punctuation\\\">,</span> global<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>이 강좌에서는 위의 코드 자체를 깊이 설명하진 않겠습니다. 기본적으로 리액트 컴포넌트 테스트를 위해 브라우저의 동작을 흉내낸다고 생각하시면 됩니다. jsdom 라이브러리가 브라우저에 사용되는 <code class=\\\"language-text\\\">window</code> 객체를 만들고 <code class=\\\"language-text\\\">document</code> 객체같은 객체를 추가합니다. 코드 내용이 이해하기 힘들다고 너무 걱정하지 마세요. 뒤에 이 파일을 건드릴 일은 거의 없습니다.</p>\\n<p>이렇게 필요한 헬퍼 파일이 모두 준비되었습니다. 하나는 테스트 파일 전체에 사용되는 함수를 전역 함수로 만드는 파일이고(어쨌든 필요하게 됩니다), 나머지 하나는 리액트 컴포넌트를 테스트 할 때 DOM을 흉내내는 설정 파일입니다. 이제 테스트를 위한 스크립트를 <code class=\\\"language-text\\\">package.json</code> 에 작성해야 합니다. 특정 접미사(spec, test 등)가 있는 파일을 모두 실행하는데, 실행하면서 위에 만들어둔 파일을 설정 파일로 사용하는 스크립트를 만듭니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token property\\\">\\\"scripts\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"start\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"webpack-dev-server --config ./webpack.config.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:unit\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"mocha --require babel-core/register --require ./test/helpers.js --require ./test/dom.js 'src/**/*.spec.js'\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<p>보시다시피 스크립트는 설정 파일을 <code class=\\\"language-text\\\">require</code> 문으로 가져오고 <code class=\\\"language-text\\\">*.spec.js</code> 라는 형태로 되어있는 파일을 모두 실행합니다. 기본적으로 테스트 파일 이름은 <code class=\\\"language-text\\\">App.spec.js</code> 처럼 되어 있고 <code class=\\\"language-text\\\">src</code> 폴더 아래라면 어디든지 상관없습니다. 물론 파일 이름이나 폴더 위치 등의 규칙은 여러분이 정하기 나름입니다.</p>\\n<p>테스트 스크립트는 <code class=\\\"language-text\\\">npm run test:unit</code> 으로 실행할 수 있겠지만 지금은 아무런 파일이 없기 때문에 테스트 파일을 찾을 수 없다고 뜰 겁니다. 다음 장에서 실제로 파일을 만들게 되겠지만, 일단 스크립트를 조금 더 추가하겠습니다. 바로 전에 작성한 스크립트를 실행하지만, 관찰(watch) 모드로 실행하는 스크립트입니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token property\\\">\\\"scripts\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"start\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"webpack-dev-server --config ./webpack.config.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:unit\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"mocha --require babel-core/register --require ./test/helpers.js --require ./test/dom.js 'src/**/*.spec.js'\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:unit:watch\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"npm run test:unit -- --watch\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<p>관찰 모드에서는 테스트가 한번 실행되고 난 뒤 유지되다가 소스 코드나 테스트에 변경이 일어나면 바로 다시 실행됩니다. 테스트 주도 개발을 할 때 관찰 모드를 설정해 놓으면 테스트를 추가하거나 변경할 때 즉시 피드백을 얻게 됩니다.</p>\\n<p>추가 설명: <code class=\\\"language-text\\\">npm run test:unit:watch</code> 로 관찰 모드를 실행하면서 개발 서버를 작동하려면 터미널 탭을 양 쪽에 두 개 띄워야 합니다.</p>\\n<p>Mocha와 Chai로 테스트하기에 앞서 작지만 쓸모 있는 라이브러리를 하나 더 소개해드리겠습니다. <a href=\\\"https://github.com/bkonkle/ignore-styles\\\">ignore-styles</a> 라는 녀석인데, 나중에 개발하시면서 리액트 컴포넌트에 CSS 스타일을 적용하시게 되겠지만 실제로 테스트에는 필요 없는 부분이므로 무시하고 싶을 때 사용합니다. 라이브러리를 <code class=\\\"language-text\\\">npm install --save-dev ignore-styles</code> 로 추가하신 다음에 스크립트의 내용을 조금 수정해줍니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token property\\\">\\\"scripts\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"start\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"webpack-dev-server --config ./webpack.config.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:unit\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"mocha --require babel-core/register --require ./test/helpers.js --require ./test/dom.js --require ignore-styles 'src/**/*.spec.js'\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:unit:watch\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"npm run test:unit -- --watch\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<p>드디어 Mocha와 Chai로 리액트 애플리케이션을 테스트하기 위한 설정을 마쳤습니다. 다음장에서는 첫 번째 테스트를 작성해 보겠습니다.</p>\\n<h2 id=\\\"리액트-state-변경을-단위-테스트하기\\\"><a href=\\\"#%EB%A6%AC%EC%95%A1%ED%8A%B8-state-%EB%B3%80%EA%B2%BD%EC%9D%84-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>리액트 State 변경을 단위 테스트하기</h2>\\n<p>아까 언급한 테스팅 피라미드의 벽돌 하나하나에 해당하는 '단위 테스트' 를 만들어 보겠습니다. 단위 테스트는 여러분의 애플리케이션에서 작은 부분을 독립적으로 테스트합니다. 보통 입력값을 받아 출력값을 돌려주는 함수들이 테스트 대상이 됩니다. 이 때 순수 함수가 빛을 발하게 됩니다. 함수를 실행하면서 생기는 부수 효과를 걱정할 필요가 전혀 없기 때문입니다. 순수 함수를 실행할 때 입력값이 같다면 출력 값은 언제나 동일합니다. 따라서 단위 테스트로 애플리케이션의 특정 동작을 확인해볼 수 있습니다.</p>\\n<p>우리는 이미 App 컴포넌트에서 <code class=\\\"language-text\\\">this.setState()</code> 안에서 동작하는 상태 변경 함수들을 클래스 밖으로 빼 두었습니다. 그리고 파일에서 내보내두었으니(export), 테스트 파일에서 불러와서(import) 실행하면 됩니다. 그러면 <code class=\\\"language-text\\\">src/</code> 폴더에 App 컴포넌트를 위한 테스트 파일을 만들어 보겠습니다. 적절한 접미사를 붙였는지 꼭 확인하세요. (역주: 보통은 <code class=\\\"language-text\\\">spec</code> 이나 <code class=\\\"language-text\\\">test</code> 를 붙입니다)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">touch App.spec.js</code></pre>\\n      </div>\\n<p>이제 파일을 열고 코드를 추가합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Local State'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'state의 counter를 하나 올릴 수 있다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'state의 counter를 하나 줄일 수 있다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>기본적으로 위의 테스트 묶음(suite)은 두 개의 테스트를 가지고 있습니다. <strong>describe</strong> 라고 하는 블록은 테스트 묶음을 정의하고, <strong>it</strong> 이라는 블록은 테스트 케이스를 정의합니다. 테스트는 성공할 수도 있고(Green), 실패할 수도 있습니다(Red). 당연히 여러분은 테스트를 계속 성공하도록 만들어야 합니다.</p>\\n<p>App 컴포넌트의 상태를 변경하기 위해 정의된 두 함수를 테스트하는 것은 여러분의 몫입니다. 하나는 <code class=\\\"language-text\\\">counter</code> 속성의 값을 하나 증가시키고, 나머지 하나는 하나 줄이고 있죠.</p>\\n<p><strong>it</strong> 블록에 테스트를 작성할 때는 보통 세 단계를 거칩니다. 값을 정의하고(arrange), 실행하고(act), 단언하는 거죠(assert).</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> doIncrement<span class=\\\"token punctuation\\\">,</span> doDecrement <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./App'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Local State'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'should increment the counter in state'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> counter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> newState <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">doIncrement</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>newState<span class=\\\"token punctuation\\\">.</span>counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'should decrement the counter in state'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> counter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> newState <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">doDecrement</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>newState<span class=\\\"token punctuation\\\">.</span>counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>각 테스트의 첫 번째 줄에는 초기 상태를 정의하는 객체를 설정했습니다. 이 객체는 바로 다음 단계에 테스트 할 함수의 입력값으로 사용됩니다. 두 번쨰 줄에서 함수에 설정한 초기값을 넘기고, 그 함수는 결과값을 리턴합니다. 마지막 줄에서 리턴된 값이 여러분이 설정한 기대값과 일치하는지 단언합니다. 우리가 작성한 테스트의 경우 <code class=\\\"language-text\\\">doIncrement()</code> 함수는 <code class=\\\"language-text\\\">counter</code> 속성의 값을 하나 올려야 하고, <code class=\\\"language-text\\\">doDecrement()</code> 함수는 하나 줄여야겠지요.</p>\\n<p>다 됐습니다. 이제 <code class=\\\"language-text\\\">npm run test:unit</code> 을 입력하시거나 <code class=\\\"language-text\\\">npm run test:unit:watch</code> 로 테스트를 실행해보세요. 관찰 모드를 켜 놓으셨다면 테스트 함수 블록이나 실제 함수 블록을 수정하고 결과가 어떻게 바뀌는지 확인하실 수 있습니다. 테스트가 성공하거나 실패하겠지요. 그리고 이 테스트는 아직 리액트와 의존 관계가 전혀 없다는 점을 확인해두시기 바랍니다. 순수한 자바스크립트 함수를 테스트하는데는 Mocha와 Chai만 사용하면 됩니다. 심지어 이전 장에서 설정한 <code class=\\\"language-text\\\">test/dom.js</code> 파일의 설정을 사용하지도 않았지요. 왜냐면 이 단위 테스트에는 브라우저의 DOM과 연관된 코드가 전혀 없기 때문입니다.</p>\\n<h2 id=\\\"리액트에-enzyme-테스트-설정하기\\\"><a href=\\\"#%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%97%90-enzyme-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>리액트에 Enzyme 테스트 설정하기</h2>\\n<p>이번 장에서는 <a href=\\\"https://github.com/airbnb/enzyme\\\">Enzyme</a>으로 손쉽게 리액트 컴포넌트의 단위 테스트와 통합 테스트를 하기 위한 설정을 해 보겠습니다. 이 라이브러리는 Airbnb에서 리액트의 컴포넌트 테스트를 선보이면서 공개한 라이브러리입니다. 먼저 개발 의존성으로 Enzyme을 설치합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">npm install --save-dev enzyme</code></pre>\\n      </div>\\n<p>Enzyme에는 리액트 버전별로 맞는 어댑터가 필요합니다. 리액트 버전 16에 맞는 어댑터도 설치해줍니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">npm install --save-dev enzyme-adapter-react-16</code></pre>\\n      </div>\\n<p>지금 보시는 테스팅 강좌에는 리액트 버전 16을 사용합니다. 그래서 Enzyme 어댑터도 그에 맞는 버전으로 설치해주었습니다. 만약 다른 버전을 사용한다면 공식 문서를 살펴보시고 맞는 어댑터를 설치해주세요.</p>\\n<p>그러면 <code class=\\\"language-text\\\">test/helpers.js</code> 파일에 Enzyme을 설정하겠습니다. 이 파일에 어댑터와 Enzyme 테스트에 쓰이는 함수들을 설정합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> expect <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'chai'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> mount<span class=\\\"token punctuation\\\">,</span> render<span class=\\\"token punctuation\\\">,</span> shallow<span class=\\\"token punctuation\\\">,</span> configure <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'enzyme'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> Adapter <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'enzyme-adapter-react-16'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">configure</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> adapter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Adapter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nglobal<span class=\\\"token punctuation\\\">.</span>expect <span class=\\\"token operator\\\">=</span> expect<span class=\\\"token punctuation\\\">;</span>\\n\\nglobal<span class=\\\"token punctuation\\\">.</span>mount <span class=\\\"token operator\\\">=</span> mount<span class=\\\"token punctuation\\\">;</span>\\nglobal<span class=\\\"token punctuation\\\">.</span>render <span class=\\\"token operator\\\">=</span> render<span class=\\\"token punctuation\\\">;</span>\\nglobal<span class=\\\"token punctuation\\\">.</span>shallow <span class=\\\"token operator\\\">=</span> shallow<span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Chai에서 단언을 실행할 때 사용하는 <code class=\\\"language-text\\\">expect</code> 함수처럼 Enzyme에서 사용하는 <code class=\\\"language-text\\\">shallow</code>, <code class=\\\"language-text\\\">render</code>, <code class=\\\"language-text\\\">mount</code> 함수를 전역 함수로 만듭니다. 그러면 테스트 파일에서 일일이 이 함수들을 불러올 필요가 없어지게 됩니다. 앞으로 리액트 컴포넌트의 단위 테스트나 통합 테스트를 할 때 이 함수들을 사용하게 됩니다.</p>\\n<h2 id=\\\"enzyme으로-리액트-테스트하기---리액트-컴포넌트를-단위-통합-테스트하는-방법\\\"><a href=\\\"#enzyme%EC%9C%BC%EB%A1%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0---%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A5%BC-%EB%8B%A8%EC%9C%84-%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Enzyme으로 리액트 테스트하기 - 리액트 컴포넌트를 단위, 통합 테스트하는 방법</h2>\\n<p><em>(읽기에 앞서 - 본문에서 render라는 용어 및 함수를 주로 '그리다' 는 동사로 바꾸어서 번역했습니다. 문맥상 어색한 경우 '랜더링' 이라는 단어를 그대로 사용한 경우도 있으니 참고 바랍니다)</em></p>\\n<p>Enzyme 설정이 완료되었으니, 컴포넌트 테스트를 진행해보겠습니다. 이번 장에서는 여러분이 컴포넌트를 테스트 할 때 적용할 수 있는 몇 가지 기본 패턴을 알려드리겠습니다. 이 패턴들을 잘 따르신다면 매번 리액트 컴포넌트를 테스트할 떄 머리를 싸맬 필요가 없을겁니다.</p>\\n<p>이미 <code class=\\\"language-text\\\">src/App.js</code> 파일에서 <code class=\\\"language-text\\\">App</code> 컴포넌트를 내보냈으니 바로 <code class=\\\"language-text\\\">App</code> 컴포넌트를 랜더링할 때 <code class=\\\"language-text\\\">Counter</code> 컴포넌트도 같이 랜더링 되는지 확인해보는 테스트를 작성할 수 있습니다. <code class=\\\"language-text\\\">App.spec.js</code> 파일에 다음의 테스트를 추가해보겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> App<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> doIncrement<span class=\\\"token punctuation\\\">,</span> doDecrement<span class=\\\"token punctuation\\\">,</span> Counter <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./App'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Local State'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'App Component'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Counter 래퍼를 그려낸다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> wrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">shallow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>App</span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span>Counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span>have<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">length</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">shallow</code> 함수는 아까 <code class=\\\"language-text\\\">test/helpers.js</code> 파일에 정의해 놓았던 전역 변수 중 하나입니다. 이 함수는 Enzyme에서 가장 단순하게 컴포넌트를 그려내는 함수입니다. 딱 해당 컴포넌트만 그려내고 그 컴포넌트의 자손 컴포넌트의 내용은 그리지 않습니다. 컴포넌트를 분리해서 테스트 할 수 있게 만들어주기 때문에 단위 테스트에는 제격인 함수입니다. 앞선 테스트에서 <code class=\\\"language-text\\\">Counter</code> 컴포넌트가 <code class=\\\"language-text\\\">App</code> 컴포넌트 안의 인스턴스로 그려졌는지 확인해 보았습니다. 테스트에 따르면 딱 하나의 <code class=\\\"language-text\\\">Counter</code> 컴포넌트만 나와야 하지요.</p>\\n<p>이게 Enzyme으로 리액트 애플리케이션을 단위 테스트하는 아주 간단한 방법 중 하나입니다. 추가적으로 여러분은 그려진 컴포넌트에서 특정 HTML 태그나 CSS 클래스에 맞는 DOM이 그려졌는지 확인할 수 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'List 래퍼가 list 엘리먼트를 그려낸다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> wrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">shallow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>List</span> <span class=\\\"token attr-name\\\">items</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'li'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span>have<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">length</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.list'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span>have<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">length</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>컴포넌트에 어떤 속성(리액트의 Props)을 전달했느냐에 따라 <a href=\\\"https://github.com/airbnb/enzyme/blob/master/docs/api/selector.md\\\">Enzyme의 선택자를 이용하여</a> 그려진 HTML 엘리먼트를 확인해볼 수 있습니다. 또한 컴포넌트에 <a href=\\\"https://github.com/airbnb/enzyme/blob/master/docs/api/selector.md\\\">리액트의 조건부 랜더링을</a> 적용했다면 선택자로 선택된 요소의 개수가 0개인지 1개인지 확인하는 방식으로 조건에 따라 컴포넌트가 알맞게 그려졌는지 확인할 수 있습니다.</p>\\n<p>Enzyme으로 얕은 랜더링을 할 떄는 단위 테스트 뿐 아니라 가볍게 통합 테스트도 할 수 있습니다. 예를 들어 단순히 HTML 태그가 제대로 그려졌는지 확인하는 것 뿐 아니라 아래의 테스트처럼 다음 컴포넌트에 정확하게 속성이 전달되었는지 확인하는 테스트도 만들 수 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token comment\\\">// ...</span>\\n\\n<span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'App Component'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Counter 래퍼를 그려낸다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> wrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">shallow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>App</span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span>Counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span>have<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">length</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Counter 래퍼에 모든 Prop이 전달되었다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> wrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">shallow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>App</span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">let</span> counterWrapper <span class=\\\"token operator\\\">=</span> wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span>Counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>counterWrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">props</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> counter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    counterWrapper <span class=\\\"token operator\\\">=</span> wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span>Counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>counterWrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">props</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>단위 테스트와 통합 테스트의 경계가 애매하게 보일 수도 있습니다. 하지만 이번 테스트의 경우는 두 컴포넌트 사이의 간단한 부분이 기대한 대로 동작하는지 확인하는 정도이기 때문에 '가벼운 통합 테스트' 정도로 생각할 수 있겠습니다. 저 마지막 테스트는 어떻게 컴포넌트 사이에 전달되는 속성에 접근하고 확인했는지, 그리고 어떻게 컴포넌트의 지역 상태를 변경했는지 의도한 목적에 맞게 결과를 보여주었습니다. 이런 방식으로 여러분은 컴포넌트의 지역 상태 변화를 테스트할 수 있습니다. 예를 들어 컴포넌트 안에 있는 상태에 따라 특정 요소가 나타났다 사라졌다 하는 토글이 있다고 생각해 봅시다. 여러분은 테스트 코드를 작성하면서 임의로 상태를 변경하여 알맞은 HTML 요소가 그려졌는지 확인할 수 있습니다.</p>\\n<p>지금까지 그려진 컴포넌트를 테스트하고, 그 컴포넌트의 속성에 접근하거나 지역 상태를 변경해서 테스트하는 방법을 살펴보았습니다. 그리고 Enzyme을 사용하여 가상으로 클릭 이벤트를 활성화 할 수도 있습니다. 현재 <code class=\\\"language-text\\\">App</code> 컴포넌트는 클릭 이벤트를 테스트해보기에 최적의 조건을 가진 버튼 두 개가 있습니다. 한 버튼은 지역 상태의 <code class=\\\"language-text\\\">counter</code> 속성을 하나 올리고, 반면 나머지 하나는 하나 낮추는 역할을 하지요. 이제 <code class=\\\"language-text\\\">onClick</code> 핸들러가 붙어있는 버튼 같은 HTML 요소의 이벤트를 가상화하는지 살펴보겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// ...</span>\\n\\n<span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'App Component'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Counter 래퍼를 그려낸다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> wrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">shallow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&lt;</span>App <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span>Counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span>have<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">length</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Counter 래퍼에 모든 Prop이 전달되었다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> wrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">shallow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&lt;</span>App <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">let</span> counterWrapper <span class=\\\"token operator\\\">=</span> wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span>Counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>counterWrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">props</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> counter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    counterWrapper <span class=\\\"token operator\\\">=</span> wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span>Counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>counterWrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">props</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'counter를 하나 올린다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> wrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">shallow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&lt;</span>App <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> counter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'button'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">at</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">simulate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">state</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'counter를 하나 내린다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> wrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">shallow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&lt;</span>App <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> counter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'button'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">at</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">simulate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">state</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>버튼이 두개 있으니까 <code class=\\\"language-text\\\">at()</code> 헬퍼 함수를 사용하여 특정 태그를 가진 엘리먼트의 리스트를 가져와서 그 리스트의 인덱스에 직접 접근할 수 있습니다. 하지만 엘리먼트의 순서가 바뀌게 된다면 조심해서 사용하셔야 합니다. 제대로 된 테스트라면 각각의 엘리먼트들을 명확히 가져올 수 있도록 선택자(Selector)를 잘 매겨서 사용하시길 권합니다. 그렇지 않고 계속 인덱스를 사용하여 HTML 엘리먼트를 가져온다면 엘리먼트의 순서가 바뀔 때 테스트가 깨지게 됩니다.</p>\\n<p>코드 마지막 부분의 리액트 컴포넌트의 지역 상태를 테스트하는 기본적인 방법입니다. 테스트 패턴이라고 보셔도 무방합니다. 다른 컴포넌트를 테스트할 때도 무난하게 재사용 가능한 방법이니까요. 특정 HTML 엘리먼트나 리액트 컴포넌트가 그려졌는지 확인하고, 정확한 속성이 전달되었거나 지역 상태가 원하는대로 변경되었는지 확인하는 테스트는 그리 많은 시간을 잡아먹지 않습니다.</p>\\n<p>지금까지 Enzyme의 <code class=\\\"language-text\\\">shallow()</code> 함수를 사용하여 단위 테스트와 얕은 수준의 통합 테스트를 해 보았습니다. 그렇다면 슬슬 <code class=\\\"language-text\\\">mount()</code> 함수와 <code class=\\\"language-text\\\">render()</code>  함수는 언제 쓰는지 궁금해지셨을 겁니다.</p>\\n<p><code class=\\\"language-text\\\">shallow()</code> 함수가 자손 컴포넌트를 제외한 컴포넌트를 그려내는 반면 <code class=\\\"language-text\\\">mount()</code> 함수는 모든 자손 컴포넌트까지 그려냅니다. 즉 전체 컴포넌트 계층을 그려내는거죠. 전자가 함수가 분리된 환경에서 컴포넌트를 테스트하는데 사용된다면(단위 테스트나 얕은 수준의 통합 테스트), 후자는 진정한 통합 테스트에 사용된다고 볼 수 있습니다. 통합 테스트는 특정 컴포넌트 계층에 속한 모든 자손과 로직을 가져오기 때문에 더 깨지기 쉽습니다. 따라서 통합 테스트의 유지 비용은 단위 테스트보다 높습니다. 다른 사람들도 통합 테스트를 작성하는데 드는 비용이 단위 테스트를 작성하는데 드는 비용보다 비싸다고 말하지요. 덧붙여 <code class=\\\"language-text\\\">render()</code> 함수는 모든 자손 컴포넌트를 그려낸다는 특징 때문에 <code class=\\\"language-text\\\">mount()</code> 함수와 비슷하지만, 퍼포먼스 측면에서 <code class=\\\"language-text\\\">mount()</code> 보다 더 낫습니다. 왜냐면 리액트의 라이프사이클(Lifecycle) 메서드를 적용하지 않고 컴포넌트를 그려내기 때문입니다. 그러니 자손 컴포넌트까지 접근하고 싶지만 굳이 라이프사이클 메서드를 확인할 필요가 없다면 <code class=\\\"language-text\\\">mount()</code> 대신 <code class=\\\"language-text\\\">render()</code>  를 사용하시면 됩니다.</p>\\n<p><strong>얼마나 많은 단위 테스트와 통합 테스트를 작성해야 할 지 결정할 때 두 가지 중요한 원칙(philosophies)이 있습니다.</strong> 일반적인 테스팅 피라미드 원리에 따라 1. 가능한 한 많은 단위 테스트를 작성하고, 2. 어느 정도의 통합 테스트를(그리고 아주 적은 수의 전체 테스트) 작성하라는 겁니다. 기본적으로 여러분은 작은 규모를 차지하면서 유지보수하기 용이한 단위 테스트를 많이 작성하고, 어느정도 중요한 부분에 통합 테스트를 적용해야 합니다. 이 방식이 소프트웨어 공학 분야에서 일반적으로 생각하는 테스팅입니다. 하지만 (리액트 같은 라이브러리나 프레임워크의) 컴포넌트 테스트를 할 때는 다른 원칙이 존재합니다. 바로 통합 테스트를 많이 작성하고 단위 테스트를 적게 작성하라는 겁니다. 컴포넌트 단위 테스트는 전체 애플리케이션과 비교하면 너무 고립된 데다가 잘 깨질 일도 없습니다. 그래서 보통 특정 부분의 맥락(context)를 완벽히 분리해서 본떠놓고(mock) 단위 테스트를 수행하지요. 그래서 많은 사람들이 이 주제를 놓고 갑론을박 합니다. 컴포넌트가 너무 분리되어 있으니까 테스트의 실효성이 있느냐는거죠. 결과적으로 여러분은 통합 테스트를 하면서 서로 다른 컴포넌트의 맥락이 잘 맞아 떨어지는지, 견고하게 구성되었는지 확인하는 테스트를 더 많이 하시게 될 겁니다.</p>\\n<p>실제로 테스트할 때는 위의 원칙이 무슨 상관이 있을까요? 여러분이 단위 테스트보다 통합 테스트를 더 많이 작성한다면, 컴포넌트를 테스트할 때 <code class=\\\"language-text\\\">shallow()</code> 대신에 <code class=\\\"language-text\\\">mount()</code> 나 <code class=\\\"language-text\\\">render()</code> 함수를 더 많이 사용하시게 될 겁니다. 그렇게 전체 컴포넌트 계층 구조를 그려낸 뒤에 특정 값의 존재 유무나 행동이 잘 맞는지 확인하고, 모든 자손 컴포넌트를 직접 접근할 수 있게 되었으니 더 복잡한 테스트를 작성할 수 있게 되었습니다. 복잡한 테스트라고 해도 본질은 앞서 작성한 테스트와 크게 다르지 않습니다. 똑같이 전달된 속성이 맞는지, 엘리먼트가 제대로 그려졌는지, 클릭 이벤트를 일으켜보기도 하고 지역 상태가 제대로 변화되었는지 확인하게 됩니다.</p>\\n<h2 id=\\\"리액트에서-sinon-테스트-설정하기\\\"><a href=\\\"#%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%97%90%EC%84%9C-sinon-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>리액트에서 Sinon 테스트 설정하기</h2>\\n<p>비동기(Asynchronous) 코드를 테스트하려면 어떻게 해야할까요? 지금까지는 동기(Synchronous) 방식 테스트에 대해서만 설명하고 있었습니다. 다시 한 번 <code class=\\\"language-text\\\">App</code> 컴포넌트를 살펴보시면 비동기적으로 실행되는 코드가 없어서 비동기 테스트가 필요 없다는 점을 보실 수 있습니다. 그렇다면 임의의 데이터를 <code class=\\\"language-text\\\">componentDidMount()</code> 라이프사이클 메서드에서 가져온다는 가상의 시나리오를 생각해 보겠습니다.</p>\\n<p>종종 <code class=\\\"language-text\\\">componentDidMount()</code> 에서 <a href=\\\"https://www.robinwieruch.de/what-is-an-api-javascript/\\\">외부 API(third-party API)</a>를 이용하여 데이터를 요청하는 일이 있습니다. 그렇기 때문에 리액트 컴포넌트에서 이런 비동기 코드가 제대로 동작하는지 테스트할 수 있어야 합니다. 임의의 API 엔드포인트가 있다고 가정하고, 데이터를 요청하여 카운터의 배열을 받을 수 있다고 가정해보겠습니다. 물론 실제로 엔드포인트가 존재하지 않기 때문에 실제 애플리케이션에서는 동작하지 않을 겁니다. 그래도 테스트를 하기 위해 만들어야 합니다. 이후에 여러분들만의 외부 API 요청을 직접 테스트해볼 수 있을겁니다.</p>\\n<p>위에 말씀드린 시나리오에서 외부 API 요청을 위해 <code class=\\\"language-text\\\">axios</code> 를 사용하겠습니다. 따라서 이 패키지를 설치하셔야 합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">npm install --save axios</code></pre>\\n      </div>\\n<p>그리고 임의의 API 엔드포인트로 요청하는 코드를 작성해보겠습니다. 이 시나리오에서 직접 특정 API에 요청을 할 지 말지는 여러분의 자유입니다. 혹시 리액트 컴포넌트 안에서 외부 API에 요청하는 법을 잘 모르신다면 <a href=\\\"https://www.robinwieruch.de/react-fetching-data/\\\">'리액트에서 데이터 가져오는 방법'</a> 을 살펴보시기 바랍니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">import</span> React<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> Component <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> axios <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'axios'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// ...</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">App</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n      counter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n      asyncCounters<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onIncrement <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onIncrement<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onDecrement <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onDecrement<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">componentDidMount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    axios<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://mypseudodomain/counter'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>counter <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> asyncCounters<span class=\\\"token punctuation\\\">:</span> counter <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span>error <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">onIncrement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>doIncrement<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">onDecrement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>doDecrement<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// ...</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> App<span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>이 시나리오를 테스트하기 위해 굳이 <code class=\\\"language-text\\\">render()</code> 메서드에서 <code class=\\\"language-text\\\">asyncCounters</code> 속성을 드러낼 필요는 없습니다. 어차피 엔드포인트에서 가짜 데이터만 리턴하게 될 테니까요. 그리고 오로지 요청이 성공적으로 이루어졌는지까지만 가정해서 테스트해보고자 합니다.</p>\\n<p>그럼 이제 리액트 컴포넌트에서 비동기 데이터 요청을 테스트 하려면 어떻게 해야할까요? <a href=\\\"https://github.com/sinonjs/sinon\\\">Sinon</a>이라는 멋진 라이브러리를 개발 의존성에 추가해줍시다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">npm install --save-dev sinon</code></pre>\\n      </div>\\n<p>그리고 Sinon을 <code class=\\\"language-text\\\">test/helpers.js</code> 파일에 글로벌 함수로 등록해줍니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">import</span> sinon <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'sinon'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> expect <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'chai'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> mount<span class=\\\"token punctuation\\\">,</span> render<span class=\\\"token punctuation\\\">,</span> shallow<span class=\\\"token punctuation\\\">,</span> configure<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'enzyme'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> Adapter <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'enzyme-adapter-react-16'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">configure</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> adapter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Adapter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nglobal<span class=\\\"token punctuation\\\">.</span>expect <span class=\\\"token operator\\\">=</span> expect<span class=\\\"token punctuation\\\">;</span>\\n\\nglobal<span class=\\\"token punctuation\\\">.</span>sinon <span class=\\\"token operator\\\">=</span> sinon<span class=\\\"token punctuation\\\">;</span>\\n\\nglobal<span class=\\\"token punctuation\\\">.</span>mount <span class=\\\"token operator\\\">=</span> mount<span class=\\\"token punctuation\\\">;</span>\\nglobal<span class=\\\"token punctuation\\\">.</span>render <span class=\\\"token operator\\\">=</span> render<span class=\\\"token punctuation\\\">;</span>\\nglobal<span class=\\\"token punctuation\\\">.</span>shallow <span class=\\\"token operator\\\">=</span> shallow<span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Sinon은 관찰(spies), Mock, Stub에 사용될 수 있습니다.(역주: Spy는 관찰자정도로 번역할 수 있겠지만 주로 영문 표기를 그대로 사용하고자 합니다. Mock, Stub은 일반적으로 한글로 번역하기 모호한 개념인데다 대부분의 기술 문서도 원문을 그대로 사용하고 있기 때문에 억지로 번역하지 않겠습니다 - Mock과 Stub에 관해서는 <a href=\\\"https://medium.com/@SlackBeck/mock-object%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-85159754b2ac\\\">다음 링크</a>를 참고해주세요) 다음 장에서 관찰자와 Stub을 사용해서 리액트 컴포넌트 안의 비동기 비지니스 로직을 테스트합니다. 이런 작업이 비동기 로직을 테스트할 때 가장 시간이 많이 들어가는 부분입니다.</p>\\n<h2 id=\\\"sinon으로-리액트-테스트하기---비동기-코드를-테스트하는-방법\\\"><a href=\\\"#sinon%EC%9C%BC%EB%A1%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0---%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%BD%94%EB%93%9C%EB%A5%BC-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Sinon으로 리액트 테스트하기 - 비동기 코드를 테스트하는 방법</h2>\\n<p>실제 시연을 해보기 위해 첫 번째 <a href=\\\"http://sinonjs.org/releases/v4.4.6/spies/\\\">Spy</a>를 붙여보겠습니다. Spy는 어떠한 함수나 단언에도 사용할 수 있습니다. Spy가 적용된 이후 특정 함수가 테스트 안에서 몇 번이나 호출되었는지 확인해볼 수 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token comment\\\">// ...</span>\\n\\n<span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'App Component'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'componentDidMount를 호출한다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    sinon<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">spy</span><span class=\\\"token punctuation\\\">(</span>App<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'componentDidMount'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">const</span> wrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">mount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>App</span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>App<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>componentDidMount<span class=\\\"token punctuation\\\">.</span>calledOnce<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>'<code class=\\\"language-text\\\">App</code> 컴포넌트의 프로토타입 체인에 들어있는 <code class=\\\"language-text\\\">componentDidMount()</code> 라이프사이클 메서드가 한 번 실행된다.' 는 테스트를 작성했습니다. 리액트의 라이프사이클 메서드를 알고 계시다면 이 메서드는 컴포넌트가 마운트될 때 한 번만 실행된다는 사실을 알고 계실겁니다. 그 이후에는 호출되지 않지요. 따라서 테스트는 성공할 겁니다. 이런 방식으로 리액트의 라이프사이클 메서드를 테스트할 수 있습니다.</p>\\n<p>실제로 이 테스트 자체는 별 의미가 없기 때문에 지우셔도 됩니다. 그저 Sinon에서 제공하는 관찰 기능의 맛을 보여드린 것 뿐입니다. 라이프사이클 메서드 자체가 잘 동작하는지 여부는 리액트 내부에서 테스트 되어야 하는 일입니다. 대신 리액트 애플리케이션 안에서 비동기 데이터 요청을 하는 과정을 Sinon으로 테스트하겠습니다.</p>\\n<p><code class=\\\"language-text\\\">App</code> 컴포넌트에 대한 모든 테스트는 <code class=\\\"language-text\\\">componentDidMount()</code> 함수에서 호출되는 데이터 요청의 영향을 받기 때문에 매 테스트마다 데이터가 제대로 들어오도록 만들어야 합니다. Mocha는 <code class=\\\"language-text\\\">before()</code>, <code class=\\\"language-text\\\">after()</code> 함수로 매 테스트마다 필요한 환경을 설정하는 함수를 제공합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// ...</span>\\n\\n<span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'App Component'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">before</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">after</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Counter 래퍼를 그려낸다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>이제 테스트 파일에 axios를 사용하겠습니다. 특정 API 요청에 <a href=\\\"http://sinonjs.org/releases/v4.4.6/stubs/\\\">스텁</a>(stub, 역주: '테스트용으로 특정 요청에 따라 정해진 가짜 데이터(canned answer)를 제공하는 함수' 라는 뜻을 가지고 있으며 국내에 적절한 우리말 번역이 없어 원어 그대로 사용하겠습니다)을 적용하여 데이터 요청을 흉내내고, 그 데이터를 가져오기 위해서입니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> axios <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'axios'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> App<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> doIncrement<span class=\\\"token punctuation\\\">,</span> doDecrement<span class=\\\"token punctuation\\\">,</span> Counter <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./App'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// ...</span>\\n\\n<span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'App Component'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> promise <span class=\\\"token operator\\\">=</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">before</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    sinon<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stub</span><span class=\\\"token punctuation\\\">(</span>axios<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'get'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">withArgs</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://mydomain/counter'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">returns</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">after</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    axios<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">restore</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>그런데 스텁이 뭐냐고요? Sinon 문서에서 일컫기를 '테스트 스텁은 미리 지정된 동작을 수행하는 함수 (혹은 Spy)' 라고 합니다. 정의대로라면 Spy도 완전히 통제할 수 있다는 말이 되지요. 예를 들자면 특정 함수(<code class=\\\"language-text\\\">get()</code> 함수같은)가 어떤 리턴값을 돌려줄지 미리 지정할 수 있습니다. 한발 나아가 특정 인자를 받을 때만 내가 원하는 동작을 수행하도록 지정할 수 있습니다. 위의 코드를 보시면 axios의 <code class=\\\"language-text\\\">get</code> 함수로 특정 도메인에 요청을 할 때 반드시 정수의 배열(<code class=\\\"language-text\\\">counters</code>)  을 프로미스로 돌려주도록 정의한 것을 알 수 있습니다.</p>\\n<p>테스트가 실행된 후 <code class=\\\"language-text\\\">after</code> 블록에서 <code class=\\\"language-text\\\">restore()</code> 메서드가 <code class=\\\"language-text\\\">axios.get()</code> 메서드에 적용된 스텁을 해제하고 원래 정의된 동작대로 움직이도록 복원하는 것 까지 설정되어 있습니다. 매번 스텁을 해제하지 않으면 다른 테스트 케이스에서 미처 해제되지 못한 스텁이 영향을 주는 불상사가 일어납니다.</p>\\n<p>그럼 이제 <code class=\\\"language-text\\\">componentDidMount()</code> 함수의 비동기 동작을 테스트해보겠습니다. 테스트 내용은 데이터를 요청한 뒤에 결과물을 리액트 컴포넌트 안의 <code class=\\\"language-text\\\">asyncCounters</code> 라는 지역 속성으로 저장하는지 확인하는 겁니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token comment\\\">// ...</span>\\n\\n<span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'App Component'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> promise <span class=\\\"token operator\\\">=</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">before</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    sinon<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stub</span><span class=\\\"token punctuation\\\">(</span>axios<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'get'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">withArgs</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://mydomain/counter'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">returns</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">after</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    axios<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">restore</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// ...</span>\\n\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'비동기로 카운터를 가져온다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> wrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">shallow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>App</span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">state</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>asyncCounters<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">state</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>asyncCounters<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equal</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">App</code> 컴포넌트를 처음 그려낼 때 <code class=\\\"language-text\\\">asyncCounters</code> 상태는 <code class=\\\"language-text\\\">null</code> 이어야 합니다. 그리고 프로미스가 완료되면 우리가 지정한 <code class=\\\"language-text\\\">result</code> 값과 같은 상태가 되어야 합니다. 이제 테스트를 여러 번 실행해봐도 원하는대로 동작하는지 확인해볼 수 있게 되었습니다. 축하드립니다! 이제 리액트 컴포넌트의 비동기 동작도 테스트할 수 있게 되었습니다. Sinon 자체는 Mocha, Chai와 마찬가지로 리액트와 직접적으로 엮여있지 않다는 점을 명심하셔야 합니다. 오로지 함수를 관찰하거나 그 함수에 스텁을 적용하고, 더 세밀하게 정의되어있는 Mock 객체를 만들고자 할 때만 사용하셔야 합니다.</p>\\n<h2 id=\\\"리액트에서-jest-설정하기\\\"><a href=\\\"#%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%97%90%EC%84%9C-jest-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>리액트에서 Jest 설정하기</h2>\\n<p>이번 장에서는 Jest를 설정하고 리액트 애플리케이션 테스트를 실행하는 방법을 알아보겠습니다. <a href=\\\"https://facebook.github.io/jest/\\\">Jest</a>는 여러분의 리액트 컴포넌트를 테스트할 때 사용됩니다. 이 라이브러리는 페이스북에서 공식적으로 사용되는 테스팅 라이브러리이며, '스냅샷(Snapshot, 순간적으로 촬영된 사진) 테스트' 라는 개념을 도입하여 Enzyme과 함께 리액트 애플리케이션의 단위 테스트와 통합 테스트를 할 때 아주 유용하게 사용됩니다.</p>\\n<p>스냅샷 테스트라 함은 테스트를 실행할 때 실제 그려지는 컴포넌트의 결과물을 스냅샷으로 만드는 겁니다. 그리고 이 스냅샷은 다음 테스트를 실행할 때 생성되는 스냅샷과 비교하는데 사용됩니다. 만약 그려진 컴포넌트의 결과물이 바뀌었다면 각 스냅샷의 달라진 점이 표시되면서 테스트가 실패합니다. 아직까지 그리 나쁜 일은 아닌 것이, 스냅샷 테스트는 그저 결과물이 바뀌었을때 알려주는 역할만 하기 때문입니다. 스냅샷 테스트가 실패했다면 여러분은 변경된 스냅샷을 받아들이거나(새 스냅샷을 기준이 되는 스냅샷으로 업데이트하거나) 변경된 부분을 무시하고 컴포넌트의 구현부를 수정하여 원래의 결과물이 나오도록 고치면 됩니다.</p>\\n<p>Jest로 스냅샷 테스트를 하면 테스트를 가볍게 유지할 수 있습니다. 간단히 설정한 뒤에 테스트를 실행할 때마다 변경사항이 발생했다면, 변경사항을 받아들일지 말지 결정하면 됩니다. 비지니스 로직보다는 출력된 결과물에 더 신경을 쓰게 되지요. 비지니스 로직도 Enzyme으로 잘 테스트할 수 있지만, Jest로도 테스트할 수 있습니다.</p>\\n<p>나아가기 앞서: Jest는 테스트 실행기와 단언 함수가 포함되어 있습니다. 앞서 Mocha와 Chai를 테스트 실행기와 단언 라이브러리로 사용하였지만, Jest 하나로 모두 해결할 수 있습니다. 사용할 때 API가 약간 다르긴 합니다.  Jest를 사용할 때는 <code class=\\\"language-text\\\">it</code> 블록보다 <code class=\\\"language-text\\\">test</code> 블록을 사용한다던가(역주: Jest에서 <code class=\\\"language-text\\\">describe</code>, <code class=\\\"language-text\\\">it</code>, <code class=\\\"language-text\\\">test</code> 다 사용 가능합니다), 단언 함수를 쓸 때 <code class=\\\"language-text\\\">to.equal()</code> 대신 <code class=\\\"language-text\\\">toEqual()</code> 을 사용한다던가. 어쨌든 Jest로 모든 일을 처리하고 싶으시다면 Mocha와 Chai 설정 부분은 넘어가셔도 됩니다. Jest와 Enzyme만으로 리액트 애플리케이션을 테스트하고 싶으시다면, Mocha와 Chai를 설정하지 않고  Enzyme(과 Sinon)을 Jest 환경에 설정하시면 됩니다.</p>\\n<p>그럼 이제 Jest를 설정해 보겠습니다. 먼저 개발 의존성으로 Jest와 <code class=\\\"language-text\\\">react-test-renderer</code> 라이브러리를 설치해줍니다. 이 라이브러리는 Jest 테스트에서 컴포넌트를 그려낼 때 사용합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">npm install --save-dev jest react-test-renderer</code></pre>\\n      </div>\\n<p>그리고 Jest 설정 파일을 <code class=\\\"language-text\\\">test/</code> 폴더에 만듭니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">cd test\\ntouch jest.config.json</code></pre>\\n      </div>\\n<p>만들어진 파일에 다음의 설정을 입력하고 저장해줍니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"testRegex\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"((\\\\\\\\.|/*.)(snapshot))\\\\\\\\.js?$\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"rootDir\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"../src\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">testRegex</code> 설정은 어디에 있는 스냅샷 테스트 파일을 가지고 테스트를 할 지 지정합니다. 이 튜토리얼에서는 <code class=\\\"language-text\\\">*.snapshot.js</code> 파일을 테스트 대상으로 지정하여, <code class=\\\"language-text\\\">*.spec.js</code> 파일에 작성된 유닛 테스트 및 통합 테스트와 완전히 분리했습니다. Mocha 와 마찬가지로 Jest는 재귀적으로 <code class=\\\"language-text\\\">src/</code> 폴더를 탐색하여 해당 정규표현식에 해당하는 모든 스냅샷 테스트 파일을 실행합니다.</p>\\n<p><code class=\\\"language-text\\\">rootDir</code> 설정은 Jest가 어느 폴더부터 테스트 파일을 탐색해나갈지 지정합니다. Jest 설정 파일이 <code class=\\\"language-text\\\">test/</code> 폴더에 있으니 한 단계 위로 올라가 <code class=\\\"language-text\\\">src/</code> 폴더 안에 있는 스냅샷 테스트를 찾을 수 있도록 해 줍시다.</p>\\n<p>마지막으로 <code class=\\\"language-text\\\">package.json</code> 파일에 스냅샷 테스트를 실행하는 스크립트를 추가해줍니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token property\\\">\\\"scripts\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"start\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"webpack-dev-server --config ./webpack.config.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:unit\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"mocha --require babel-core/register --require ./test/helpers.js --require ./test/dom.js --require ignore-styles 'src/**/*.spec.js'\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:unit:watch\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"npm run test:unit -- --watch\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:snapshot\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"jest --config ./test/jest.config.json\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:snapshot:watch\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"npm run test:snapshot -- --watch\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<p> <code class=\\\"language-text\\\">npm run test:snapshot</code> 으로 커맨드를 실행하면 Jest에게 설정 파일에 따라 테스트가 실행됩니다. <code class=\\\"language-text\\\">npm run test:snapshot:watch</code> 는 위에 Mocha의 워치 모드처럼 스냅샷 테스트를 워치 모드로 실행합니다.</p>\\n<p>이제 테스트를 실행하려면 터미널 탭을 하나 더 띄워야 할 수도 있습니다. Mocha로 단위 테스트와 통합 테스트를 워치 모드로 실행하고, 다른 탭을 열어 Jest의 스냅샷 테스트를 워치 모드로 실행하며, <code class=\\\"language-text\\\">npm start</code> 로 애플리케이션을 실행해볼 탭도 필요합니다. 매번 소스 파일이 변경될 때마다 두 탭에 있는 테스트가 동시에 재실행됩니다. 만약 Mocha와 Chai를 사용하지 않으신다면 Jest만 실행하기 위한 테스트 스크립트만 만드시면 됩니다. (Sinon과 Enzyme은 필요에 따라 선택합니다)</p>\\n<p><strong>역주: 실제 이대로만 설정하고 다음 챕터의 설명을 따라 테스트를 실행하면 오류가 납니다. 그 이유는 Jest의 실행 환경을 제대로 설정하지 못했기 때문인데요, Mocha를 설정할 때 처럼 Babel 환경에서 실행해주어야 합니다. 가장 쉬운 방법으로 <code class=\\\"language-text\\\">babel-jest</code> 를 개발 의존성으로 추가해주시면 됩니다. 타입스크립트 사용자의 경우 <code class=\\\"language-text\\\">ts-jest</code> 설치 및 별도의 설정이 필요합니다.</strong></p>\\n<h2 id=\\\"jest로-리액트-테스트하기---컴포넌트-스냅샷-테스트\\\"><a href=\\\"#jest%EB%A1%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0---%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%8A%A4%EB%83%85%EC%83%B7-%ED%85%8C%EC%8A%A4%ED%8A%B8\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Jest로 리액트 테스트하기 - 컴포넌트 스냅샷 테스트</h2>\\n<p>이 장에서는 두 개의 리액트 컴포넌트를 테스트하기 위해 두 개의 스냅샷 테스트를 작성하겠습니다. 먼저 <code class=\\\"language-text\\\">src/</code> 폴더에 파일을 만듭니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">cd src\\ntouch App.snapshot.js</code></pre>\\n      </div>\\n<p>그리고 \\u0010<code class=\\\"language-text\\\">App</code>, <code class=\\\"language-text\\\">Counter</code> 컴포넌트에 대한 스냅샷 테스트를 작성합니다. 보통 스냅샷 테스트는 최소한 아래의 양식을 가지고 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> renderer <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-test-renderer'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> App<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> Counter <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./App'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'App Snapshot'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'renders'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> component <span class=\\\"token operator\\\">=</span> renderer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>App</span> <span class=\\\"token punctuation\\\">/></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">let</span> tree <span class=\\\"token operator\\\">=</span> component<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toJSON</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>tree<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toMatchSnapshot</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Counter Snapshot'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'renders'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> component <span class=\\\"token operator\\\">=</span> renderer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Counter</span> <span class=\\\"token attr-name\\\">counter</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">let</span> tree <span class=\\\"token operator\\\">=</span> component<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toJSON</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>tree<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toMatchSnapshot</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>네 이게 다입니다. 이제 커맨드 라인에서 스냅샷 테스트를 실행해보세요. 모두 성공할겁니다. 그 다음에 <code class=\\\"language-text\\\">App</code> 컴포넌트의  <code class=\\\"language-text\\\">render()</code> 메서드 구현부를 조금 수정해봅니다. 예를 들어 <code class=\\\"language-text\\\">&lt;h1&gt;</code> 태그에 몇마디 넣어서 추가해볼 수도 있겠습니다. 다시 스냅샷 테스트를 실행하면 <code class=\\\"language-text\\\">App</code> 컴포넌트에 대한 테스트는 실패할겁니다. 그리고 스냅샷을 업데이트할지 코드를 고칠지 결정하면 됩니다.</p>\\n<p>스냅샷 테스트로 리액트 컴포넌트를 테스트하는 아주 기초적인 방법을 보여드렸습니다만, Jest는 훨씬 강력한 기능을 제공합니다. 예를 들어 자체적으로 단언 함수를 가지고 있지요(<code class=\\\"language-text\\\">toEqual()</code> 등). Jest의 공식 문서를 한번 살펴보시고 어떤 기능을 가지고 있는지 찾아보시는걸 추천합니다. 이 라이브러리 자체는 굉장히 강력하지만 어찌되었든 고안된 목적 자체가 여러분의 컴포넌트 테스트를 쉽게 만들기 위해서라는 점을 명심하세요. 스냅샷 테스트를 테스트 묶음(Test Suite)에 추가하는데 너무 많은 개발 비용을 들이지 마세요.</p>\\n<p><strong>역주: 보통 Jest와 스냅샷 테스트를 할 때는 Enzyme을 함께 사용하는 경우가 많습니다. 실제로 이 튜토리얼의 저자도 같이 사용하는 것을 언급했었지요. Enzyme과 함께 스냅샷 테스트를 하는 방법은 <a href=\\\"https://velopert.com/3587\\\">다음의 튜토리얼</a>과 <a href=\\\"https://github.com/adhrinae/ts-react-parcel\\\">저장소</a>를 참고하시기 바랍니다.</strong></p>\\n<h2 id=\\\"cypressio를-활용한-리액트-전체-테스트\\\"><a href=\\\"#cypressio%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%A0%84%EC%B2%B4-%ED%85%8C%EC%8A%A4%ED%8A%B8\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Cypress.io를 활용한 리액트 전체 테스트</h2>\\n<p>엔드-투-엔드 테스트(E2E, 이 번역문에서는 전체 테스트라 명명합니다)는 예로부터 지금까지 어떤 테스트 프레임워크를 써도 지루한 일이었습니다. 요즘은 많은 사람들이 <a href=\\\"https://cypress.io\\\">Cypress.io</a> 로 전체 테스트를 하고 있습니다. Cypress의 문서는 아주 높은 수준으로 작성되어있고, 그 API는 간단명료합니다. 이제 우리가 작성한 코드로 Cypress를 활용한 전체 테스트를 해보겠습니다. 먼저 Cypress를 개발 의존성에 추가합니다. (역주: 네트워크 환경에 따라 굉장히 시간이 오래 걸리니 유의하시기 바랍니다)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">npm install --save-dev cypress</code></pre>\\n      </div>\\n<p>그리고 Cypress와 전체 테스트에 관련된 폴더를 프로젝트 폴더 안에 만듭니다. 이 폴더 구조는 <a href=\\\"https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests.html#Configuring-Folder-Structure\\\">Cypress에서 제공된 문서</a>를 따릅니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">mkdir cypress\\ncd cypress\\nmkdir integration\\ncd integration</code></pre>\\n      </div>\\n<p>세 번째 단계로 <code class=\\\"language-text\\\">package.json</code> 파일에 실행 스크립트를 추가합니다. 커맨드 라인으로 간단하게 Cypress를 실행할 수 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token property\\\">\\\"scripts\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"start\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"webpack-dev-server --config ./webpack.config.js --mode development\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:unit\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"mocha --require babel-core/register --require ./test/helpers.js --require ./test/dom.js --require ignore-styles 'src/**/*.spec.js'\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:unit:watch\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"npm run test:unit -- --watch\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:snapshot\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"jest --config ./test/jest.config.json\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:snapshot:watch\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"npm run test:snapshot -- --watch\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:cypress\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"cypress open\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<p>처음 Cypress를 실행하면 아마 제가 제공하는 화면과 비슷한 화면이 나올 겁니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">npm run test:cypress</code></pre>\\n      </div>\\n<p>아직 아무 테스트가 없다는 메세지로 \\\"No files found in\\\" 이라는 메세지가 나타납니다.</p>\\n<p><img src=\\\"https://cl.ly/1g1i350q0j3H/Screen%20Shot%202018-05-12%20at%2008.45.03.png\\\" alt=\\\"Cypress 첫 실행 이미지\\\"></p>\\n<p>그러면 <code class=\\\"language-text\\\">cypress/integration</code> 폴더에 <code class=\\\"language-text\\\">App</code>  컴포넌트의 전체 테스트를 작성해보겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">touch App.e2e.js</code></pre>\\n      </div>\\n<p>첫 번째 테스트는 그다지 전체 테스트 같진 않지만, 일단 실행해보고 Cypress가 실제로 동작하는 것을 확인하실 수 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'App E2E'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'should assert that true is equal to true'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>이미 <code class=\\\"language-text\\\">describe</code>, <code class=\\\"language-text\\\">it</code> 블록은 친숙하게 느껴지시리라 생각합니다. 기존에 보시던 대로 이 블록들은 테스트를 특정 블록 안으로 캡슐화하는데 사용됩니다. Cypress는 실제로 Mocha를 기반에 두고 만들어졌기 때문에 위와 같은 블록들도 차용했다고 합니다. <code class=\\\"language-text\\\">expect</code> 같은 단언 문법은 Chai에서 가져왔습니다. <strong>Cypress는 위와 같은 유명한 툴과 프레임워크를 기반으로 삼고 만들어졌기 때문에 친숙함을 느끼고 동작을 손쉽게 파악할 수 있습니다.</strong></p>\\n<p>그러면 다시 Cypress를 커맨드 라인으로 실행해보겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">npm run test:cypress</code></pre>\\n      </div>\\n<p>아래 그림과 같은 결과물을 보실 수 있을 겁니다. Cypress는 <code class=\\\"language-text\\\">cypress/</code> 폴더 아래에 있는 테스트를 찾아서 대시보드에 표시해 주고, 그 테스트를 하나씩 실행할지 아니면 전체 테스트를 다 실행할지 선택할 수 있습니다.</p>\\n<p><img src=\\\"https://cl.ly/2I0x2G3E0C44/Screen%20Shot%202018-05-12%20at%2009.31.32.png\\\" alt=\\\"첫 Cypress 테스트\\\"></p>\\n<p>테스트를 실행하고 <code class=\\\"language-text\\\">true</code> 와 <code class=\\\"language-text\\\">true</code> 가 같은지 확인해봅시다. 당연하게도 테스트는 성공이라고 나타나겠지요. 그렇지 않다면 무언가 문제가 있다는 겁니다. 반대로 테스트를 수정해서 일부러 실패하게 만들어 볼 수도 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'App E2E'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'should assert that true is equal to true'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>원하신다면 Cypress를 실행하자마자 모든 테스트를 실행하도록 스크립트를 수정하셔도 됩니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token property\\\">\\\"scripts\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"start\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"webpack-dev-server --config ./webpack.config.js --mode development\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:unit\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"mocha --require babel-core/register --require ./test/helpers.js --require ./test/dom.js --require ignore-styles 'src/**/*.spec.js'\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:unit:watch\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"npm run test:unit -- --watch\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:snapshot\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"jest --config ./test/jest.config.json\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:snapshot:watch\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"npm run test:snapshot -- --watch\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:cypress\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"cypress run\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<p>커맨드 라인에서 다시 테스트를 실행하면 모든 테스트가 자동으로 실행되는데다 무슨 비디오 녹화가 완료되었다는 메세지도 보실 수 있을 겁니다. 이 비디오는 보통 Cypress 테스트 폴더 아래에 <code class=\\\"language-text\\\">videos/</code> 라는 폴더에 저장됩니다. 테스트 실행 시 비디오 뿐만 아니라 스크린샷도 자동으로 저장되도록 할 수 있습니다. 이 내용에 대해서는 <a href=\\\"https://docs.cypress.io/guides/guides/screenshots-and-videos.html#\\\">공식 문서를 참고하시기 바랍니다.</a></p>\\n<p>자동 저장이 마음에 들지 않는다면 프로젝트 폴더에 설정 파일을 만들어서 자동 저장을 비활성화 할 수 있습니다. Cypress 처음 실행 시 프로젝트 루트 폴더에 <code class=\\\"language-text\\\">cypress.json</code> 파일이 생성되었을텐데, 그렇지 않다면 프로젝트 루트 폴더에 파일을 만들어주어야 합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">touch cypress.json</code></pre>\\n      </div>\\n<p>설정 파일에서 <code class=\\\"language-text\\\">videoRecording</code> 이라는 플래그를 비활성화합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"videoRecording\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">false</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>다양한 설정 방법을 알아보시려면 <a href=\\\"https://docs.cypress.io/guides/references/configuration.html\\\">Cypress의 문서를 참고하세요.</a></p>\\n<p>결과적으로 여러분은 직접 만든 리액트 애플리케이션을 Cypress로 테스트하고 싶으실 겁니다. Cypress는 전체 테스트를 위한 도구이기 때문에 Cypress로 애플리케이션에 접속하기 전에 먼저 애플리케이션을 실행해야 합니다. 이 경우에는 로컬 서버를 미리 실행해야겠네요.</p>\\n<p>Cypress 스크립트가 실행되기 전에 자동으로 개발 서버(여기서는 webpack-dev-server)를 실행하는 방법은 없을까요? 마침 이런 역할을 해 주는 <a href=\\\"https://github.com/bahmutov/start-server-and-test\\\">깔쌈한 라이브러리</a>가 있습니다. 먼저 이 라이브러리를 개발 의존성에 추가합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">npm install --save-dev start-server-and-test</code></pre>\\n      </div>\\n<p>그 다음 <code class=\\\"language-text\\\">package.json</code> 에 스크립트를 추가합니다. 스크립트는 <code class=\\\"language-text\\\">시작 스크립트 이름</code> <code class=\\\"language-text\\\">url</code> <code class=\\\"language-text\\\">테스트 스크립트 이름</code> 순으로 적으면 됩니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token property\\\">\\\"scripts\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"start\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"webpack-dev-server --config ./webpack.config.js --mode development\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:unit\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"mocha --require babel-core/register --require ./test/helpers.js --require ./test/dom.js --require ignore-styles 'src/**/*.spec.js'\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:unit:watch\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"npm run test:unit -- --watch\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:snapshot\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"jest --config ./test/jest.config.json\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:snapshot:watch\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"npm run test:snapshot -- --watch\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:cypress\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"start-server-and-test start http://localhost:8080 cypress\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"cypress\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"cypress run\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<p>마지막으로 실제 Cypress로 애플리케이션에 접속하는 전체 테스트를 작성해보겠습니다. Cypress 테스트 코드를 작성할 때 <code class=\\\"language-text\\\">cy</code> 라는 전역 객체를 사용하여 동작을 정의할 수 있습니다. 애플리케이션에 방문하고 <code class=\\\"language-text\\\">h1</code> 태그를 확인하는 테스트를 작성해보죠.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'App E2E'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'헤더가 있어야 한다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">visit</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://localhost:8080'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'h1'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">should</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'have.text'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'My Counter'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>기본적으로 Cypress로 CSS 선택자를 지정하고, 단언을 할 때는 이런 방식으로 합니다. 다시 테스트를 실행해 보면 성공했다고 나옵니다.</p>\\n<p>Cypress 테스트 시 권장 설정을 말씀드리면, 기본 URL을 <code class=\\\"language-text\\\">cypress.json</code> 설정 파일에 지정해두시는게 좋습니다. 단순히 타이핑을 덜 하게 할 뿐 아니라 실행 속도에도 영향을 줍니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"videoRecording\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"baseUrl\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"http://localhost:8080\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>이제 테스트 코드에서 URL을 지우고 절대 경로를 사용해도 됩니다. 이제 언제나 설정에서 주어진 URL 기반으로 동작합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'App E2E'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'헤더가 있어야 한다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">visit</span><span class=\\\"token punctuation\\\">(</span>‘<span class=\\\"token operator\\\">/</span>‘<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'h1'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">should</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'have.text'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'My Counter'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>그 다음에 리액트 애플리케이션의 버튼을 누르는 동작을 테스트할 겁니다. 각각의 버튼을 누르고 나서 카운터의 숫자가 바뀌는지를 확인합니다. 일단 카운터에 0이라는 숫자가 제대로 표시되는지 확인해보죠.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'App E2E'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'헤더가 있어야 한다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">visit</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'h1'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">should</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'have.text'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'My Counter'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'카운터를 늘리거나 줄일수 있어야 한다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">visit</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'p'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">should</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'have.text'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'0'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>그리고 <a href=\\\"https://docs.cypress.io/guides/core-concepts/interacting-with-elements.html\\\">버튼을 조종하면서</a> 카운터를 늘리거나 줄여보겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'App E2E'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'헤더가 있어야 한다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">visit</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'h1'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">should</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'have.text'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'My Counter'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'카운터를 늘리거나 줄일수 있어야 한다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">visit</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'p'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">should</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'have.text'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'0'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">contains</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Increment'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">click</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'p'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">should</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'have.text'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'1'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">contains</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Increment'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">click</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'p'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">should</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'have.text'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'2'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">contains</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Decrement'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">click</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'p'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">should</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'have.text'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'1'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>이렇게 여러분은 Cypress로 전체 테스트를 작성했습니다. URL과 URL 사이를 오갈 수도 있고, 다른 HTML 요소에 접근하고 그려진 결과물을 확인해볼 수 있습니다. 두 가지만 더 말씀드리자면</p>\\n<ul>\\n<li>전체 테스트에 샘플 데이터를 끼워넣고 싶으시다면 Cypress에서 제공하는 <a href=\\\"https://docs.cypress.io/api/commands/fixture.html#Syntax\\\">fixture</a>를 이용하시면 됩니다.</li>\\n<li>테스트를 할 때 관찰을 Spy, Stub, Mock 함수가 필요하시다면 Sinon을 사용하시면 됩니다. Cypress는 비동기 코드 테스트를 할 때 활용할 수 있도록 Sinon을 기본적으로 내장하고 있습니다.</li>\\n</ul>\\n<h2 id=\\\"리액트-컴포넌트-테스트와-cicontinuous-integration\\\"><a href=\\\"#%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%99%80-cicontinuous-integration\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>리액트 컴포넌트 테스트와 CI(Continuous Integration)</h2>\\n<p><a href=\\\"https://ko.wikipedia.org/wiki/%EC%A7%80%EC%86%8D%EC%A0%81_%ED%86%B5%ED%95%A9\\\">CI(지속적 통합)</a>을 할 때 리액트 컴포넌트 테스트가 여타 테스트와 크게 다른 점은 없습니다. 따라서 이 글에선 Travis CI를 사용하여 CI를 설정하는 방법을 보여드리겠습니다. 이런 설정을 할 때 기존에 익숙한 CI를 사용하셔도 상관 없습니다.</p>\\n<p>CI환경 아래서 모든 빌드 과정을 거치며 (리액트) 애플리케이션이 테스트되도록 해야합니다. 예를 들어 빌드 중에 테스트가 성공하지 못했다면 빌드가 실패해야 합니다. 이런 식으로 언제나 배포 전에 테스트의 성공 여부를 확인할 수 있습니다.</p>\\n<p>만약 Github 계정이나 git 설정이 되어있지 않다면 이 가이드를 보고 <a href=\\\"https://www.robinwieruch.de/git-essential-commands/\\\">Github과 git을 사용하는 기기에 설정해 주세요.</a> 그러면 Github에 여태 만든 프로젝트를 올리기 위한 저장소를 만들 수 있고, 변경 사항을 커밋한 다음 원격 저장소에 올릴(push) 수 있습니다.</p>\\n<p>그 다음 Github 계정으로 Travis CI의 계정을 만듭니다. 계정을 만드셨다면 대시보드가 보일테고, 여러분의 Github 계정에 있는  저장소의 목록이 보이게 됩니다. 여기서 어떤 저장소를 동기화할지 고르시면 됩니다. 우리가 CI를 설정하고자 하는 저장소를 토글하시면 됩니다.</p>\\n<p><img src=\\\"https://cl.ly/3a2N0n3L3D3p/Screen%20Shot%202018-05-13%20at%2014.58.58.png\\\" alt=\\\"Travis CI 설정\\\"></p>\\n<p>이제 Travis CI와 Github 저장소가 동기화되었습니다. 남은 일은 Travis CI에게 CI환경에서 애플리케이션을 설치하고 실행하는 법을 알려주는 겁니다. 프로젝트 루트 폴더에 Travis 설정 파일을 만듭니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">touch .travis.yml</code></pre>\\n      </div>\\n<p>그리고 다음의 설정을 입력합니다. 제일 중요한 부분은 테스트를 돌리기 위해 어떤 스크립트를 입력하느냐 입니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-yaml\\\"><code class=\\\"language-yaml\\\"><span class=\\\"token key atrule\\\">language</span><span class=\\\"token punctuation\\\">:</span> node_js\\n\\n<span class=\\\"token key atrule\\\">node_js</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token punctuation\\\">-</span> stable\\n\\n<span class=\\\"token key atrule\\\">install</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token punctuation\\\">-</span> npm install\\n\\n<span class=\\\"token key atrule\\\">script</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token punctuation\\\">-</span> npm run test<span class=\\\"token punctuation\\\">:</span>unit &amp;&amp; npm run test<span class=\\\"token punctuation\\\">:</span>snapshot</code></pre>\\n      </div>\\n<p>이렇게 설정을 하고 Github 저장소에 푸시합니다. 저장소에 새로운 내용이 갱신될때마다 Travis CI는 자동으로 변화를 감지하고 프로젝트를 다시 빌드합니다. 대시보드에서 빌드 과정을 확인하고 테스트가 성공했는지 실패했는지 확인하실 수 있습니다. 당연히 녹색(성공)이 떠야겠죠.</p>\\n<p>CI에 Cypress를 사용한 전체 테스트를 추가할 수도 있습니다. (역주: 전체 테스트를 할 때 <code class=\\\"language-text\\\">start-server-and-test</code> 패키지를 활용한 스크립트가 개발 서버 실행 단계에서 멈추는 현상이 있습니다. CI 머신이 느려서 제가 못참고 꺼버린건지는 모르겠습니다만.. CI 빌드 과정만 확인하시려면 위의 스크립트정도만 적용해보시길 권합니다.)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-yaml\\\"><code class=\\\"language-yaml\\\"><span class=\\\"token key atrule\\\">language</span><span class=\\\"token punctuation\\\">:</span> node_js\\n\\n<span class=\\\"token key atrule\\\">node_js</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token punctuation\\\">-</span> stable\\n\\n<span class=\\\"token key atrule\\\">install</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token punctuation\\\">-</span> npm install\\n\\n<span class=\\\"token key atrule\\\">script</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token punctuation\\\">-</span> npm run test<span class=\\\"token punctuation\\\">:</span>unit &amp;&amp; npm run test<span class=\\\"token punctuation\\\">:</span>snapshot &amp;&amp; npm run test<span class=\\\"token punctuation\\\">:</span>cypress</code></pre>\\n      </div>\\n<p>최종 단계로 Github 저장소에 멋진 뱃지를 달 수 있습니다. 프로젝트의 <code class=\\\"language-text\\\">README.md</code> 파일을 열거나 없다면 프로젝트 루트 폴더에 하나 만듭니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">touch README.md</code></pre>\\n      </div>\\n<p>이제 마크다운(Markdown) 문법을 사용하여 프로젝트 설명을 적을 수 있습니다. Github 저장소에 올리게 되면 나타나게 됩니다만 하셔도 되고 안하셔도 됩니다. 리드미 파일이 있으니 그 안에 빌드가 성공하는지 실패하는지 보여주는 멋진 뱃지를 달 수 있습니다. Travis CI 대시보드에서 여러분이 연결한 프로젝트를 찾아보시면 \\\"build passing\\\" 이라는 뱃지를 발견하실 수 있을겁니다.</p>\\n<p>뱃지를 클릭하면 저장소에 뱃지를 표시하기 위한 정보가 전부 표시됩니다. 마크다운 버전으로 선택하시면 <code class=\\\"language-text\\\">README.md</code> 에 어떻게 표시해야하는지 정보가 나타납니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-markdown\\\"><code class=\\\"language-markdown\\\"><span class=\\\"token title important\\\"><span class=\\\"token punctuation\\\">#</span> React Component Test Example</span>\\n\\n[![Build Status](https://travis-\\nci.org/adhrinae/react-application-test-example.svg?branch=master)](https://travis-ci.org/adhrinae/react-application-test-example)</code></pre>\\n      </div>\\n<p>위의 예시는 제 프로젝트를 표시하는 뱃지이니 실제로 사용하실 때는 저 내용을 그대로 복사/붙여넣기 하시면 안됩니다. 이제 빌드가 실패하면 상태를 알 수 있는 CI 설정이 프로젝트에 추가되었습니다. 또한 다른 사람들에게 이 프로젝트의 빌드 상태가 어떤지 보여줄 수 있는 뱃지도 추가했습니다. 이런 방식으로 여러분이 만든 프로젝트의 신뢰도를 나타낼 수 있습니다.</p>\\n<h2 id=\\\"coveralls로-리액트-컴포넌트의-테스트-커버리지-확인하기\\\"><a href=\\\"#coveralls%EB%A1%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BB%A4%EB%B2%84%EB%A6%AC%EC%A7%80-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Coveralls로 리액트 컴포넌트의 테스트 커버리지 확인하기</h2>\\n<p>CI 환경과 마찬가지로 Coveralls도 리액트 컴포넌트 테스트를 할 때 필수는 아닙니다. Coveralls는 애플리케이션의 테스트 커버리지를 표시할 때 사용됩니다. 우리가 만든 리액트 애플리케이션의 테스트 커버리지를 어떻게 표시하는지 한번 시도해 보겠습니다. 먼저 Github 계정을 이용하여 <a href=\\\"https://coveralls.io\\\">Coveralls.io</a>에 가입합니다 그리고 필요한 Github 저장소를 토글하여 동기화합니다.</p>\\n<p><img src=\\\"https://cl.ly/2S2i003A1c3A/Screen%20Shot%202018-05-13%20at%2016.12.54.png\\\" alt=\\\"Coveralls 설정\\\"></p>\\n<p>그리고 'Details' 버튼을 누른 다음 <code class=\\\"language-text\\\">repo_token</code> 을 복사합니다. 보통은 이런 비밀 토큰을 바로 공개 프로젝트에 드러내고 싶진 않으실테니 Travis CI의 대시보드에서 저장소를 찾아 토큰을 추가합니다.</p>\\n<p><img src=\\\"https://cl.ly/2M15263v1T3G/Screen%20Shot%202018-05-13%20at%2016.15.34.png\\\" alt=\\\"Coveralls 토큰을 Travis CI에 추가\\\"></p>\\n<p>CI 설정에서 환경변수를 등록할 수 있습니다. <code class=\\\"language-text\\\">coveralls_repo_token</code> 이라는 이름으로 등록해줍니다.</p>\\n<p><img src=\\\"https://cl.ly/3C2R1b140R2k/Screen%20Shot%202018-05-13%20at%2016.18.17.png\\\" alt=\\\"Travis CI에 환경 변수 등록하기\\\"></p>\\n<p>이제 프로젝트의 설정을 변경해주면 됩니다. 맨 처음 <code class=\\\"language-text\\\">coveralls</code> 라이브러리를 개발 의존성으로 추가합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">npm install --save-dev coveralls</code></pre>\\n      </div>\\n<p>다음에 <code class=\\\"language-text\\\">package.json</code> 에 coveralls를 실행하는 스크립트를 추가합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token property\\\">\\\"scripts\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"start\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"webpack-dev-server --config ./webpack.config.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:unit\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"mocha --require babel-core/register --require ./test/helpers.js --require ./test/dom.js --require ignore-styles 'src/**/*.spec.js'\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:unit:watch\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"npm run test:unit -- --watch\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:snapshot\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"jest --config ./test/jest.config.json\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:snapshot:watch\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"npm run test:snapshot -- --watch\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"coveralls\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"cat ./src/coverage/lcov.info | node node_modules/.bin/coveralls\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<p>세 번째로 Travis CI 설정을 바꿔서 coveralls.io 대시보드에 커버리지를 표시하도록 만듭니다. (역주: 튜토리얼에서는 Node.js 버전을 <code class=\\\"language-text\\\">stable</code> 로 지정하였지만, 튜토리얼 작성 시점과 달리 현재 안정화 버전은 10.1.0 입니다. 하지만 coveralls 패키지는 현재 노드 버전 10을 지원하지 않기 때문에 버전을 직접 고정해주시는게 좋습니다.)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-yaml\\\"><code class=\\\"language-yaml\\\"><span class=\\\"token key atrule\\\">language</span><span class=\\\"token punctuation\\\">:</span> node_js\\n\\n<span class=\\\"token key atrule\\\">node_js</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token punctuation\\\">-</span> 8.11.1\\n\\n<span class=\\\"token key atrule\\\">install</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token punctuation\\\">-</span> npm install\\n\\n<span class=\\\"token key atrule\\\">script</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token punctuation\\\">-</span> npm run test<span class=\\\"token punctuation\\\">:</span>unit <span class=\\\"token punctuation\\\">-</span><span class=\\\"token punctuation\\\">-</span> <span class=\\\"token punctuation\\\">-</span><span class=\\\"token punctuation\\\">-</span>coverage &amp;&amp; npm run test<span class=\\\"token punctuation\\\">:</span>snapshot <span class=\\\"token punctuation\\\">-</span><span class=\\\"token punctuation\\\">-</span> <span class=\\\"token punctuation\\\">-</span><span class=\\\"token punctuation\\\">-</span>coverage &amp;&amp; npm run test<span class=\\\"token punctuation\\\">:</span>cypress\\n\\n<span class=\\\"token key atrule\\\">after_script</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token punctuation\\\">-</span> COVERALLS_REPO_TOKEN=$coveralls_repo_token npm run coveralls</code></pre>\\n      </div>\\n<p>다 됐습니다. 변경 사항을 Github 저장소로 푸시하시면 빌드가 끝나고 coveralls.io 대시보드에 테스트 커버리지를 확인하실 수 있습니다.</p>\\n<p><img src=\\\"https://cl.ly/0d1c0S1B3f0m/Screen%20Shot%202018-05-13%20at%2017.01.04.png\\\" alt=\\\"Coveralls 결과\\\"></p>\\n<p>커버리지가 생각보다 높진 않다는 것을 보실 수 있는데요. 테스트를 더 작성하여 커버리지를 높일 지는 하시기 나름입니다.</p>\\n<p>Travis CI의 뱃지를 추가할 때와 마찬가지로 Coveralls도 멋진 뱃지를 추가할 수 있습니다. coveralls.io 대시보드에 있는 뱃지를 클릭하여 추가하는 코드를 확인하실 수 있습니다. 이 코드도 <code class=\\\"language-text\\\">README.md</code> 파일에 추가합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-markdown\\\"><code class=\\\"language-markdown\\\"><span class=\\\"token title important\\\"><span class=\\\"token punctuation\\\">#</span> React Application Test Example</span>\\n\\n<span class=\\\"token url\\\">[![Coverage Status](https://coveralls.io/repos/github/adhrinae/react-application-test-example/badge.svg?branch=master)</span>](https://coveralls.io/github/adhrinae/react-application-test-example?branch=master)</code></pre>\\n      </div>\\n<p>저장소 주소가 제대로 되어있는지 다시 확인해주세요. 이렇게 마지막 과정으로 리액트 테스팅 환경에서 커버리지까지 확인해볼 수 있었습니다. 지금까지 작성한 예제보다 더 높은 테스트 커버리지를 노려보세요 :)</p>\\n<h2 id=\\\"마치며\\\"><a href=\\\"#%EB%A7%88%EC%B9%98%EB%A9%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>마치며</h2>\\n<p>드디어 기나긴 리액트 테스팅 튜토리얼을 마칩니다. 여러분이 직접 자신만의 리액트 테스팅 환경을 구축하고, 첫 테스트를 작성한 뒤에 CI를 구축하여 배포 전에 애플리케이션의 안정성을 확인해 보는 방법을 배우셨길 바랍니다. 이번 튜토리얼의 예제 전체는 <a href=\\\"https://github.com/rwieruch/react-components-test-setup\\\">이 저장소</a>에서 확인하실 수 있습니다. 한마디 더 말씀드리자면, 앞서 보신 간단한 테스트 패턴들은 리액트 애플리케이션 테스트를 작성할 때 짜증을 유발하기보다 더 습관에 가깝게 작성할 수 있도록 도우리라 생각합니다. 당장 여러분의 애플리케이션에 테스트 몇개 작성하는 것도 크게 어렵지 않을 겁니다. 리액트 애플리케이션 테스팅을 할 때 또 다른 팁이 있으시다면 언제든지 댓글로 의견을 남겨주세요. 읽어주셔서 고맙습니다 :)</p>\\n<hr>\\n<h2 id=\\\"번역-후기\\\"><a href=\\\"#%EB%B2%88%EC%97%AD-%ED%9B%84%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>번역 후기</h2>\\n<p>처음 튜토리얼이 올라오고 원 저자인 Robin에게 허락을 받은 뒤 저장소를 만들고, 최종 결과물을 내기까지 거의 1.5개월이 걸렸습니다. 아무리 바쁜 나날을 보냈다 하더라도 조금은 더 빨리 마무리 할 수 있었으리라 하는 아쉬움이 있네요.</p>\\n<p>테스팅에 대해 기존에 여러 글을 번역했습니다만, 조금 더 밑바닥부터 설정하는 방법에 초점을 맞춘 글을 번역하거나 작성하진 못했습니다. 마침 이 글이 그 부분에서 크게 도움이 된다고 생각하여 번역을 진행했고, 저도 번역 과정에서 많은 내용을 공부할 수 있었습니다.</p>\\n<p>개인적으로 Mocha + Chai 설정을 하시기 보다 바로 Jest 설정을 하는 방법부터 진행하시는걸 추천하긴 합니다. 요즘 어지간해서는 Jest로 테스트 설정을 하니까요. 다만 이 튜토리얼은 Jest를 스냅샷 테스트하는데만 사용합니다. 공식 문서등을 참고해서 전반적인 테스트 설정하는 법을 보시는게 좋습니다.</p>\\n<p>컴포넌트를 테스트하는 일은 생각보다 복잡하거나 어려울 수 있습니다. 그래서 보통 스냅샷 테스트를 남발하는 경향이 있는데, 애플리케이션의 복잡성이 늘어날 수록 조금 더 구체적인 테스트를 작성하는게 도움이 되리라 생각합니다. 하지만 꾸준히 관리하는 스냅샷 테스트를 가지고 있는 프로젝트는 아예 테스트가 없는 프로젝트보단 확실히 낫겠지요.</p>\\n<p>그럼 앞으로도 테스트와 함께 버그 적은 애플리케이션을 작성하시길 바랍니다 :)</p>\",\"id\":\"/home/circleci/repo/src/pages/posts/2018-05-15-react-testing-tutorial-kr/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-05-15\",\"path\":\"/posts/react-testing-tutorial-kr\",\"title\":\"[번역] 리액트 테스팅 튜토리얼: 테스트 프레임워크와 컴포넌트 테스트 방법\",\"tags\":[\"Javascript\",\"React\",\"Testing\",\"Translation\"],\"category\":\"React\"}},{\"excerpt\":\"더 좋은 테스트를 위한 번역 시리즈 그래서, 자바스크립트 테스트가 뭔가요? 테스트를 작성하라. 너무 많이는 말고. 통합 테스트를 많이 써라. 리덕스 앱을 저비용 고효율로 통합 테스트 하기 리액트 + 리덕스 앱을 Jest와 Enzyme…\",\"html\":\"<p><strong>더 좋은 테스트를 위한 번역 시리즈</strong></p>\\n<ol>\\n<li><a href=\\\"/posts/what-is-testing-javascript-kr\\\">그래서, 자바스크립트 테스트가 뭔가요?</a></li>\\n<li><a href=\\\"/posts/write-mostly-integration-test-kr\\\">테스트를 작성하라. 너무 많이는 말고. 통합 테스트를 많이 써라.</a></li>\\n<li><a href=\\\"/posts/integration-tests-in-redux-apps-kr\\\">리덕스 앱을 저비용 고효율로 통합 테스트 하기</a></li>\\n<li><a href=\\\"/posts/lessons-learned-testing-react-redux-apps-with-jest-and-enzyme-kr\\\">리액트 + 리덕스 앱을 Jest와 Enzyme으로 테스트하며 얻은 교훈</a></li>\\n</ol>\\n<h2 id=\\\"번역-서문\\\"><a href=\\\"#%EB%B2%88%EC%97%AD-%EC%84%9C%EB%AC%B8\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>번역 서문</h2>\\n<p>더 좋은 (리액트 애플리케이션) 테스트를 위한 번역 시리즈 마지막입니다. 처음에는 팀원들과 공유하기 위해 테스트의 기초적인 부분을 다루는 글을 번역하려다가, 최대한 실전에 도움이 되면서도 부담없이 시작할 수 있는 내용 위주로 좋은 글을 찾아서 번역해보았습니다.</p>\\n<p>제 자신도 번역을 통해 ‘어디까지 테스트하는게 실무에 도움이 많이 될까?’ 라는 질문의 답을 얻는데 많은 도움이 되었습니다. 이제 테스트만 잘 짜면 될텐데요.</p>\\n<p><img src=\\\"https://cl.ly/0P3O322S1P3y/Screen%20Shot%202018-01-27%20at%2014.46.48.png\\\" alt=\\\"test-right-now\\\"></p>\\n<p>다음에는 어떤 글을 쓰거나 번역할지 아직 모르겠지만 모쪼록 도움이 되었으면 좋겠습니다.</p>\\n<p><a href=\\\"https://medium.com/@Tetheta/lessons-learned-testing-react-redux-apps-with-jest-and-enzyme-eb581d6d167b\\\">원문은 여기서 보실 수 있습니다</a></p>\\n<hr>\\n<p>만약 여러분이 기술 중심 회사에서 일하시는게 아니라면, 단위 테스트같은 개발 요소를 도입한다고 관리자를 설득하는게 어려울 수 있습니다. 저는 한동안 열렬한 지지자가 되어(역주: 필자 자신이 ‘관리자’ 임을 암시하는 문장이라 봅니다)  몇몇 프로젝트에 단위 테스트를 도입하고 동료들과 몇 가지 패턴을 도입해보았습니다. 그 과정에서 제가 배운 교훈을 이야기하고자 합니다.</p>\\n<h2 id=\\\"설정이-만만치-않습니다-\\\"><a href=\\\"#%EC%84%A4%EC%A0%95%EC%9D%B4-%EB%A7%8C%EB%A7%8C%EC%B9%98-%EC%95%8A%EC%8A%B5%EB%8B%88%EB%8B%A4-\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>설정이 만만치 않습니다 😐</h2>\\n<p>여러분이 create-react-app 같은 것을 사용하고 있거나 회사에서 이미 Jest + Enzyme 설정을 해 두었다면 아주 좋습니다!</p>\\n<p>저처럼 밑바닥부터 설정해야 한다면 몇 가지 유의하실 점이 있습니다.</p>\\n<ol>\\n<li>Jest는 노드 환경에서 실행됩니다. 즉 Webpack같은 번들러의 결과물을 실행하는 것이 아니라 파일의 코드 그대로 실행한다는 뜻입니다. 따라서 ES6나 기타 문법을 사용하고 싶다면 테스트 환경에서 사용하는 <code class=\\\"language-text\\\">.babelrc</code> 파일을 설정해야 합니다.</li>\\n<li>위에 이어서 브라우저가 아니라 노드 환경에서 실행되기 때문에 import, export 같은 문법을 사용하기 위해 폴리필을 추가해야 할 수도 있습니다.</li>\\n<li>최신 버전의 Enzyme은 Jest가 제대로 실행되기 위해 <a href=\\\"http://airbnb.io/enzyme/#installation\\\">설정 파일이 필요합니다</a>.</li>\\n<li>아마 폰트, 이미지, 스타일 파일들을 잔뜩 모킹해야 할지도 모릅니다.</li>\\n<li>CI(Continuous Integration) 빌드 중 테스트를 실행하고 싶다면 <code class=\\\"language-text\\\">testResultProcessor</code>, <code class=\\\"language-text\\\">runInBand</code> 설정을 해 주시는게 좋습니다. 저는 <a href=\\\"https://github.com/CHECK24/jest-bamboo-reporter\\\">Bamboo</a>를 사용하고 있습니다.</li>\\n</ol>\\n<p>컴포넌트를 작성하는 환경과 테스트를 작성하는 환경을 최대한 비슷하게 맞추기 위해(ES2017, import/export 등) 제대로 된 폴리필을 설정하는 것이 가장 큰 장벽이었습니다. React 버전 16으로 업그레이드 하는 것도 꽤 흥미로운 일이었지만 이제 대부분은 자연스럽게 적응(최소한 문서화라도)했습니다.</p>\\n<p>기회가 된다면 언젠가 제 설정을 짚어보는 포스트를 써 볼지도 모릅니다. 제 프로젝트의 일부는 그저 문서로 남겨두기엔 특이한 환경을 가지고 있었고, 고통스럽기도 했습니다.</p>\\n<h2 id=\\\"스냅샷을-사용하세요-json-serializer와-함께-사용하면-더-좋습니다\\\"><a href=\\\"#%EC%8A%A4%EB%83%85%EC%83%B7%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%84%B8%EC%9A%94-json-serializer%EC%99%80-%ED%95%A8%EA%BB%98-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EB%8D%94-%EC%A2%8B%EC%8A%B5%EB%8B%88%EB%8B%A4\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>스냅샷을 사용하세요 (json serializer와 함께 사용하면 더 좋습니다)</h2>\\n<p>스냅샷은 아주 좋습니다 😃. 하지만 이런 코드를 실행하면</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Match previous snapshot'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>wrapper<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toMatchSnapshot</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>그냥 enzyme이 사용하는 자체 객체를 뱉어버립니다😦. 저는 <a href=\\\"https://github.com/adriantoine/enzyme-to-json\\\">enzyme-to-json</a> 같은 패키지를 써서 가독성을 높이길 추천합니다. 스냅샷이 변경되었을 때 아주 유용합니다.</p>\\n<p>그리고 스냅샷을 버전 관리 시스템(Git 등)에 포함시키세요. 여러분이 반영한 변경 사항이 갑자기 문제를 일으킬 때 문제점을 찾는 데 큰 도움이 됩니다.</p>\\n<h2 id=\\\"jest-watch-도-좋습니다-\\\"><a href=\\\"#jest-watch-%EB%8F%84-%EC%A2%8B%EC%8A%B5%EB%8B%88%EB%8B%A4-\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>jest —watch 도 좋습니다 😃</h2>\\n<p>테스트 할 때 반드시 사용하세요! 여러가지 일을 편하게 만들어주고, 패턴 매치(<code class=\\\"language-text\\\">p</code> 키를 누른 뒤 파일이나 폴더 이름을 입력해보세요)를 사용해서 매번 저장할 때마다 모든 테스트를 다시 실행하지 않게 만들 수도 있습니다.</p>\\n<h2 id=\\\"test-문의-괄호가-제대로-놓여있는지-확인하세요\\\"><a href=\\\"#test-%EB%AC%B8%EC%9D%98-%EA%B4%84%ED%98%B8%EA%B0%80-%EC%A0%9C%EB%8C%80%EB%A1%9C-%EB%86%93%EC%97%AC%EC%9E%88%EB%8A%94%EC%A7%80-%ED%99%95%EC%9D%B8%ED%95%98%EC%84%B8%EC%9A%94\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>test() 문의 괄호가 제대로 놓여있는지 확인하세요</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Test'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>test<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toEqual</span><span class=\\\"token punctuation\\\">(</span>test<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>위의 코드는 지극히 정상적인 자바스크립트 코드지만 테스트를 실행하면 모두 잘 작동한다면서 아무 일도 일어나지 않을 겁니다.</p>\\n<p>올바른 코드는 이렇게 작성합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Test'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>test<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toEqual</span><span class=\\\"token punctuation\\\">(</span>test<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>이런 실수는 쉽게 저지를 수 있는데다 테스트에 문제가 있는데도 통과하기 때문에 특히 무섭습니다. 저는 특정 단위 테스트를 잘못 썼는데(역주: 문법적 실패가 아니라 fail이 뜨는 코드) 실패가 뜨지 않았습니다. 비슷한 코드를 복사하고 붙여넣다가 간신히 이 실수를 발견했지요.</p>\\n<p>그래서 생각한 것이...</p>\\n<h2 id=\\\"테스트가-실패하는지-꼭-확인하세요\\\"><a href=\\\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EA%B0%80-%EC%8B%A4%ED%8C%A8%ED%95%98%EB%8A%94%EC%A7%80-%EA%BC%AD-%ED%99%95%EC%9D%B8%ED%95%98%EC%84%B8%EC%9A%94\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>테스트가 실패하는지 꼭 확인하세요</h2>\\n<p>여러분이 실력있고 TDD를 사용하는 개발자라면 이미 이 방법을 사용하고 있을 겁니다.</p>\\n<p>그렇지 않은 분이라면 단위 테스트를 너무 후순위로 취급하기 때문에 테스트를 한 뭉치 작성하고 “좋아! 잘 작동하는군! 이제 다음 단계로 가야지” 라고 생각하기 쉽습니다.</p>\\n<p>하지만 앞서 언급된 문제로 이어질 수있는데다, 비슷한 테스트를 복사-붙여넣기 하다보면 특히 쉽게 잘못된 요소나 모킹한 함수를 테스트 할 수 있습니다.</p>\\n<p>테스트의 중요한 부분을 잠시 주석처리하는 식으로 쉽게 테스트를 실패하게 만들 수 있으며, 덕분에 여러분이 수없이 겪을 지도 모르는 골치 아픈 상황에서 벗어날 수 있습니다.</p>\\n<h2 id=\\\"반복-가능하고-확장-가능한-테스트-패턴을-만들어보세요\\\"><a href=\\\"#%EB%B0%98%EB%B3%B5-%EA%B0%80%EB%8A%A5%ED%95%98%EA%B3%A0-%ED%99%95%EC%9E%A5-%EA%B0%80%EB%8A%A5%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%8C%A8%ED%84%B4%EC%9D%84-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EC%84%B8%EC%9A%94\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>반복 가능하고 확장 가능한 테스트 패턴을 만들어보세요</h2>\\n<p>여러분이 혼자서 프로젝트의 테스트를 만들거나 유지보수하지 않는 이상, 새 컴포넌트를 빠르고 쉽게 테스트하거나 최소한 기본 수준의 테스트라도 빠르게 만들고 싶을겁니다.</p>\\n<p>제 동료 개발자들을 보니 가장 큰 장벽은 “어떻게 시작해야할지 모른다” 는 부분이었습니다. 명확하고 따라하기 쉬운 패턴을 만들어서 그들을 도울 수 있습니다.</p>\\n<p>예를 들어 많은 사용자 입력을 받는 컴포넌트를 테스트하고 싶다면 이런 방식으로 테스트 해 볼 수도 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> userChangeCases <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Test1'</span><span class=\\\"token punctuation\\\">,</span>\\n  props<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> toLowercase<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'testPre'</span><span class=\\\"token punctuation\\\">,</span>\\n  result<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'testpre'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> props <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  onDataChange<span class=\\\"token punctuation\\\">:</span> jest<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Testing TextComponent'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> wrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">beforeEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    wrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">mount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&lt;</span>TextComponent <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>props<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'On Change Cases'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    userChangeCases<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span>item <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setProps</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">const</span> input <span class=\\\"token operator\\\">=</span> wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'input'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        input<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">simulate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'change'</span><span class=\\\"token punctuation\\\">,</span>\\n          <span class=\\\"token punctuation\\\">{</span> target<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> value<span class=\\\"token punctuation\\\">:</span> item<span class=\\\"token punctuation\\\">.</span>value <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">.</span>onDataChange<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n          <span class=\\\"token function\\\">toBeCalledWith</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">.</span>resultValue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>그리고 나중에 추가로 사용자 입력 케이스를 테스트할 때 손쉽게 <code class=\\\"language-text\\\">userChangeCases</code> 배열에 추가하면 됩니다. 게다가 다른 컴포넌트에 비슷한 테스트를 해야하면 복사하기도 쉽습니다.</p>\\n<p>사실 이렇게 제가 따르고 있는 작은 규약들을(beforeEach로 매 테스트마다 wrapper 지정하기, 이름 짓는 방법, props 객체에 <a href=\\\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Spread_operator\\\">전개 연산자--MDN 문서 영문판으로 다시 보시길 권장합니다--</a>  사용하기) 어딘가에 정의해두면 다른 사람들이 쉽게 이해하고 자신의 컴포넌트를 테스트 할 때 유용하게 테스트 작동 원리를 베껴갈 수 있습니다.</p>\\n<p>이 예는 다소 부자연스럽지만(저는 일반적으로 테스트에 따라 입력 값 변화를 처리하는 순수 함수를 만듭니다) 전체 시스템이 작동하는지 여부를 신속하게 알 수 있으며, 복잡한 입력을 수행하지 않는 경우 필요에 맞게 적절하게 사용 할 수 있습니다.</p>\\n<h2 id=\\\"enzyme-mount-vs-shallow\\\"><a href=\\\"#enzyme-mount-vs-shallow\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Enzyme: Mount vs Shallow</h2>\\n<p><code class=\\\"language-text\\\">shallow</code> 는 “순수 단위 테스트” 방식의 접근입니다. 단순히 여러분이 테스트하고자 하는 컴포넌트아 DOM을 본떠서 그 컴포넌트가 어떤 역할을 수행하는지 테스트합니다. 이런 방식의 테스트는 더 빠르게 동작합니다.</p>\\n<p>아주 괜찮은 것 같지만, 여러분은 무엇을 테스트하고자 하는지 신경 쓰셔야 합니다. 각각의 컴포넌트를 완벽하게 분리하고 전체 단위 테스트 커버리지를 높이는게 목표인가요? 아니면 여러가지 문제가 될 수 있는 경우를 테스트하고 그 과정에서 컴포넌트가 제대로 동작하는지를 확인하는게 목표인가요?</p>\\n<p>전자의 경우는 <code class=\\\"language-text\\\">shallow</code> 를 사용하는게 아마 완벽한 해결책이겠지만 후자의 경우는 <code class=\\\"language-text\\\">mount</code> 를 쓰는 게 좀 더 이상적입니다.</p>\\n<p><code class=\\\"language-text\\\">mount</code> 는 컴포넌트에 속한 모든 것을 가상화(simulates)합니다. 말인즉슨 자손 컴포넌트(예를 들어 특별한 입력 컴포넌트라던가)를 잡아내서 입력값의 변화를 테스트해볼 수도 있습니다. 이렇게 사용자의 동작을 흉내내면서도 테스트하고자 하는 컴포넌트를 부모 컴포넌트와 그 주변 환경에서 분리할 수 있습니다.</p>\\n<p>또한 <code class=\\\"language-text\\\">mount</code> 는 <a href=\\\"https://velopert.com/1130\\\">리액트의 라이프사이클 메서드(lifecycle methods)</a>를 가상화할 수 있습니다. 특정 라이프사이클 메서드에 많은 로직이 있는 복잡한 컴포넌트를 테스트할 때도 유용합니다.</p>\\n<p>텍스트 기반의 컴포넌트를 <code class=\\\"language-text\\\">mount</code> 로 테스트하는 예를 보여드리겠습니다.</p>\\n<p>(제 실수를 지적해주신 <a href=\\\"https://medium.com/@ywcoder\\\">Ying Wang</a>님께 감사드립니다. <code class=\\\"language-text\\\">shallow</code> 도 마찬가지로 컴포넌트 안의 html 요소를 가상화합니다. 자손 컴포넌트를 다루지 않을 뿐입니다. 이에 맞추어 글을 수정했습니다.)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> CustomInput <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./CustomInput.jsx'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">/*\\nCustomInput 컴포넌트 안에는 이렇게 생긴 input 태그가 있고\\n&lt;input type=\\\"text\\\" disabled={this.props.disabled} onChange={this.props.onChange}\\nTextComponent는 이 컴포넌트로 prop을 전달합니다.\\n*/</span>\\n<span class=\\\"token keyword\\\">const</span> props <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Nothing'</span><span class=\\\"token punctuation\\\">,</span>\\n  onChange<span class=\\\"token punctuation\\\">:</span> jest<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Testing TextComponent'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> wrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">beforeEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    wrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">mount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&lt;</span>TextComponent <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>props<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'OnChange called'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> input <span class=\\\"token operator\\\">=</span> wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span>CustomInput<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'input'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    input<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">simulate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'change'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> target<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'TestVal'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">.</span>onChange<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBeCalledWith</span><span class=\\\"token punctuation\\\">(</span>\\n      expect<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">objectContaining</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> target<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> value <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 이벤트가 올바르게 전달되었는지 확인</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'isDisabled prop works'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setProps</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> isDisabled<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> input <span class=\\\"token operator\\\">=</span> wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span>CustomInput<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'input'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>input<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">prop</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'disabled'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>이런 방식의 테스트는 통합 테스트와 단위 테스트와의 경계를 흐리게 하지만, Guillermo Rauch는 이렇게 말했습니다.</p>\\n<blockquote class=\\\"twitter-tweet\\\" data-lang=\\\"en\\\"><p lang=\\\"en\\\" dir=\\\"ltr\\\">Write tests. Not too many. Mostly integration.</p>&mdash; Guillermo Rauch (@rauchg) <a href=\\\"https://twitter.com/rauchg/status/807626710350839808?ref_src=twsrc%5Etfw\\\">December 10, 2016</a></blockquote> <script async src=\\\"https://platform.twitter.com/widgets.js\\\" charset=\\\"utf-8\\\"></script> \\n<p>Kent C. Dodds도 이 트윗에 대해 <a href=\\\"https://emaren84.github.io/posts/write-mostly-integration-test-kr\\\">글을 썼는데</a> 꽤 설득력 있습니다.</p>\\n<p>제 생각에 두 종류의 테스트 모두 적합한 경우가 있습니다만, 제가 만든 대부분의 애플리케이션에서 단위 테스트를 하기에는 시간이 아깝고 저는 세부 구현이나 기반에 깔린 코드를 테스트하기보다 실제로 동작하는 부분을 테스트하는데 집중하고 싶습니다. 저도 계속 (실용적인 테스트의) 중심을 잡아보려고 노력중입니다.</p>\\n<p>요즘은 기본적으로 <code class=\\\"language-text\\\">mount</code> 를 사용하고 테스트 퍼포먼스에 영향이 가는 경우에만 <code class=\\\"language-text\\\">shallow</code> 를 사용하고 있습니다. 두 경우의 API가 약간 다르므로 특정 작업을 테스트하는 방법을 더 쉽게 기억할 수 있습니다.</p>\\n<h2 id=\\\"redux-테스트는-흥미로워요-\\\"><a href=\\\"#redux-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%8A%94-%ED%9D%A5%EB%AF%B8%EB%A1%9C%EC%9B%8C%EC%9A%94-\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Redux 테스트는… 흥미로워요 😕</h2>\\n<p>반면에 리덕스 액션과 리듀서는 무진장 테스트하기 쉽습니다. 그저 함수일 뿐 아니라 리듀서는 어떠한 부수 효과도 없는 순수 함수여야 합니다.</p>\\n<p>하지만 redux-thunks나 redux-saga를 사용하고 계시다면 조금 흥미로운(?) 일이 되고, <code class=\\\"language-text\\\">connect</code> 로 연결된 컴포넌트를 테스트 하는 일은 더욱 복잡해지게 됩니다.</p>\\n<p>Thunk와 Saga는 다른 액션을 대신 보내주면서 비동기 작업을 다루는 일을 합니다. 그래서 스토어를 본뜬 다음에 무슨 액션이 보내졌는지 확인해야하고, 부수 기능도 본떠야 합니다. 매번 테스트할때마다 실제 데이터베이스 호출 등을 하면 안되니까요.</p>\\n<p>Saga는 최소한 <a href=\\\"https://redux-saga.js.org/docs/advanced/Testing.html\\\">테스트 가능하도록 디자인 되어있고</a> 테스트에 도움되는 기능들을 가지고 있지만, Thunks는 부수 작업이 끝날때까지 대기가 걸리게 만듭니다.</p>\\n<p>결국 이런 질문으로 이어지게 되지요. “어느 부분까지 테스트 할 것인가?”</p>\\n<p>리덕스 앱을 전체적으로 테스트하기 위한 <a href=\\\"https://redux.js.org/docs/recipes/WritingTests.html\\\">좋은 자료</a>가 있습니다만, 여러분이 직접 작성한 코드 말고 리덕스를 테스트하는데 무슨 의미가 있을까요? 리덕스 자체는 완전히 테스트를 마친 라이브러리라서 우리가 같은 테스트를 또 할 필요는 없습니다. 게다가 <code class=\\\"language-text\\\">connect</code> 로 연결된 컴포넌트를 테스트하는건 굉장히 복잡하기 때문에 앱의 큰 부분을 본떠야 하는 불편함을 감수해야 합니다.</p>\\n<p>저는 액션을 제대로 보내기만 하면 리덕스 스토어가 이를 받아서 처리할거라고 확신합니다. 제가 진짜 신경쓰는 부분은 컴포넌트가 그 액션을 잘 받아서 제대로 변화가 일어나는지 확인하는 겁니다. 통합 테스트의 영역이지요.</p>\\n<p>그래서 제가 테스트를 할 때는</p>\\n<ol>\\n<li>먼저 리듀서를 테스트합니다. 테스트하기도 쉽고 중요한 기능을 가지고 있으니까요.</li>\\n<li>그리고 리덕스에 연결되지 않은 컴포넌트를 테스트합니다. 특정 이벤트에 제대로 반응하는지 확인할 수 있습니다. 그리고 테스트하기 쉬운데다 데이터를 다루는 부분과 랜더링을 다루는 부분을 분리하여 볼 수 있습니다.</li>\\n<li>복잡한 데이터를 다루는 부분을 순수 함수로 빼내어 테스트합니다.</li>\\n<li>제 앱의 각 부분이 잘 맞아떨어지는지 확인하기 위해 Selenium을 써서 E2E(end to end) 테스트와 통합 테스트를 합니다.</li>\\n</ol>\\n<p>이 방법이 완벽한 방법은 아닙니다. 저는 아직 마지막 두 부분을 처리하기 위한 최상의 방법을 찾고 있습니다만, 이 방법들도 테스트 작성을 간단하게 해주며 생산적이라는 생각이 듭니다.</p>\\n<p>매번 제가 동료들에게 리덕스에 연결된 컴포넌트를 다 테스트해서 보여줄 때마다 그들의 눈에는 동공지진이 일어납니다(their eyes instantly start glazing over). 많은 로직이 있고 본떠서 다루어야 할 것도 많습니다. 이런 복잡한 것들을 제쳐두면 일이 더 쉬워지며 사용자(혹은 매니저)를 우선적으로 고려한 유형의 테스트를 작성하는데 집중할 수 있습니다. 대부분의 프로젝트에 테스트를 작성할 시간이 얼마나 적은지를 생각한다면 괜찮은 등가교환이라 생각합니다.</p>\\n<h2 id=\\\"결론\\\"><a href=\\\"#%EA%B2%B0%EB%A1%A0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>결론</h2>\\n<p>저는 아직도 테스트를 적절하게 하는 법을 배우고 있습니다. 그리고 지난 1년동안 많은 자료를 읽기도 하고 보기도 했습니다. 여러분이 자신만의 패턴을 만들면 Jest와 Enzyme으로 단위 테스트하는건 놀라우리만치 쉽습니다. 특히 리덕스의 복잡한 부분을 통합 테스트와 E2E 테스트로 옮기는 경우에도 유용합니다.</p>\\n<p>Jest와 Enzyme을 다루는게 어렵다면 <a href=\\\"https://www.reactiflux.com/\\\">ReactFlux</a>를 방문해보세요. 거기 있는 Jest 채널에서 많은 도움을 얻었습니다.</p>\\n<p>이제 막 Jest + Enzyme으로 테스트를 시작하신다면 <a href=\\\"https://hackernoon.com/testing-react-components-with-jest-and-enzyme-41d592c174f\\\">이 훌륭한 가이드</a>를 읽어보세요.</p>\\n<p>스냅샷 테스트에 대해 더 자세히 알아보시려면 <a href=\\\"https://hackernoon.com/how-to-snapshot-test-everything-in-your-redux-app-with-jest-fde305ebedea\\\">이 가이드</a>를 참고하세요.</p>\\n<p>마찬가지로 React, Redux, Jest의 공식 문서를 꼭 살펴보세요. 모두 최고 수준의 가이드를 제공합니다.</p>\\n<p>이 글이 여러분의 테스팅을 향한 여정에 도움이 되었으면 좋겠습니다. 어떠한 질문이나 코멘트가 있다면 <a href=\\\"https://twitter.com/tetheta\\\">트위터로</a> 연락주세요.</p>\",\"id\":\"/home/circleci/repo/src/pages/posts/2018-01-27-lessons-learned-testing-react-redux-apps-with-jest-and-enzyme-kr/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-01-27\",\"path\":\"/posts/lessons-learned-testing-react-redux-apps-with-jest-and-enzyme-kr\",\"title\":\"[번역] 리액트 + 리덕스 앱을 Jest와 Enzyme으로 테스트 하며 얻은 교훈\",\"tags\":[\"Testing\",\"React\",\"Javascript\",\"Translation\"],\"category\":\"Testing\"}},{\"excerpt\":\"더 좋은 테스트를 위한 번역 시리즈 그래서, 자바스크립트 테스트가 뭔가요? 테스트를 작성하라. 너무 많이는 말고. 통합 테스트를 많이 써라. 리덕스 앱을 저비용 고효율로 통합 테스트 하기 리액트 + 리덕스 앱을 Jest와 Enzyme…\",\"html\":\"<p><strong>더 좋은 테스트를 위한 번역 시리즈</strong></p>\\n<ol>\\n<li><a href=\\\"/posts/what-is-testing-javascript-kr\\\">그래서, 자바스크립트 테스트가 뭔가요?</a></li>\\n<li><a href=\\\"/posts/write-mostly-integration-test-kr\\\">테스트를 작성하라. 너무 많이는 말고. 통합 테스트를 많이 써라.</a></li>\\n<li><a href=\\\"/posts/integration-tests-in-redux-apps-kr\\\">리덕스 앱을 저비용 고효율로 통합 테스트 하기</a></li>\\n<li><a href=\\\"/posts/lessons-learned-testing-react-redux-apps-with-jest-and-enzyme-kr\\\">리액트 + 리덕스 앱을 Jest와 Enzyme으로 테스트하며 얻은 교훈</a></li>\\n</ol>\\n<h2 id=\\\"번역-서문\\\"><a href=\\\"#%EB%B2%88%EC%97%AD-%EC%84%9C%EB%AC%B8\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>번역 서문</h2>\\n<p><a href=\\\"/posts/what-is-testing-javascript-kr\\\">지난번</a> <a href=\\\"/posts/write-mostly-integration-test-kr\\\">시리즈</a>를 통해 테스트가 무엇인지, 어떤 방향으로 테스트를 해야할지 조금 감을 잡으셨을 겁니다. 이제 본격적으로 리액트 애플리케이션을 테스트하고자 하는데, 또 한번 막히게 되죠.</p>\\n<blockquote>\\n<p>통합 테스트가 좋다는 건 알겠는데 좀더 실전에 가까운 예가 필요하다</p>\\n</blockquote>\\n<p>라고 생각하실지 몰라서 (저도 그렇게 생각하기 때문에) 남은 두 번의 번역 시리즈는 리액트 + 리덕스 애플리케이션 개발 시 테스트를 어떻게 했는지, 참고할만한 팁을 번역할 예정입니다.</p>\\n<p>참고로 원작자는 ‘Redux app’ 이라는 용어를 계속 사용하고 있어서 저도 그냥 리덕스 앱이라고 번역했습니다. (앵귤러도 리덕스 쓸 수 있는데...) 또한 mocking(흉내내기, 모조품 만들기)의 번역이 부자연스러워 바로 음차했습니다. 더 좋은 표현이 있다면 제안 부탁드립니다.</p>\\n<p><a href=\\\"https://hackernoon.com/low-effort-high-value-integration-tests-in-redux-apps-d3a590bd9fd5\\\">원문은 여기서 보실 수 있습니다.</a></p>\\n<hr>\\n<p><strong>짧은 정리: 여러분은 노드 환경에서 앱을 랜더링하고, 사용자 동작을 흉내내며 상태나 마크업의 변화를 확인할 수 있습니다. 이런 테스트는 상대적으로 작성하기 쉽고 빠르게 작동하며 이를 통해 많은 자신감을 얻을 수 있습니다.</strong></p>\\n<p>효율적인 소프트웨어 테스트를 작성하는 일은 아슬아슬한 줄타기 같습니다(tricky balancing act). ‘효율성’ 이라는 용어는 실행 속도나 자원 소모를 의미하는 것이 아니라, 테스트를 작성하는데 드는 노력과 테스트가 제공하는 가치 사이에서 최고로 얻어낼 수 있는 절충안을 의미합니다.</p>\\n<p>이 문제는 알려지지 않았거나 전혀 새로운 문제가 아닙니다. 과거에 수 많은 똑똑한 사람들이 달려들었고, 나중에 이 문제에 맞딱뜨릴 개발자를 위해 가이드라인을 만들었습니다. 저는 <a href=\\\"https://martinfowler.com/bliki/TestPyramid.html\\\">테스팅 피라미드</a>를 신봉합니다. 테스팅 피라미드는 다양한 종류의 테스트를 제대로 다루는데 앞서, 각각의 코드를 개별적으로 다루는 단위 테스트(Unit test)가 기반이 되어야 한다고 강조합니다.</p>\\n<h2 id=\\\"단위-테스트와-리덕스redux\\\"><a href=\\\"#%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%99%80-%EB%A6%AC%EB%8D%95%EC%8A%A4redux\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>단위 테스트와 리덕스(Redux)</h2>\\n<p>리덕스가 제시하는(역주: ‘강요하는’ 에 가까운 어감으로 느껴집니다) 구조 덕에 단위 테스트를 아주 쉽게 작성할 수 있습니다. 서로 분리되어있는 부분(리듀서, 액션 생성자, 컨테이너 등)을 각각 불러와서 여타 순수 함수와 똑같이 테스트 하면 됩니다. 데이터를 집어넣고, 나온 데이터를 단언(assertion)과 맞춰봅니다. 모킹(mocking)을 할 필요가 없지요. <a href=\\\"http://redux.js.org/docs/recipes/WritingTests.html\\\">리덕스 문서 안에 있는 테스팅 가이드</a>에 각 부분의 단위 테스트를 하는 방법이 작성되어 있습니다.</p>\\n<p>이 가이드를 따라가면서 지루하게 리듀서끼리, 액션 생성자끼리 테스트를 복-붙(copy-paste) 하다보면 단위 테스트 작성을 끝낼 수 있습니다. 그렇게 모든 작업이 끝나면 테스팅 피라미드가 뒷통수를 때리죠. 단순히 단위 테스트만 가지고는 ‘이 앱이 제대로 작동하는가?’ 라는 가장 기본적인 질문에 답할 수가 없습니다.</p>\\n<h2 id=\\\"피라미드-오르기\\\"><a href=\\\"#%ED%94%BC%EB%9D%BC%EB%AF%B8%EB%93%9C-%EC%98%A4%EB%A5%B4%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>피라미드 오르기</h2>\\n<p>웹 애플리케이션을 작성하면서 테스팅 피라미드의 윗 단계로 올라가는데 몇 가지 방법이 있습니다. 맨 꼭대기에 있는 end-to-end(e2e) 계층은 Selenium과 <a href=\\\"http://webdriver.io\\\">webdriver.io</a>를 사용해서 구현할 수 있습니다. 이런 종류의 테스트는 기술 독립적이라 여러분이 다른 프레임워크를 사용하도록 앱을 포팅해도 잘 작동합니다. 하지만 구현하고 돌려보는데 오래 걸리고, 디버그하기도 어려우며, 종종 원인 모를 문제에 시달릴 수 있습니다. 보통 아주 적은 종류의 e2e 테스트만 프로젝트에 적용하게 됩니다.</p>\\n<p>그렇다면 e2e테스트와 단위 테스트 사이에 있는 계층은 어떨까요? 일반적으로 이런 테스트를 통합 테스트(integration test)라고 부릅니다. 애플리케이션의 모듈이 어떻게 상호작용하는지 테스트하지요. 통합 테스트의 범위는 넓습니다. 예를 들자면 액션을 보내기 위해(dispatch) 액션 생성자를 사용하는 리듀서를 테스트한다면 이미 단위 테스트의 범위를 넘어간 겁니다. 다른 측면에서 보면 e2e 테스트는 아주 극단적인 형태의 통합 테스트라고 볼 수 있습니다.</p>\\n<p>우리는 리덕스에서 통합 테스트 하기에 아주 적절한 지점(sweet-spot)을 찾아보려 합니다. 개발 과정에서 충분히 빨리 돌려볼 수 있어야 하고, 단위 테스트와 같은 테스트 환경을 사용해야 하면서 리덕스로 관리되는 애플리케이션이 제대로 동작하고 있다는 충분한 확신을 줄 수 있어야 합니다.</p>\\n<h2 id=\\\"범위를-찾기\\\"><a href=\\\"#%EB%B2%94%EC%9C%84%EB%A5%BC-%EC%B0%BE%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>범위를 찾기</h2>\\n<p>우선 테스트 하고자 하는 범위를 설정하는 게 좋은 출발점이 됩니다. 일반적인 웹 앱은 이런 방식으로 구성되어있는데요.</p>\\n<p><img src=\\\"https://cl.ly/271c282D101g/typical-webapp-structure.png\\\" alt=\\\"일반적으로 고도화된 웹앱의 구조\\\"></p>\\n<p>시스템의 일부는 올바른 테스트 결과를 얻기 위해 모킹되어야 합니다. 제일 제약이 심한 부분이 저 맨 꼭대기 위에 있는 ‘브라우저’입니다. (비록 헤드리스-Headless 라도) 브라우저 인스턴스를 띄워서 테스트를 돌리는 일은 Node.js(이하 노드)에서 테스트 코드를 실행하는 것보다 훨씬 오래 걸립니다. 시작부터 끝까지 진짜 요청이 끝나길 기다릴 필요는 없습니다. 네트워크 계층(역주: 프론트엔드와 백엔드 사이에 통신하는 부분을 지칭하는 것으로 보입니다)은 명확히 정의된 인터페이스라서 적절히 모킹하기 쉽습니다.</p>\\n<h2 id=\\\"범위를-모킹하기\\\"><a href=\\\"#%EB%B2%94%EC%9C%84%EB%A5%BC-%EB%AA%A8%ED%82%B9%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>범위를 모킹하기</h2>\\n<p>리액트와 리덕스를 쓰는 앱이 있다고 가정하면, 노드 환경에서 부드럽게 돌아가는 테스트를 작성하는게 꽤 쉽습니다(심지어 서버 사이드 랜더링을 한다면 프로덕션 환경에서도 가능합니다). <a href=\\\"https://facebook.github.io/jest/\\\">Jest</a>라는 걸출한 테스팅 프레임워크로 테스트를 돌릴 수 있는데다, 마찬가지로 대단한 <a href=\\\"https://github.com/airbnb/enzyme\\\">Enzyme</a>은 브라우저 환경 없이 애플리케이션의 일부 혹은 전체를 랜더링해주고 동작을 확인해볼 수 있게 만들어주기 때문입니다.</p>\\n<p>Enzyme은 <code class=\\\"language-text\\\">mount</code> 라는 함수를 제공하는데, 이 함수로 어떠한 리액트 컴포넌트라도 그려내고 동작을 확인해볼 수 있습니다. 리덕스를 쓰는 앱도 마찬가지로 테스트 가능합니다. 매번 테스트할 때 같은 코드를 반복하지 않기 위해 간단한 유틸리티 함수를 작성해두면 도움이 됩니다. 이 함수는 주어진 상태(Redux 스토어)와 Enzyme의 래퍼 객체(역주: Enzyme을 통해 그려진 컴포넌트를 객체화 한 것. 이후 다양한 메서드를 통해 하위 DOM 탐색 및 다양한 동작을 확인해볼 수 있습니다)를 리턴합니다. 이렇게 만들어둔 함수는 나중에 단언 작성을 꽤 편하게 해줍니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Provider <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-redux'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> mount <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'enzyme'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> MyApp <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./containers/MyApp'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> createStore <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./createStore'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">renderAppWithState</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> store <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">createStore</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> wrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">mount</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>Provider store<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>store<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>MyApp <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Provider<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span>store<span class=\\\"token punctuation\\\">,</span> wrapper<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">,</span> wrapper<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">renderAppWithState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'bar'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nwrapper\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'input'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">simulate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'change'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> target<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'hello'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>노드 환경에서 테스트를 실행할 때 네트워크 계층을 깔끔하게 모킹하는 방법이 있습니다. 예를 들어 <a href=\\\"https://github.com/node-nock/nock\\\">nock</a> 같은 라이브러리가 있지요. nock은 테스트를 실행하기 전에 네트워크 요청에 따른 응답 데이터나 에러를 쉽게 선언할 수 있도록 만들어줍니다. 성공적인 GET 요청을 모킹하는 예는 다음과 같습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> nock <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'nock'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">nock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'https://example.com/api'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/12345'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reply</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">200</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'bar'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 이후 코드 어디에서나 https://example.com/api/1234 로 요청을 하면</span>\\n<span class=\\\"token comment\\\">// 성공했다는 응답과 함께 { foo: 'bar' } 를 응답값으로 리턴하게 됩니다.</span></code></pre>\\n      </div>\\n<p>이렇게 설정하면 통합 테스트를 단위 테스트와 비슷한 수준으로 빠르고 편하게 실행할 수 있습니다. 이제 테스트를 구현하기만 하면 됩니다...</p>\\n<p><img src=\\\"https://cl.ly/3j3q0t3Q0b2G/mock-boundaries.png\\\" alt=\\\"리덕스 통합 테스트를 위해 테스트 범위 모킹\\\"></p>\\n<h2 id=\\\"무엇을-테스트하나\\\"><a href=\\\"#%EB%AC%B4%EC%97%87%EC%9D%84-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EB%82%98\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>무엇을 테스트하나?</h2>\\n<p>여러분이 만든 앱이 정상적으로 동작한다는 자신감을 가장 크게 얻으려면 사용자의 시점에서 통합 테스트를 작성해야 합니다. 버튼 클릭, 폼 채우기 등의 사용자가 조작하는 행위에 따라 앱이 기대한대로 반응하는지 확인하는게 목표입니다.</p>\\n<p>간단한 폼을 제출한다는 시나리오를 생각해 보겠습니다. 데이터가 폼에 들어있는 상태로 랜더링 한 뒤에 사용자가 ‘제출’ 버튼을 누르는 행위를 흉내를 내 보겠습니다(simulate). 그리고 지정된 API 엔드포인트로 요청을 제대로 보내는지 확인해보겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Submitting the form'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">,</span> wrapper<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">renderAppWithState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'John Doe'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> submitButton <span class=\\\"token operator\\\">=</span> wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'[type=\\\"submit\\\"]'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'sends the data and shows the confirmation page'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">nock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'https://myapp.com/api'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">post</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/12345'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reply</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">200</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    submitButton<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">simulate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// 이제 무슨 일이 일어나는지 확인합니다</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h2 id=\\\"언제-테스트하나\\\"><a href=\\\"#%EC%96%B8%EC%A0%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EB%82%98\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>언제 테스트하나?</h2>\\n<p>본격적으로 단언을 작성하기 전에, 또 하나의 문제가 있습니다. “테스트를 언제 실행하냐” 인데요(역주: 테스트 코드를 실행하는 행위가 아니라 모든 작업이 다 끝나고 기대값과 결과값을 비교하는 ‘단언’ 을 의미하나봅니다). 모든 변화가 순차적으로 일어나는 단순한 상황에서는 사용자 동작을 흉내를 낸 뒤에 바로 단언을 실행하면 됩니다. 하지만 여러분의 앱은 보통 네트워크 요청 같은 비동기 코드를 다루기 위해 프로미스(Promise) 등을 사용할 겁니다. 네트워크 요청을 순차적으로 실행되게 모킹해놓았다 하더라도, 성공한 프로미스는 <code class=\\\"language-text\\\">submitButton.simulate(&#39;click&#39;)</code> 부분 다음의 코드를 바로 실행할겁니다. 우리는 단언이 실행되기 전에 앞선 작업이 “제대로 끝나기를” 기다리게 해야합니다.</p>\\n<p>Jest는 여러가지로 비동기 코드를 다루는 방법을 제공하지만, Promise 체인을 직접 다루는 방식으로 동작하거나(이번 예시에는 없지요) , 타이머를 모킹해야 합니다(Promise 기반 코드에는 동작하지 않습니다). <code class=\\\"language-text\\\">setTimeout(() =&gt; {}, 0)</code> 같은 코드를 사용할 수 있지만 <a href=\\\"https://facebook.github.io/jest/docs/en/asynchronous.html\\\">Jest의 비동기 콜백 기능</a>을 사용해야 해서 코드의 가독성이 떨어지게 됩니다.</p>\\n<p>하지만 이 문제를 멋지게 해결하기 위해 한 줄짜리 보조 함수를 사용하면 됩니다. 이 함수는 성공한 Promise를 이벤트 루프의 바로 다음 차례로 넘기는 일을 합니다. Jest에서 기본적으로 지원하는 Promise 리턴과 같이 사용하면 됩니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">flushAllPromises</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span>resolve <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">setImmediate</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'runs some promise based code'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">triggerSomethingPromiseBased</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Promise 기반의 동작 실행</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">flushAllPromises</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n     <span class=\\\"token comment\\\">// 무슨 일이 일어나는지 확인하기</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h2 id=\\\"어떻게-테스트하나\\\"><a href=\\\"#%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EB%82%98\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>어떻게 테스트하나?</h2>\\n<p>사용자와 앱의 상호작용이 제대로 이루어지고 있나 확인하려면 어떤 방법이 있을까요?</p>\\n<p><strong>마크업(Markup)</strong> - UI가 제대로 변경되었는지 확인하기 위해 페이지의 마크업을 들여다볼 수 있습니다. 예를 들어 <a href=\\\"https://facebook.github.io/jest/docs/snapshot-testing.html\\\">Jest의 스냅샷 기능으로요.</a> (유의할 점: 아래의 테스트 코드를 실행하기 위해 <a href=\\\"https://github.com/adriantoine/enzyme-to-json#serializer\\\">enzyme-to-json</a>같은 Jest 스냅샷 직렬화 모듈(serializer)을 설치해야 합니다)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>wrapper<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toMatchSnapshot</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nsubmitButton<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">simulate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">flushAllPromises</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>wrapper<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toMatchSnapshot</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span></code></pre>\\n      </div>\\n<p>이런 방식의 단언은 작성하기 아주 쉽지만, 어디에 문제가 있는지 살펴보기 어려워지는 경향이 있습니다. 스냅샷은 가끔 겉으로 보기에 상관없어 보이는 테스트가 실패할 때도 변할 수 있습니다. 게다가 변화가 있었는지 확인만 할 뿐 무슨 행동을 했는지 기록을 남기진 않습니다.</p>\\n<p><strong>상태(State)</strong> - 애플리케이션의 상태 변경을 확인하는 방법입니다. 한 곳에 집중된 스토어를 가지고 있는 리덕스 애플리케이션은 테스트하기 쉽지만, 상태가 나뉘어있다면 조금 복잡해질 수 있습니다. 이 때도 스냅샷 테스트를 할 수 있지만 저는 객체를 직접 비교하는 방식을 선호하는 편입니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>store<span class=\\\"token punctuation\\\">,</span> wrapper<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">renderAppWithState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'John Doe'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>store<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toEqual</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'John Doe'</span><span class=\\\"token punctuation\\\">,</span>\\n  confirmationVisible<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nsubmitButton<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">simulate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">flushAllPromises</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>store<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toEqual</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'John Doe'</span><span class=\\\"token punctuation\\\">,</span>\\n    confirmationVisible<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span></code></pre>\\n      </div>\\n<p>상태 스토어는 사용자가 보지 못하는 곳에 감추어져 있기 때문에 사용자 중심적인 테스트와는 약간 거리가 있습니다. 하지만 디자인 변경에 따른 마크업 수정이 일어나는 경우 영향을 덜 받습니다.</p>\\n<p><strong>부수 기능(Side effects)</strong> - 여러분의 애플리케이션에 따라 확인해야 하는 부수 기능도 있습니다(네트워크 요청, <code class=\\\"language-text\\\">localStorage</code> 변화 등). 이럴 때 nock의 <code class=\\\"language-text\\\">isDone</code> 메서드를 활용하여 모킹한 요청이 실제로 사용되었는지 확인할 수도 있습니다. </p>\\n<p><strong>액션 보내기(Dispatched actions)</strong> - 리덕스의 기능을 십분 활용하여 어떤 액션이 발생했는지 쉽게 로그를 정리하고 나열할 수 있습니다. 이를 이용해서 스토어에 액션을 보내는 흐름을 확인해볼 수 있습니다. <a href=\\\"https://github.com/arnaudbenard/redux-mock-store\\\">redux-mock-store</a> 같은 유용한 라이브러리의 도움을 받을 수도 있습니다. 먼저 위에서 정의한 <code class=\\\"language-text\\\">renderAppWithState</code> 메서드를 조금 수정해서 가상의 리덕스 스토어를 적용하면, 그 다음 스토어에 어떤 액션들이 호출되었는지 확인하기 위해 <code class=\\\"language-text\\\">getActions</code> 메서드를 사용할 수 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token comment\\\">// 이제 renderAppWithState는 redux-mock-state를 사용해서 스토어를 생성합니다.</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>store<span class=\\\"token punctuation\\\">,</span> wrapper<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">renderAppWithState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'John Doe'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>store<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toEqual</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'John Doe'</span><span class=\\\"token punctuation\\\">,</span>\\n  confirmationVisible<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nsubmitButton<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">simulate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">flushAllPromises</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>store<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getActions</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toEqual</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'SUBMIT_FORM_START'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> \\n    <span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'SUBMIT_FORM_SUCCESS'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span></code></pre>\\n      </div>\\n<p>이런 유형의 단언은 특히 코드가 비동기로 흘러갈 때 테스트 하고자 할 때 유용합니다. 또한 테스트 시나리오가 어떤 흐름으로 구성되는지 보여주면서 일종의 문서 역할을 합니다.</p>\\n<h2 id=\\\"중심-잡기\\\"><a href=\\\"#%EC%A4%91%EC%8B%AC-%EC%9E%A1%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>중심 잡기</h2>\\n<p>앞서 소개한 통합 테스트가 단위 테스트를 완전히 대체한다는 뜻은 아닙니다. 특히 애플리케이션에 무거운 로직이 있는 부분(리듀서나 셀렉터)은 여전히 철저하게 단위 테스트가 적용되어야 합니다. 테스팅 피라미드의 계층은 여전히 유효합니다! 하지만 통합 테스트는 테스트 방법 중 하나로서 충분히 유효하며, 가능한 한 고통을 덜고 더 자신있게 소프트웨어를 배포할 수 있도록 좋은 테스트를 구축하는데 도움이 됩니다.</p>\\n<p>소프트웨어 테스트라는 주제는 업계에서 가장 많이 오가는 주제 중 하나입니다. 제 동료는 제 글을 검수해주면서 “<a href=\\\"http://blog.thecodewhisperer.com/permalink/integrated-tests-are-a-scam\\\">통합 테스트는 사기다</a>” 라는 글을 알려주기도 했습니다. 어떤 사람들은 저 글을 쓴 사람이 맞다고도 하지만, 제가 생각하기에 흑백 논리로 따질 수 없는 주제라고 생각합니다. 여러분은 어떻게 생각하시나요?</p>\",\"id\":\"/home/circleci/repo/src/pages/posts/2018-01-19-intergration-tests-in-redux-apps-kr/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-01-19\",\"path\":\"/posts/integration-tests-in-redux-apps-kr\",\"title\":\"[번역] 리덕스 앱을 저비용 고효율로 통합 테스트 하기\",\"tags\":[\"Testing\",\"React\",\"Javascript\",\"Translation\"],\"category\":\"Testing\"}},{\"excerpt\":\"더 좋은 테스트를 위한 번역 시리즈 그래서, 자바스크립트 테스트가 뭔가요? 테스트를 작성하라. 너무 많이는 말고. 통합 테스트를 많이 써라. 리덕스 앱을 저비용 고효율로 통합 테스트 하기 리액트 + 리덕스 앱을 Jest와 Enzyme…\",\"html\":\"<p><strong>더 좋은 테스트를 위한 번역 시리즈</strong></p>\\n<ol>\\n<li><a href=\\\"/posts/what-is-testing-javascript-kr\\\">그래서, 자바스크립트 테스트가 뭔가요?</a></li>\\n<li><a href=\\\"/posts/write-mostly-integration-test-kr\\\">테스트를 작성하라. 너무 많이는 말고. 통합 테스트를 많이 써라.</a></li>\\n<li><a href=\\\"/posts/integration-tests-in-redux-apps-kr\\\">리덕스 앱을 저비용 고효율로 통합 테스트 하기</a></li>\\n<li><a href=\\\"/posts/lessons-learned-testing-react-redux-apps-with-jest-and-enzyme-kr\\\">리액트 + 리덕스 앱을 Jest와 Enzyme으로 테스트하며 얻은 교훈</a></li>\\n</ol>\\n<h2 id=\\\"들어가며번역-서문\\\"><a href=\\\"#%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0%EB%B2%88%EC%97%AD-%EC%84%9C%EB%AC%B8\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>들어가며(번역 서문)</h2>\\n<p>“더 좋은 테스트를 위한 번역 시리즈” 두 번째입니다. 테스트를 작성하는게 좋다는 공감대는 얻었을 지 몰라도 막상 코드 에디터 앞에서는 대략 정신이 멍해지기 일쑤입니다. 전부 다 테스트를 하자니 너무 광범위하고, 함수 단위로 유닛 테스트만 작성하자니 너무 세세해서 실제 제대로 애플리케이션이 동작하는지 파악하기도 어렵거니와 노력 대비 별로 쓸모가 없어보이기도 합니다.</p>\\n<p>그 고민을 조금이나마 덜어드리고자 좋은 조언을 가져와서 번역해 보았습니다.</p>\\n<p><a href=\\\"https://blog.kentcdodds.com/write-tests-not-too-many-mostly-integration-5e8c7fff591c\\\">원문은 여기서 보실 수 있습니다.</a></p>\\n<hr>\\n<p>얼마 전에 <a href=\\\"https://medium.com/@rauchg\\\">Guillermo Rauch</a>(<a href=\\\"https://socket.io\\\">Socket.io</a>의 창시자이자 <a href=\\\"https://zeit.co\\\">Zeit.co</a>의 설립자입니다)가 위 제목으로 <a href=\\\"https://twitter.com/rauchg/status/807626710350839808\\\">심오한 트윗</a>을 하나 작성했습니다. </p>\\n<p><img src=\\\"https://cl.ly/1w0Q053W1B1O/write-integration-test-2.png\\\"></p>\\n<blockquote>\\n<p><strong>테스트를 작성하라. 너무 많이는 말고. 통합 테스트를 많이 써라.</strong></p>\\n</blockquote>\\n<p>짧지만 긴 내용입니다. 더 자세히 들어가보죠.</p>\\n<blockquote>\\n<p><strong>테스트를 작성하라.</strong></p>\\n</blockquote>\\n<p>네, 여러분은 대부분의 프로젝트에 자동화된 테스트를 작성해야 합니다. 특히 자신의 시간을 소중히 여긴다면요. 새벽 두 시에 버그 때문에 불려나가는 것 보다 로컬에서 버그를 잡아내는게 훨씬 낫습니다. <strong>저는 테스트를 작성하는데 시간을 들일 때 오히려 시간을 절약한다고 느낍니다.</strong> 테스트를 작성하다 보면 제가 실제로 만들고자 하는 것 보다 더 오래 걸릴 수도 있고, 그렇지 않을 수도 있지만, 저는(그리고 다른 사람들도) 거의 확실히 유지보수 하는데 드는 시간을 절약하고 있습니다.</p>\\n<p>테스트를 작성할 때는 이 테스트가 프로젝트의 버그를 얼마나 줄여줄 자신이 있는지 신경쓰셔야 합니다. <a href=\\\"https://flow.org/\\\">Flow</a>, <a href=\\\"https://eslint.org/\\\">ESLint</a> 같은 정적 타이핑이나 린트는 의미있는 수준의 자신감을 가져다 줍니다. 혹시 써보지 않으셨다면 반드시 살펴보시길 권합니다. 하지만 <strong>아무리 강한 타입을 적용한 프로그래밍 언어라도 테스트가 있어야 합니다.</strong> 타입과 린트는 여러분의 비지니스 로직에 버그가 없도록 만들어주지 않습니다. 그러니 좋은 테스트를 작성해서 (버그를 줄인다는)자신감을 크게 끌어올릴 필요가 있습니다.</p>\\n<blockquote>\\n<p><strong>너무 많이는 말고.</strong></p>\\n</blockquote>\\n<p>저는 애플리케이션에 100%의 코드 커버리지를 달성하려는 매니저나 팀이 있다고 들었습니다. 이는 굉장히 안 좋은 생각입니다. 커버리지가 70%(제 추측입니다.. 과학적인 증거는 없어요)를 넘어가게 되면서부터 여러분이 테스트로 얻는 이익이 점감하게 되는 문제가 있습니다. 왜 그럴까요? 음, 언제나 100%를 달성하기 위해 힘을 쏟다 보면 막상 테스트 할 필요 없는 것을 테스트하는데 시간을 소모하게 됩니다. 실제 신경써야 할 로직이 없는 것들 말이죠(ESLint나 Flow로도 충분히 잡아낼 수 있는 모든 버그들). <em>이런 규모의 테스트를 유지보수하는데 엄청난 시간이 들고 여러분의 팀을 힘들게 만들 겁니다.</em></p>\\n<p>그리고 테스트 환경에서 재현하기 어려운 한 줄의 코드를 위해 테스트를 작성할 때도 있습니다. 이런 경우는 <em>진짜로</em> 피하고 싶을겁니다. 왜냐면 이 테스트는 애플리케이션이 제대로 작동한다는 자신감을 별로 주지도 못하고, 리팩터링 할 때 속도를 늦출 뿐이기 때문입니다. <strong>코드를 리팩터링 할 때 테스트를 변경해야 하는 경우는 거의 없습니다.</strong></p>\\n<p>제가 작성한 대부분의 오픈 소스 프로젝트는 거의 100%의 코드 커버리지를 가지고 있다는 말씀을 드려야겠군요. 대부분의 프로젝트들은 작은 라이브러리나 툴이며, 여러 다른 상황(코드가 깨진다면 심각한 상황으로 이어질 수 있는 프로젝트들이 사용하는 상황)에서 재사용하기 쉽도록 작성되었습니다. 그래서 어찌저찌 상대적으로 100%의 커버리지를 얻을 수 있었습니다.</p>\\n<blockquote>\\n<p><strong>통합 테스트를 많이 써라.</strong></p>\\n</blockquote>\\n<p>테스트의 종류는 아주 다양합니다(제가 Fluent Conf에서 <a href=\\\"https://youtu.be/Da9wfQ0frGA\\\">“바퀴를 테스트하면서 배울 수 있는 것들”</a>이라는 제목으로 5분짜리 발표를 했습니다). 각각의 테스트는 장단점이 있습니다. 보통 자동화된 테스트를 이야기 할 때 많이 거론되는 테스트는 단위(Unit) 테스트, 통합(Integration) 테스트, E2E(End to End) 테스트입니다.</p>\\n<p>여기 제가 <a href=\\\"https://frontendmasters.com/courses/testing-javascript/\\\">“자바스크립트 애플리케이션 테스트하기”</a> 라는 Frontend Masters 워크샵에서 선보인 <a href=\\\"http://slides.com/kentcdodds/testing-workshop#/4/8\\\">슬라이드</a>를 잠시 보시죠.</p>\\n<p><img src=\\\"https://cl.ly/3x273a0A343P/write-integration-test-1.png\\\"></p>\\n<p>테스팅 피라미드는 <a href=\\\"https://martinfowler.com/bliki/TestPyramid.html\\\">마틴 파울러의 블로그</a>와 <a href=\\\"https://testing.googleblog.com/2015/04/just-say-no-to-more-end-to-end-tests.html\\\">구글 테스팅 블로그</a>에서 얻은 개념을 한데 합친 것입니다.</p>\\n<p>앞서 말씀드린대로 이 피라미드는 바닥부터 꼭대기까지 단위 테스트, 통합 테스트, E2E 테스트로 이루어져 있습니다. 피라미드의 위로 올라갈수록 테스트를 실행하고 작성하는데 더 많은 시간이 들고, 실행하고 유지보수하는데 비용(시간과 자원 측면에서)이 많이 듭니다. 그림만 보면 유닛 테스트를 작성하는데 시간을 더 투자해야 하는 것 처럼 보입니다.</p>\\n<p>미처 언급되지 않은 점이 있는데, 피라미드 위로 올라갈 수록 각 테스트의 신뢰성이 증가한다는 겁니다. 여러분이 생각한 것 보다 훨씬 큰 이득을 얻을 수 있습니다(You get more bang for your buck). 따라서 E2E 테스트가 단위 테스트보다 느리고 비용이 많이 들지라도, 애플리케이션이 의도대로 동작한다는 자신감은 더 크게 제공합니다.</p>\\n<p><a href=\\\"https://twitter.com/kentcdodds/status/628658648001048577\\\">제 트윗 중 가장 많이 리트윗된 트윗</a>이 단위 테스트의 주요 문제를 다루고 있습니다.</p>\\n<blockquote>\\n<p>아직도 이 사진을 좋아해요. 유닛 테스트만 좋아하는 사람들은 이렇게 “작동하는 것 같다” 라고 말하죠.  </p>\\n</blockquote>\\n<p><img src=\\\"https://cl.ly/093u1O2j0k1Y/write-integration-test-3.gif\\\"></p>\\n<p>이 사람이 방에서 달릴 수 있고, 팔굽혀펴기를 하고, 독서를 할 수 있는지 확인하기 위해 단위 테스트를 작성했지만, 이 사람은 자신의 다양한 신체 부위를 아주 효율적으로 사용하지 못하는데다 통합하지 않고 있습니다. 만약 버튼 컴포넌트가 <code class=\\\"language-text\\\">onClick</code> 핸들러를 호출할 때 핸들러가 올바른 데이터를 제대로 요청하지 않는다면, 핸들러의 호출이 잘 되는지 확인하는 일은 그닥 중요한게 아닙니다! 각각 분리 된 부분이 자신의 역할을 제대로 수행하는지 확인하기 위해 단위 테스트를 작성하는 것은 그리 나쁜 일은 아닙니다. *분리 된 부분이 <strong>함께</strong> 제 역할을 수행하는지 확인하지 않는다면 아무 소용 없습니다.*</p>\\n<p><strong>통합 테스트는 자신감을 심어주는 역할 대비 속도/비용을 부담하는 정도를 아주 균형있게 가지고 있습니다.</strong> 그래서 여러분이 <em>대부분</em>(혹시 몰라 말씀드리지만 전부는 아닙니다)의 시간을 통합 테스트에 투자하라는 조언을 드리는 겁니다.</p>\\n<hr>\\n<p><strong>통합 테스트를 더 많이 작성하는 방법</strong></p>\\n<p>통합 테스트와 단위 테스트 사이의 경계는 약간 모호합니다. 어느 쪽이든 더 많은 통합 테스트를 작성하기 위해 가장 도움되는 것이 무엇이냐 물으신다면 <strong>일단 너무 많은 것을 모킹(mocking)하지 않기를 권합니다.</strong> <em>무언가를 모킹할 때, 테스트하고자 하는 것과 모킹된 것 사이의 통합테스트 신뢰도는 떨어지게 됩니다.</em> 때로는 이 방법이 도움 되지 않을 수 있습니다(<a href=\\\"https://www.youtube.com/watch?v=EaxDl5NPuCA&#x26;feature=youtu.be\\\">반대하는 사람도 있지만요</a>). 실제로 매 테스트마다 이메일을 발송하거나 신용카드 결제를 할 필요는 없지만, 대부분의 경우 모킹을 피하면 테스팅을 더 잘 하게 되리라 생각합니다.</p>\\n<p><strong>만약 리액트로 개발을 하고 계시다면, 얕은 랜더링(<a href=\\\"http://airbnb.io/enzyme/docs/api/shallow.html\\\">shallow rendering</a>)도 포함됩니다.</strong> 저는 오랜 시간동안 얕은 랜더링은 세부 구현을 테스트하는 것이나 마찬가지라고 이야기해왔습니다. 이 부분을 <a href=\\\"https://www.briefs.fm/3-minutes-with-kent/49\\\">3분 짜리 팟캐스트</a>에서(그리고 리액트 테스팅에 대한 다른 팁도 포함해서) 다루고 있습니다.</p>\\n<p>도움이 되셨길 바라며 모두 행운을 빕니다! 👍</p>\",\"id\":\"/home/circleci/repo/src/pages/posts/2018-01-15-write-mostly-integration-test-kr/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-01-15\",\"path\":\"/posts/write-mostly-integration-test-kr\",\"title\":\"[번역] 테스트를 작성하라. 너무 많이는 말고. 통합 테스트를 많이 써라.\",\"tags\":[\"Translation\",\"Testing\",\"TDD\"],\"category\":\"Testing\"}},{\"excerpt\":\"더 좋은 테스트를 위한 번역 시리즈 그래서, 자바스크립트 테스트가 뭔가요? 테스트를 작성하라. 너무 많이는 말고. 통합 테스트를 많이 써라. 리덕스 앱을 저비용 고효율로 통합 테스트 하기 리액트 + 리덕스 앱을 Jest와 Enzyme…\",\"html\":\"<p><strong>더 좋은 테스트를 위한 번역 시리즈</strong></p>\\n<ol>\\n<li><a href=\\\"/posts/what-is-testing-javascript-kr\\\">그래서, 자바스크립트 테스트가 뭔가요?</a></li>\\n<li><a href=\\\"/posts/write-mostly-integration-test-kr\\\">테스트를 작성하라. 너무 많이는 말고. 통합 테스트를 많이 써라.</a></li>\\n<li><a href=\\\"/posts/integration-tests-in-redux-apps-kr\\\">리덕스 앱을 저비용 고효율로 통합 테스트 하기</a></li>\\n<li><a href=\\\"/posts/lessons-learned-testing-react-redux-apps-with-jest-and-enzyme-kr\\\">리액트 + 리덕스 앱을 Jest와 Enzyme으로 테스트하며 얻은 교훈</a></li>\\n</ol>\\n<h2 id=\\\"들어가며\\\"><a href=\\\"#%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>들어가며</h2>\\n<p>요즘 개인적으로 “가능한한 내 코드에 모두 테스트를 작성하겠다” 라는 목표를 가지고 있습니다. 하지만 테스트에 대해 두루뭉술한 개념만 가지고 있고, 지금은 상대적으로 쉬운 함수만 테스트를 작성할 수 있는 수준입니다.</p>\\n<p>하지만 실제 개발하고 있는 애플리케이션은 ‘리액트 + 리덕스(혹은 MobX) + 기타등등’ 의 구성으로 되어있기 때문에 조금만 테스트를 제대로 해 보려고 하면 어디부터 손을 대야할지 전혀 감을 못 잡는 상태입니다.</p>\\n<p>그래서 실전에 최대한 도움이 될 수 있도록 유용한 글을 몇개 추려서 단계별로 보기 좋은 참고서가 될 수있도록 번역하는 사이드 프로젝트를 진행하고 있습니다. 이 글을 보시는 분들도 리액트로 만드는 애플리케이션을 테스트하는데 도움이 되었으면 좋겠습니다.</p>\\n<p>그 첫 번째 단계로 <strong>테스트가 대체 뭐냐?</strong> 라는 질문에 가벼운 답이 될 수 있는 글의 번역부터 시작합니다.</p>\\n<p><a href=\\\"https://blog.kentcdodds.com/but-really-what-is-a-javascript-test-46fe5f3fad77\\\">원문은 여기서 읽어보실 수 있습니다.</a></p>\\n<hr>\\n<p><em>일단 한 발짝 물러서서 시작부터 자바스크립트 자동화 테스트를 이해해 보도록 하겠습니다.</em></p>\\n<p>소프트웨어를 테스트하는 이유는 수도 없이 많습니다. 저는 크게 두 가지 이유를 가지고 있습니다.</p>\\n<ol>\\n<li>전체 작업 흐름의 속도를 올려서 개발을 빠르게 한다.</li>\\n<li>변경 사항이 있을 때 기존 코드를 무너트리지 않는다는 확신을 갖도록 도와준다.</li>\\n</ol>\\n<p>그래서 그런데, 저는 여러분에게 몇 가지 여쭈어 보고 싶은게 있습니다. (트위터 투표로 미리 물어보았죠)</p>\\n<ul>\\n<li><a href=\\\"https://twitter.com/kentcdodds/status/942625485829181441\\\">자바스크립트 테스트를 작성해 보신 적 있습니까?</a></li>\\n<li><a href=\\\"https://twitter.com/kentcdodds/status/942625486638759938\\\">자바스크립트 테스팅 프레임워크를 사용해 보신 적 있습니까?</a></li>\\n<li><a href=\\\"https://twitter.com/kentcdodds/status/942625487511154688\\\">자바스크립트 테스팅 프레임워크를 밑바닥부터 설정해 보신 적 있습니까?</a></li>\\n<li><a href=\\\"https://twitter.com/kentcdodds/status/942625489348280320\\\">테스팅 프레임워크를 충분히 이해하고 있고, 아주 간단한 테스팅 프레임워크라도 직접 만들어 보실 수 있습니까?</a></li>\\n</ul>\\n<p>이 글의 목적은 당신이 마지막 질문에 “네” 라고 대답할 수 있도록 돕는 것입니다. 결과적으로 자바스크립트를 테스트한다는게 무엇인지 알아야 더 좋은 테스트를 작성할 수 있으니까요.</p>\\n<p>이제 간단한 <code class=\\\"language-text\\\">math.js</code> 모듈을 만들어서 그 안에 두 함수를 작성한 다음에 내보내겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">sum</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> a <span class=\\\"token operator\\\">+</span> b\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">subtract</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> a <span class=\\\"token operator\\\">-</span> b\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> sum<span class=\\\"token punctuation\\\">,</span> subtract <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><strong>작성하는 모든 코드는 <a href=\\\"https://github.com/kentcdodds/js-test-example\\\">Github에</a> 올려두었으니 참고하시면 됩니다</strong> 🐙😸</p>\\n<h2 id=\\\"1단계\\\"><a href=\\\"#1%EB%8B%A8%EA%B3%84\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>1단계</h2>\\n<p>제가 생각할 수 있는 가장 기본적인 테스트 형식을 보여드리겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// basic-test.js</span>\\n<span class=\\\"token keyword\\\">const</span> actual <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span>\\n<span class=\\\"token keyword\\\">const</span> expected <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>actual <span class=\\\"token operator\\\">!==</span> expected<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'${actual} is not ${expected}'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>터미널에서 <code class=\\\"language-text\\\">node basic-test.js</code> 라고 입력하시면 이 테스트 코드를 실행할 수 있습니다. 이게 테스트입니다!</p>\\n<p><strong>테스트는 기대하던 결과값과 실제 출력된 값이 맞지 않으면 에러를 일으키는 코드입니다.</strong> 만약 특정한 상태값 설정을 해야하는 등(예를 들자면 컴포넌트가 테스트 실행 전에 그려져야(Rendered on Document) 브라우저 이벤트를 확인해볼 수 있다던가, 데이터베이스에 있는 사용자를 가져온다던가) 특수한 경우에는 더 복잡해질 수 있습니다. 하지만 <code class=\\\"language-text\\\">math.js</code> 모듈 같은 순수한 함수(Pure function - 입력값에 따른 출력값이 동일하며 외부의 상태에 영향을 미치지 않는 함수)은 상대적으로 쉽습니다.</p>\\n<p><strong>코드의 <code class=\\\"language-text\\\">actual !== expected</code> 부분을 “단언(assertion)” 이라고 합니다.</strong> 단언은 어떤 것이 특정한 값으로 되어있어야 한다거나 특정 테스트를 통과해야한다고 코드로 표현하는 것을 뜻합니다. <code class=\\\"language-text\\\">actual</code> 부분이 어떠한 정규표현식에 일치해야하거나, 배열이 특정한 길이를 가지고 있어야 한다고 표현하는 것이 단언이 됩니다. 중요한 점은 만약 우리가 작성한 단언이 실패하면 에러가 일어나야 한다는 것입니다.</p>\\n<p>그래서 <code class=\\\"language-text\\\">math.js</code> 를 가장 기본적인 형태로 테스트 해 본다면 이렇게 됩니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 1.js</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span>sum<span class=\\\"token punctuation\\\">,</span> subtract<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./math'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">let</span> result<span class=\\\"token punctuation\\\">,</span> expected\\nresult <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">)</span>\\nexpected <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>result <span class=\\\"token operator\\\">!==</span> expected<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>result<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> is not equal to </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>expected<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nresult <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">subtract</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span>\\nexpected <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">4</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>result <span class=\\\"token operator\\\">!==</span> expected<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>result<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> is not equal to </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>expected<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>짜잔! 이 파일을 <code class=\\\"language-text\\\">node</code> 커맨드로 실행해보면 에러 없이 실행되고 종료됩니다. 이제 <code class=\\\"language-text\\\">sum</code> 함수의 <code class=\\\"language-text\\\">+</code> 연산을 <code class=\\\"language-text\\\">-</code> 연산으로 바꾸고 다시 실행해서 테스트를 깨지도록 만들어보겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">$ node 1.js\\n/Users/kdodds/Desktop/js-test-example/1.js:8\\n  throw new Error(`${result} is not equal to ${expected}`)\\n  ^\\nError: -4 is not equal to 10\\n    at Object.&lt;anonymous&gt; (/Users/kdodds/Desktop/js-test-example/1.js:8:9)\\n    at Module._compile (module.js:635:30)\\n    at Object.Module._extensions..js (module.js:646:10)\\n    at Module.load (module.js:554:32)\\n    at tryModuleLoad (module.js:497:12)\\n    at Function.Module._load (module.js:489:3)\\n    at Function.Module.runMain (module.js:676:10)\\n    at startup (bootstrap_node.js:187:16)\\n    at bootstrap_node.js:608:3</code></pre>\\n      </div>\\n<p>좋습니다! 우리는 벌써 기본적인 테스트를 사용해서 이득을 보고 있어요! 이제 테스트를 변경하지 않는 이상 <code class=\\\"language-text\\\">sum</code> 함수를 마음대로 바꿀 수 없습니다. 쩌네요(Neato)!</p>\\n<p><strong>테스팅 프레임워크(혹은 단언 라이브러리)의 가장 중요한 부분은 에러 메세지를 최대한 도움이 되도록 표현하는 겁니다.</strong> 테스트가 실패할 때마다 여러분이 제일 먼저 에러 메세지를 보게 됩니다. 만약 에러 메세지를 보고 어떤 문제가 밑에 깔려있는지 단박에 파악하지 못한다면, 몇분씩 코드를 직접 들여다보면서 뭐가 잘못됐는지 찾아야 합니다. 에러 메세지의 질은 여러분이 주어진 테스팅 프레임워크를 얼마나 잘 이해하고 적절한 단언을 사용하느냐에 따라서 크게 달라집니다.</p>\\n<h2 id=\\\"2단계\\\"><a href=\\\"#2%EB%8B%A8%EA%B3%84\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>2단계</h2>\\n<p>사실 Node.js 가 위에서 만들어본 <a href=\\\"https://nodejs.org/api/assert.html#assert_assert\\\"><code class=\\\"language-text\\\">assert</code></a> 모듈을 내장하고 있다는 걸 알고 계셨나요🤔? 이 모듈을 써서 리팩터링을 해 보겠습니다!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 2.js</span>\\n<span class=\\\"token keyword\\\">const</span> assert <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'assert'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span>sum<span class=\\\"token punctuation\\\">,</span> subtract<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./math'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">let</span> result<span class=\\\"token punctuation\\\">,</span> expected\\n\\nresult <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">)</span>\\nexpected <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span>\\nassert<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">strictEqual</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">,</span> expected<span class=\\\"token punctuation\\\">)</span>\\n\\nresult <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">subtract</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span>\\nexpected <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">4</span>\\nassert<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">strictEqual</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">,</span> expected<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>좋아요! 저번에 작성했던 코드와 기능적으로 완전히 동일한 테스트 모듈을 작성해보았습니다. 딱 하나 다른게 있다면 에러 메세지입니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">$ node 2.js\\nassert.js:42\\n  throw new errors.AssertionError({\\n  ^\\nAssertionError [ERR_ASSERTION]: -4 === 10\\n    at Object.&lt;anonymous&gt; (/Users/kdodds/Desktop/js-test-example/2.js:8:8)\\n    at Module._compile (module.js:635:30)\\n    at Object.Module._extensions..js (module.js:646:10)\\n    at Module.load (module.js:554:32)\\n    at tryModuleLoad (module.js:497:12)\\n    at Function.Module._load (module.js:489:3)\\n    at Function.Module.runMain (module.js:676:10)\\n    at startup (bootstrap_node.js:187:16)\\n    at bootstrap_node.js:608:3</code></pre>\\n      </div>\\n<p>내용을 보시면 아쉽게도 에러가 더 이상 코드 내용을 보여주지 않고 있습니다. 😦 일단 계속 가보죠.</p>\\n<h2 id=\\\"3단계\\\"><a href=\\\"#3%EB%8B%A8%EA%B3%84\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>3단계</h2>\\n<p>더 나아가서 직접 테스팅 “프레임워크” 와 단언 라이브러리를 작성해보겠습니다. 먼저 단언 라이브러리부터 시작해보죠. Node의 내장 <code class=\\\"language-text\\\">assert</code> 모듈 대신에 <code class=\\\"language-text\\\">expect</code> 라는 라이브러리를 만들어보겠습니다. 변경된 코드는 아래와 같습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 3.js</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span>sum<span class=\\\"token punctuation\\\">,</span> subtract<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./math'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">let</span> result<span class=\\\"token punctuation\\\">,</span> expected\\n\\nresult <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">)</span>\\nexpected <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span>expected<span class=\\\"token punctuation\\\">)</span>\\n\\nresult <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">subtract</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span>\\nexpected <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">4</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span>expected<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>actual<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span>expected<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>actual <span class=\\\"token operator\\\">!==</span> expected<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>actual<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> is not equal to </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>expected<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>이제 원하는대로 단언을 추가하고 객체를 리턴하도록 만들 수 있습니다(<code class=\\\"language-text\\\">toMatchRegex</code>, <code class=\\\"language-text\\\">toHaveLength</code>).</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">$ node 3.js\\n/Users/kdodds/Desktop/js-test-example/3.js:17\\n        throw new Error(`${actual} is not equal to ${expected}`)\\n        ^\\nError: -4 is not equal to 10\\n    at Object.toBe (/Users/kdodds/Desktop/js-test-example/3.js:17:15)\\n    at Object.&lt;anonymous&gt; (/Users/kdodds/Desktop/js-test-example/3.js:7:16)\\n    at Module._compile (module.js:635:30)\\n    at Object.Module._extensions..js (module.js:646:10)\\n    at Module.load (module.js:554:32)\\n    at tryModuleLoad (module.js:497:12)\\n    at Function.Module._load (module.js:489:3)\\n    at Function.Module.runMain (module.js:676:10)\\n    at startup (bootstrap_node.js:187:16)\\n    at bootstrap_node.js:608:3</code></pre>\\n      </div>\\n<p>훨씬 보기 좋아졌네요.</p>\\n<h2 id=\\\"4단계\\\"><a href=\\\"#4%EB%8B%A8%EA%B3%84\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>4단계</h2>\\n<p>그런데 만약 에러 메세지가 나온다 해도 정확하게 <code class=\\\"language-text\\\">sum</code> 함수에 문제가 생겼다고 파악하려면 어떻게 해야할까요😖? 저 파일 안에는 <code class=\\\"language-text\\\">subtract</code> 함수도 있는데 말이죠. 게다가 테스트 파일의 코드는 각각의 테스트를 적절히 분리하지 못하고 있습니다(시각적으로 + 기능적으로). </p>\\n<p>그래서 헬퍼 함수를 만들어서 분리해보았습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 4.js</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span>sum<span class=\\\"token punctuation\\\">,</span> subtract<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./math'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'sum adds numbers'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">const</span> expected <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span>expected<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'subtract subtracts numbers'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">subtract</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">const</span> expected <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">4</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span>expected<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span>title<span class=\\\"token punctuation\\\">,</span> callback<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">callback</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`- [x] </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>title<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">error</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`✕ </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>title<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>actual<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span>expected<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>actual <span class=\\\"token operator\\\">!==</span> expected<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>actual<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> is not equal to </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>expected<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>이제 특정 테스트에 관련된 내용은 전부 “test” 콜백 안에 집어넣고, 테스트에 제목을 매길 수 있습니다. 그리고 <code class=\\\"language-text\\\">test</code> 함수에 유용한 에러 메세지를 출력하도록 할 뿐만 아니라 모든 테스트를 한번에 실행할 수 있게 되었습니다(첫 번째 테스트에서 에러가 발생한다고 멈추지 않구요)!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">$ node 4.js\\n✕ sum adds numbers\\nError: -4 is not equal to 10\\n    at Object.toBe (/Users/kdodds/Desktop/js-test-example/4.js:29:15)\\n    at test (/Users/kdodds/Desktop/js-test-example/4.js:6:18)\\n    at test (/Users/kdodds/Desktop/js-test-example/4.js:17:5)\\n    at Object.&lt;anonymous&gt; (/Users/kdodds/Desktop/js-test-example/4.js:3:1)\\n    at Module._compile (module.js:635:30)\\n    at Object.Module._extensions..js (module.js:646:10)\\n    at Module.load (module.js:554:32)\\n    at tryModuleLoad (module.js:497:12)\\n    at Function.Module._load (module.js:489:3)\\n    at Function.Module.runMain (module.js:676:10)\\n- [x] subtract subtracts numbers</code></pre>\\n      </div>\\n<p>좋아요! 이제 에러 메세지 <em>뿐만 아니라</em> 어떤 부분을 고쳐야하는지 테스트 제목을 보고 찾아갈 수 있습니다.</p>\\n<h2 id=\\\"5단계\\\"><a href=\\\"#5%EB%8B%A8%EA%B3%84\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>5단계</h2>\\n<p>마지막 단계로 모든 테스트 파일을 찾아서 실행하는 <a href=\\\"https://blog.kentcdodds.com/tips-for-making-a-cli-based-tool-with-node-9903255c2a3b\\\">CLI 도구를 작성하기만 하면 됩니다!</a> 처음엔 쉽겠지만 그 위에 해야하는 일들이 굉장히 많아서 좀 어렵습니다 . 😅</p>\\n<p>현재 시점에서 우리는 테스팅 프레임워크와 테스트 실행기(runner)를 만들었습니다. 다행히도 이미 만들어진 도구가 산더미같이 많습니다! 저는 모든 테스팅 도구를 사용해보았고 다 괜찮았습니다. 그래도 제 요구 사항을 가장 만족하는 도구는 Jest 뿐이었습니다. Jest는 아주 대단한 도구입니다. (<a href=\\\"http://kcd.im/egghead-jest\\\">Jest를 더 알아보시려면 이 링크를 확인하세요</a>)</p>\\n<p>그러니 이제 직접 프레임워크를 작성하는 대신 테스트 파일을 Jest 용으로 바꾸어 보겠습니다. 이를 어쩌죠? 안바꿔도 되는데요!? Jest는 <code class=\\\"language-text\\\">test</code>, <code class=\\\"language-text\\\">expect</code> 를 글로벌 객체로 가지고 있기 때문에 그냥 이전에 작성한 <code class=\\\"language-text\\\">test</code> 와 <code class=\\\"language-text\\\">expect</code> 의 구현체를 지우기만 하면 됩니다!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 5.js</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span>sum<span class=\\\"token punctuation\\\">,</span> subtract<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./math'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'sum adds numbers'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">const</span> expected <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span>expected<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'subtract subtracts numbers'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">subtract</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">const</span> expected <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">4</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span>expected<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>Jest로 이 파일을 실행하면 다음과 같은 결과가 출력됩니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">$ jest\\n FAIL  ./5.js\\n  ✕ sum adds numbers (5ms)\\n  - [x] subtract subtracts numbers (1ms)\\n● sum adds numbers\\nexpect(received).toBe(expected)\\n    \\n    Expected value to be (using Object.is):\\n      10\\n    Received:\\n      -4\\n      4 |   const result = sum(3, 7)\\n      5 |   const expected = 10\\n    &gt; 6 |   expect(result).toBe(expected)\\n      7 | })\\n      8 | \\n      9 | test(&#39;subtract subtracts numbers&#39;, () =&gt; {\\n      \\n      at Object.&lt;anonymous&gt;.test (5.js:6:18)\\nTest Suites: 1 failed, 1 total\\nTests:       1 failed, 1 passed, 2 total\\nSnapshots:   0 total\\nTime:        0.6s, estimated 1s\\nRan all test suites.</code></pre>\\n      </div>\\n<p>텍스트만 보아서는 알 수 없지만 사실 결과는 컬러로 출력됩니다. 이미지로 보시면 이렇게 나옵니다.</p>\\n<p><img src=\\\"https://cl.ly/302i0B3V0J45/what-is-javascript-testing-1.png\\\"></p>\\n<p>컬러로 출력되면 관련된 부분을 살펴볼 때 큰 도움이 됩니다. <strong>그리고 에러가 발생하는 부분의 코드를 직접 보여줍니다! 이게 “도움이 되는” 에러 메세지죠!</strong></p>\\n<h2 id=\\\"결론\\\"><a href=\\\"#%EA%B2%B0%EB%A1%A0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>결론</h2>\\n<p>그래서 자바스크립트 테스트가 뭐라고 했죠? 단순히 특정 상태를 설정해놓은 코드를 가지고 특정 동작을 수행한 뒤, 새 상태를 확인하는 단언을 만드는 겁니다. 이번 시간에는 <a href=\\\"https://facebook.github.io/jest/docs/en/api.html#beforeeachfn-timeout\\\"><code class=\\\"language-text\\\">beforeEach</code></a>, <a href=\\\"https://facebook.github.io/jest/docs/en/api.html#describename-fn\\\">\\u0018<code class=\\\"language-text\\\">describe</code></a> 같은 <a href=\\\"https://facebook.github.io/jest/docs/en/api.html\\\">프레임워크 공용으로 사용되는 헬퍼 함수</a>에 대한 이야기는 하지 않았지만, <a href=\\\"https://facebook.github.io/jest/docs/en/expect.html#tomatchobjectobject\\\"><code class=\\\"language-text\\\">toMatchObject</code></a>, <a href=\\\"https://facebook.github.io/jest/docs/en/expect.html#tocontainitem\\\"><code class=\\\"language-text\\\">toContain</code></a> 같이 사용할 수 있는 단언이 아주 많이 있습니다. 적어도 이 글이 여러분들에게 자바스크립트로 테스트하는데 기본적인 개념을 제시해주길 바랍니다.</p>\\n<p>도움이 되었으면 좋겠군요. 행운을 빕니다! 👍</p>\\n<p><strong>놓치지 말고 참고할만한 글 목록(영어 자료)</strong></p>\\n<ul>\\n<li><a href=\\\"https://twitter.com/horse_js/status/942658114209316864\\\">Horse JS on Twitter: “But really, what is a JavaScript”</a> - 문맥을 빗겨가게 끊어진 글을 트윗하는 아주 재밌는 계정입니다.</li>\\n<li><a href=\\\"https://twitter.com/NTulswani/status/942079674527518720\\\">Introducing React Performance Devtool!! - by Nitin Tulswani</a></li>\\n<li><a href=\\\"https://www.javascriptjanuary.com\\\">JavaScript January</a></li>\\n</ul>\",\"id\":\"/home/circleci/repo/src/pages/posts/2018-01-14-what-is-testing-javascript-kr/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-01-14\",\"path\":\"/posts/what-is-testing-javascript-kr\",\"title\":\"[번역] 그래서, 자바스크립트 테스트가 뭔가요?\",\"tags\":[\"Translation\",\"Javascript\",\"Testing\"],\"category\":\"Testing\"}},{\"excerpt\":\"이 글은 Twitter  @ageldama 님의 TDD 조언에 관한 글타래를 허락 받고 정리한 내용입니다. 정리하면서 말씀하신 의도가 약간 달라진 부분 혹은 제 지식이 부족하여 제대로 표현하지 못한 부분도 있을 수 있습니다. 피드백환영합니다. 해당 포스팅은  Medium…\",\"html\":\"<p><img src=\\\"https://cdn-images-1.medium.com/max/1600/1*jFw7ZZMoVcsEYM_fS33DBA.gif\\\"></p>\\n<p>이 글은 Twitter <a href=\\\"https://twitter.com/ageldama\\\">@ageldama</a>님의 TDD 조언에 관한 글타래를 허락 받고 정리한 내용입니다. 정리하면서 말씀하신 의도가 약간 달라진 부분 혹은 제 지식이 부족하여 제대로 표현하지 못한 부분도 있을 수 있습니다. 피드백환영합니다. 해당 포스팅은 <a href=\\\"https://medium.com/@devRinae/tdd-test-driven-development-%EB%A5%BC-%EC%97%B0%EC%8A%B5%ED%95%98%EB%A9%B4%EC%84%9C-%EC%B0%B8%EA%B3%A0%ED%95%98%EA%B8%B0-%EC%A2%8B%EC%9D%80-%ED%8C%81-10%EA%B0%80%EC%A7%80-d8cf46ae1806\\\">Medium에 먼저 발행되었으니</a> 댓글로 의견 공유 부탁드립니다.</p>\\n<p><strong>(번호가 중요도 혹은 순서를 나타내지 않습니다)</strong></p>\\n<ol>\\n<li><strong>유닛 테스트를 한다면 테스트할 주제와 대상 클래스를 정하고, 대상 클래스가 사용하는 의존성(패키지일 수도 있고 특정 함수일 수도있겠지요)들은 Mock이나 Stub으로 만든다.</strong> <a href=\\\"https://stackoverflow.com/questions/3459287/whats-the-difference-between-a-mock-stub\\\">(Mock과 Stub이란?)</a> Mocking을 어떻게 하는지는 사용하는 언어마다 주로 사용하는 테스팅 프레임워크의 레퍼런스를 참고하라. 그러고 나면 자신이 의존성을 잘 정리했는지 살펴보기 좋아지고, 이어서 테스트하기 좋은 형태가 눈에 들어오기 시작한다.</li>\\n<li><strong>무엇을 테스트할지 정하기 어렵다면?</strong> 단위 테스트를 예로 들면 자신이 만든 클래스나 모듈, 함수 등의 기능이 정상적으로 동작하는지 확인하기 위해 테스트를 작성한다고 생각해보라.</li>\\n<li><strong>Q: 테스트를 작성하는데 “망했다” 혹은 “잘못되었다” 는 느낌이 든다. / A:</strong> 오히려 좋은 징조인데, 당신이 작성한 테스트는 리팩토링 및 회귀 테스트 시 복구해야 할 곳이 있음을 보여주고, 제대로 복구하고 있다는 지침이 된다.</li>\\n<li>처음에는 작성한 모듈이나 클래스 비율이 높게 테스트를 짜는데, 단언(assertions)은 조금 엉성하더라도 기본적인 부분만 확인하도록 작성한다. 이후 리팩토링을 하면서 다양한 경우에 대응하기 위해 단계적으로 단언을 추가한다.</li>\\n<li><strong>원칙적으로 TDD인만큼</strong> 테스트를 먼저 스펙에 반영해 작성하고, 그에 따라 테스트를 충족하기 위해 코드를 작성 후 리팩토링 하는 것이 바람직하지만 <strong>실제로는 쉽지 않다</strong>. 초심자라면 코드를 어느 정도 수준까지 짜 놓고 테스트, Mock을 붙이는걸 권한다. — <a href=\\\"https://emaren84.github.io/posts/how-do-you-take-an-app-from-no-tests-to-tdd-kor\\\">참고 포스트</a></li>\\n<li>처음부터 Mocking을 하지 않아도 좋다. 입력과 기대값이 명확하게 나타나는 로직 부분일수록, 또한 다른 모듈이나 DB 등 외부 시스템과 연결이 없을 수록 테스트를 작성하기 쉽고 그 효과를 체감하기 쉽다.</li>\\n<li><strong>가장 중요한 것은 테스트가 다 붙은 상황에서 리팩토링을 시작하는 것이다.</strong> 테스트가 깨지는 것을 보고 코드와 테스트를 계속 수정해나가면서 연습해보면 <strong>“테스트 먼저”</strong>를 어떻게 하게 되는지 자연스럽게 익히게 된다.</li>\\n<li><strong>Q: E2E(End-to-End) 과정을 생각해서 하나씩 시나리오대로 테스트를 짜는 것이 좋지 않나? / A:</strong> 맨 처음 스펙 도출 이후 테스트 작성, 단언, Mocking 등 순차적으로 내려가는 것이 좋겠지만, 일반적인 테스팅 프레임워크를 적용해서 작은 단위로 테스트를 작성해야 단순하고 쉽게 접근할 수 있기 때문에 개별 모듈별로 먼저 단위 테스트를 시도해 보는 것을 권장한다.</li>\\n<li><strong>UI를 테스트할 때는 다른 테스팅 기법과 도구들이 잘 맞을 수도 있다.</strong> 하지만 UI 테스트나 일반 테스트 모두 공통적으로 테스트를 <strong>어떻게든</strong> 만들기 위해 노력하고, 테스트 기법 및 테스트에 맞게 자신의 코드를 생각해야 한다.</li>\\n<li><strong>테스트 커버리지는 모듈 단위로, 단언은 세세하게.</strong> 테스트하고자 하는 모듈의 테스트 골격을 먼저 잡아 놓으면, 이를 기반으로 더 세세한 고려 사항을 쉽게 떠올릴 수 있다. 처음부터 모든 경우를 명확하게 나열할 수 있다면 좋지만 현실적으로 변경 사항이나 버그가 나올 때마다 추가하며 더욱 명확해지도록 만드는 것이 좋다.</li>\\n</ol>\\n<p>TDD 가 좋은 개발 방법론 중 하나라는 것은 초짜인 저도 많이 들었던 내용이지만, 매번 테스트 한줄이라도 작성하려 하면 너무 어렵게 느껴지고 여러 가지 핑계로 제대로 도입을 하지 못하고 있었습니다. 이번에 접한 조언을 계기로 테스트 작성에 더 익숙해지면서 더 좋은 코드를 작성하고 싶습니다.</p>\\n<p>자바스크립트 기본적인 문법에 익숙하신 분이라면 <a href=\\\"https://github.com/dwyl/learn-tdd\\\">이 글</a>과 함께 TDD를 도전해보셔도 괜찮아 보입니다.</p>\",\"id\":\"/home/circleci/repo/src/pages/posts/2017-11-04-tdd-practice-tips/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-11-04\",\"path\":\"/posts/tdd-practice-tips\",\"title\":\"TDD(Test Driven Development) 를 연습하면서 참고하기 좋은 팁 10가지\",\"tags\":[\"TDD\",\"Testing\"],\"category\":\"TDD\"}},{\"excerpt\":\"이 번역글은  Justin Weiss의 포스팅 을 번역한 글입니다 오류 지적 및 피드백은 언제나 환영합니다. 댓글이나 메일로 알려주세요 당신은 자신이 만든 앱을 보고 매우 흥분한 상태이다. 한가지 문제가 있다는 점만 빼고 - 테스트를 전혀 작성하지 않았다는 점 말이다. 당신은 TDD(Test-Driven Development…\",\"html\":\"<ul>\\n<li><strong>이 번역글은 <a href=\\\"http://www.justinweiss.com/articles/how-do-you-take-an-app-from-test-less-to-tdd/\\\">Justin Weiss의 포스팅</a>을 번역한 글입니다</strong></li>\\n<li><strong>오류 지적 및 피드백은 언제나 환영합니다. 댓글이나 메일로 알려주세요</strong></li>\\n</ul>\\n<hr>\\n<p>당신은 자신이 만든 앱을 보고 매우 흥분한 상태이다. 한가지 문제가 있다는 점만 빼고 - 테스트를 전혀 작성하지 않았다는 점 말이다. 당신은 TDD(Test-Driven Development) 방법론을 적용하여 코드를 쓰고 싶었지만, 어디부터 시작해야 할지 전혀 몰라서 막혀버렸다. 어디부터 시작해야 할 것인가? <strong>어떻게 하면 테스트가 없는 앱을 가지고 TDD를 이용한 앱을 작성할 수 있을까?</strong></p>\\n<h2 id=\\\"이미-작성한-코드를-테스트하라\\\"><a href=\\\"#%EC%9D%B4%EB%AF%B8-%EC%9E%91%EC%84%B1%ED%95%9C-%EC%BD%94%EB%93%9C%EB%A5%BC-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EB%9D%BC\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>이미 작성한 코드를 테스트하라</h2>\\n<p>당신은 테스트가 없는 코드 뭉치를 가지고 있다. 그렇다고 <em>당장</em> 기존의 코드를 가지고 테스트를 작성할 수 없다는 뜻은 아니다. 이미 가지고 있는 코드를 테스트하는 것 부터 시작해보라. 기대하던대로 코드가 작동하는지 확인해보는 것이다.</p>\\n<p>이건 TDD가 아니다. <strong>그러나 이미 존재하는 코드를 테스팅하는 것은 TDD를 배우는데 도움을 줄 것이다.</strong></p>\\n<ul>\\n<li>\\n<p><strong>예외적인 경우나 에러가 발생하는 조건에 대해 생각하는 연습을 하게 된다</strong></p>\\n<p>모든 가능한 입력을 테스트하느라 수 년을 허비하지 않고 테스트를 작성하기 위해서, 당신은 보통 코드의 어느 부분에서 문제가 발생하는지 생각해야 한다. 만약 문자열을 받는 메서드를 테스트한다고 할 때, 대신 심볼을 넣으면 어떤 일이 생길 것인가?  <code class=\\\"language-text\\\">nil</code> 을 넣는다면? 혹은 숫자를 나누는 함수를 테스트한다면, 0을 입력하는 경우에 대한 테스트를 하는 것이 좋다. 하지만 아마 1과 2를 테스트 할 필요는 없을 것이다.</p>\\n<p>당신은 충분한 테스트를 작성한 뒤에 메서드의 어느 부분에서 문제가 발생할지 예측하기 시작할 것이다. 그리고 한번 TDD를 시작하면 이 기술을 이용하여 탄탄한 테스트를 작성할 수 있을 것이다. 이 테스트들은 예외 사항들을 더욱 잘 처리하도록 코드를 강제하는 역할을 한다. </p>\\n</li>\\n<li>\\n<p><strong>짜임새있는 테스트를 작성하는 연습을 하게 된다</strong></p>\\n<p>이미 작성한 코드에 대한 테스트를 작성한다면, 이 테스트들을 <a href=\\\"https://www.justinweiss.com/articles/writing-better-tests-with-the-three-phase-pattern//\\\">구조화하는 다른 패턴들</a>을 시도해볼 수도 있다. 테스트하고자 하는 코드는 이미 있다. 그러니 당신은 테스트 자체, 그리고 이 테스트가 어떤 식으로 작성되어야 하는지에 대해 집중할 수 있다. 그리고 한번 몇몇 좋은 패턴들을 익히고 나면 당신이 기댈 코드가 <em>없을</em> 때에도 더 좋은 테스트를 작성할 것이다.</p>\\n</li>\\n<li>\\n<p><strong>코드를 테스트하기 힘들게 하는 요소들을 발견하게 된다</strong></p>\\n<p>테스트들을 작성할 수록 점점 시스템 어느 부분이 테스트하기 제일 어려운지 느끼게 될 것이다. 그런 부분들을 알아차리게 되면 그 부분을 리팩터링이 필요한 부분이라고 표시해둘 수 있다. 더 나아가 처음부터 더욱 테스트하기 좋은 코드를 작성하기 시작할 것이다.</p>\\n<p>테스트하기 좋은 코드가 어떤 식으로 생겼는지 알기 시작하면, 그 지식을 기반으로 TDD하기 쉬운 API를 개발할 수 있으며 더욱 빨리 앱을 개발할 수 있을 것이다.</p>\\n</li>\\n</ul>\\n<h2 id=\\\"tdd에-익숙해지기ease-into-tdd\\\"><a href=\\\"#tdd%EC%97%90-%EC%9D%B5%EC%88%99%ED%95%B4%EC%A7%80%EA%B8%B0ease-into-tdd\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>TDD에 익숙해지기(Ease into TDD)</h2>\\n<p>'테스트를 나중에' 기법을 TDD를 배우는데 도움이 되는 기술로 사용할 수 있다. 하지만 여전히 당신 앱의 일부에 TDD를 적용하고 싶을 것이다.<em>(역주: 테스트를 먼저 작성하고 기능을 개발하는 것을 의미하는 것이라 추정합니다)</em> <strong>그리고 기존의 코드를 가지고 TDD에 익숙해지는 간단한 방법이 있다: <a href=\\\"https://ko.wikipedia.org/wiki/%ED%9A%8C%EA%B7%80_%ED%85%8C%EC%8A%A4%ED%8A%B8\\\">회귀 테스트를 작성하는 것이다</a></strong></p>\\n<p>회귀 테스트는 이미 확정한 코드를 부수는 것을 억누른다. 아이디어 자체는 아주 간단하다. 당신이 버그를 발견할 때마다, 그 버그를 다시 만들어보기 위해 브라우저에서 여기저기 클릭해보는 대신에:</p>\\n<ul>\\n<li>버그를 재생성하기 위해 <strong>실패하는 테스트를 작성하라.</strong></li>\\n<li><strong>테스트를 실행하라,</strong> 그리고 그 테스트가 확실히 실패하는지 확인하라 (왜냐면 버그는 아직 존재하니까).</li>\\n<li>가능한한 가장 간단한 방법으로 <strong>버그를 수정하라.</strong></li>\\n<li><strong>테스트를 실행하라,</strong> 그리고 테스트가 통과하는지 확인하라.</li>\\n<li>만약 필요하다면 당신이 수정한 방법을 <strong>리팩터링하라.</strong></li>\\n</ul>\\n<p>이 방법은 새 시스템을 밑바닥부터 TDD로 개발하는 것 보단 훨씬 쉽다. 왜냐면 이미 작성된 코드를 단지 테스트 주도적으로 바꾸기만 하는 것이기 때문이다. 그리고 \\\"Red, Green, Refactor\\\" 라는 TDD의 핵심적인 루프를 습관화하게 된다. <strong>그리고 이쯤부터 당신의 TDD는 테스트가 없는 상태에서 바로 TDD로 개발하는 것에 가까워지게 된다.(And from here, TDD is a shorter step away than trying to go straight to TDD from no tests.)</strong></p>\\n<h2 id=\\\"테스트가-없는-상태에서-tdd로\\\"><a href=\\\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EA%B0%80-%EC%97%86%EB%8A%94-%EC%83%81%ED%83%9C%EC%97%90%EC%84%9C-tdd%EB%A1%9C\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>테스트가 없는 상태에서 TDD로</h2>\\n<p>테스트가 없는 앱은 그렇게 나쁜 출발점은 아니다. 이미 작성된 코드를 테스트할 때, 당신은 좋은 TDD 테스트를 작성하기 위해 무엇이 필요한지 많이 배우게 될 것이다. '테스트를 나중에' 하는 것은 시작부터 TDD로 개발하는 것 보다 쉽다. 왜냐면 아직 어떻게 디자인해야할지 모르는 API들을 상상할 필요가 없기 때문이다. 그리고 자신의 앱에 한번 TDD를 도입하기로 결정했다면 회귀 테스트를 통해 익숙해질 수 있다.</p>\\n<p>그러니 만약 당신이 상상하고 있는 시스템에 TDD를 어떻게 도입해야 할 지 모르겠다면, 계속 테스트를 작성하라. 비록 코드를 먼저 써야 하더라도 말이다.</p>\\n<hr>\\n<h2 id=\\\"번역-후기\\\"><a href=\\\"#%EB%B2%88%EC%97%AD-%ED%9B%84%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>번역 후기</h2>\\n<p>2017년 첫 번역은 TDD에 관한 글입니다. TDD 혹은 BDD(Behavior Driven Development)가 개발 방법론에 있어서 절대적인 진리는 아닐 겁니다. 다만 많이 권장되는데는 이유가 있겠지요. 저는 간단하게 TDD가 확장성, 유지보수성에 큰 도움이 된다고 인지하고 있습니다.</p>\\n<p>제 자신도 아직 실력이 미천하여 코드 없이 테스트를 작성한다는 것에 큰 두려움을 느끼면서 지내왔습니다. 최근에야 일부 기능에 대해 예측되는 결과를 먼저 테스트로 작성하고, 이후에 실제 기능을 작성하여 잘 작동하는지 확인하는 수준에 불과합니다.</p>\\n<p>그러다가 마침 기존에 작성한 코드를 이용하여 TDD를 배워나가는 과정에 대해 간단한 포스팅이 있어 이렇게 소개를 하게 되었습니다. 음.. 당장은 기존의 코드를 이용하여 테스트를 작성하는게 꽤 부끄럽지만 (왜냐면 테스트를 작성할 것도 없이 손대야 할 부분들이 수두룩하게 보이니까요) 이런 방식으로 약간 우회하여 TDD를 습득하는 방법도 있겠지요. </p>\\n<p>그럼 모두 2017년 한해에도 좋은 테스트 + 테스트를 통과하는 좋은 코드 작성이 잘 되시길 바랍니다 :)</p>\\n<p>(추가) 피드백에 의해 'You' 라는 단어의 직역이 너무 많이 들어간 것 같아 조금 수정하였습니다. 확실히 번역할 때 '당신' 이라는 단어가 일일이 들어갈 필요는 없겠네요. 좋은 피드백을 주신 <a href=\\\"https://twitter.com/initnirvana\\\">@initNirvana</a> 님께 감사드립니다.</p>\",\"id\":\"/home/circleci/repo/src/pages/posts/2017-01-16-how-do-you-take-an-app-from-no-tests-to-tdd-kor/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-01-16\",\"path\":\"/posts/how-do-you-take-an-app-from-no-tests-to-tdd-kor\",\"title\":\"[번역] 테스트가 없는 앱을 이용하여 TDD를 배우는 방법\",\"tags\":[\"Ruby\",\"Testing\",\"Translation\"],\"category\":\"Translation\"}},{\"excerpt\":\"본 포스트는  Luca Guidi의 포스팅을  번역한 글입니다 문제를 설명하는데 나온 하나미(Hanami…\",\"html\":\"<ul>\\n<li><strong>본 포스트는 <a href=\\\"https://lucaguidi.com/2016/12/27/isolate-global-state.html\\\">Luca Guidi의 포스팅을</a> 번역한 글입니다</strong></li>\\n<li><strong>문제를 설명하는데 나온 하나미(Hanami)에 대해서는 <a href=\\\"https://emaren84.github.io/blog/archivers/hanami-introduction\\\">이 포스팅</a>을 참조해주세요</strong></li>\\n<li><strong>전문 번역이 아니기에 부족한 표현이나 오역은 언제든지 지적해주세요</strong></li>\\n</ul>\\n<hr>\\n<p>소프트웨어 프로그램에서 전역 상태를 사용하는건 개발하기엔 쉽지만 유지보수 할 때는 악몽이 된다. 예상치 못한 상황에서 발생하여 추적하기도 어려운 버그가 되기 쉽상이다.</p>\\n<p>왜 그렇게 되는지, 그리고 어떻게 그 문제를 완화할 수 있을지 살펴보자.</p>\\n<p><em>역주: 이 글에서 전역 상태는 전역 변수와 거의 동일한 의미로 사용되는 것으로 추정됩니다.</em></p>\\n<h2 id=\\\"문제의-예시\\\"><a href=\\\"#%EB%AC%B8%EC%A0%9C%EC%9D%98-%EC%98%88%EC%8B%9C\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>문제의 예시</h2>\\n<p>예를 들자면 하나미의 코드 베이스 안에서 우리는 환경 변수에 따라 어떻게 프레임워크가 설정되는지 테스트 할 필요가 있다.</p>\\n<p>우리<em>(역주: 하나미 개발팀으로 보입니다)</em>는 보통 테스트를 이런 식으로 작성한다:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code class=\\\"language-ruby\\\"><span class=\\\"token constant\\\">RSpec</span><span class=\\\"token punctuation\\\">.</span>describe <span class=\\\"token constant\\\">Hanami</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token constant\\\">Environment</span> <span class=\\\"token keyword\\\">do</span>\\n  before <span class=\\\"token keyword\\\">do</span>\\n    <span class=\\\"token constant\\\">ENV</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'HANAMI_ENV'</span><span class=\\\"token punctuation\\\">]</span>  <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">nil</span>\\n    <span class=\\\"token constant\\\">ENV</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'RACK_ENV'</span><span class=\\\"token punctuation\\\">]</span>    <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">nil</span>\\n    <span class=\\\"token constant\\\">ENV</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'HANAMI_HOST'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">nil</span>\\n    <span class=\\\"token constant\\\">ENV</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'HANAMI_PORT'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">nil</span>\\n\\n    <span class=\\\"token comment\\\"># ...</span>\\n  <span class=\\\"token keyword\\\">end</span>\\n\\n  context <span class=\\\"token string\\\">\\\"when HANAMI_ENV is set\\\"</span> <span class=\\\"token keyword\\\">do</span>\\n    before <span class=\\\"token keyword\\\">do</span>\\n      <span class=\\\"token constant\\\">ENV</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'HANAMI_ENV'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'production'</span>\\n      <span class=\\\"token variable\\\">@env</span> <span class=\\\"token operator\\\">=</span> described_class<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">new</span>\\n    <span class=\\\"token class-name\\\">end</span>\\n\\n    <span class=\\\"token comment\\\"># ...</span>\\n  <span class=\\\"token keyword\\\">end</span>\\n<span class=\\\"token keyword\\\">end</span></code></pre>\\n      </div>\\n<p>우리는 보통 각각의 테스트를 실행하기 전에 모든 환경 변수를 초기화해왔다. 그리고 우리가 필요로 하는 특별한 상황(the edge case)에서만 하나씩 설정했다.</p>\\n<p>이러한 접근 방식을 사용할 때의 <strong>문제는</strong> 이 방법이 루비 프로세스의 전역 상태를 <strong>더럽힌다는</strong> 것이다. 우리가 테스트 파일을 단독으로 실행할 때는  <code class=\\\"language-text\\\">before</code> 블록이 환경 변수를 리셋하기 때문에 잘 작동한다.</p>\\n<p>그러나 모든 테스트를 한번에 실행할 때, 테스트는 꼬이게 될 것이다. 환경 변수 초기화가 언제나 작동하진 않기 때문이다.</p>\\n<p>만약 한 테스트가 <code class=\\\"language-text\\\">ENV</code> 속성을 변환하고 나서 뒷정리를 하지 않으면, 그 다음 테스트는 기존의 <code class=\\\"language-text\\\">ENV</code> 값의 변화를 <strong>물려받아서</strong> 우리가 기대하던대로 작동하지 않을 수 있다.</p>\\n<p>때때로 위의 예시 처럼 눈에 띄는 부분에서 변화를 준 경우에는 우리가 <code class=\\\"language-text\\\">after</code> 블록을 설정하여 뒷정리를 할 수 있다. 그러나 다른 때엔 변환한 것(the mutation)이 우리 눈에 보이지 않는 부분에서 부작용을 초래할 수 있다.</p>\\n<p>이건 소스의 버그다. 그리고 이 버그는 엉킨 실타래처럼 되어 디버그하기 힘들다.</p>\\n<p><strong>오랜 시간동안, 여러 가지 전역 상태의 조합하는 것은 하나미를 지속적 통합 개발(<a href=\\\"https://ko.wikipedia.org/wiki/%EC%A7%80%EC%86%8D%EC%A0%81_%ED%86%B5%ED%95%A9\\\">CI builds</a>)이 힘들도록 만들고 여러 버그를 일으켰다.</strong></p>\\n<p>개발자로서의 내 경험으로 미루어보아(<em>역주: Luca Guidi는 숙련된 웹 개발자입니다</em>) 이런 형태의 문제를 완화할 수 있는 유일한 방법은 <strong>전역 상태를 격리하거나, 전역 상태를 사용하는 것을 아예 피하는 것이다.</strong> 우리는 <strong>가능한한 전역 상태를 사용하는 것을 줄이도록</strong> 하나미의 내부 구현을 바꾸고 있다.</p>\\n<h2 id=\\\"문제의-해법\\\"><a href=\\\"#%EB%AC%B8%EC%A0%9C%EC%9D%98-%ED%95%B4%EB%B2%95\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>문제의 해법</h2>\\n<p>앞서 이야기한 특별한 경우를 위해 우리는 환경 변수를 격리할 수 있는 새로운 객체를 선보였다. 이는 <code class=\\\"language-text\\\">Hanami::Env</code> 라고 불린다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code class=\\\"language-ruby\\\"><span class=\\\"token keyword\\\">module</span> <span class=\\\"token constant\\\">Hanami</span>\\n  <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Env</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">initialize</span><span class=\\\"token punctuation\\\">(</span>env<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token constant\\\">ENV</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token variable\\\">@env</span> <span class=\\\"token operator\\\">=</span> env\\n    <span class=\\\"token keyword\\\">end</span>\\n\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token variable\\\">@env</span><span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token keyword\\\">end</span>\\n\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token variable\\\">@env</span><span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> value\\n    <span class=\\\"token keyword\\\">end</span>\\n\\n    <span class=\\\"token comment\\\"># ...</span>\\n  <span class=\\\"token keyword\\\">end</span>\\n<span class=\\\"token keyword\\\">end</span></code></pre>\\n      </div>\\n<p>구현 자체는 별 것 아니다: <code class=\\\"language-text\\\">ENV</code> 에 접근하는 것을 캡슐화하는 것이다.</p>\\n<p>우리는 환경 변수를 관리하기 위해 자체 인터페이스를 정의했다. 우리는 명시적인 구현(concrete implementation)을 사용하기보다(<code class=\\\"language-text\\\">ENV</code>) 추상화(<code class=\\\"language-text\\\">Hanami::Env</code>)에 의존하고 있다(<a href=\\\"https://ko.wikipedia.org/wiki/%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84_%EC%97%AD%EC%A0%84_%EC%9B%90%EC%B9%99\\\">의존관계 역전 원칙 참고</a>). </p>\\n<p><code class=\\\"language-text\\\">Hanami::Environment</code> 는 프로젝트의 환경 변수를 설정하는 책임을 가지고 있는데, 우리는 이런 방식으로 사용한다:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code class=\\\"language-ruby\\\"><span class=\\\"token keyword\\\">module</span> <span class=\\\"token constant\\\">Hanami</span>\\n  <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Environment</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">initialize</span><span class=\\\"token punctuation\\\">(</span>options<span class=\\\"token punctuation\\\">)</span>\\n      opts <span class=\\\"token operator\\\">=</span> options<span class=\\\"token punctuation\\\">.</span>to_h<span class=\\\"token punctuation\\\">.</span>dup\\n      <span class=\\\"token variable\\\">@env</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">Hanami</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token constant\\\">Env</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">new</span><span class=\\\"token punctuation\\\">(</span>env<span class=\\\"token punctuation\\\">:</span> opts<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">delete</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token symbol\\\">:env</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token constant\\\">ENV</span><span class=\\\"token punctuation\\\">)</span>\\n\\n      <span class=\\\"token comment\\\"># ...</span>\\n    <span class=\\\"token keyword\\\">end</span>\\n  <span class=\\\"token keyword\\\">end</span>\\n<span class=\\\"token keyword\\\">end</span></code></pre>\\n      </div>\\n<p>우리가 하나미 프로젝트를 사용할 때, <code class=\\\"language-text\\\">:env</code> 옵션은 설정되지 않은 상태이다. 이로 인해 <code class=\\\"language-text\\\">@env</code> 는 <code class=\\\"language-text\\\">ENV</code> 를 참조하여 루비 프로세스의 진짜 환경 변수를 읽거나 쓰게 된다.</p>\\n<p>이렇게 우리는 <code class=\\\"language-text\\\">Hanami::Environment</code> 의 테스트 중에 많은 양의 코드를 단순화하고, <strong>공유되고 변화 가능한 상태(shared mutable state, 즉 <code class=\\\"language-text\\\">ENV</code> 말이다)의 사용을 피할 수 있었다.</strong> 아래 코드에서 우리는 <code class=\\\"language-text\\\">ENV</code> 와 유사하게 동작하는 <code class=\\\"language-text\\\">:env</code> 를 객체의 옵션으로 전달하지만, 이 것은 실제로 <code class=\\\"language-text\\\">ENV</code>가 아니다: 그냥 <code class=\\\"language-text\\\">Hash</code> 이다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code class=\\\"language-ruby\\\"><span class=\\\"token constant\\\">RSpec</span><span class=\\\"token punctuation\\\">.</span>describe <span class=\\\"token constant\\\">Hanami</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token constant\\\">Environment</span> <span class=\\\"token keyword\\\">do</span>\\n  context <span class=\\\"token string\\\">\\\"when HANAMI_ENV is set\\\"</span> <span class=\\\"token keyword\\\">do</span>\\n    <span class=\\\"token function\\\">let</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token symbol\\\">:env</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token builtin\\\">Hash</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"HANAMI_ENV\\\"</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token string\\\">\\\"production\\\"</span><span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    it <span class=\\\"token string\\\">\\\"tests something interesting\\\"</span>\\n      <span class=\\\"token variable\\\">@env</span> <span class=\\\"token operator\\\">=</span> described_class<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">new</span><span class=\\\"token punctuation\\\">(</span>env<span class=\\\"token punctuation\\\">:</span> env<span class=\\\"token punctuation\\\">)</span>  \\n    <span class=\\\"token keyword\\\">end</span>\\n\\n    <span class=\\\"token comment\\\"># ...</span>\\n  <span class=\\\"token keyword\\\">end</span>\\n<span class=\\\"token keyword\\\">end</span></code></pre>\\n      </div>\\n<h2 id=\\\"결론\\\"><a href=\\\"#%EA%B2%B0%EB%A1%A0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>결론</h2>\\n<p><a href=\\\"https://ko.wikipedia.org/wiki/%EC%BA%A1%EC%8A%90%ED%99%94\\\">캡슐화</a>와 <a href=\\\"http://solnic.eu/2013/12/17/the-world-needs-another-post-about-dependency-injection-in-ruby.html\\\">의존성 주입</a>을 적절하게 사용하여, 각각의 테스트에서 발생할 수 있는 변화는 나머지 테스트에서는 보이지 않게 되었다. 결과적으로 안정적인 테스트 수행을 할 수 있게 되었고, 하나미 내부를 <a href=\\\"https://ko.wikipedia.org/wiki/SOLID\\\">SOLID 디자인</a>에 맞게 구성할 수 있었다. </p>\\n<hr>\\n<h2 id=\\\"번역-후기\\\"><a href=\\\"#%EB%B2%88%EC%97%AD-%ED%9B%84%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>번역 후기</h2>\\n<p>보통 루비 프로젝트에서 <code class=\\\"language-text\\\">dotenv</code> 같은 젬으로 환경 변수를 관리합니다. 사실 이 환경 변수라는 개념도 저에게 아직 모호한 개념이지만, 객체지향 프로그래밍의 핵심적인 주제인 캡슐화와 의존성 주입을 어떤 식으로 활용하는지 좋은 예를 보여준 것 같아 한번 번역해보게 되었습니다.</p>\\n<p>특히 제가 요즘에야 테스트를 작성해보기 시작했는데, 테스트를 개별로 실행할 때는 몰라도 전체 테스트를 실행할 때 원인을 알 수 없는 오류가 생길 때가 종종 있었습니다. 이 글을 통해 약간의 힌트를 얻었다는 생각도 듭니다. </p>\",\"id\":\"/home/circleci/repo/src/pages/posts/2016-12-30-isolate-global-state-kor/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2016-12-30\",\"path\":\"/posts/isolate-global-state-kor\",\"title\":\"[번역] 전역 상태를 격리하라\",\"tags\":[\"Ruby\",\"Hanami\",\"Testing\",\"Translation\"],\"category\":\"Translation\"}}],\"tagName\":\"Testing\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tags-testing-343794e4b3fdec4f9b89.js","module.exports = {\"pathContext\":{\"postsByTag\":[{\"excerpt\":\"본 튜토리얼은  Robin Wieruch 님의  React Testing Tutorial…\",\"html\":\"<p>본 튜토리얼은 <a href=\\\"https://www.robinwieruch.de/about/\\\">Robin Wieruch</a>님의 <a href=\\\"https://www.robinwieruch.de/react-testing-tutorial/\\\">React Testing Tutorial</a> 을 한글로 번역한 것입니다. 번역과 관련된 의견 및 토론은 <a href=\\\"https://github.com/adhrinae/react-testing-tutorial-kr\\\">번역 저장소</a>에 이슈로 남겨주세요.</p>\\n<hr>\\n<p>탄탄한 애플리케이션을 만들기 위해 테스트를 작성하는 것은 소프트웨어 개발을 하면서 아주 중요한 부분입니다. 테스트는 애플리케이션이 어느 정도 확실한 수준까지 동작하고 있는지 자동으로 확인할 수 있는 도구가 됩니다.  그 수준은 질과 양, (커버리지) 그리고 테스트의 종류(단위 테스트, 통합 테스트, E2E 테스트)에 따라 결정됩니다. -- <strong>역주: 앞으로는 E2E(End-to-End) 테스트를 전체 테스트라고 명명하겠습니다. 더 적절한 표현에 관한 의견은 댓글로 남겨주세요.</strong></p>\\n<p>이 글은 <strong>리액트 앱을 테스팅하는데 필요한 모든 주제를 다루고자 합니다.</strong> 여러분은 주로 순수한 비지니스 로직을 다룬 리액트 컴포넌트를 테스트하는 법을 익히게 됩니다. 그리고 다양한 테스팅 라이브러리나 프레임워크를 선보이고 있으므로 각기 다른 경우에 맞추어 사용하시면 됩니다. 리액트 애플리케이션을 위한 테스트 설정 및 작성 방법을 익히게 되며, Mocha, Chai, Sinon, Enzyme, Jest를 테스트 도구로 사용하게 됩니다.</p>\\n<p>만약 <a href=\\\"https://github.com/facebook/create-react-app\\\">create-react-app</a> 기반으로 구성된 애플리케이션을 만들고 계시다면 대부분의 설정에 관한 내용은 넘어가셔도 됩니다. create-react-app 애플리케이션에 기본 테스트 도구로 Jest가 포함되어 있습니다. 여기에 수동으로 Sinon이나 Enzyme을 추가할 수도 있습니다.</p>\\n<p>그렇지 않다면 <a href=\\\"https://www.robinwieruch.de/minimal-react-webpack-babel-setup/\\\">링크를 클릭하여 간단한 리액트 + 웹팩 애플리케이션 설정</a> 을 참고하여 프로젝트를 만드시길 권합니다. 링크 글을 따라 설정이 완료되면 튜토리얼을 따라 테스트 환경을 구축할 수 있습니다.</p>\\n<p>미리 말씀드린대로 이 글은 <strong>리액트 애플리케이션에 각기 다른 테스트 라이브러리를 어떻게 설정하고 적용하는지</strong> 보여드립니다. 대략적으로 <a href=\\\"https://www.google.com/search?q=testing+pyramid\\\">테스팅 피라미드</a> 를 따라가게 될 겁니다. 여기서 테스팅 피라미드를 따라간다는 것은 대부분은 단위 테스트를 작성하고, 이어서 어느 정도의 통합 테스트를 작성한 뒤에 몇 가지 전체 테스트를 작성한다는 뜻입니다. 하지만 리액트 애플리케이션은 주로 함수를 사용하기보다 컴포넌트를 사용하기 때문에 테스트할 때 다른 접근 방식이 있습니다. <a href=\\\"https://adhrinae.github.io/posts/write-mostly-integration-test-kr\\\">\\\"통합 테스트를 주로 작성하고 단위 테스트는 그리 많이 작성하지 않는\\\"</a> 전략입니다. 이 방법은 튜토리얼 뒤에서 다시 설명하겠습니다.</p>\\n<p><strong>대체 단위, 통합, 전체 테스트가 뭘까요?</strong> 일반적으로 단위 테스트란 애플리케이션 일부(주로 컴포넌트)를 독립적으로 테스트하는 것이고, 통합 테스트란 서로 다른 부분(각기 다른 컴포넌트들)이 모여 특정 상황에서 잘 엮여서 작동하는지 확인하는 것입니다. 통합 테스트의 예로 특정 컴포넌트의 모든 필수 속성값(Props)이 자손 컴포넌트에 제대로 전달되었는지 확인하는 경우가 있습니다. 마지막이자 중요한 전체 테스트는 애플리케이션을 브라우저 환경에서 테스트하는 것입니다. 이메일 주소를 넣고 비밀번호를 입력한 뒤에 백엔드 서버로 Form을 제출하는 <a href=\\\"https://www.robinwieruch.de/complete-firebase-authentication-react-tutorial/\\\">회원 가입 과정</a> 전체를 흉내내볼 수도 있습니다.</p>\\n<p>이 튜토리얼의 또 다른 목표는 여러분들에게 너무 복잡하지도 않으면서 전반적으로 적용할 수 있는 몇 가지 <strong>일반적인 테스트 패턴과 모범 사례</strong>를 알려드리는 것입니다. 매번 테스트 자체를 어떻게 작성해야 하는지 고민하지 않고 리액트 컴포넌트를 효율적으로 테스트 하는데 도움이 될 겁니다. 따라서 대부분의 테스트는 컴포넌트 전반에 걸쳐 적용할 수 있는 공통 패턴을 따릅니다. 이러한 테스트 패턴은 <a href=\\\"https://en.wikipedia.org/wiki/Test-driven_development\\\">TDD(테스트 주도 개발)</a> 방법을 적용하게 되면 더욱 흥미로워집니다. 테스트를 먼저 작성하고 컴포넌트를 그 뒤에 작성하게 되지요. 결과적으로 이 가이드가 리액트 테스트의 몇가지 모범 사례를 제시해주고, 리액트 테스트 프레임워크의 생태계를 이해하며 각각의 도구를 어떻게 설정하고 사용하는지 알려드리고자 합니다.</p>\\n<p>예제 코드는 <a href=\\\"https://github.com/rwieruch/react-components-test-setup\\\">Github 저장소</a> 에서 확인하실 수 있습니다.</p>\\n<hr>\\n<!-- TOC -->\\n<ul>\\n<li><a href=\\\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%9C%84%ED%95%9C-%EA%B0%84%EB%8B%A8%ED%95%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\\\">테스트를 위한 간단한 리액트 애플리케이션 설정하기</a></li>\\n<li><a href=\\\"#%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%97%90%EC%84%9C-mocha%EC%99%80-chai-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\\\">리액트에서 Mocha와 Chai 테스트 설정하기</a></li>\\n<li><a href=\\\"#%EB%A6%AC%EC%95%A1%ED%8A%B8-state-%EB%B3%80%EA%B2%BD%EC%9D%84-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0\\\">리액트 State 변경을 단위 테스트하기</a></li>\\n<li><a href=\\\"#%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%97%90-enzyme-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\\\">리액트에 Enzyme 테스트 설정하기</a></li>\\n<li><a href=\\\"#enzyme%EC%9C%BC%EB%A1%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0---%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A5%BC-%EB%8B%A8%EC%9C%84-%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\\\">Enzyme으로 리액트 테스트하기 - 리액트 컴포넌트를 단위, 통합 테스트하는 방법</a></li>\\n<li><a href=\\\"#%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%97%90%EC%84%9C-sinon-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\\\">리액트에서 Sinon 테스트 설정하기</a></li>\\n<li><a href=\\\"#sinon%EC%9C%BC%EB%A1%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0---%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%BD%94%EB%93%9C%EB%A5%BC-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\\\">Sinon으로 리액트 테스트하기 - 비동기 코드를 테스트하는 방법</a></li>\\n<li><a href=\\\"#%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%97%90%EC%84%9C-jest-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\\\">리액트에서 Jest 설정하기</a></li>\\n<li><a href=\\\"#jest%EB%A1%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0---%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%8A%A4%EB%83%85%EC%83%B7-%ED%85%8C%EC%8A%A4%ED%8A%B8\\\">Jest로 리액트 테스트하기 - 컴포넌트 스냅샷 테스트</a></li>\\n<li><a href=\\\"#cypressio%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%A0%84%EC%B2%B4-%ED%85%8C%EC%8A%A4%ED%8A%B8\\\">Cypress.io를 활용한 리액트 전체 테스트</a></li>\\n<li><a href=\\\"#%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%99%80-cicontinuous-integration\\\">리액트 컴포넌트 테스트와 CI(Continuous Integration)</a></li>\\n<li><a href=\\\"#coveralls%EB%A1%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BB%A4%EB%B2%84%EB%A6%AC%EC%A7%80-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0\\\">Coveralls로 리액트 컴포넌트의 테스트 커버리지 확인하기</a></li>\\n<li><a href=\\\"#%EB%A7%88%EC%B9%98%EB%A9%B0\\\">마치며</a></li>\\n<li><a href=\\\"#%EB%B2%88%EC%97%AD-%ED%9B%84%EA%B8%B0\\\">번역 후기</a></li>\\n</ul>\\n<!-- /TOC -->\\n<hr>\\n<h2 id=\\\"테스트를-위한-간단한-리액트-애플리케이션-설정하기\\\"><a href=\\\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%9C%84%ED%95%9C-%EA%B0%84%EB%8B%A8%ED%95%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>테스트를 위한 간단한 리액트 애플리케이션 설정하기</h2>\\n<p>테스트를 설정해서 다양한 라이브러리를 사용해보고 리액트 컴포넌트 테스트를 작성하기 위해, 먼저 테스트가 실행 될 간단한 리액트 애플리케이션이 필요합니다. 일단 기본이 되는 <code class=\\\"language-text\\\">App</code> 컴포넌트를 만들어 보겠습니다. 만약 아래의 과정이 너무 어렵게 느껴진다면, 테스트를 익히시기에 앞서 <a href=\\\"https://github.com/sujinleeme/the-road-to-learn-react-korean\\\">리액트 도움닫기</a> 를 보시고 리액트 자체를 배우셔야 합니다.</p>\\n<p>그럼 <code class=\\\"language-text\\\">src/index.js</code> 파일부터 시작해보겠습니다. 아직 <code class=\\\"language-text\\\">App</code> 컴포넌트는 구현되지 않았지만 불러와서(import) render 함수를 실행해두겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> ReactDOM <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> App <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./App'</span><span class=\\\"token punctuation\\\">;</span>\\n\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>App</span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'app'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>App 컴포넌트는 자신의 고유 상태를 가지고 있는 ES6 클래스입니다. 그리고 더하기 버튼과 빼기 버튼을 누를때마다 숫자를 하나씩 더하거나 빼는게 가능하지요. <code class=\\\"language-text\\\">src/App.js</code> 파일에 작성합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">import</span> React<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> Component <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">App</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n      counter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onIncrement <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onIncrement<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onDecrement <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onDecrement<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">onIncrement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>prevState<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      counter<span class=\\\"token punctuation\\\">:</span> prevState<span class=\\\"token punctuation\\\">.</span>counter <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">onDecrement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>prevState<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      counter<span class=\\\"token punctuation\\\">:</span> prevState<span class=\\\"token punctuation\\\">.</span>counter <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> counter <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span>My Counter<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">{</span>counter<span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span>\\n          <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>button<span class=\\\"token punctuation\\\">\\\"</span></span>\\n          <span class=\\\"token attr-name\\\">onClick</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onIncrement<span class=\\\"token punctuation\\\">}</span></span>\\n        <span class=\\\"token punctuation\\\">></span></span>\\n          Increment\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span>\\n          <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>button<span class=\\\"token punctuation\\\">\\\"</span></span>\\n          <span class=\\\"token attr-name\\\">onClick</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onDecrement<span class=\\\"token punctuation\\\">}</span></span>\\n        <span class=\\\"token punctuation\\\">></span></span>\\n          Decrement\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> App<span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>여러분들에게 이 컴포넌트가 어떻게 작동하는지 전부 명료하게 보이리라 생각합니다. (만약 그렇지 않다면 아까 말씀드린대로 리액트 도움닫기 책을 먼저 읽어주세요)</p>\\n<p>하지만 사용자 경험을 반영한 애플리케이션은 아니네요. 나중애 부분적으로 분리된 부분을 테스트해보기 위해 몇 가지 기능을 추가해보겠습니다. <code class=\\\"language-text\\\">this.setState()</code>  메서드가 실제로는 비동기적으로 작동하기 때문에 <a href=\\\"https://www.robinwieruch.de/learn-react-before-using-redux/\\\">객체를 인자로 넘기는 대신에 함수를 인자로 넘기고 있습니다</a>. 이 때 객체로 인자를 넘길때에 비해 유일한 장점은 콜백 함수 안에서 현재의 상태에 접근할 수 있다는 겁니다. 이에 더해서 컴포넌트와 완전히 별개로 함수 자체를 테스트 할 수 있게 만듭니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">import</span> React<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> Component <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">doIncrement</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>prevState<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  counter<span class=\\\"token punctuation\\\">:</span> prevState<span class=\\\"token punctuation\\\">.</span>counter <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">doDecrement</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>prevState<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  counter<span class=\\\"token punctuation\\\">:</span> prevState<span class=\\\"token punctuation\\\">.</span>counter <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">App</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">onIncrement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>doIncrement<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">onDecrement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>doDecrement<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> App<span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>나중에 테스트 파일에서 이 함수들을 불러오기 위해 컴포넌트에서 내보내기(export)를 설정하겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">import</span> React<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> Component <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">doIncrement</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>prevState<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  counter<span class=\\\"token punctuation\\\">:</span> prevState<span class=\\\"token punctuation\\\">.</span>counter <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">doDecrement</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>prevState<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  counter<span class=\\\"token punctuation\\\">:</span> prevState<span class=\\\"token punctuation\\\">.</span>counter <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">App</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">//...</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> App<span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>이제 컴포넌트의 고유 상태를 변경하기 위해 사용되는 함수들이 컴포넌트와 분리되었기 때문에 별도로 테스트할 수 있게 되었습니다. 나중에 이런 개별 함수를 테스트하는 일을 단위 테스트라고 부르게 됩니다. 이 함수들을 테스트할 때는 함수에 입력값을 넣고 테스트는 기대되는 결과값을 단언(asserts)합니다. 순수 함수(입력 값에 따른 출력값이 동일하며 함수 외부의 환경에 영향을 주고받지 않는 함수)이기 때문에 부수 효과도 없습니다.</p>\\n<p>이제 우리의 애플리케이션에 자손 컴포넌트를 하나 추가해보겠습니다. 나중에 자손 컴포넌트를 활용한 통합 테스트를 하게 됩니다. 개별 컴포넌트를 각자 테스트한다면 단위 테스트를 하는 것이고 두 컴포넌트를 아우르는 환경을 테스트를 하게 되면 통합 테스트가 됩니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token comment\\\">// ...</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">App</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> counter <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span>My Counter<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Counter</span> <span class=\\\"token attr-name\\\">counter</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>counter<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span>\\n          <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>button<span class=\\\"token punctuation\\\">\\\"</span></span>\\n          <span class=\\\"token attr-name\\\">onClick</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onIncrement<span class=\\\"token punctuation\\\">}</span></span>\\n        <span class=\\\"token punctuation\\\">></span></span>\\n          Increment\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span>\\n          <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>button<span class=\\\"token punctuation\\\">\\\"</span></span>\\n          <span class=\\\"token attr-name\\\">onClick</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onDecrement<span class=\\\"token punctuation\\\">}</span></span>\\n        <span class=\\\"token punctuation\\\">></span></span>\\n          Decrement\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">Counter</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> counter <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">{</span>counter<span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> App<span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>보시다시피 컴포넌트가 잘 내보내졌습니다. 이렇게 하면 강좌 뒷부분에서 테스트 파일을 작성할 때 원하는 컴포넌트를 불러올 수 있습니다. 아무리 <code class=\\\"language-text\\\">Counter</code> 컴포넌트가 애플리케이션 전체에 걸쳐 재사용되는 일이 없다 하더라도, 테스트를 위해서 컴포넌트나 함수를 내보내는 게 좋습니다. 이제 다음 장에서 테스트를 설명하기 위한 애플리케이션 준비가 끝났습니다.</p>\\n<h2 id=\\\"리액트에서-mocha와-chai-테스트-설정하기\\\"><a href=\\\"#%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%97%90%EC%84%9C-mocha%EC%99%80-chai-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>리액트에서 Mocha와 Chai 테스트 설정하기</h2>\\n<p>이번 장에서 Mocha(모카)와 Chai(차이)로 리액트 테스트를 실행하기 위해 설정하는 법을 알려드리겠습니다. 내보내진 함수 하나를 가지고 첫 번째 단언(assertion)을 구현하고 실행해보겠습니다. 먼저 특정 프레임워크(역주: 여기서는 애플리케이션 자체를 의미한다고 봅니다) 안에 있는 모든 테스트를 실행시키는 역할을 맡는 실행기가 필요합니다. 그 실행기가 <a href=\\\"https://github.com/mochajs/mocha\\\">Mocha</a> 입니다.Mocha는 리액트 애플리케이션에 사용되는 유명한 테스트 실행기입니다. 이와 달리 또 다른 유명한 테스트 실행기인 Karma(카르마)는 앵귤러 애플리케이션을 테스트하는데 주로 사용됩니다.</p>\\n<p>커맨드 라인에서 Mocha를 개발 의존성 모듈로 설치하겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">npm install --save-dev mocha</code></pre>\\n      </div>\\n<p>그리고 단언을 작성하기 위해 사용되는 요소가 필요합니다. 누군가는 \\\"X는 Y와 같아야 한다(Expect X to be equal to Y)\\\" 라고 알려주어야 하거든요. 우리는 이번에 <a href=\\\"https://github.com/chaijs/chai\\\">Chai</a>를 사용해서 단언을 작성하겠습니다. Chai도 커맨드 라인으로 설치해줍니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">npm install --save-dev chai</code></pre>\\n      </div>\\n<p>리액트 컴포넌트를 테스트 할 때 가상의 브라우저 환경을 만들어주어야 할 필요가 있습니다. 왜냐면 컴포넌트들은 실제로 HTML로 그려지면서 브라우저의 DOM이 될 테니까요. 하지만 테스트 코드는 실제 브라우저에서 실행되지 않기 때문에 컴포넌트를 직접 테스트하기 위한 최소한의 환경을 갖추어야 합니다. 그래서 <a href=\\\"https://github.com/jsdom/jsdom\\\">jsdom</a>도 의존성 모듈로 설치해야 합니다. jsdom은 뒷장에서 만들어 볼 테스트에서 가상의 브라우저 환경을 만들어줍니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">npm install --save-dev jsdom</code></pre>\\n      </div>\\n<p>이렇게 테스트 환경을 구축하기 위한 최소한의 라이브러리들을 설치했습니다. 몇 가지 테스트들을 작성하고 실행해 본 뒤에 나중에는 더 발전된 라이브러리를 사용하여 리액트 컴포넌트 테스트 환경을 보강해볼 예정입니다.</p>\\n<p>이번 장 마지막 과정으로, 테스트를 실제로 실행하기 위해 라이브러리를 설정하는 법을 살펴보겠습니다. <code class=\\\"language-text\\\">src</code> 폴더와 같은 레벨에 <code class=\\\"language-text\\\">test</code> 폴더와 그 안에 필요한 설정 파일들을 만들겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">mkdir test\\ncd test\\ntouch helpers.js dom.js</code></pre>\\n      </div>\\n<p>위의 파일은 커맨드 라인에서 테스트 스크립트를 실행할 때 환경 설정하는데 사용됩니다. 먼저 <code class=\\\"language-text\\\">test/helpers.js</code> 파일부터 보겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> expect <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'chai'</span><span class=\\\"token punctuation\\\">;</span>\\n\\nglobal<span class=\\\"token punctuation\\\">.</span>expect <span class=\\\"token operator\\\">=</span> expect<span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>기껏 한거라곤 <code class=\\\"language-text\\\">expect</code> 함수를 Chai에서 가져와서 할당해둔겁니다. 이 함수는 나중에 테스트 할 때 \\\"X는 Y와 같아야 한다\\\" 는 단언을 작성할 때 사용합니다. 더 나아가 <code class=\\\"language-text\\\">expect</code> 함수는 이 파일을 사용하는 모든 테스트 파일의 전역 함수로 할당됩니다. 그러면 매번 <code class=\\\"language-text\\\">expect</code> 함수를 직접 가져오지 않고도 바로 사용할 수 있게 됩니다. 조금 뒤에는 더 많은 함수를 테스트용 전역 함수로 추가하게 됩니다. 어쨌든 거의 모든 테스트에 사용하는 함수들이니까요.</p>\\n<p><code class=\\\"language-text\\\">test/dom.js</code> 파일에는 가짜 브라우저 환경을 설정해서 리액트 컴포넌트가 HTML로 그려지도록 설정합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token constant\\\">JSDOM</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'jsdom'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> window <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">JSDOM</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'&lt;!doctype html>&lt;html>&lt;body>&lt;/body>&lt;/html>'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">copyProps</span><span class=\\\"token punctuation\\\">(</span>src<span class=\\\"token punctuation\\\">,</span> target<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> props <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getOwnPropertyNames</span><span class=\\\"token punctuation\\\">(</span>src<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span>prop <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">typeof</span> target<span class=\\\"token punctuation\\\">[</span>prop<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'undefined'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">,</span> prop<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token operator\\\">...</span>result<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">[</span>prop<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getOwnPropertyDescriptor</span><span class=\\\"token punctuation\\\">(</span>src<span class=\\\"token punctuation\\\">,</span> prop<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">defineProperties</span><span class=\\\"token punctuation\\\">(</span>target<span class=\\\"token punctuation\\\">,</span> props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nglobal<span class=\\\"token punctuation\\\">.</span>window <span class=\\\"token operator\\\">=</span> window<span class=\\\"token punctuation\\\">;</span>\\nglobal<span class=\\\"token punctuation\\\">.</span>document <span class=\\\"token operator\\\">=</span> window<span class=\\\"token punctuation\\\">.</span>document<span class=\\\"token punctuation\\\">;</span>\\nglobal<span class=\\\"token punctuation\\\">.</span>navigator <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  userAgent<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'node.js'</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">copyProps</span><span class=\\\"token punctuation\\\">(</span>window<span class=\\\"token punctuation\\\">,</span> global<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>이 강좌에서는 위의 코드 자체를 깊이 설명하진 않겠습니다. 기본적으로 리액트 컴포넌트 테스트를 위해 브라우저의 동작을 흉내낸다고 생각하시면 됩니다. jsdom 라이브러리가 브라우저에 사용되는 <code class=\\\"language-text\\\">window</code> 객체를 만들고 <code class=\\\"language-text\\\">document</code> 객체같은 객체를 추가합니다. 코드 내용이 이해하기 힘들다고 너무 걱정하지 마세요. 뒤에 이 파일을 건드릴 일은 거의 없습니다.</p>\\n<p>이렇게 필요한 헬퍼 파일이 모두 준비되었습니다. 하나는 테스트 파일 전체에 사용되는 함수를 전역 함수로 만드는 파일이고(어쨌든 필요하게 됩니다), 나머지 하나는 리액트 컴포넌트를 테스트 할 때 DOM을 흉내내는 설정 파일입니다. 이제 테스트를 위한 스크립트를 <code class=\\\"language-text\\\">package.json</code> 에 작성해야 합니다. 특정 접미사(spec, test 등)가 있는 파일을 모두 실행하는데, 실행하면서 위에 만들어둔 파일을 설정 파일로 사용하는 스크립트를 만듭니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token property\\\">\\\"scripts\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"start\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"webpack-dev-server --config ./webpack.config.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:unit\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"mocha --require babel-core/register --require ./test/helpers.js --require ./test/dom.js 'src/**/*.spec.js'\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<p>보시다시피 스크립트는 설정 파일을 <code class=\\\"language-text\\\">require</code> 문으로 가져오고 <code class=\\\"language-text\\\">*.spec.js</code> 라는 형태로 되어있는 파일을 모두 실행합니다. 기본적으로 테스트 파일 이름은 <code class=\\\"language-text\\\">App.spec.js</code> 처럼 되어 있고 <code class=\\\"language-text\\\">src</code> 폴더 아래라면 어디든지 상관없습니다. 물론 파일 이름이나 폴더 위치 등의 규칙은 여러분이 정하기 나름입니다.</p>\\n<p>테스트 스크립트는 <code class=\\\"language-text\\\">npm run test:unit</code> 으로 실행할 수 있겠지만 지금은 아무런 파일이 없기 때문에 테스트 파일을 찾을 수 없다고 뜰 겁니다. 다음 장에서 실제로 파일을 만들게 되겠지만, 일단 스크립트를 조금 더 추가하겠습니다. 바로 전에 작성한 스크립트를 실행하지만, 관찰(watch) 모드로 실행하는 스크립트입니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token property\\\">\\\"scripts\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"start\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"webpack-dev-server --config ./webpack.config.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:unit\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"mocha --require babel-core/register --require ./test/helpers.js --require ./test/dom.js 'src/**/*.spec.js'\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:unit:watch\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"npm run test:unit -- --watch\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<p>관찰 모드에서는 테스트가 한번 실행되고 난 뒤 유지되다가 소스 코드나 테스트에 변경이 일어나면 바로 다시 실행됩니다. 테스트 주도 개발을 할 때 관찰 모드를 설정해 놓으면 테스트를 추가하거나 변경할 때 즉시 피드백을 얻게 됩니다.</p>\\n<p>추가 설명: <code class=\\\"language-text\\\">npm run test:unit:watch</code> 로 관찰 모드를 실행하면서 개발 서버를 작동하려면 터미널 탭을 양 쪽에 두 개 띄워야 합니다.</p>\\n<p>Mocha와 Chai로 테스트하기에 앞서 작지만 쓸모 있는 라이브러리를 하나 더 소개해드리겠습니다. <a href=\\\"https://github.com/bkonkle/ignore-styles\\\">ignore-styles</a> 라는 녀석인데, 나중에 개발하시면서 리액트 컴포넌트에 CSS 스타일을 적용하시게 되겠지만 실제로 테스트에는 필요 없는 부분이므로 무시하고 싶을 때 사용합니다. 라이브러리를 <code class=\\\"language-text\\\">npm install --save-dev ignore-styles</code> 로 추가하신 다음에 스크립트의 내용을 조금 수정해줍니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token property\\\">\\\"scripts\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"start\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"webpack-dev-server --config ./webpack.config.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:unit\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"mocha --require babel-core/register --require ./test/helpers.js --require ./test/dom.js --require ignore-styles 'src/**/*.spec.js'\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:unit:watch\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"npm run test:unit -- --watch\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<p>드디어 Mocha와 Chai로 리액트 애플리케이션을 테스트하기 위한 설정을 마쳤습니다. 다음장에서는 첫 번째 테스트를 작성해 보겠습니다.</p>\\n<h2 id=\\\"리액트-state-변경을-단위-테스트하기\\\"><a href=\\\"#%EB%A6%AC%EC%95%A1%ED%8A%B8-state-%EB%B3%80%EA%B2%BD%EC%9D%84-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>리액트 State 변경을 단위 테스트하기</h2>\\n<p>아까 언급한 테스팅 피라미드의 벽돌 하나하나에 해당하는 '단위 테스트' 를 만들어 보겠습니다. 단위 테스트는 여러분의 애플리케이션에서 작은 부분을 독립적으로 테스트합니다. 보통 입력값을 받아 출력값을 돌려주는 함수들이 테스트 대상이 됩니다. 이 때 순수 함수가 빛을 발하게 됩니다. 함수를 실행하면서 생기는 부수 효과를 걱정할 필요가 전혀 없기 때문입니다. 순수 함수를 실행할 때 입력값이 같다면 출력 값은 언제나 동일합니다. 따라서 단위 테스트로 애플리케이션의 특정 동작을 확인해볼 수 있습니다.</p>\\n<p>우리는 이미 App 컴포넌트에서 <code class=\\\"language-text\\\">this.setState()</code> 안에서 동작하는 상태 변경 함수들을 클래스 밖으로 빼 두었습니다. 그리고 파일에서 내보내두었으니(export), 테스트 파일에서 불러와서(import) 실행하면 됩니다. 그러면 <code class=\\\"language-text\\\">src/</code> 폴더에 App 컴포넌트를 위한 테스트 파일을 만들어 보겠습니다. 적절한 접미사를 붙였는지 꼭 확인하세요. (역주: 보통은 <code class=\\\"language-text\\\">spec</code> 이나 <code class=\\\"language-text\\\">test</code> 를 붙입니다)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">touch App.spec.js</code></pre>\\n      </div>\\n<p>이제 파일을 열고 코드를 추가합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Local State'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'state의 counter를 하나 올릴 수 있다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'state의 counter를 하나 줄일 수 있다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>기본적으로 위의 테스트 묶음(suite)은 두 개의 테스트를 가지고 있습니다. <strong>describe</strong> 라고 하는 블록은 테스트 묶음을 정의하고, <strong>it</strong> 이라는 블록은 테스트 케이스를 정의합니다. 테스트는 성공할 수도 있고(Green), 실패할 수도 있습니다(Red). 당연히 여러분은 테스트를 계속 성공하도록 만들어야 합니다.</p>\\n<p>App 컴포넌트의 상태를 변경하기 위해 정의된 두 함수를 테스트하는 것은 여러분의 몫입니다. 하나는 <code class=\\\"language-text\\\">counter</code> 속성의 값을 하나 증가시키고, 나머지 하나는 하나 줄이고 있죠.</p>\\n<p><strong>it</strong> 블록에 테스트를 작성할 때는 보통 세 단계를 거칩니다. 값을 정의하고(arrange), 실행하고(act), 단언하는 거죠(assert).</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> doIncrement<span class=\\\"token punctuation\\\">,</span> doDecrement <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./App'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Local State'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'should increment the counter in state'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> counter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> newState <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">doIncrement</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>newState<span class=\\\"token punctuation\\\">.</span>counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'should decrement the counter in state'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> counter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> newState <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">doDecrement</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>newState<span class=\\\"token punctuation\\\">.</span>counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>각 테스트의 첫 번째 줄에는 초기 상태를 정의하는 객체를 설정했습니다. 이 객체는 바로 다음 단계에 테스트 할 함수의 입력값으로 사용됩니다. 두 번쨰 줄에서 함수에 설정한 초기값을 넘기고, 그 함수는 결과값을 리턴합니다. 마지막 줄에서 리턴된 값이 여러분이 설정한 기대값과 일치하는지 단언합니다. 우리가 작성한 테스트의 경우 <code class=\\\"language-text\\\">doIncrement()</code> 함수는 <code class=\\\"language-text\\\">counter</code> 속성의 값을 하나 올려야 하고, <code class=\\\"language-text\\\">doDecrement()</code> 함수는 하나 줄여야겠지요.</p>\\n<p>다 됐습니다. 이제 <code class=\\\"language-text\\\">npm run test:unit</code> 을 입력하시거나 <code class=\\\"language-text\\\">npm run test:unit:watch</code> 로 테스트를 실행해보세요. 관찰 모드를 켜 놓으셨다면 테스트 함수 블록이나 실제 함수 블록을 수정하고 결과가 어떻게 바뀌는지 확인하실 수 있습니다. 테스트가 성공하거나 실패하겠지요. 그리고 이 테스트는 아직 리액트와 의존 관계가 전혀 없다는 점을 확인해두시기 바랍니다. 순수한 자바스크립트 함수를 테스트하는데는 Mocha와 Chai만 사용하면 됩니다. 심지어 이전 장에서 설정한 <code class=\\\"language-text\\\">test/dom.js</code> 파일의 설정을 사용하지도 않았지요. 왜냐면 이 단위 테스트에는 브라우저의 DOM과 연관된 코드가 전혀 없기 때문입니다.</p>\\n<h2 id=\\\"리액트에-enzyme-테스트-설정하기\\\"><a href=\\\"#%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%97%90-enzyme-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>리액트에 Enzyme 테스트 설정하기</h2>\\n<p>이번 장에서는 <a href=\\\"https://github.com/airbnb/enzyme\\\">Enzyme</a>으로 손쉽게 리액트 컴포넌트의 단위 테스트와 통합 테스트를 하기 위한 설정을 해 보겠습니다. 이 라이브러리는 Airbnb에서 리액트의 컴포넌트 테스트를 선보이면서 공개한 라이브러리입니다. 먼저 개발 의존성으로 Enzyme을 설치합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">npm install --save-dev enzyme</code></pre>\\n      </div>\\n<p>Enzyme에는 리액트 버전별로 맞는 어댑터가 필요합니다. 리액트 버전 16에 맞는 어댑터도 설치해줍니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">npm install --save-dev enzyme-adapter-react-16</code></pre>\\n      </div>\\n<p>지금 보시는 테스팅 강좌에는 리액트 버전 16을 사용합니다. 그래서 Enzyme 어댑터도 그에 맞는 버전으로 설치해주었습니다. 만약 다른 버전을 사용한다면 공식 문서를 살펴보시고 맞는 어댑터를 설치해주세요.</p>\\n<p>그러면 <code class=\\\"language-text\\\">test/helpers.js</code> 파일에 Enzyme을 설정하겠습니다. 이 파일에 어댑터와 Enzyme 테스트에 쓰이는 함수들을 설정합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> expect <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'chai'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> mount<span class=\\\"token punctuation\\\">,</span> render<span class=\\\"token punctuation\\\">,</span> shallow<span class=\\\"token punctuation\\\">,</span> configure <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'enzyme'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> Adapter <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'enzyme-adapter-react-16'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">configure</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> adapter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Adapter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nglobal<span class=\\\"token punctuation\\\">.</span>expect <span class=\\\"token operator\\\">=</span> expect<span class=\\\"token punctuation\\\">;</span>\\n\\nglobal<span class=\\\"token punctuation\\\">.</span>mount <span class=\\\"token operator\\\">=</span> mount<span class=\\\"token punctuation\\\">;</span>\\nglobal<span class=\\\"token punctuation\\\">.</span>render <span class=\\\"token operator\\\">=</span> render<span class=\\\"token punctuation\\\">;</span>\\nglobal<span class=\\\"token punctuation\\\">.</span>shallow <span class=\\\"token operator\\\">=</span> shallow<span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Chai에서 단언을 실행할 때 사용하는 <code class=\\\"language-text\\\">expect</code> 함수처럼 Enzyme에서 사용하는 <code class=\\\"language-text\\\">shallow</code>, <code class=\\\"language-text\\\">render</code>, <code class=\\\"language-text\\\">mount</code> 함수를 전역 함수로 만듭니다. 그러면 테스트 파일에서 일일이 이 함수들을 불러올 필요가 없어지게 됩니다. 앞으로 리액트 컴포넌트의 단위 테스트나 통합 테스트를 할 때 이 함수들을 사용하게 됩니다.</p>\\n<h2 id=\\\"enzyme으로-리액트-테스트하기---리액트-컴포넌트를-단위-통합-테스트하는-방법\\\"><a href=\\\"#enzyme%EC%9C%BC%EB%A1%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0---%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A5%BC-%EB%8B%A8%EC%9C%84-%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Enzyme으로 리액트 테스트하기 - 리액트 컴포넌트를 단위, 통합 테스트하는 방법</h2>\\n<p><em>(읽기에 앞서 - 본문에서 render라는 용어 및 함수를 주로 '그리다' 는 동사로 바꾸어서 번역했습니다. 문맥상 어색한 경우 '랜더링' 이라는 단어를 그대로 사용한 경우도 있으니 참고 바랍니다)</em></p>\\n<p>Enzyme 설정이 완료되었으니, 컴포넌트 테스트를 진행해보겠습니다. 이번 장에서는 여러분이 컴포넌트를 테스트 할 때 적용할 수 있는 몇 가지 기본 패턴을 알려드리겠습니다. 이 패턴들을 잘 따르신다면 매번 리액트 컴포넌트를 테스트할 떄 머리를 싸맬 필요가 없을겁니다.</p>\\n<p>이미 <code class=\\\"language-text\\\">src/App.js</code> 파일에서 <code class=\\\"language-text\\\">App</code> 컴포넌트를 내보냈으니 바로 <code class=\\\"language-text\\\">App</code> 컴포넌트를 랜더링할 때 <code class=\\\"language-text\\\">Counter</code> 컴포넌트도 같이 랜더링 되는지 확인해보는 테스트를 작성할 수 있습니다. <code class=\\\"language-text\\\">App.spec.js</code> 파일에 다음의 테스트를 추가해보겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> App<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> doIncrement<span class=\\\"token punctuation\\\">,</span> doDecrement<span class=\\\"token punctuation\\\">,</span> Counter <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./App'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Local State'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'App Component'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Counter 래퍼를 그려낸다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> wrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">shallow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>App</span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span>Counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span>have<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">length</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">shallow</code> 함수는 아까 <code class=\\\"language-text\\\">test/helpers.js</code> 파일에 정의해 놓았던 전역 변수 중 하나입니다. 이 함수는 Enzyme에서 가장 단순하게 컴포넌트를 그려내는 함수입니다. 딱 해당 컴포넌트만 그려내고 그 컴포넌트의 자손 컴포넌트의 내용은 그리지 않습니다. 컴포넌트를 분리해서 테스트 할 수 있게 만들어주기 때문에 단위 테스트에는 제격인 함수입니다. 앞선 테스트에서 <code class=\\\"language-text\\\">Counter</code> 컴포넌트가 <code class=\\\"language-text\\\">App</code> 컴포넌트 안의 인스턴스로 그려졌는지 확인해 보았습니다. 테스트에 따르면 딱 하나의 <code class=\\\"language-text\\\">Counter</code> 컴포넌트만 나와야 하지요.</p>\\n<p>이게 Enzyme으로 리액트 애플리케이션을 단위 테스트하는 아주 간단한 방법 중 하나입니다. 추가적으로 여러분은 그려진 컴포넌트에서 특정 HTML 태그나 CSS 클래스에 맞는 DOM이 그려졌는지 확인할 수 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'List 래퍼가 list 엘리먼트를 그려낸다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> wrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">shallow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>List</span> <span class=\\\"token attr-name\\\">items</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'li'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span>have<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">length</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.list'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span>have<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">length</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>컴포넌트에 어떤 속성(리액트의 Props)을 전달했느냐에 따라 <a href=\\\"https://github.com/airbnb/enzyme/blob/master/docs/api/selector.md\\\">Enzyme의 선택자를 이용하여</a> 그려진 HTML 엘리먼트를 확인해볼 수 있습니다. 또한 컴포넌트에 <a href=\\\"https://github.com/airbnb/enzyme/blob/master/docs/api/selector.md\\\">리액트의 조건부 랜더링을</a> 적용했다면 선택자로 선택된 요소의 개수가 0개인지 1개인지 확인하는 방식으로 조건에 따라 컴포넌트가 알맞게 그려졌는지 확인할 수 있습니다.</p>\\n<p>Enzyme으로 얕은 랜더링을 할 떄는 단위 테스트 뿐 아니라 가볍게 통합 테스트도 할 수 있습니다. 예를 들어 단순히 HTML 태그가 제대로 그려졌는지 확인하는 것 뿐 아니라 아래의 테스트처럼 다음 컴포넌트에 정확하게 속성이 전달되었는지 확인하는 테스트도 만들 수 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token comment\\\">// ...</span>\\n\\n<span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'App Component'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Counter 래퍼를 그려낸다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> wrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">shallow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>App</span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span>Counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span>have<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">length</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Counter 래퍼에 모든 Prop이 전달되었다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> wrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">shallow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>App</span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">let</span> counterWrapper <span class=\\\"token operator\\\">=</span> wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span>Counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>counterWrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">props</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> counter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    counterWrapper <span class=\\\"token operator\\\">=</span> wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span>Counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>counterWrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">props</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>단위 테스트와 통합 테스트의 경계가 애매하게 보일 수도 있습니다. 하지만 이번 테스트의 경우는 두 컴포넌트 사이의 간단한 부분이 기대한 대로 동작하는지 확인하는 정도이기 때문에 '가벼운 통합 테스트' 정도로 생각할 수 있겠습니다. 저 마지막 테스트는 어떻게 컴포넌트 사이에 전달되는 속성에 접근하고 확인했는지, 그리고 어떻게 컴포넌트의 지역 상태를 변경했는지 의도한 목적에 맞게 결과를 보여주었습니다. 이런 방식으로 여러분은 컴포넌트의 지역 상태 변화를 테스트할 수 있습니다. 예를 들어 컴포넌트 안에 있는 상태에 따라 특정 요소가 나타났다 사라졌다 하는 토글이 있다고 생각해 봅시다. 여러분은 테스트 코드를 작성하면서 임의로 상태를 변경하여 알맞은 HTML 요소가 그려졌는지 확인할 수 있습니다.</p>\\n<p>지금까지 그려진 컴포넌트를 테스트하고, 그 컴포넌트의 속성에 접근하거나 지역 상태를 변경해서 테스트하는 방법을 살펴보았습니다. 그리고 Enzyme을 사용하여 가상으로 클릭 이벤트를 활성화 할 수도 있습니다. 현재 <code class=\\\"language-text\\\">App</code> 컴포넌트는 클릭 이벤트를 테스트해보기에 최적의 조건을 가진 버튼 두 개가 있습니다. 한 버튼은 지역 상태의 <code class=\\\"language-text\\\">counter</code> 속성을 하나 올리고, 반면 나머지 하나는 하나 낮추는 역할을 하지요. 이제 <code class=\\\"language-text\\\">onClick</code> 핸들러가 붙어있는 버튼 같은 HTML 요소의 이벤트를 가상화하는지 살펴보겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// ...</span>\\n\\n<span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'App Component'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Counter 래퍼를 그려낸다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> wrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">shallow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&lt;</span>App <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span>Counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span>have<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">length</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Counter 래퍼에 모든 Prop이 전달되었다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> wrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">shallow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&lt;</span>App <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">let</span> counterWrapper <span class=\\\"token operator\\\">=</span> wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span>Counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>counterWrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">props</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> counter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    counterWrapper <span class=\\\"token operator\\\">=</span> wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span>Counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>counterWrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">props</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'counter를 하나 올린다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> wrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">shallow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&lt;</span>App <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> counter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'button'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">at</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">simulate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">state</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'counter를 하나 내린다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> wrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">shallow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&lt;</span>App <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> counter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'button'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">at</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">simulate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">state</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>버튼이 두개 있으니까 <code class=\\\"language-text\\\">at()</code> 헬퍼 함수를 사용하여 특정 태그를 가진 엘리먼트의 리스트를 가져와서 그 리스트의 인덱스에 직접 접근할 수 있습니다. 하지만 엘리먼트의 순서가 바뀌게 된다면 조심해서 사용하셔야 합니다. 제대로 된 테스트라면 각각의 엘리먼트들을 명확히 가져올 수 있도록 선택자(Selector)를 잘 매겨서 사용하시길 권합니다. 그렇지 않고 계속 인덱스를 사용하여 HTML 엘리먼트를 가져온다면 엘리먼트의 순서가 바뀔 때 테스트가 깨지게 됩니다.</p>\\n<p>코드 마지막 부분의 리액트 컴포넌트의 지역 상태를 테스트하는 기본적인 방법입니다. 테스트 패턴이라고 보셔도 무방합니다. 다른 컴포넌트를 테스트할 때도 무난하게 재사용 가능한 방법이니까요. 특정 HTML 엘리먼트나 리액트 컴포넌트가 그려졌는지 확인하고, 정확한 속성이 전달되었거나 지역 상태가 원하는대로 변경되었는지 확인하는 테스트는 그리 많은 시간을 잡아먹지 않습니다.</p>\\n<p>지금까지 Enzyme의 <code class=\\\"language-text\\\">shallow()</code> 함수를 사용하여 단위 테스트와 얕은 수준의 통합 테스트를 해 보았습니다. 그렇다면 슬슬 <code class=\\\"language-text\\\">mount()</code> 함수와 <code class=\\\"language-text\\\">render()</code>  함수는 언제 쓰는지 궁금해지셨을 겁니다.</p>\\n<p><code class=\\\"language-text\\\">shallow()</code> 함수가 자손 컴포넌트를 제외한 컴포넌트를 그려내는 반면 <code class=\\\"language-text\\\">mount()</code> 함수는 모든 자손 컴포넌트까지 그려냅니다. 즉 전체 컴포넌트 계층을 그려내는거죠. 전자가 함수가 분리된 환경에서 컴포넌트를 테스트하는데 사용된다면(단위 테스트나 얕은 수준의 통합 테스트), 후자는 진정한 통합 테스트에 사용된다고 볼 수 있습니다. 통합 테스트는 특정 컴포넌트 계층에 속한 모든 자손과 로직을 가져오기 때문에 더 깨지기 쉽습니다. 따라서 통합 테스트의 유지 비용은 단위 테스트보다 높습니다. 다른 사람들도 통합 테스트를 작성하는데 드는 비용이 단위 테스트를 작성하는데 드는 비용보다 비싸다고 말하지요. 덧붙여 <code class=\\\"language-text\\\">render()</code> 함수는 모든 자손 컴포넌트를 그려낸다는 특징 때문에 <code class=\\\"language-text\\\">mount()</code> 함수와 비슷하지만, 퍼포먼스 측면에서 <code class=\\\"language-text\\\">mount()</code> 보다 더 낫습니다. 왜냐면 리액트의 라이프사이클(Lifecycle) 메서드를 적용하지 않고 컴포넌트를 그려내기 때문입니다. 그러니 자손 컴포넌트까지 접근하고 싶지만 굳이 라이프사이클 메서드를 확인할 필요가 없다면 <code class=\\\"language-text\\\">mount()</code> 대신 <code class=\\\"language-text\\\">render()</code>  를 사용하시면 됩니다.</p>\\n<p><strong>얼마나 많은 단위 테스트와 통합 테스트를 작성해야 할 지 결정할 때 두 가지 중요한 원칙(philosophies)이 있습니다.</strong> 일반적인 테스팅 피라미드 원리에 따라 1. 가능한 한 많은 단위 테스트를 작성하고, 2. 어느 정도의 통합 테스트를(그리고 아주 적은 수의 전체 테스트) 작성하라는 겁니다. 기본적으로 여러분은 작은 규모를 차지하면서 유지보수하기 용이한 단위 테스트를 많이 작성하고, 어느정도 중요한 부분에 통합 테스트를 적용해야 합니다. 이 방식이 소프트웨어 공학 분야에서 일반적으로 생각하는 테스팅입니다. 하지만 (리액트 같은 라이브러리나 프레임워크의) 컴포넌트 테스트를 할 때는 다른 원칙이 존재합니다. 바로 통합 테스트를 많이 작성하고 단위 테스트를 적게 작성하라는 겁니다. 컴포넌트 단위 테스트는 전체 애플리케이션과 비교하면 너무 고립된 데다가 잘 깨질 일도 없습니다. 그래서 보통 특정 부분의 맥락(context)를 완벽히 분리해서 본떠놓고(mock) 단위 테스트를 수행하지요. 그래서 많은 사람들이 이 주제를 놓고 갑론을박 합니다. 컴포넌트가 너무 분리되어 있으니까 테스트의 실효성이 있느냐는거죠. 결과적으로 여러분은 통합 테스트를 하면서 서로 다른 컴포넌트의 맥락이 잘 맞아 떨어지는지, 견고하게 구성되었는지 확인하는 테스트를 더 많이 하시게 될 겁니다.</p>\\n<p>실제로 테스트할 때는 위의 원칙이 무슨 상관이 있을까요? 여러분이 단위 테스트보다 통합 테스트를 더 많이 작성한다면, 컴포넌트를 테스트할 때 <code class=\\\"language-text\\\">shallow()</code> 대신에 <code class=\\\"language-text\\\">mount()</code> 나 <code class=\\\"language-text\\\">render()</code> 함수를 더 많이 사용하시게 될 겁니다. 그렇게 전체 컴포넌트 계층 구조를 그려낸 뒤에 특정 값의 존재 유무나 행동이 잘 맞는지 확인하고, 모든 자손 컴포넌트를 직접 접근할 수 있게 되었으니 더 복잡한 테스트를 작성할 수 있게 되었습니다. 복잡한 테스트라고 해도 본질은 앞서 작성한 테스트와 크게 다르지 않습니다. 똑같이 전달된 속성이 맞는지, 엘리먼트가 제대로 그려졌는지, 클릭 이벤트를 일으켜보기도 하고 지역 상태가 제대로 변화되었는지 확인하게 됩니다.</p>\\n<h2 id=\\\"리액트에서-sinon-테스트-설정하기\\\"><a href=\\\"#%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%97%90%EC%84%9C-sinon-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>리액트에서 Sinon 테스트 설정하기</h2>\\n<p>비동기(Asynchronous) 코드를 테스트하려면 어떻게 해야할까요? 지금까지는 동기(Synchronous) 방식 테스트에 대해서만 설명하고 있었습니다. 다시 한 번 <code class=\\\"language-text\\\">App</code> 컴포넌트를 살펴보시면 비동기적으로 실행되는 코드가 없어서 비동기 테스트가 필요 없다는 점을 보실 수 있습니다. 그렇다면 임의의 데이터를 <code class=\\\"language-text\\\">componentDidMount()</code> 라이프사이클 메서드에서 가져온다는 가상의 시나리오를 생각해 보겠습니다.</p>\\n<p>종종 <code class=\\\"language-text\\\">componentDidMount()</code> 에서 <a href=\\\"https://www.robinwieruch.de/what-is-an-api-javascript/\\\">외부 API(third-party API)</a>를 이용하여 데이터를 요청하는 일이 있습니다. 그렇기 때문에 리액트 컴포넌트에서 이런 비동기 코드가 제대로 동작하는지 테스트할 수 있어야 합니다. 임의의 API 엔드포인트가 있다고 가정하고, 데이터를 요청하여 카운터의 배열을 받을 수 있다고 가정해보겠습니다. 물론 실제로 엔드포인트가 존재하지 않기 때문에 실제 애플리케이션에서는 동작하지 않을 겁니다. 그래도 테스트를 하기 위해 만들어야 합니다. 이후에 여러분들만의 외부 API 요청을 직접 테스트해볼 수 있을겁니다.</p>\\n<p>위에 말씀드린 시나리오에서 외부 API 요청을 위해 <code class=\\\"language-text\\\">axios</code> 를 사용하겠습니다. 따라서 이 패키지를 설치하셔야 합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">npm install --save axios</code></pre>\\n      </div>\\n<p>그리고 임의의 API 엔드포인트로 요청하는 코드를 작성해보겠습니다. 이 시나리오에서 직접 특정 API에 요청을 할 지 말지는 여러분의 자유입니다. 혹시 리액트 컴포넌트 안에서 외부 API에 요청하는 법을 잘 모르신다면 <a href=\\\"https://www.robinwieruch.de/react-fetching-data/\\\">'리액트에서 데이터 가져오는 방법'</a> 을 살펴보시기 바랍니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">import</span> React<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> Component <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> axios <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'axios'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// ...</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">App</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n      counter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n      asyncCounters<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onIncrement <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onIncrement<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onDecrement <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onDecrement<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">componentDidMount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    axios<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://mypseudodomain/counter'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>counter <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> asyncCounters<span class=\\\"token punctuation\\\">:</span> counter <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span>error <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">onIncrement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>doIncrement<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">onDecrement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>doDecrement<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// ...</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> App<span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>이 시나리오를 테스트하기 위해 굳이 <code class=\\\"language-text\\\">render()</code> 메서드에서 <code class=\\\"language-text\\\">asyncCounters</code> 속성을 드러낼 필요는 없습니다. 어차피 엔드포인트에서 가짜 데이터만 리턴하게 될 테니까요. 그리고 오로지 요청이 성공적으로 이루어졌는지까지만 가정해서 테스트해보고자 합니다.</p>\\n<p>그럼 이제 리액트 컴포넌트에서 비동기 데이터 요청을 테스트 하려면 어떻게 해야할까요? <a href=\\\"https://github.com/sinonjs/sinon\\\">Sinon</a>이라는 멋진 라이브러리를 개발 의존성에 추가해줍시다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">npm install --save-dev sinon</code></pre>\\n      </div>\\n<p>그리고 Sinon을 <code class=\\\"language-text\\\">test/helpers.js</code> 파일에 글로벌 함수로 등록해줍니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">import</span> sinon <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'sinon'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> expect <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'chai'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> mount<span class=\\\"token punctuation\\\">,</span> render<span class=\\\"token punctuation\\\">,</span> shallow<span class=\\\"token punctuation\\\">,</span> configure<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'enzyme'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> Adapter <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'enzyme-adapter-react-16'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">configure</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> adapter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Adapter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nglobal<span class=\\\"token punctuation\\\">.</span>expect <span class=\\\"token operator\\\">=</span> expect<span class=\\\"token punctuation\\\">;</span>\\n\\nglobal<span class=\\\"token punctuation\\\">.</span>sinon <span class=\\\"token operator\\\">=</span> sinon<span class=\\\"token punctuation\\\">;</span>\\n\\nglobal<span class=\\\"token punctuation\\\">.</span>mount <span class=\\\"token operator\\\">=</span> mount<span class=\\\"token punctuation\\\">;</span>\\nglobal<span class=\\\"token punctuation\\\">.</span>render <span class=\\\"token operator\\\">=</span> render<span class=\\\"token punctuation\\\">;</span>\\nglobal<span class=\\\"token punctuation\\\">.</span>shallow <span class=\\\"token operator\\\">=</span> shallow<span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Sinon은 관찰(spies), Mock, Stub에 사용될 수 있습니다.(역주: Spy는 관찰자정도로 번역할 수 있겠지만 주로 영문 표기를 그대로 사용하고자 합니다. Mock, Stub은 일반적으로 한글로 번역하기 모호한 개념인데다 대부분의 기술 문서도 원문을 그대로 사용하고 있기 때문에 억지로 번역하지 않겠습니다 - Mock과 Stub에 관해서는 <a href=\\\"https://medium.com/@SlackBeck/mock-object%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-85159754b2ac\\\">다음 링크</a>를 참고해주세요) 다음 장에서 관찰자와 Stub을 사용해서 리액트 컴포넌트 안의 비동기 비지니스 로직을 테스트합니다. 이런 작업이 비동기 로직을 테스트할 때 가장 시간이 많이 들어가는 부분입니다.</p>\\n<h2 id=\\\"sinon으로-리액트-테스트하기---비동기-코드를-테스트하는-방법\\\"><a href=\\\"#sinon%EC%9C%BC%EB%A1%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0---%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%BD%94%EB%93%9C%EB%A5%BC-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Sinon으로 리액트 테스트하기 - 비동기 코드를 테스트하는 방법</h2>\\n<p>실제 시연을 해보기 위해 첫 번째 <a href=\\\"http://sinonjs.org/releases/v4.4.6/spies/\\\">Spy</a>를 붙여보겠습니다. Spy는 어떠한 함수나 단언에도 사용할 수 있습니다. Spy가 적용된 이후 특정 함수가 테스트 안에서 몇 번이나 호출되었는지 확인해볼 수 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token comment\\\">// ...</span>\\n\\n<span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'App Component'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'componentDidMount를 호출한다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    sinon<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">spy</span><span class=\\\"token punctuation\\\">(</span>App<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'componentDidMount'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">const</span> wrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">mount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>App</span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>App<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>componentDidMount<span class=\\\"token punctuation\\\">.</span>calledOnce<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>'<code class=\\\"language-text\\\">App</code> 컴포넌트의 프로토타입 체인에 들어있는 <code class=\\\"language-text\\\">componentDidMount()</code> 라이프사이클 메서드가 한 번 실행된다.' 는 테스트를 작성했습니다. 리액트의 라이프사이클 메서드를 알고 계시다면 이 메서드는 컴포넌트가 마운트될 때 한 번만 실행된다는 사실을 알고 계실겁니다. 그 이후에는 호출되지 않지요. 따라서 테스트는 성공할 겁니다. 이런 방식으로 리액트의 라이프사이클 메서드를 테스트할 수 있습니다.</p>\\n<p>실제로 이 테스트 자체는 별 의미가 없기 때문에 지우셔도 됩니다. 그저 Sinon에서 제공하는 관찰 기능의 맛을 보여드린 것 뿐입니다. 라이프사이클 메서드 자체가 잘 동작하는지 여부는 리액트 내부에서 테스트 되어야 하는 일입니다. 대신 리액트 애플리케이션 안에서 비동기 데이터 요청을 하는 과정을 Sinon으로 테스트하겠습니다.</p>\\n<p><code class=\\\"language-text\\\">App</code> 컴포넌트에 대한 모든 테스트는 <code class=\\\"language-text\\\">componentDidMount()</code> 함수에서 호출되는 데이터 요청의 영향을 받기 때문에 매 테스트마다 데이터가 제대로 들어오도록 만들어야 합니다. Mocha는 <code class=\\\"language-text\\\">before()</code>, <code class=\\\"language-text\\\">after()</code> 함수로 매 테스트마다 필요한 환경을 설정하는 함수를 제공합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// ...</span>\\n\\n<span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'App Component'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">before</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">after</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Counter 래퍼를 그려낸다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>이제 테스트 파일에 axios를 사용하겠습니다. 특정 API 요청에 <a href=\\\"http://sinonjs.org/releases/v4.4.6/stubs/\\\">스텁</a>(stub, 역주: '테스트용으로 특정 요청에 따라 정해진 가짜 데이터(canned answer)를 제공하는 함수' 라는 뜻을 가지고 있으며 국내에 적절한 우리말 번역이 없어 원어 그대로 사용하겠습니다)을 적용하여 데이터 요청을 흉내내고, 그 데이터를 가져오기 위해서입니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> axios <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'axios'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> App<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> doIncrement<span class=\\\"token punctuation\\\">,</span> doDecrement<span class=\\\"token punctuation\\\">,</span> Counter <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./App'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// ...</span>\\n\\n<span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'App Component'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> promise <span class=\\\"token operator\\\">=</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">before</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    sinon<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stub</span><span class=\\\"token punctuation\\\">(</span>axios<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'get'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">withArgs</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://mydomain/counter'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">returns</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">after</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    axios<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">restore</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>그런데 스텁이 뭐냐고요? Sinon 문서에서 일컫기를 '테스트 스텁은 미리 지정된 동작을 수행하는 함수 (혹은 Spy)' 라고 합니다. 정의대로라면 Spy도 완전히 통제할 수 있다는 말이 되지요. 예를 들자면 특정 함수(<code class=\\\"language-text\\\">get()</code> 함수같은)가 어떤 리턴값을 돌려줄지 미리 지정할 수 있습니다. 한발 나아가 특정 인자를 받을 때만 내가 원하는 동작을 수행하도록 지정할 수 있습니다. 위의 코드를 보시면 axios의 <code class=\\\"language-text\\\">get</code> 함수로 특정 도메인에 요청을 할 때 반드시 정수의 배열(<code class=\\\"language-text\\\">counters</code>)  을 프로미스로 돌려주도록 정의한 것을 알 수 있습니다.</p>\\n<p>테스트가 실행된 후 <code class=\\\"language-text\\\">after</code> 블록에서 <code class=\\\"language-text\\\">restore()</code> 메서드가 <code class=\\\"language-text\\\">axios.get()</code> 메서드에 적용된 스텁을 해제하고 원래 정의된 동작대로 움직이도록 복원하는 것 까지 설정되어 있습니다. 매번 스텁을 해제하지 않으면 다른 테스트 케이스에서 미처 해제되지 못한 스텁이 영향을 주는 불상사가 일어납니다.</p>\\n<p>그럼 이제 <code class=\\\"language-text\\\">componentDidMount()</code> 함수의 비동기 동작을 테스트해보겠습니다. 테스트 내용은 데이터를 요청한 뒤에 결과물을 리액트 컴포넌트 안의 <code class=\\\"language-text\\\">asyncCounters</code> 라는 지역 속성으로 저장하는지 확인하는 겁니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token comment\\\">// ...</span>\\n\\n<span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'App Component'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> promise <span class=\\\"token operator\\\">=</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">before</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    sinon<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stub</span><span class=\\\"token punctuation\\\">(</span>axios<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'get'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">withArgs</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://mydomain/counter'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">returns</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">after</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    axios<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">restore</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// ...</span>\\n\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'비동기로 카운터를 가져온다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> wrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">shallow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>App</span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">state</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>asyncCounters<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">state</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>asyncCounters<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equal</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">App</code> 컴포넌트를 처음 그려낼 때 <code class=\\\"language-text\\\">asyncCounters</code> 상태는 <code class=\\\"language-text\\\">null</code> 이어야 합니다. 그리고 프로미스가 완료되면 우리가 지정한 <code class=\\\"language-text\\\">result</code> 값과 같은 상태가 되어야 합니다. 이제 테스트를 여러 번 실행해봐도 원하는대로 동작하는지 확인해볼 수 있게 되었습니다. 축하드립니다! 이제 리액트 컴포넌트의 비동기 동작도 테스트할 수 있게 되었습니다. Sinon 자체는 Mocha, Chai와 마찬가지로 리액트와 직접적으로 엮여있지 않다는 점을 명심하셔야 합니다. 오로지 함수를 관찰하거나 그 함수에 스텁을 적용하고, 더 세밀하게 정의되어있는 Mock 객체를 만들고자 할 때만 사용하셔야 합니다.</p>\\n<h2 id=\\\"리액트에서-jest-설정하기\\\"><a href=\\\"#%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%97%90%EC%84%9C-jest-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>리액트에서 Jest 설정하기</h2>\\n<p>이번 장에서는 Jest를 설정하고 리액트 애플리케이션 테스트를 실행하는 방법을 알아보겠습니다. <a href=\\\"https://facebook.github.io/jest/\\\">Jest</a>는 여러분의 리액트 컴포넌트를 테스트할 때 사용됩니다. 이 라이브러리는 페이스북에서 공식적으로 사용되는 테스팅 라이브러리이며, '스냅샷(Snapshot, 순간적으로 촬영된 사진) 테스트' 라는 개념을 도입하여 Enzyme과 함께 리액트 애플리케이션의 단위 테스트와 통합 테스트를 할 때 아주 유용하게 사용됩니다.</p>\\n<p>스냅샷 테스트라 함은 테스트를 실행할 때 실제 그려지는 컴포넌트의 결과물을 스냅샷으로 만드는 겁니다. 그리고 이 스냅샷은 다음 테스트를 실행할 때 생성되는 스냅샷과 비교하는데 사용됩니다. 만약 그려진 컴포넌트의 결과물이 바뀌었다면 각 스냅샷의 달라진 점이 표시되면서 테스트가 실패합니다. 아직까지 그리 나쁜 일은 아닌 것이, 스냅샷 테스트는 그저 결과물이 바뀌었을때 알려주는 역할만 하기 때문입니다. 스냅샷 테스트가 실패했다면 여러분은 변경된 스냅샷을 받아들이거나(새 스냅샷을 기준이 되는 스냅샷으로 업데이트하거나) 변경된 부분을 무시하고 컴포넌트의 구현부를 수정하여 원래의 결과물이 나오도록 고치면 됩니다.</p>\\n<p>Jest로 스냅샷 테스트를 하면 테스트를 가볍게 유지할 수 있습니다. 간단히 설정한 뒤에 테스트를 실행할 때마다 변경사항이 발생했다면, 변경사항을 받아들일지 말지 결정하면 됩니다. 비지니스 로직보다는 출력된 결과물에 더 신경을 쓰게 되지요. 비지니스 로직도 Enzyme으로 잘 테스트할 수 있지만, Jest로도 테스트할 수 있습니다.</p>\\n<p>나아가기 앞서: Jest는 테스트 실행기와 단언 함수가 포함되어 있습니다. 앞서 Mocha와 Chai를 테스트 실행기와 단언 라이브러리로 사용하였지만, Jest 하나로 모두 해결할 수 있습니다. 사용할 때 API가 약간 다르긴 합니다.  Jest를 사용할 때는 <code class=\\\"language-text\\\">it</code> 블록보다 <code class=\\\"language-text\\\">test</code> 블록을 사용한다던가(역주: Jest에서 <code class=\\\"language-text\\\">describe</code>, <code class=\\\"language-text\\\">it</code>, <code class=\\\"language-text\\\">test</code> 다 사용 가능합니다), 단언 함수를 쓸 때 <code class=\\\"language-text\\\">to.equal()</code> 대신 <code class=\\\"language-text\\\">toEqual()</code> 을 사용한다던가. 어쨌든 Jest로 모든 일을 처리하고 싶으시다면 Mocha와 Chai 설정 부분은 넘어가셔도 됩니다. Jest와 Enzyme만으로 리액트 애플리케이션을 테스트하고 싶으시다면, Mocha와 Chai를 설정하지 않고  Enzyme(과 Sinon)을 Jest 환경에 설정하시면 됩니다.</p>\\n<p>그럼 이제 Jest를 설정해 보겠습니다. 먼저 개발 의존성으로 Jest와 <code class=\\\"language-text\\\">react-test-renderer</code> 라이브러리를 설치해줍니다. 이 라이브러리는 Jest 테스트에서 컴포넌트를 그려낼 때 사용합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">npm install --save-dev jest react-test-renderer</code></pre>\\n      </div>\\n<p>그리고 Jest 설정 파일을 <code class=\\\"language-text\\\">test/</code> 폴더에 만듭니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">cd test\\ntouch jest.config.json</code></pre>\\n      </div>\\n<p>만들어진 파일에 다음의 설정을 입력하고 저장해줍니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"testRegex\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"((\\\\\\\\.|/*.)(snapshot))\\\\\\\\.js?$\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"rootDir\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"../src\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">testRegex</code> 설정은 어디에 있는 스냅샷 테스트 파일을 가지고 테스트를 할 지 지정합니다. 이 튜토리얼에서는 <code class=\\\"language-text\\\">*.snapshot.js</code> 파일을 테스트 대상으로 지정하여, <code class=\\\"language-text\\\">*.spec.js</code> 파일에 작성된 유닛 테스트 및 통합 테스트와 완전히 분리했습니다. Mocha 와 마찬가지로 Jest는 재귀적으로 <code class=\\\"language-text\\\">src/</code> 폴더를 탐색하여 해당 정규표현식에 해당하는 모든 스냅샷 테스트 파일을 실행합니다.</p>\\n<p><code class=\\\"language-text\\\">rootDir</code> 설정은 Jest가 어느 폴더부터 테스트 파일을 탐색해나갈지 지정합니다. Jest 설정 파일이 <code class=\\\"language-text\\\">test/</code> 폴더에 있으니 한 단계 위로 올라가 <code class=\\\"language-text\\\">src/</code> 폴더 안에 있는 스냅샷 테스트를 찾을 수 있도록 해 줍시다.</p>\\n<p>마지막으로 <code class=\\\"language-text\\\">package.json</code> 파일에 스냅샷 테스트를 실행하는 스크립트를 추가해줍니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token property\\\">\\\"scripts\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"start\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"webpack-dev-server --config ./webpack.config.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:unit\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"mocha --require babel-core/register --require ./test/helpers.js --require ./test/dom.js --require ignore-styles 'src/**/*.spec.js'\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:unit:watch\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"npm run test:unit -- --watch\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:snapshot\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"jest --config ./test/jest.config.json\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:snapshot:watch\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"npm run test:snapshot -- --watch\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<p> <code class=\\\"language-text\\\">npm run test:snapshot</code> 으로 커맨드를 실행하면 Jest에게 설정 파일에 따라 테스트가 실행됩니다. <code class=\\\"language-text\\\">npm run test:snapshot:watch</code> 는 위에 Mocha의 워치 모드처럼 스냅샷 테스트를 워치 모드로 실행합니다.</p>\\n<p>이제 테스트를 실행하려면 터미널 탭을 하나 더 띄워야 할 수도 있습니다. Mocha로 단위 테스트와 통합 테스트를 워치 모드로 실행하고, 다른 탭을 열어 Jest의 스냅샷 테스트를 워치 모드로 실행하며, <code class=\\\"language-text\\\">npm start</code> 로 애플리케이션을 실행해볼 탭도 필요합니다. 매번 소스 파일이 변경될 때마다 두 탭에 있는 테스트가 동시에 재실행됩니다. 만약 Mocha와 Chai를 사용하지 않으신다면 Jest만 실행하기 위한 테스트 스크립트만 만드시면 됩니다. (Sinon과 Enzyme은 필요에 따라 선택합니다)</p>\\n<p><strong>역주: 실제 이대로만 설정하고 다음 챕터의 설명을 따라 테스트를 실행하면 오류가 납니다. 그 이유는 Jest의 실행 환경을 제대로 설정하지 못했기 때문인데요, Mocha를 설정할 때 처럼 Babel 환경에서 실행해주어야 합니다. 가장 쉬운 방법으로 <code class=\\\"language-text\\\">babel-jest</code> 를 개발 의존성으로 추가해주시면 됩니다. 타입스크립트 사용자의 경우 <code class=\\\"language-text\\\">ts-jest</code> 설치 및 별도의 설정이 필요합니다.</strong></p>\\n<h2 id=\\\"jest로-리액트-테스트하기---컴포넌트-스냅샷-테스트\\\"><a href=\\\"#jest%EB%A1%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0---%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%8A%A4%EB%83%85%EC%83%B7-%ED%85%8C%EC%8A%A4%ED%8A%B8\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Jest로 리액트 테스트하기 - 컴포넌트 스냅샷 테스트</h2>\\n<p>이 장에서는 두 개의 리액트 컴포넌트를 테스트하기 위해 두 개의 스냅샷 테스트를 작성하겠습니다. 먼저 <code class=\\\"language-text\\\">src/</code> 폴더에 파일을 만듭니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">cd src\\ntouch App.snapshot.js</code></pre>\\n      </div>\\n<p>그리고 \\u0010<code class=\\\"language-text\\\">App</code>, <code class=\\\"language-text\\\">Counter</code> 컴포넌트에 대한 스냅샷 테스트를 작성합니다. 보통 스냅샷 테스트는 최소한 아래의 양식을 가지고 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> renderer <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-test-renderer'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> App<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> Counter <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./App'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'App Snapshot'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'renders'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> component <span class=\\\"token operator\\\">=</span> renderer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>App</span> <span class=\\\"token punctuation\\\">/></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">let</span> tree <span class=\\\"token operator\\\">=</span> component<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toJSON</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>tree<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toMatchSnapshot</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Counter Snapshot'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'renders'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> component <span class=\\\"token operator\\\">=</span> renderer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Counter</span> <span class=\\\"token attr-name\\\">counter</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">let</span> tree <span class=\\\"token operator\\\">=</span> component<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toJSON</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>tree<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toMatchSnapshot</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>네 이게 다입니다. 이제 커맨드 라인에서 스냅샷 테스트를 실행해보세요. 모두 성공할겁니다. 그 다음에 <code class=\\\"language-text\\\">App</code> 컴포넌트의  <code class=\\\"language-text\\\">render()</code> 메서드 구현부를 조금 수정해봅니다. 예를 들어 <code class=\\\"language-text\\\">&lt;h1&gt;</code> 태그에 몇마디 넣어서 추가해볼 수도 있겠습니다. 다시 스냅샷 테스트를 실행하면 <code class=\\\"language-text\\\">App</code> 컴포넌트에 대한 테스트는 실패할겁니다. 그리고 스냅샷을 업데이트할지 코드를 고칠지 결정하면 됩니다.</p>\\n<p>스냅샷 테스트로 리액트 컴포넌트를 테스트하는 아주 기초적인 방법을 보여드렸습니다만, Jest는 훨씬 강력한 기능을 제공합니다. 예를 들어 자체적으로 단언 함수를 가지고 있지요(<code class=\\\"language-text\\\">toEqual()</code> 등). Jest의 공식 문서를 한번 살펴보시고 어떤 기능을 가지고 있는지 찾아보시는걸 추천합니다. 이 라이브러리 자체는 굉장히 강력하지만 어찌되었든 고안된 목적 자체가 여러분의 컴포넌트 테스트를 쉽게 만들기 위해서라는 점을 명심하세요. 스냅샷 테스트를 테스트 묶음(Test Suite)에 추가하는데 너무 많은 개발 비용을 들이지 마세요.</p>\\n<p><strong>역주: 보통 Jest와 스냅샷 테스트를 할 때는 Enzyme을 함께 사용하는 경우가 많습니다. 실제로 이 튜토리얼의 저자도 같이 사용하는 것을 언급했었지요. Enzyme과 함께 스냅샷 테스트를 하는 방법은 <a href=\\\"https://velopert.com/3587\\\">다음의 튜토리얼</a>과 <a href=\\\"https://github.com/adhrinae/ts-react-parcel\\\">저장소</a>를 참고하시기 바랍니다.</strong></p>\\n<h2 id=\\\"cypressio를-활용한-리액트-전체-테스트\\\"><a href=\\\"#cypressio%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%A0%84%EC%B2%B4-%ED%85%8C%EC%8A%A4%ED%8A%B8\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Cypress.io를 활용한 리액트 전체 테스트</h2>\\n<p>엔드-투-엔드 테스트(E2E, 이 번역문에서는 전체 테스트라 명명합니다)는 예로부터 지금까지 어떤 테스트 프레임워크를 써도 지루한 일이었습니다. 요즘은 많은 사람들이 <a href=\\\"https://cypress.io\\\">Cypress.io</a> 로 전체 테스트를 하고 있습니다. Cypress의 문서는 아주 높은 수준으로 작성되어있고, 그 API는 간단명료합니다. 이제 우리가 작성한 코드로 Cypress를 활용한 전체 테스트를 해보겠습니다. 먼저 Cypress를 개발 의존성에 추가합니다. (역주: 네트워크 환경에 따라 굉장히 시간이 오래 걸리니 유의하시기 바랍니다)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">npm install --save-dev cypress</code></pre>\\n      </div>\\n<p>그리고 Cypress와 전체 테스트에 관련된 폴더를 프로젝트 폴더 안에 만듭니다. 이 폴더 구조는 <a href=\\\"https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests.html#Configuring-Folder-Structure\\\">Cypress에서 제공된 문서</a>를 따릅니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">mkdir cypress\\ncd cypress\\nmkdir integration\\ncd integration</code></pre>\\n      </div>\\n<p>세 번째 단계로 <code class=\\\"language-text\\\">package.json</code> 파일에 실행 스크립트를 추가합니다. 커맨드 라인으로 간단하게 Cypress를 실행할 수 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token property\\\">\\\"scripts\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"start\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"webpack-dev-server --config ./webpack.config.js --mode development\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:unit\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"mocha --require babel-core/register --require ./test/helpers.js --require ./test/dom.js --require ignore-styles 'src/**/*.spec.js'\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:unit:watch\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"npm run test:unit -- --watch\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:snapshot\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"jest --config ./test/jest.config.json\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:snapshot:watch\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"npm run test:snapshot -- --watch\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:cypress\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"cypress open\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<p>처음 Cypress를 실행하면 아마 제가 제공하는 화면과 비슷한 화면이 나올 겁니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">npm run test:cypress</code></pre>\\n      </div>\\n<p>아직 아무 테스트가 없다는 메세지로 \\\"No files found in\\\" 이라는 메세지가 나타납니다.</p>\\n<p><img src=\\\"https://cl.ly/1g1i350q0j3H/Screen%20Shot%202018-05-12%20at%2008.45.03.png\\\" alt=\\\"Cypress 첫 실행 이미지\\\"></p>\\n<p>그러면 <code class=\\\"language-text\\\">cypress/integration</code> 폴더에 <code class=\\\"language-text\\\">App</code>  컴포넌트의 전체 테스트를 작성해보겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">touch App.e2e.js</code></pre>\\n      </div>\\n<p>첫 번째 테스트는 그다지 전체 테스트 같진 않지만, 일단 실행해보고 Cypress가 실제로 동작하는 것을 확인하실 수 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'App E2E'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'should assert that true is equal to true'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>이미 <code class=\\\"language-text\\\">describe</code>, <code class=\\\"language-text\\\">it</code> 블록은 친숙하게 느껴지시리라 생각합니다. 기존에 보시던 대로 이 블록들은 테스트를 특정 블록 안으로 캡슐화하는데 사용됩니다. Cypress는 실제로 Mocha를 기반에 두고 만들어졌기 때문에 위와 같은 블록들도 차용했다고 합니다. <code class=\\\"language-text\\\">expect</code> 같은 단언 문법은 Chai에서 가져왔습니다. <strong>Cypress는 위와 같은 유명한 툴과 프레임워크를 기반으로 삼고 만들어졌기 때문에 친숙함을 느끼고 동작을 손쉽게 파악할 수 있습니다.</strong></p>\\n<p>그러면 다시 Cypress를 커맨드 라인으로 실행해보겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">npm run test:cypress</code></pre>\\n      </div>\\n<p>아래 그림과 같은 결과물을 보실 수 있을 겁니다. Cypress는 <code class=\\\"language-text\\\">cypress/</code> 폴더 아래에 있는 테스트를 찾아서 대시보드에 표시해 주고, 그 테스트를 하나씩 실행할지 아니면 전체 테스트를 다 실행할지 선택할 수 있습니다.</p>\\n<p><img src=\\\"https://cl.ly/2I0x2G3E0C44/Screen%20Shot%202018-05-12%20at%2009.31.32.png\\\" alt=\\\"첫 Cypress 테스트\\\"></p>\\n<p>테스트를 실행하고 <code class=\\\"language-text\\\">true</code> 와 <code class=\\\"language-text\\\">true</code> 가 같은지 확인해봅시다. 당연하게도 테스트는 성공이라고 나타나겠지요. 그렇지 않다면 무언가 문제가 있다는 겁니다. 반대로 테스트를 수정해서 일부러 실패하게 만들어 볼 수도 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'App E2E'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'should assert that true is equal to true'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>원하신다면 Cypress를 실행하자마자 모든 테스트를 실행하도록 스크립트를 수정하셔도 됩니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token property\\\">\\\"scripts\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"start\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"webpack-dev-server --config ./webpack.config.js --mode development\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:unit\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"mocha --require babel-core/register --require ./test/helpers.js --require ./test/dom.js --require ignore-styles 'src/**/*.spec.js'\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:unit:watch\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"npm run test:unit -- --watch\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:snapshot\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"jest --config ./test/jest.config.json\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:snapshot:watch\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"npm run test:snapshot -- --watch\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:cypress\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"cypress run\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<p>커맨드 라인에서 다시 테스트를 실행하면 모든 테스트가 자동으로 실행되는데다 무슨 비디오 녹화가 완료되었다는 메세지도 보실 수 있을 겁니다. 이 비디오는 보통 Cypress 테스트 폴더 아래에 <code class=\\\"language-text\\\">videos/</code> 라는 폴더에 저장됩니다. 테스트 실행 시 비디오 뿐만 아니라 스크린샷도 자동으로 저장되도록 할 수 있습니다. 이 내용에 대해서는 <a href=\\\"https://docs.cypress.io/guides/guides/screenshots-and-videos.html#\\\">공식 문서를 참고하시기 바랍니다.</a></p>\\n<p>자동 저장이 마음에 들지 않는다면 프로젝트 폴더에 설정 파일을 만들어서 자동 저장을 비활성화 할 수 있습니다. Cypress 처음 실행 시 프로젝트 루트 폴더에 <code class=\\\"language-text\\\">cypress.json</code> 파일이 생성되었을텐데, 그렇지 않다면 프로젝트 루트 폴더에 파일을 만들어주어야 합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">touch cypress.json</code></pre>\\n      </div>\\n<p>설정 파일에서 <code class=\\\"language-text\\\">videoRecording</code> 이라는 플래그를 비활성화합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"videoRecording\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">false</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>다양한 설정 방법을 알아보시려면 <a href=\\\"https://docs.cypress.io/guides/references/configuration.html\\\">Cypress의 문서를 참고하세요.</a></p>\\n<p>결과적으로 여러분은 직접 만든 리액트 애플리케이션을 Cypress로 테스트하고 싶으실 겁니다. Cypress는 전체 테스트를 위한 도구이기 때문에 Cypress로 애플리케이션에 접속하기 전에 먼저 애플리케이션을 실행해야 합니다. 이 경우에는 로컬 서버를 미리 실행해야겠네요.</p>\\n<p>Cypress 스크립트가 실행되기 전에 자동으로 개발 서버(여기서는 webpack-dev-server)를 실행하는 방법은 없을까요? 마침 이런 역할을 해 주는 <a href=\\\"https://github.com/bahmutov/start-server-and-test\\\">깔쌈한 라이브러리</a>가 있습니다. 먼저 이 라이브러리를 개발 의존성에 추가합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">npm install --save-dev start-server-and-test</code></pre>\\n      </div>\\n<p>그 다음 <code class=\\\"language-text\\\">package.json</code> 에 스크립트를 추가합니다. 스크립트는 <code class=\\\"language-text\\\">시작 스크립트 이름</code> <code class=\\\"language-text\\\">url</code> <code class=\\\"language-text\\\">테스트 스크립트 이름</code> 순으로 적으면 됩니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token property\\\">\\\"scripts\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"start\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"webpack-dev-server --config ./webpack.config.js --mode development\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:unit\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"mocha --require babel-core/register --require ./test/helpers.js --require ./test/dom.js --require ignore-styles 'src/**/*.spec.js'\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:unit:watch\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"npm run test:unit -- --watch\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:snapshot\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"jest --config ./test/jest.config.json\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:snapshot:watch\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"npm run test:snapshot -- --watch\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:cypress\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"start-server-and-test start http://localhost:8080 cypress\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"cypress\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"cypress run\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<p>마지막으로 실제 Cypress로 애플리케이션에 접속하는 전체 테스트를 작성해보겠습니다. Cypress 테스트 코드를 작성할 때 <code class=\\\"language-text\\\">cy</code> 라는 전역 객체를 사용하여 동작을 정의할 수 있습니다. 애플리케이션에 방문하고 <code class=\\\"language-text\\\">h1</code> 태그를 확인하는 테스트를 작성해보죠.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'App E2E'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'헤더가 있어야 한다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">visit</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://localhost:8080'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'h1'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">should</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'have.text'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'My Counter'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>기본적으로 Cypress로 CSS 선택자를 지정하고, 단언을 할 때는 이런 방식으로 합니다. 다시 테스트를 실행해 보면 성공했다고 나옵니다.</p>\\n<p>Cypress 테스트 시 권장 설정을 말씀드리면, 기본 URL을 <code class=\\\"language-text\\\">cypress.json</code> 설정 파일에 지정해두시는게 좋습니다. 단순히 타이핑을 덜 하게 할 뿐 아니라 실행 속도에도 영향을 줍니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"videoRecording\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"baseUrl\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"http://localhost:8080\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>이제 테스트 코드에서 URL을 지우고 절대 경로를 사용해도 됩니다. 이제 언제나 설정에서 주어진 URL 기반으로 동작합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'App E2E'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'헤더가 있어야 한다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">visit</span><span class=\\\"token punctuation\\\">(</span>‘<span class=\\\"token operator\\\">/</span>‘<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'h1'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">should</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'have.text'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'My Counter'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>그 다음에 리액트 애플리케이션의 버튼을 누르는 동작을 테스트할 겁니다. 각각의 버튼을 누르고 나서 카운터의 숫자가 바뀌는지를 확인합니다. 일단 카운터에 0이라는 숫자가 제대로 표시되는지 확인해보죠.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'App E2E'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'헤더가 있어야 한다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">visit</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'h1'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">should</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'have.text'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'My Counter'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'카운터를 늘리거나 줄일수 있어야 한다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">visit</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'p'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">should</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'have.text'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'0'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>그리고 <a href=\\\"https://docs.cypress.io/guides/core-concepts/interacting-with-elements.html\\\">버튼을 조종하면서</a> 카운터를 늘리거나 줄여보겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'App E2E'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'헤더가 있어야 한다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">visit</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'h1'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">should</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'have.text'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'My Counter'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'카운터를 늘리거나 줄일수 있어야 한다'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">visit</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'p'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">should</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'have.text'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'0'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">contains</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Increment'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">click</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'p'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">should</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'have.text'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'1'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">contains</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Increment'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">click</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'p'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">should</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'have.text'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'2'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">contains</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Decrement'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">click</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    cy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'p'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">should</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'have.text'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'1'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>이렇게 여러분은 Cypress로 전체 테스트를 작성했습니다. URL과 URL 사이를 오갈 수도 있고, 다른 HTML 요소에 접근하고 그려진 결과물을 확인해볼 수 있습니다. 두 가지만 더 말씀드리자면</p>\\n<ul>\\n<li>전체 테스트에 샘플 데이터를 끼워넣고 싶으시다면 Cypress에서 제공하는 <a href=\\\"https://docs.cypress.io/api/commands/fixture.html#Syntax\\\">fixture</a>를 이용하시면 됩니다.</li>\\n<li>테스트를 할 때 관찰을 Spy, Stub, Mock 함수가 필요하시다면 Sinon을 사용하시면 됩니다. Cypress는 비동기 코드 테스트를 할 때 활용할 수 있도록 Sinon을 기본적으로 내장하고 있습니다.</li>\\n</ul>\\n<h2 id=\\\"리액트-컴포넌트-테스트와-cicontinuous-integration\\\"><a href=\\\"#%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%99%80-cicontinuous-integration\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>리액트 컴포넌트 테스트와 CI(Continuous Integration)</h2>\\n<p><a href=\\\"https://ko.wikipedia.org/wiki/%EC%A7%80%EC%86%8D%EC%A0%81_%ED%86%B5%ED%95%A9\\\">CI(지속적 통합)</a>을 할 때 리액트 컴포넌트 테스트가 여타 테스트와 크게 다른 점은 없습니다. 따라서 이 글에선 Travis CI를 사용하여 CI를 설정하는 방법을 보여드리겠습니다. 이런 설정을 할 때 기존에 익숙한 CI를 사용하셔도 상관 없습니다.</p>\\n<p>CI환경 아래서 모든 빌드 과정을 거치며 (리액트) 애플리케이션이 테스트되도록 해야합니다. 예를 들어 빌드 중에 테스트가 성공하지 못했다면 빌드가 실패해야 합니다. 이런 식으로 언제나 배포 전에 테스트의 성공 여부를 확인할 수 있습니다.</p>\\n<p>만약 Github 계정이나 git 설정이 되어있지 않다면 이 가이드를 보고 <a href=\\\"https://www.robinwieruch.de/git-essential-commands/\\\">Github과 git을 사용하는 기기에 설정해 주세요.</a> 그러면 Github에 여태 만든 프로젝트를 올리기 위한 저장소를 만들 수 있고, 변경 사항을 커밋한 다음 원격 저장소에 올릴(push) 수 있습니다.</p>\\n<p>그 다음 Github 계정으로 Travis CI의 계정을 만듭니다. 계정을 만드셨다면 대시보드가 보일테고, 여러분의 Github 계정에 있는  저장소의 목록이 보이게 됩니다. 여기서 어떤 저장소를 동기화할지 고르시면 됩니다. 우리가 CI를 설정하고자 하는 저장소를 토글하시면 됩니다.</p>\\n<p><img src=\\\"https://cl.ly/3a2N0n3L3D3p/Screen%20Shot%202018-05-13%20at%2014.58.58.png\\\" alt=\\\"Travis CI 설정\\\"></p>\\n<p>이제 Travis CI와 Github 저장소가 동기화되었습니다. 남은 일은 Travis CI에게 CI환경에서 애플리케이션을 설치하고 실행하는 법을 알려주는 겁니다. 프로젝트 루트 폴더에 Travis 설정 파일을 만듭니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">touch .travis.yml</code></pre>\\n      </div>\\n<p>그리고 다음의 설정을 입력합니다. 제일 중요한 부분은 테스트를 돌리기 위해 어떤 스크립트를 입력하느냐 입니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-yaml\\\"><code class=\\\"language-yaml\\\"><span class=\\\"token key atrule\\\">language</span><span class=\\\"token punctuation\\\">:</span> node_js\\n\\n<span class=\\\"token key atrule\\\">node_js</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token punctuation\\\">-</span> stable\\n\\n<span class=\\\"token key atrule\\\">install</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token punctuation\\\">-</span> npm install\\n\\n<span class=\\\"token key atrule\\\">script</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token punctuation\\\">-</span> npm run test<span class=\\\"token punctuation\\\">:</span>unit &amp;&amp; npm run test<span class=\\\"token punctuation\\\">:</span>snapshot</code></pre>\\n      </div>\\n<p>이렇게 설정을 하고 Github 저장소에 푸시합니다. 저장소에 새로운 내용이 갱신될때마다 Travis CI는 자동으로 변화를 감지하고 프로젝트를 다시 빌드합니다. 대시보드에서 빌드 과정을 확인하고 테스트가 성공했는지 실패했는지 확인하실 수 있습니다. 당연히 녹색(성공)이 떠야겠죠.</p>\\n<p>CI에 Cypress를 사용한 전체 테스트를 추가할 수도 있습니다. (역주: 전체 테스트를 할 때 <code class=\\\"language-text\\\">start-server-and-test</code> 패키지를 활용한 스크립트가 개발 서버 실행 단계에서 멈추는 현상이 있습니다. CI 머신이 느려서 제가 못참고 꺼버린건지는 모르겠습니다만.. CI 빌드 과정만 확인하시려면 위의 스크립트정도만 적용해보시길 권합니다.)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-yaml\\\"><code class=\\\"language-yaml\\\"><span class=\\\"token key atrule\\\">language</span><span class=\\\"token punctuation\\\">:</span> node_js\\n\\n<span class=\\\"token key atrule\\\">node_js</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token punctuation\\\">-</span> stable\\n\\n<span class=\\\"token key atrule\\\">install</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token punctuation\\\">-</span> npm install\\n\\n<span class=\\\"token key atrule\\\">script</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token punctuation\\\">-</span> npm run test<span class=\\\"token punctuation\\\">:</span>unit &amp;&amp; npm run test<span class=\\\"token punctuation\\\">:</span>snapshot &amp;&amp; npm run test<span class=\\\"token punctuation\\\">:</span>cypress</code></pre>\\n      </div>\\n<p>최종 단계로 Github 저장소에 멋진 뱃지를 달 수 있습니다. 프로젝트의 <code class=\\\"language-text\\\">README.md</code> 파일을 열거나 없다면 프로젝트 루트 폴더에 하나 만듭니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">touch README.md</code></pre>\\n      </div>\\n<p>이제 마크다운(Markdown) 문법을 사용하여 프로젝트 설명을 적을 수 있습니다. Github 저장소에 올리게 되면 나타나게 됩니다만 하셔도 되고 안하셔도 됩니다. 리드미 파일이 있으니 그 안에 빌드가 성공하는지 실패하는지 보여주는 멋진 뱃지를 달 수 있습니다. Travis CI 대시보드에서 여러분이 연결한 프로젝트를 찾아보시면 \\\"build passing\\\" 이라는 뱃지를 발견하실 수 있을겁니다.</p>\\n<p>뱃지를 클릭하면 저장소에 뱃지를 표시하기 위한 정보가 전부 표시됩니다. 마크다운 버전으로 선택하시면 <code class=\\\"language-text\\\">README.md</code> 에 어떻게 표시해야하는지 정보가 나타납니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-markdown\\\"><code class=\\\"language-markdown\\\"><span class=\\\"token title important\\\"><span class=\\\"token punctuation\\\">#</span> React Component Test Example</span>\\n\\n[![Build Status](https://travis-\\nci.org/adhrinae/react-application-test-example.svg?branch=master)](https://travis-ci.org/adhrinae/react-application-test-example)</code></pre>\\n      </div>\\n<p>위의 예시는 제 프로젝트를 표시하는 뱃지이니 실제로 사용하실 때는 저 내용을 그대로 복사/붙여넣기 하시면 안됩니다. 이제 빌드가 실패하면 상태를 알 수 있는 CI 설정이 프로젝트에 추가되었습니다. 또한 다른 사람들에게 이 프로젝트의 빌드 상태가 어떤지 보여줄 수 있는 뱃지도 추가했습니다. 이런 방식으로 여러분이 만든 프로젝트의 신뢰도를 나타낼 수 있습니다.</p>\\n<h2 id=\\\"coveralls로-리액트-컴포넌트의-테스트-커버리지-확인하기\\\"><a href=\\\"#coveralls%EB%A1%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BB%A4%EB%B2%84%EB%A6%AC%EC%A7%80-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Coveralls로 리액트 컴포넌트의 테스트 커버리지 확인하기</h2>\\n<p>CI 환경과 마찬가지로 Coveralls도 리액트 컴포넌트 테스트를 할 때 필수는 아닙니다. Coveralls는 애플리케이션의 테스트 커버리지를 표시할 때 사용됩니다. 우리가 만든 리액트 애플리케이션의 테스트 커버리지를 어떻게 표시하는지 한번 시도해 보겠습니다. 먼저 Github 계정을 이용하여 <a href=\\\"https://coveralls.io\\\">Coveralls.io</a>에 가입합니다 그리고 필요한 Github 저장소를 토글하여 동기화합니다.</p>\\n<p><img src=\\\"https://cl.ly/2S2i003A1c3A/Screen%20Shot%202018-05-13%20at%2016.12.54.png\\\" alt=\\\"Coveralls 설정\\\"></p>\\n<p>그리고 'Details' 버튼을 누른 다음 <code class=\\\"language-text\\\">repo_token</code> 을 복사합니다. 보통은 이런 비밀 토큰을 바로 공개 프로젝트에 드러내고 싶진 않으실테니 Travis CI의 대시보드에서 저장소를 찾아 토큰을 추가합니다.</p>\\n<p><img src=\\\"https://cl.ly/2M15263v1T3G/Screen%20Shot%202018-05-13%20at%2016.15.34.png\\\" alt=\\\"Coveralls 토큰을 Travis CI에 추가\\\"></p>\\n<p>CI 설정에서 환경변수를 등록할 수 있습니다. <code class=\\\"language-text\\\">coveralls_repo_token</code> 이라는 이름으로 등록해줍니다.</p>\\n<p><img src=\\\"https://cl.ly/3C2R1b140R2k/Screen%20Shot%202018-05-13%20at%2016.18.17.png\\\" alt=\\\"Travis CI에 환경 변수 등록하기\\\"></p>\\n<p>이제 프로젝트의 설정을 변경해주면 됩니다. 맨 처음 <code class=\\\"language-text\\\">coveralls</code> 라이브러리를 개발 의존성으로 추가합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">npm install --save-dev coveralls</code></pre>\\n      </div>\\n<p>다음에 <code class=\\\"language-text\\\">package.json</code> 에 coveralls를 실행하는 스크립트를 추가합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token property\\\">\\\"scripts\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"start\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"webpack-dev-server --config ./webpack.config.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:unit\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"mocha --require babel-core/register --require ./test/helpers.js --require ./test/dom.js --require ignore-styles 'src/**/*.spec.js'\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:unit:watch\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"npm run test:unit -- --watch\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:snapshot\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"jest --config ./test/jest.config.json\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"test:snapshot:watch\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"npm run test:snapshot -- --watch\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"coveralls\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"cat ./src/coverage/lcov.info | node node_modules/.bin/coveralls\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<p>세 번째로 Travis CI 설정을 바꿔서 coveralls.io 대시보드에 커버리지를 표시하도록 만듭니다. (역주: 튜토리얼에서는 Node.js 버전을 <code class=\\\"language-text\\\">stable</code> 로 지정하였지만, 튜토리얼 작성 시점과 달리 현재 안정화 버전은 10.1.0 입니다. 하지만 coveralls 패키지는 현재 노드 버전 10을 지원하지 않기 때문에 버전을 직접 고정해주시는게 좋습니다.)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-yaml\\\"><code class=\\\"language-yaml\\\"><span class=\\\"token key atrule\\\">language</span><span class=\\\"token punctuation\\\">:</span> node_js\\n\\n<span class=\\\"token key atrule\\\">node_js</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token punctuation\\\">-</span> 8.11.1\\n\\n<span class=\\\"token key atrule\\\">install</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token punctuation\\\">-</span> npm install\\n\\n<span class=\\\"token key atrule\\\">script</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token punctuation\\\">-</span> npm run test<span class=\\\"token punctuation\\\">:</span>unit <span class=\\\"token punctuation\\\">-</span><span class=\\\"token punctuation\\\">-</span> <span class=\\\"token punctuation\\\">-</span><span class=\\\"token punctuation\\\">-</span>coverage &amp;&amp; npm run test<span class=\\\"token punctuation\\\">:</span>snapshot <span class=\\\"token punctuation\\\">-</span><span class=\\\"token punctuation\\\">-</span> <span class=\\\"token punctuation\\\">-</span><span class=\\\"token punctuation\\\">-</span>coverage &amp;&amp; npm run test<span class=\\\"token punctuation\\\">:</span>cypress\\n\\n<span class=\\\"token key atrule\\\">after_script</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token punctuation\\\">-</span> COVERALLS_REPO_TOKEN=$coveralls_repo_token npm run coveralls</code></pre>\\n      </div>\\n<p>다 됐습니다. 변경 사항을 Github 저장소로 푸시하시면 빌드가 끝나고 coveralls.io 대시보드에 테스트 커버리지를 확인하실 수 있습니다.</p>\\n<p><img src=\\\"https://cl.ly/0d1c0S1B3f0m/Screen%20Shot%202018-05-13%20at%2017.01.04.png\\\" alt=\\\"Coveralls 결과\\\"></p>\\n<p>커버리지가 생각보다 높진 않다는 것을 보실 수 있는데요. 테스트를 더 작성하여 커버리지를 높일 지는 하시기 나름입니다.</p>\\n<p>Travis CI의 뱃지를 추가할 때와 마찬가지로 Coveralls도 멋진 뱃지를 추가할 수 있습니다. coveralls.io 대시보드에 있는 뱃지를 클릭하여 추가하는 코드를 확인하실 수 있습니다. 이 코드도 <code class=\\\"language-text\\\">README.md</code> 파일에 추가합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-markdown\\\"><code class=\\\"language-markdown\\\"><span class=\\\"token title important\\\"><span class=\\\"token punctuation\\\">#</span> React Application Test Example</span>\\n\\n<span class=\\\"token url\\\">[![Coverage Status](https://coveralls.io/repos/github/adhrinae/react-application-test-example/badge.svg?branch=master)</span>](https://coveralls.io/github/adhrinae/react-application-test-example?branch=master)</code></pre>\\n      </div>\\n<p>저장소 주소가 제대로 되어있는지 다시 확인해주세요. 이렇게 마지막 과정으로 리액트 테스팅 환경에서 커버리지까지 확인해볼 수 있었습니다. 지금까지 작성한 예제보다 더 높은 테스트 커버리지를 노려보세요 :)</p>\\n<h2 id=\\\"마치며\\\"><a href=\\\"#%EB%A7%88%EC%B9%98%EB%A9%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>마치며</h2>\\n<p>드디어 기나긴 리액트 테스팅 튜토리얼을 마칩니다. 여러분이 직접 자신만의 리액트 테스팅 환경을 구축하고, 첫 테스트를 작성한 뒤에 CI를 구축하여 배포 전에 애플리케이션의 안정성을 확인해 보는 방법을 배우셨길 바랍니다. 이번 튜토리얼의 예제 전체는 <a href=\\\"https://github.com/rwieruch/react-components-test-setup\\\">이 저장소</a>에서 확인하실 수 있습니다. 한마디 더 말씀드리자면, 앞서 보신 간단한 테스트 패턴들은 리액트 애플리케이션 테스트를 작성할 때 짜증을 유발하기보다 더 습관에 가깝게 작성할 수 있도록 도우리라 생각합니다. 당장 여러분의 애플리케이션에 테스트 몇개 작성하는 것도 크게 어렵지 않을 겁니다. 리액트 애플리케이션 테스팅을 할 때 또 다른 팁이 있으시다면 언제든지 댓글로 의견을 남겨주세요. 읽어주셔서 고맙습니다 :)</p>\\n<hr>\\n<h2 id=\\\"번역-후기\\\"><a href=\\\"#%EB%B2%88%EC%97%AD-%ED%9B%84%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>번역 후기</h2>\\n<p>처음 튜토리얼이 올라오고 원 저자인 Robin에게 허락을 받은 뒤 저장소를 만들고, 최종 결과물을 내기까지 거의 1.5개월이 걸렸습니다. 아무리 바쁜 나날을 보냈다 하더라도 조금은 더 빨리 마무리 할 수 있었으리라 하는 아쉬움이 있네요.</p>\\n<p>테스팅에 대해 기존에 여러 글을 번역했습니다만, 조금 더 밑바닥부터 설정하는 방법에 초점을 맞춘 글을 번역하거나 작성하진 못했습니다. 마침 이 글이 그 부분에서 크게 도움이 된다고 생각하여 번역을 진행했고, 저도 번역 과정에서 많은 내용을 공부할 수 있었습니다.</p>\\n<p>개인적으로 Mocha + Chai 설정을 하시기 보다 바로 Jest 설정을 하는 방법부터 진행하시는걸 추천하긴 합니다. 요즘 어지간해서는 Jest로 테스트 설정을 하니까요. 다만 이 튜토리얼은 Jest를 스냅샷 테스트하는데만 사용합니다. 공식 문서등을 참고해서 전반적인 테스트 설정하는 법을 보시는게 좋습니다.</p>\\n<p>컴포넌트를 테스트하는 일은 생각보다 복잡하거나 어려울 수 있습니다. 그래서 보통 스냅샷 테스트를 남발하는 경향이 있는데, 애플리케이션의 복잡성이 늘어날 수록 조금 더 구체적인 테스트를 작성하는게 도움이 되리라 생각합니다. 하지만 꾸준히 관리하는 스냅샷 테스트를 가지고 있는 프로젝트는 아예 테스트가 없는 프로젝트보단 확실히 낫겠지요.</p>\\n<p>그럼 앞으로도 테스트와 함께 버그 적은 애플리케이션을 작성하시길 바랍니다 :)</p>\",\"id\":\"/home/circleci/repo/src/pages/posts/2018-05-15-react-testing-tutorial-kr/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-05-15\",\"path\":\"/posts/react-testing-tutorial-kr\",\"title\":\"[번역] 리액트 테스팅 튜토리얼: 테스트 프레임워크와 컴포넌트 테스트 방법\",\"tags\":[\"Javascript\",\"React\",\"Testing\",\"Translation\"],\"category\":\"React\"}},{\"excerpt\":\"더 좋은 테스트를 위한 번역 시리즈 그래서, 자바스크립트 테스트가 뭔가요? 테스트를 작성하라. 너무 많이는 말고. 통합 테스트를 많이 써라. 리덕스 앱을 저비용 고효율로 통합 테스트 하기 리액트 + 리덕스 앱을 Jest와 Enzyme…\",\"html\":\"<p><strong>더 좋은 테스트를 위한 번역 시리즈</strong></p>\\n<ol>\\n<li><a href=\\\"/posts/what-is-testing-javascript-kr\\\">그래서, 자바스크립트 테스트가 뭔가요?</a></li>\\n<li><a href=\\\"/posts/write-mostly-integration-test-kr\\\">테스트를 작성하라. 너무 많이는 말고. 통합 테스트를 많이 써라.</a></li>\\n<li><a href=\\\"/posts/integration-tests-in-redux-apps-kr\\\">리덕스 앱을 저비용 고효율로 통합 테스트 하기</a></li>\\n<li><a href=\\\"/posts/lessons-learned-testing-react-redux-apps-with-jest-and-enzyme-kr\\\">리액트 + 리덕스 앱을 Jest와 Enzyme으로 테스트하며 얻은 교훈</a></li>\\n</ol>\\n<h2 id=\\\"번역-서문\\\"><a href=\\\"#%EB%B2%88%EC%97%AD-%EC%84%9C%EB%AC%B8\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>번역 서문</h2>\\n<p>더 좋은 (리액트 애플리케이션) 테스트를 위한 번역 시리즈 마지막입니다. 처음에는 팀원들과 공유하기 위해 테스트의 기초적인 부분을 다루는 글을 번역하려다가, 최대한 실전에 도움이 되면서도 부담없이 시작할 수 있는 내용 위주로 좋은 글을 찾아서 번역해보았습니다.</p>\\n<p>제 자신도 번역을 통해 ‘어디까지 테스트하는게 실무에 도움이 많이 될까?’ 라는 질문의 답을 얻는데 많은 도움이 되었습니다. 이제 테스트만 잘 짜면 될텐데요.</p>\\n<p><img src=\\\"https://cl.ly/0P3O322S1P3y/Screen%20Shot%202018-01-27%20at%2014.46.48.png\\\" alt=\\\"test-right-now\\\"></p>\\n<p>다음에는 어떤 글을 쓰거나 번역할지 아직 모르겠지만 모쪼록 도움이 되었으면 좋겠습니다.</p>\\n<p><a href=\\\"https://medium.com/@Tetheta/lessons-learned-testing-react-redux-apps-with-jest-and-enzyme-eb581d6d167b\\\">원문은 여기서 보실 수 있습니다</a></p>\\n<hr>\\n<p>만약 여러분이 기술 중심 회사에서 일하시는게 아니라면, 단위 테스트같은 개발 요소를 도입한다고 관리자를 설득하는게 어려울 수 있습니다. 저는 한동안 열렬한 지지자가 되어(역주: 필자 자신이 ‘관리자’ 임을 암시하는 문장이라 봅니다)  몇몇 프로젝트에 단위 테스트를 도입하고 동료들과 몇 가지 패턴을 도입해보았습니다. 그 과정에서 제가 배운 교훈을 이야기하고자 합니다.</p>\\n<h2 id=\\\"설정이-만만치-않습니다-\\\"><a href=\\\"#%EC%84%A4%EC%A0%95%EC%9D%B4-%EB%A7%8C%EB%A7%8C%EC%B9%98-%EC%95%8A%EC%8A%B5%EB%8B%88%EB%8B%A4-\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>설정이 만만치 않습니다 😐</h2>\\n<p>여러분이 create-react-app 같은 것을 사용하고 있거나 회사에서 이미 Jest + Enzyme 설정을 해 두었다면 아주 좋습니다!</p>\\n<p>저처럼 밑바닥부터 설정해야 한다면 몇 가지 유의하실 점이 있습니다.</p>\\n<ol>\\n<li>Jest는 노드 환경에서 실행됩니다. 즉 Webpack같은 번들러의 결과물을 실행하는 것이 아니라 파일의 코드 그대로 실행한다는 뜻입니다. 따라서 ES6나 기타 문법을 사용하고 싶다면 테스트 환경에서 사용하는 <code class=\\\"language-text\\\">.babelrc</code> 파일을 설정해야 합니다.</li>\\n<li>위에 이어서 브라우저가 아니라 노드 환경에서 실행되기 때문에 import, export 같은 문법을 사용하기 위해 폴리필을 추가해야 할 수도 있습니다.</li>\\n<li>최신 버전의 Enzyme은 Jest가 제대로 실행되기 위해 <a href=\\\"http://airbnb.io/enzyme/#installation\\\">설정 파일이 필요합니다</a>.</li>\\n<li>아마 폰트, 이미지, 스타일 파일들을 잔뜩 모킹해야 할지도 모릅니다.</li>\\n<li>CI(Continuous Integration) 빌드 중 테스트를 실행하고 싶다면 <code class=\\\"language-text\\\">testResultProcessor</code>, <code class=\\\"language-text\\\">runInBand</code> 설정을 해 주시는게 좋습니다. 저는 <a href=\\\"https://github.com/CHECK24/jest-bamboo-reporter\\\">Bamboo</a>를 사용하고 있습니다.</li>\\n</ol>\\n<p>컴포넌트를 작성하는 환경과 테스트를 작성하는 환경을 최대한 비슷하게 맞추기 위해(ES2017, import/export 등) 제대로 된 폴리필을 설정하는 것이 가장 큰 장벽이었습니다. React 버전 16으로 업그레이드 하는 것도 꽤 흥미로운 일이었지만 이제 대부분은 자연스럽게 적응(최소한 문서화라도)했습니다.</p>\\n<p>기회가 된다면 언젠가 제 설정을 짚어보는 포스트를 써 볼지도 모릅니다. 제 프로젝트의 일부는 그저 문서로 남겨두기엔 특이한 환경을 가지고 있었고, 고통스럽기도 했습니다.</p>\\n<h2 id=\\\"스냅샷을-사용하세요-json-serializer와-함께-사용하면-더-좋습니다\\\"><a href=\\\"#%EC%8A%A4%EB%83%85%EC%83%B7%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%84%B8%EC%9A%94-json-serializer%EC%99%80-%ED%95%A8%EA%BB%98-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EB%8D%94-%EC%A2%8B%EC%8A%B5%EB%8B%88%EB%8B%A4\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>스냅샷을 사용하세요 (json serializer와 함께 사용하면 더 좋습니다)</h2>\\n<p>스냅샷은 아주 좋습니다 😃. 하지만 이런 코드를 실행하면</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Match previous snapshot'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>wrapper<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toMatchSnapshot</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>그냥 enzyme이 사용하는 자체 객체를 뱉어버립니다😦. 저는 <a href=\\\"https://github.com/adriantoine/enzyme-to-json\\\">enzyme-to-json</a> 같은 패키지를 써서 가독성을 높이길 추천합니다. 스냅샷이 변경되었을 때 아주 유용합니다.</p>\\n<p>그리고 스냅샷을 버전 관리 시스템(Git 등)에 포함시키세요. 여러분이 반영한 변경 사항이 갑자기 문제를 일으킬 때 문제점을 찾는 데 큰 도움이 됩니다.</p>\\n<h2 id=\\\"jest-watch-도-좋습니다-\\\"><a href=\\\"#jest-watch-%EB%8F%84-%EC%A2%8B%EC%8A%B5%EB%8B%88%EB%8B%A4-\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>jest —watch 도 좋습니다 😃</h2>\\n<p>테스트 할 때 반드시 사용하세요! 여러가지 일을 편하게 만들어주고, 패턴 매치(<code class=\\\"language-text\\\">p</code> 키를 누른 뒤 파일이나 폴더 이름을 입력해보세요)를 사용해서 매번 저장할 때마다 모든 테스트를 다시 실행하지 않게 만들 수도 있습니다.</p>\\n<h2 id=\\\"test-문의-괄호가-제대로-놓여있는지-확인하세요\\\"><a href=\\\"#test-%EB%AC%B8%EC%9D%98-%EA%B4%84%ED%98%B8%EA%B0%80-%EC%A0%9C%EB%8C%80%EB%A1%9C-%EB%86%93%EC%97%AC%EC%9E%88%EB%8A%94%EC%A7%80-%ED%99%95%EC%9D%B8%ED%95%98%EC%84%B8%EC%9A%94\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>test() 문의 괄호가 제대로 놓여있는지 확인하세요</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Test'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>test<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toEqual</span><span class=\\\"token punctuation\\\">(</span>test<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>위의 코드는 지극히 정상적인 자바스크립트 코드지만 테스트를 실행하면 모두 잘 작동한다면서 아무 일도 일어나지 않을 겁니다.</p>\\n<p>올바른 코드는 이렇게 작성합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Test'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>test<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toEqual</span><span class=\\\"token punctuation\\\">(</span>test<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>이런 실수는 쉽게 저지를 수 있는데다 테스트에 문제가 있는데도 통과하기 때문에 특히 무섭습니다. 저는 특정 단위 테스트를 잘못 썼는데(역주: 문법적 실패가 아니라 fail이 뜨는 코드) 실패가 뜨지 않았습니다. 비슷한 코드를 복사하고 붙여넣다가 간신히 이 실수를 발견했지요.</p>\\n<p>그래서 생각한 것이...</p>\\n<h2 id=\\\"테스트가-실패하는지-꼭-확인하세요\\\"><a href=\\\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EA%B0%80-%EC%8B%A4%ED%8C%A8%ED%95%98%EB%8A%94%EC%A7%80-%EA%BC%AD-%ED%99%95%EC%9D%B8%ED%95%98%EC%84%B8%EC%9A%94\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>테스트가 실패하는지 꼭 확인하세요</h2>\\n<p>여러분이 실력있고 TDD를 사용하는 개발자라면 이미 이 방법을 사용하고 있을 겁니다.</p>\\n<p>그렇지 않은 분이라면 단위 테스트를 너무 후순위로 취급하기 때문에 테스트를 한 뭉치 작성하고 “좋아! 잘 작동하는군! 이제 다음 단계로 가야지” 라고 생각하기 쉽습니다.</p>\\n<p>하지만 앞서 언급된 문제로 이어질 수있는데다, 비슷한 테스트를 복사-붙여넣기 하다보면 특히 쉽게 잘못된 요소나 모킹한 함수를 테스트 할 수 있습니다.</p>\\n<p>테스트의 중요한 부분을 잠시 주석처리하는 식으로 쉽게 테스트를 실패하게 만들 수 있으며, 덕분에 여러분이 수없이 겪을 지도 모르는 골치 아픈 상황에서 벗어날 수 있습니다.</p>\\n<h2 id=\\\"반복-가능하고-확장-가능한-테스트-패턴을-만들어보세요\\\"><a href=\\\"#%EB%B0%98%EB%B3%B5-%EA%B0%80%EB%8A%A5%ED%95%98%EA%B3%A0-%ED%99%95%EC%9E%A5-%EA%B0%80%EB%8A%A5%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%8C%A8%ED%84%B4%EC%9D%84-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EC%84%B8%EC%9A%94\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>반복 가능하고 확장 가능한 테스트 패턴을 만들어보세요</h2>\\n<p>여러분이 혼자서 프로젝트의 테스트를 만들거나 유지보수하지 않는 이상, 새 컴포넌트를 빠르고 쉽게 테스트하거나 최소한 기본 수준의 테스트라도 빠르게 만들고 싶을겁니다.</p>\\n<p>제 동료 개발자들을 보니 가장 큰 장벽은 “어떻게 시작해야할지 모른다” 는 부분이었습니다. 명확하고 따라하기 쉬운 패턴을 만들어서 그들을 도울 수 있습니다.</p>\\n<p>예를 들어 많은 사용자 입력을 받는 컴포넌트를 테스트하고 싶다면 이런 방식으로 테스트 해 볼 수도 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> userChangeCases <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Test1'</span><span class=\\\"token punctuation\\\">,</span>\\n  props<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> toLowercase<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'testPre'</span><span class=\\\"token punctuation\\\">,</span>\\n  result<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'testpre'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> props <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  onDataChange<span class=\\\"token punctuation\\\">:</span> jest<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Testing TextComponent'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> wrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">beforeEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    wrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">mount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&lt;</span>TextComponent <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>props<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'On Change Cases'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    userChangeCases<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span>item <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setProps</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">const</span> input <span class=\\\"token operator\\\">=</span> wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'input'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        input<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">simulate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'change'</span><span class=\\\"token punctuation\\\">,</span>\\n          <span class=\\\"token punctuation\\\">{</span> target<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> value<span class=\\\"token punctuation\\\">:</span> item<span class=\\\"token punctuation\\\">.</span>value <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">.</span>onDataChange<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n          <span class=\\\"token function\\\">toBeCalledWith</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">.</span>resultValue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>그리고 나중에 추가로 사용자 입력 케이스를 테스트할 때 손쉽게 <code class=\\\"language-text\\\">userChangeCases</code> 배열에 추가하면 됩니다. 게다가 다른 컴포넌트에 비슷한 테스트를 해야하면 복사하기도 쉽습니다.</p>\\n<p>사실 이렇게 제가 따르고 있는 작은 규약들을(beforeEach로 매 테스트마다 wrapper 지정하기, 이름 짓는 방법, props 객체에 <a href=\\\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Spread_operator\\\">전개 연산자--MDN 문서 영문판으로 다시 보시길 권장합니다--</a>  사용하기) 어딘가에 정의해두면 다른 사람들이 쉽게 이해하고 자신의 컴포넌트를 테스트 할 때 유용하게 테스트 작동 원리를 베껴갈 수 있습니다.</p>\\n<p>이 예는 다소 부자연스럽지만(저는 일반적으로 테스트에 따라 입력 값 변화를 처리하는 순수 함수를 만듭니다) 전체 시스템이 작동하는지 여부를 신속하게 알 수 있으며, 복잡한 입력을 수행하지 않는 경우 필요에 맞게 적절하게 사용 할 수 있습니다.</p>\\n<h2 id=\\\"enzyme-mount-vs-shallow\\\"><a href=\\\"#enzyme-mount-vs-shallow\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Enzyme: Mount vs Shallow</h2>\\n<p><code class=\\\"language-text\\\">shallow</code> 는 “순수 단위 테스트” 방식의 접근입니다. 단순히 여러분이 테스트하고자 하는 컴포넌트아 DOM을 본떠서 그 컴포넌트가 어떤 역할을 수행하는지 테스트합니다. 이런 방식의 테스트는 더 빠르게 동작합니다.</p>\\n<p>아주 괜찮은 것 같지만, 여러분은 무엇을 테스트하고자 하는지 신경 쓰셔야 합니다. 각각의 컴포넌트를 완벽하게 분리하고 전체 단위 테스트 커버리지를 높이는게 목표인가요? 아니면 여러가지 문제가 될 수 있는 경우를 테스트하고 그 과정에서 컴포넌트가 제대로 동작하는지를 확인하는게 목표인가요?</p>\\n<p>전자의 경우는 <code class=\\\"language-text\\\">shallow</code> 를 사용하는게 아마 완벽한 해결책이겠지만 후자의 경우는 <code class=\\\"language-text\\\">mount</code> 를 쓰는 게 좀 더 이상적입니다.</p>\\n<p><code class=\\\"language-text\\\">mount</code> 는 컴포넌트에 속한 모든 것을 가상화(simulates)합니다. 말인즉슨 자손 컴포넌트(예를 들어 특별한 입력 컴포넌트라던가)를 잡아내서 입력값의 변화를 테스트해볼 수도 있습니다. 이렇게 사용자의 동작을 흉내내면서도 테스트하고자 하는 컴포넌트를 부모 컴포넌트와 그 주변 환경에서 분리할 수 있습니다.</p>\\n<p>또한 <code class=\\\"language-text\\\">mount</code> 는 <a href=\\\"https://velopert.com/1130\\\">리액트의 라이프사이클 메서드(lifecycle methods)</a>를 가상화할 수 있습니다. 특정 라이프사이클 메서드에 많은 로직이 있는 복잡한 컴포넌트를 테스트할 때도 유용합니다.</p>\\n<p>텍스트 기반의 컴포넌트를 <code class=\\\"language-text\\\">mount</code> 로 테스트하는 예를 보여드리겠습니다.</p>\\n<p>(제 실수를 지적해주신 <a href=\\\"https://medium.com/@ywcoder\\\">Ying Wang</a>님께 감사드립니다. <code class=\\\"language-text\\\">shallow</code> 도 마찬가지로 컴포넌트 안의 html 요소를 가상화합니다. 자손 컴포넌트를 다루지 않을 뿐입니다. 이에 맞추어 글을 수정했습니다.)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> CustomInput <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./CustomInput.jsx'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">/*\\nCustomInput 컴포넌트 안에는 이렇게 생긴 input 태그가 있고\\n&lt;input type=\\\"text\\\" disabled={this.props.disabled} onChange={this.props.onChange}\\nTextComponent는 이 컴포넌트로 prop을 전달합니다.\\n*/</span>\\n<span class=\\\"token keyword\\\">const</span> props <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Nothing'</span><span class=\\\"token punctuation\\\">,</span>\\n  onChange<span class=\\\"token punctuation\\\">:</span> jest<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Testing TextComponent'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> wrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">beforeEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    wrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">mount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&lt;</span>TextComponent <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>props<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'OnChange called'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> input <span class=\\\"token operator\\\">=</span> wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span>CustomInput<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'input'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    input<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">simulate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'change'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> target<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'TestVal'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">.</span>onChange<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBeCalledWith</span><span class=\\\"token punctuation\\\">(</span>\\n      expect<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">objectContaining</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> target<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> value <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 이벤트가 올바르게 전달되었는지 확인</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'isDisabled prop works'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setProps</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> isDisabled<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> input <span class=\\\"token operator\\\">=</span> wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span>CustomInput<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'input'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>input<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">prop</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'disabled'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>이런 방식의 테스트는 통합 테스트와 단위 테스트와의 경계를 흐리게 하지만, Guillermo Rauch는 이렇게 말했습니다.</p>\\n<blockquote class=\\\"twitter-tweet\\\" data-lang=\\\"en\\\"><p lang=\\\"en\\\" dir=\\\"ltr\\\">Write tests. Not too many. Mostly integration.</p>&mdash; Guillermo Rauch (@rauchg) <a href=\\\"https://twitter.com/rauchg/status/807626710350839808?ref_src=twsrc%5Etfw\\\">December 10, 2016</a></blockquote> <script async src=\\\"https://platform.twitter.com/widgets.js\\\" charset=\\\"utf-8\\\"></script> \\n<p>Kent C. Dodds도 이 트윗에 대해 <a href=\\\"https://emaren84.github.io/posts/write-mostly-integration-test-kr\\\">글을 썼는데</a> 꽤 설득력 있습니다.</p>\\n<p>제 생각에 두 종류의 테스트 모두 적합한 경우가 있습니다만, 제가 만든 대부분의 애플리케이션에서 단위 테스트를 하기에는 시간이 아깝고 저는 세부 구현이나 기반에 깔린 코드를 테스트하기보다 실제로 동작하는 부분을 테스트하는데 집중하고 싶습니다. 저도 계속 (실용적인 테스트의) 중심을 잡아보려고 노력중입니다.</p>\\n<p>요즘은 기본적으로 <code class=\\\"language-text\\\">mount</code> 를 사용하고 테스트 퍼포먼스에 영향이 가는 경우에만 <code class=\\\"language-text\\\">shallow</code> 를 사용하고 있습니다. 두 경우의 API가 약간 다르므로 특정 작업을 테스트하는 방법을 더 쉽게 기억할 수 있습니다.</p>\\n<h2 id=\\\"redux-테스트는-흥미로워요-\\\"><a href=\\\"#redux-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%8A%94-%ED%9D%A5%EB%AF%B8%EB%A1%9C%EC%9B%8C%EC%9A%94-\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Redux 테스트는… 흥미로워요 😕</h2>\\n<p>반면에 리덕스 액션과 리듀서는 무진장 테스트하기 쉽습니다. 그저 함수일 뿐 아니라 리듀서는 어떠한 부수 효과도 없는 순수 함수여야 합니다.</p>\\n<p>하지만 redux-thunks나 redux-saga를 사용하고 계시다면 조금 흥미로운(?) 일이 되고, <code class=\\\"language-text\\\">connect</code> 로 연결된 컴포넌트를 테스트 하는 일은 더욱 복잡해지게 됩니다.</p>\\n<p>Thunk와 Saga는 다른 액션을 대신 보내주면서 비동기 작업을 다루는 일을 합니다. 그래서 스토어를 본뜬 다음에 무슨 액션이 보내졌는지 확인해야하고, 부수 기능도 본떠야 합니다. 매번 테스트할때마다 실제 데이터베이스 호출 등을 하면 안되니까요.</p>\\n<p>Saga는 최소한 <a href=\\\"https://redux-saga.js.org/docs/advanced/Testing.html\\\">테스트 가능하도록 디자인 되어있고</a> 테스트에 도움되는 기능들을 가지고 있지만, Thunks는 부수 작업이 끝날때까지 대기가 걸리게 만듭니다.</p>\\n<p>결국 이런 질문으로 이어지게 되지요. “어느 부분까지 테스트 할 것인가?”</p>\\n<p>리덕스 앱을 전체적으로 테스트하기 위한 <a href=\\\"https://redux.js.org/docs/recipes/WritingTests.html\\\">좋은 자료</a>가 있습니다만, 여러분이 직접 작성한 코드 말고 리덕스를 테스트하는데 무슨 의미가 있을까요? 리덕스 자체는 완전히 테스트를 마친 라이브러리라서 우리가 같은 테스트를 또 할 필요는 없습니다. 게다가 <code class=\\\"language-text\\\">connect</code> 로 연결된 컴포넌트를 테스트하는건 굉장히 복잡하기 때문에 앱의 큰 부분을 본떠야 하는 불편함을 감수해야 합니다.</p>\\n<p>저는 액션을 제대로 보내기만 하면 리덕스 스토어가 이를 받아서 처리할거라고 확신합니다. 제가 진짜 신경쓰는 부분은 컴포넌트가 그 액션을 잘 받아서 제대로 변화가 일어나는지 확인하는 겁니다. 통합 테스트의 영역이지요.</p>\\n<p>그래서 제가 테스트를 할 때는</p>\\n<ol>\\n<li>먼저 리듀서를 테스트합니다. 테스트하기도 쉽고 중요한 기능을 가지고 있으니까요.</li>\\n<li>그리고 리덕스에 연결되지 않은 컴포넌트를 테스트합니다. 특정 이벤트에 제대로 반응하는지 확인할 수 있습니다. 그리고 테스트하기 쉬운데다 데이터를 다루는 부분과 랜더링을 다루는 부분을 분리하여 볼 수 있습니다.</li>\\n<li>복잡한 데이터를 다루는 부분을 순수 함수로 빼내어 테스트합니다.</li>\\n<li>제 앱의 각 부분이 잘 맞아떨어지는지 확인하기 위해 Selenium을 써서 E2E(end to end) 테스트와 통합 테스트를 합니다.</li>\\n</ol>\\n<p>이 방법이 완벽한 방법은 아닙니다. 저는 아직 마지막 두 부분을 처리하기 위한 최상의 방법을 찾고 있습니다만, 이 방법들도 테스트 작성을 간단하게 해주며 생산적이라는 생각이 듭니다.</p>\\n<p>매번 제가 동료들에게 리덕스에 연결된 컴포넌트를 다 테스트해서 보여줄 때마다 그들의 눈에는 동공지진이 일어납니다(their eyes instantly start glazing over). 많은 로직이 있고 본떠서 다루어야 할 것도 많습니다. 이런 복잡한 것들을 제쳐두면 일이 더 쉬워지며 사용자(혹은 매니저)를 우선적으로 고려한 유형의 테스트를 작성하는데 집중할 수 있습니다. 대부분의 프로젝트에 테스트를 작성할 시간이 얼마나 적은지를 생각한다면 괜찮은 등가교환이라 생각합니다.</p>\\n<h2 id=\\\"결론\\\"><a href=\\\"#%EA%B2%B0%EB%A1%A0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>결론</h2>\\n<p>저는 아직도 테스트를 적절하게 하는 법을 배우고 있습니다. 그리고 지난 1년동안 많은 자료를 읽기도 하고 보기도 했습니다. 여러분이 자신만의 패턴을 만들면 Jest와 Enzyme으로 단위 테스트하는건 놀라우리만치 쉽습니다. 특히 리덕스의 복잡한 부분을 통합 테스트와 E2E 테스트로 옮기는 경우에도 유용합니다.</p>\\n<p>Jest와 Enzyme을 다루는게 어렵다면 <a href=\\\"https://www.reactiflux.com/\\\">ReactFlux</a>를 방문해보세요. 거기 있는 Jest 채널에서 많은 도움을 얻었습니다.</p>\\n<p>이제 막 Jest + Enzyme으로 테스트를 시작하신다면 <a href=\\\"https://hackernoon.com/testing-react-components-with-jest-and-enzyme-41d592c174f\\\">이 훌륭한 가이드</a>를 읽어보세요.</p>\\n<p>스냅샷 테스트에 대해 더 자세히 알아보시려면 <a href=\\\"https://hackernoon.com/how-to-snapshot-test-everything-in-your-redux-app-with-jest-fde305ebedea\\\">이 가이드</a>를 참고하세요.</p>\\n<p>마찬가지로 React, Redux, Jest의 공식 문서를 꼭 살펴보세요. 모두 최고 수준의 가이드를 제공합니다.</p>\\n<p>이 글이 여러분의 테스팅을 향한 여정에 도움이 되었으면 좋겠습니다. 어떠한 질문이나 코멘트가 있다면 <a href=\\\"https://twitter.com/tetheta\\\">트위터로</a> 연락주세요.</p>\",\"id\":\"/home/circleci/repo/src/pages/posts/2018-01-27-lessons-learned-testing-react-redux-apps-with-jest-and-enzyme-kr/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-01-27\",\"path\":\"/posts/lessons-learned-testing-react-redux-apps-with-jest-and-enzyme-kr\",\"title\":\"[번역] 리액트 + 리덕스 앱을 Jest와 Enzyme으로 테스트 하며 얻은 교훈\",\"tags\":[\"Testing\",\"React\",\"Javascript\",\"Translation\"],\"category\":\"Testing\"}},{\"excerpt\":\"더 좋은 테스트를 위한 번역 시리즈 그래서, 자바스크립트 테스트가 뭔가요? 테스트를 작성하라. 너무 많이는 말고. 통합 테스트를 많이 써라. 리덕스 앱을 저비용 고효율로 통합 테스트 하기 리액트 + 리덕스 앱을 Jest와 Enzyme…\",\"html\":\"<p><strong>더 좋은 테스트를 위한 번역 시리즈</strong></p>\\n<ol>\\n<li><a href=\\\"/posts/what-is-testing-javascript-kr\\\">그래서, 자바스크립트 테스트가 뭔가요?</a></li>\\n<li><a href=\\\"/posts/write-mostly-integration-test-kr\\\">테스트를 작성하라. 너무 많이는 말고. 통합 테스트를 많이 써라.</a></li>\\n<li><a href=\\\"/posts/integration-tests-in-redux-apps-kr\\\">리덕스 앱을 저비용 고효율로 통합 테스트 하기</a></li>\\n<li><a href=\\\"/posts/lessons-learned-testing-react-redux-apps-with-jest-and-enzyme-kr\\\">리액트 + 리덕스 앱을 Jest와 Enzyme으로 테스트하며 얻은 교훈</a></li>\\n</ol>\\n<h2 id=\\\"번역-서문\\\"><a href=\\\"#%EB%B2%88%EC%97%AD-%EC%84%9C%EB%AC%B8\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>번역 서문</h2>\\n<p><a href=\\\"/posts/what-is-testing-javascript-kr\\\">지난번</a> <a href=\\\"/posts/write-mostly-integration-test-kr\\\">시리즈</a>를 통해 테스트가 무엇인지, 어떤 방향으로 테스트를 해야할지 조금 감을 잡으셨을 겁니다. 이제 본격적으로 리액트 애플리케이션을 테스트하고자 하는데, 또 한번 막히게 되죠.</p>\\n<blockquote>\\n<p>통합 테스트가 좋다는 건 알겠는데 좀더 실전에 가까운 예가 필요하다</p>\\n</blockquote>\\n<p>라고 생각하실지 몰라서 (저도 그렇게 생각하기 때문에) 남은 두 번의 번역 시리즈는 리액트 + 리덕스 애플리케이션 개발 시 테스트를 어떻게 했는지, 참고할만한 팁을 번역할 예정입니다.</p>\\n<p>참고로 원작자는 ‘Redux app’ 이라는 용어를 계속 사용하고 있어서 저도 그냥 리덕스 앱이라고 번역했습니다. (앵귤러도 리덕스 쓸 수 있는데...) 또한 mocking(흉내내기, 모조품 만들기)의 번역이 부자연스러워 바로 음차했습니다. 더 좋은 표현이 있다면 제안 부탁드립니다.</p>\\n<p><a href=\\\"https://hackernoon.com/low-effort-high-value-integration-tests-in-redux-apps-d3a590bd9fd5\\\">원문은 여기서 보실 수 있습니다.</a></p>\\n<hr>\\n<p><strong>짧은 정리: 여러분은 노드 환경에서 앱을 랜더링하고, 사용자 동작을 흉내내며 상태나 마크업의 변화를 확인할 수 있습니다. 이런 테스트는 상대적으로 작성하기 쉽고 빠르게 작동하며 이를 통해 많은 자신감을 얻을 수 있습니다.</strong></p>\\n<p>효율적인 소프트웨어 테스트를 작성하는 일은 아슬아슬한 줄타기 같습니다(tricky balancing act). ‘효율성’ 이라는 용어는 실행 속도나 자원 소모를 의미하는 것이 아니라, 테스트를 작성하는데 드는 노력과 테스트가 제공하는 가치 사이에서 최고로 얻어낼 수 있는 절충안을 의미합니다.</p>\\n<p>이 문제는 알려지지 않았거나 전혀 새로운 문제가 아닙니다. 과거에 수 많은 똑똑한 사람들이 달려들었고, 나중에 이 문제에 맞딱뜨릴 개발자를 위해 가이드라인을 만들었습니다. 저는 <a href=\\\"https://martinfowler.com/bliki/TestPyramid.html\\\">테스팅 피라미드</a>를 신봉합니다. 테스팅 피라미드는 다양한 종류의 테스트를 제대로 다루는데 앞서, 각각의 코드를 개별적으로 다루는 단위 테스트(Unit test)가 기반이 되어야 한다고 강조합니다.</p>\\n<h2 id=\\\"단위-테스트와-리덕스redux\\\"><a href=\\\"#%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%99%80-%EB%A6%AC%EB%8D%95%EC%8A%A4redux\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>단위 테스트와 리덕스(Redux)</h2>\\n<p>리덕스가 제시하는(역주: ‘강요하는’ 에 가까운 어감으로 느껴집니다) 구조 덕에 단위 테스트를 아주 쉽게 작성할 수 있습니다. 서로 분리되어있는 부분(리듀서, 액션 생성자, 컨테이너 등)을 각각 불러와서 여타 순수 함수와 똑같이 테스트 하면 됩니다. 데이터를 집어넣고, 나온 데이터를 단언(assertion)과 맞춰봅니다. 모킹(mocking)을 할 필요가 없지요. <a href=\\\"http://redux.js.org/docs/recipes/WritingTests.html\\\">리덕스 문서 안에 있는 테스팅 가이드</a>에 각 부분의 단위 테스트를 하는 방법이 작성되어 있습니다.</p>\\n<p>이 가이드를 따라가면서 지루하게 리듀서끼리, 액션 생성자끼리 테스트를 복-붙(copy-paste) 하다보면 단위 테스트 작성을 끝낼 수 있습니다. 그렇게 모든 작업이 끝나면 테스팅 피라미드가 뒷통수를 때리죠. 단순히 단위 테스트만 가지고는 ‘이 앱이 제대로 작동하는가?’ 라는 가장 기본적인 질문에 답할 수가 없습니다.</p>\\n<h2 id=\\\"피라미드-오르기\\\"><a href=\\\"#%ED%94%BC%EB%9D%BC%EB%AF%B8%EB%93%9C-%EC%98%A4%EB%A5%B4%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>피라미드 오르기</h2>\\n<p>웹 애플리케이션을 작성하면서 테스팅 피라미드의 윗 단계로 올라가는데 몇 가지 방법이 있습니다. 맨 꼭대기에 있는 end-to-end(e2e) 계층은 Selenium과 <a href=\\\"http://webdriver.io\\\">webdriver.io</a>를 사용해서 구현할 수 있습니다. 이런 종류의 테스트는 기술 독립적이라 여러분이 다른 프레임워크를 사용하도록 앱을 포팅해도 잘 작동합니다. 하지만 구현하고 돌려보는데 오래 걸리고, 디버그하기도 어려우며, 종종 원인 모를 문제에 시달릴 수 있습니다. 보통 아주 적은 종류의 e2e 테스트만 프로젝트에 적용하게 됩니다.</p>\\n<p>그렇다면 e2e테스트와 단위 테스트 사이에 있는 계층은 어떨까요? 일반적으로 이런 테스트를 통합 테스트(integration test)라고 부릅니다. 애플리케이션의 모듈이 어떻게 상호작용하는지 테스트하지요. 통합 테스트의 범위는 넓습니다. 예를 들자면 액션을 보내기 위해(dispatch) 액션 생성자를 사용하는 리듀서를 테스트한다면 이미 단위 테스트의 범위를 넘어간 겁니다. 다른 측면에서 보면 e2e 테스트는 아주 극단적인 형태의 통합 테스트라고 볼 수 있습니다.</p>\\n<p>우리는 리덕스에서 통합 테스트 하기에 아주 적절한 지점(sweet-spot)을 찾아보려 합니다. 개발 과정에서 충분히 빨리 돌려볼 수 있어야 하고, 단위 테스트와 같은 테스트 환경을 사용해야 하면서 리덕스로 관리되는 애플리케이션이 제대로 동작하고 있다는 충분한 확신을 줄 수 있어야 합니다.</p>\\n<h2 id=\\\"범위를-찾기\\\"><a href=\\\"#%EB%B2%94%EC%9C%84%EB%A5%BC-%EC%B0%BE%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>범위를 찾기</h2>\\n<p>우선 테스트 하고자 하는 범위를 설정하는 게 좋은 출발점이 됩니다. 일반적인 웹 앱은 이런 방식으로 구성되어있는데요.</p>\\n<p><img src=\\\"https://cl.ly/271c282D101g/typical-webapp-structure.png\\\" alt=\\\"일반적으로 고도화된 웹앱의 구조\\\"></p>\\n<p>시스템의 일부는 올바른 테스트 결과를 얻기 위해 모킹되어야 합니다. 제일 제약이 심한 부분이 저 맨 꼭대기 위에 있는 ‘브라우저’입니다. (비록 헤드리스-Headless 라도) 브라우저 인스턴스를 띄워서 테스트를 돌리는 일은 Node.js(이하 노드)에서 테스트 코드를 실행하는 것보다 훨씬 오래 걸립니다. 시작부터 끝까지 진짜 요청이 끝나길 기다릴 필요는 없습니다. 네트워크 계층(역주: 프론트엔드와 백엔드 사이에 통신하는 부분을 지칭하는 것으로 보입니다)은 명확히 정의된 인터페이스라서 적절히 모킹하기 쉽습니다.</p>\\n<h2 id=\\\"범위를-모킹하기\\\"><a href=\\\"#%EB%B2%94%EC%9C%84%EB%A5%BC-%EB%AA%A8%ED%82%B9%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>범위를 모킹하기</h2>\\n<p>리액트와 리덕스를 쓰는 앱이 있다고 가정하면, 노드 환경에서 부드럽게 돌아가는 테스트를 작성하는게 꽤 쉽습니다(심지어 서버 사이드 랜더링을 한다면 프로덕션 환경에서도 가능합니다). <a href=\\\"https://facebook.github.io/jest/\\\">Jest</a>라는 걸출한 테스팅 프레임워크로 테스트를 돌릴 수 있는데다, 마찬가지로 대단한 <a href=\\\"https://github.com/airbnb/enzyme\\\">Enzyme</a>은 브라우저 환경 없이 애플리케이션의 일부 혹은 전체를 랜더링해주고 동작을 확인해볼 수 있게 만들어주기 때문입니다.</p>\\n<p>Enzyme은 <code class=\\\"language-text\\\">mount</code> 라는 함수를 제공하는데, 이 함수로 어떠한 리액트 컴포넌트라도 그려내고 동작을 확인해볼 수 있습니다. 리덕스를 쓰는 앱도 마찬가지로 테스트 가능합니다. 매번 테스트할 때 같은 코드를 반복하지 않기 위해 간단한 유틸리티 함수를 작성해두면 도움이 됩니다. 이 함수는 주어진 상태(Redux 스토어)와 Enzyme의 래퍼 객체(역주: Enzyme을 통해 그려진 컴포넌트를 객체화 한 것. 이후 다양한 메서드를 통해 하위 DOM 탐색 및 다양한 동작을 확인해볼 수 있습니다)를 리턴합니다. 이렇게 만들어둔 함수는 나중에 단언 작성을 꽤 편하게 해줍니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Provider <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-redux'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> mount <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'enzyme'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> MyApp <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./containers/MyApp'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> createStore <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./createStore'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">renderAppWithState</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> store <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">createStore</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> wrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">mount</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>Provider store<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>store<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>MyApp <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Provider<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span>store<span class=\\\"token punctuation\\\">,</span> wrapper<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">,</span> wrapper<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">renderAppWithState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'bar'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nwrapper\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'input'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">simulate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'change'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> target<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'hello'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>노드 환경에서 테스트를 실행할 때 네트워크 계층을 깔끔하게 모킹하는 방법이 있습니다. 예를 들어 <a href=\\\"https://github.com/node-nock/nock\\\">nock</a> 같은 라이브러리가 있지요. nock은 테스트를 실행하기 전에 네트워크 요청에 따른 응답 데이터나 에러를 쉽게 선언할 수 있도록 만들어줍니다. 성공적인 GET 요청을 모킹하는 예는 다음과 같습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> nock <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'nock'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">nock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'https://example.com/api'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/12345'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reply</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">200</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'bar'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 이후 코드 어디에서나 https://example.com/api/1234 로 요청을 하면</span>\\n<span class=\\\"token comment\\\">// 성공했다는 응답과 함께 { foo: 'bar' } 를 응답값으로 리턴하게 됩니다.</span></code></pre>\\n      </div>\\n<p>이렇게 설정하면 통합 테스트를 단위 테스트와 비슷한 수준으로 빠르고 편하게 실행할 수 있습니다. 이제 테스트를 구현하기만 하면 됩니다...</p>\\n<p><img src=\\\"https://cl.ly/3j3q0t3Q0b2G/mock-boundaries.png\\\" alt=\\\"리덕스 통합 테스트를 위해 테스트 범위 모킹\\\"></p>\\n<h2 id=\\\"무엇을-테스트하나\\\"><a href=\\\"#%EB%AC%B4%EC%97%87%EC%9D%84-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EB%82%98\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>무엇을 테스트하나?</h2>\\n<p>여러분이 만든 앱이 정상적으로 동작한다는 자신감을 가장 크게 얻으려면 사용자의 시점에서 통합 테스트를 작성해야 합니다. 버튼 클릭, 폼 채우기 등의 사용자가 조작하는 행위에 따라 앱이 기대한대로 반응하는지 확인하는게 목표입니다.</p>\\n<p>간단한 폼을 제출한다는 시나리오를 생각해 보겠습니다. 데이터가 폼에 들어있는 상태로 랜더링 한 뒤에 사용자가 ‘제출’ 버튼을 누르는 행위를 흉내를 내 보겠습니다(simulate). 그리고 지정된 API 엔드포인트로 요청을 제대로 보내는지 확인해보겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Submitting the form'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">,</span> wrapper<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">renderAppWithState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'John Doe'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> submitButton <span class=\\\"token operator\\\">=</span> wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'[type=\\\"submit\\\"]'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'sends the data and shows the confirmation page'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">nock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'https://myapp.com/api'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">post</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/12345'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reply</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">200</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    submitButton<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">simulate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// 이제 무슨 일이 일어나는지 확인합니다</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h2 id=\\\"언제-테스트하나\\\"><a href=\\\"#%EC%96%B8%EC%A0%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EB%82%98\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>언제 테스트하나?</h2>\\n<p>본격적으로 단언을 작성하기 전에, 또 하나의 문제가 있습니다. “테스트를 언제 실행하냐” 인데요(역주: 테스트 코드를 실행하는 행위가 아니라 모든 작업이 다 끝나고 기대값과 결과값을 비교하는 ‘단언’ 을 의미하나봅니다). 모든 변화가 순차적으로 일어나는 단순한 상황에서는 사용자 동작을 흉내를 낸 뒤에 바로 단언을 실행하면 됩니다. 하지만 여러분의 앱은 보통 네트워크 요청 같은 비동기 코드를 다루기 위해 프로미스(Promise) 등을 사용할 겁니다. 네트워크 요청을 순차적으로 실행되게 모킹해놓았다 하더라도, 성공한 프로미스는 <code class=\\\"language-text\\\">submitButton.simulate(&#39;click&#39;)</code> 부분 다음의 코드를 바로 실행할겁니다. 우리는 단언이 실행되기 전에 앞선 작업이 “제대로 끝나기를” 기다리게 해야합니다.</p>\\n<p>Jest는 여러가지로 비동기 코드를 다루는 방법을 제공하지만, Promise 체인을 직접 다루는 방식으로 동작하거나(이번 예시에는 없지요) , 타이머를 모킹해야 합니다(Promise 기반 코드에는 동작하지 않습니다). <code class=\\\"language-text\\\">setTimeout(() =&gt; {}, 0)</code> 같은 코드를 사용할 수 있지만 <a href=\\\"https://facebook.github.io/jest/docs/en/asynchronous.html\\\">Jest의 비동기 콜백 기능</a>을 사용해야 해서 코드의 가독성이 떨어지게 됩니다.</p>\\n<p>하지만 이 문제를 멋지게 해결하기 위해 한 줄짜리 보조 함수를 사용하면 됩니다. 이 함수는 성공한 Promise를 이벤트 루프의 바로 다음 차례로 넘기는 일을 합니다. Jest에서 기본적으로 지원하는 Promise 리턴과 같이 사용하면 됩니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">flushAllPromises</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span>resolve <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">setImmediate</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'runs some promise based code'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">triggerSomethingPromiseBased</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Promise 기반의 동작 실행</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">flushAllPromises</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n     <span class=\\\"token comment\\\">// 무슨 일이 일어나는지 확인하기</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h2 id=\\\"어떻게-테스트하나\\\"><a href=\\\"#%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EB%82%98\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>어떻게 테스트하나?</h2>\\n<p>사용자와 앱의 상호작용이 제대로 이루어지고 있나 확인하려면 어떤 방법이 있을까요?</p>\\n<p><strong>마크업(Markup)</strong> - UI가 제대로 변경되었는지 확인하기 위해 페이지의 마크업을 들여다볼 수 있습니다. 예를 들어 <a href=\\\"https://facebook.github.io/jest/docs/snapshot-testing.html\\\">Jest의 스냅샷 기능으로요.</a> (유의할 점: 아래의 테스트 코드를 실행하기 위해 <a href=\\\"https://github.com/adriantoine/enzyme-to-json#serializer\\\">enzyme-to-json</a>같은 Jest 스냅샷 직렬화 모듈(serializer)을 설치해야 합니다)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>wrapper<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toMatchSnapshot</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nsubmitButton<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">simulate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">flushAllPromises</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>wrapper<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toMatchSnapshot</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span></code></pre>\\n      </div>\\n<p>이런 방식의 단언은 작성하기 아주 쉽지만, 어디에 문제가 있는지 살펴보기 어려워지는 경향이 있습니다. 스냅샷은 가끔 겉으로 보기에 상관없어 보이는 테스트가 실패할 때도 변할 수 있습니다. 게다가 변화가 있었는지 확인만 할 뿐 무슨 행동을 했는지 기록을 남기진 않습니다.</p>\\n<p><strong>상태(State)</strong> - 애플리케이션의 상태 변경을 확인하는 방법입니다. 한 곳에 집중된 스토어를 가지고 있는 리덕스 애플리케이션은 테스트하기 쉽지만, 상태가 나뉘어있다면 조금 복잡해질 수 있습니다. 이 때도 스냅샷 테스트를 할 수 있지만 저는 객체를 직접 비교하는 방식을 선호하는 편입니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>store<span class=\\\"token punctuation\\\">,</span> wrapper<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">renderAppWithState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'John Doe'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>store<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toEqual</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'John Doe'</span><span class=\\\"token punctuation\\\">,</span>\\n  confirmationVisible<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nsubmitButton<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">simulate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">flushAllPromises</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>store<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toEqual</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'John Doe'</span><span class=\\\"token punctuation\\\">,</span>\\n    confirmationVisible<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span></code></pre>\\n      </div>\\n<p>상태 스토어는 사용자가 보지 못하는 곳에 감추어져 있기 때문에 사용자 중심적인 테스트와는 약간 거리가 있습니다. 하지만 디자인 변경에 따른 마크업 수정이 일어나는 경우 영향을 덜 받습니다.</p>\\n<p><strong>부수 기능(Side effects)</strong> - 여러분의 애플리케이션에 따라 확인해야 하는 부수 기능도 있습니다(네트워크 요청, <code class=\\\"language-text\\\">localStorage</code> 변화 등). 이럴 때 nock의 <code class=\\\"language-text\\\">isDone</code> 메서드를 활용하여 모킹한 요청이 실제로 사용되었는지 확인할 수도 있습니다. </p>\\n<p><strong>액션 보내기(Dispatched actions)</strong> - 리덕스의 기능을 십분 활용하여 어떤 액션이 발생했는지 쉽게 로그를 정리하고 나열할 수 있습니다. 이를 이용해서 스토어에 액션을 보내는 흐름을 확인해볼 수 있습니다. <a href=\\\"https://github.com/arnaudbenard/redux-mock-store\\\">redux-mock-store</a> 같은 유용한 라이브러리의 도움을 받을 수도 있습니다. 먼저 위에서 정의한 <code class=\\\"language-text\\\">renderAppWithState</code> 메서드를 조금 수정해서 가상의 리덕스 스토어를 적용하면, 그 다음 스토어에 어떤 액션들이 호출되었는지 확인하기 위해 <code class=\\\"language-text\\\">getActions</code> 메서드를 사용할 수 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token comment\\\">// 이제 renderAppWithState는 redux-mock-state를 사용해서 스토어를 생성합니다.</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>store<span class=\\\"token punctuation\\\">,</span> wrapper<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">renderAppWithState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'John Doe'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>store<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toEqual</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'John Doe'</span><span class=\\\"token punctuation\\\">,</span>\\n  confirmationVisible<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nsubmitButton<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">simulate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">flushAllPromises</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>store<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getActions</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toEqual</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'SUBMIT_FORM_START'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> \\n    <span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'SUBMIT_FORM_SUCCESS'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span></code></pre>\\n      </div>\\n<p>이런 유형의 단언은 특히 코드가 비동기로 흘러갈 때 테스트 하고자 할 때 유용합니다. 또한 테스트 시나리오가 어떤 흐름으로 구성되는지 보여주면서 일종의 문서 역할을 합니다.</p>\\n<h2 id=\\\"중심-잡기\\\"><a href=\\\"#%EC%A4%91%EC%8B%AC-%EC%9E%A1%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>중심 잡기</h2>\\n<p>앞서 소개한 통합 테스트가 단위 테스트를 완전히 대체한다는 뜻은 아닙니다. 특히 애플리케이션에 무거운 로직이 있는 부분(리듀서나 셀렉터)은 여전히 철저하게 단위 테스트가 적용되어야 합니다. 테스팅 피라미드의 계층은 여전히 유효합니다! 하지만 통합 테스트는 테스트 방법 중 하나로서 충분히 유효하며, 가능한 한 고통을 덜고 더 자신있게 소프트웨어를 배포할 수 있도록 좋은 테스트를 구축하는데 도움이 됩니다.</p>\\n<p>소프트웨어 테스트라는 주제는 업계에서 가장 많이 오가는 주제 중 하나입니다. 제 동료는 제 글을 검수해주면서 “<a href=\\\"http://blog.thecodewhisperer.com/permalink/integrated-tests-are-a-scam\\\">통합 테스트는 사기다</a>” 라는 글을 알려주기도 했습니다. 어떤 사람들은 저 글을 쓴 사람이 맞다고도 하지만, 제가 생각하기에 흑백 논리로 따질 수 없는 주제라고 생각합니다. 여러분은 어떻게 생각하시나요?</p>\",\"id\":\"/home/circleci/repo/src/pages/posts/2018-01-19-intergration-tests-in-redux-apps-kr/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-01-19\",\"path\":\"/posts/integration-tests-in-redux-apps-kr\",\"title\":\"[번역] 리덕스 앱을 저비용 고효율로 통합 테스트 하기\",\"tags\":[\"Testing\",\"React\",\"Javascript\",\"Translation\"],\"category\":\"Testing\"}},{\"excerpt\":\"더 좋은 테스트를 위한 번역 시리즈 그래서, 자바스크립트 테스트가 뭔가요? 테스트를 작성하라. 너무 많이는 말고. 통합 테스트를 많이 써라. 리덕스 앱을 저비용 고효율로 통합 테스트 하기 리액트 + 리덕스 앱을 Jest와 Enzyme…\",\"html\":\"<p><strong>더 좋은 테스트를 위한 번역 시리즈</strong></p>\\n<ol>\\n<li><a href=\\\"/posts/what-is-testing-javascript-kr\\\">그래서, 자바스크립트 테스트가 뭔가요?</a></li>\\n<li><a href=\\\"/posts/write-mostly-integration-test-kr\\\">테스트를 작성하라. 너무 많이는 말고. 통합 테스트를 많이 써라.</a></li>\\n<li><a href=\\\"/posts/integration-tests-in-redux-apps-kr\\\">리덕스 앱을 저비용 고효율로 통합 테스트 하기</a></li>\\n<li><a href=\\\"/posts/lessons-learned-testing-react-redux-apps-with-jest-and-enzyme-kr\\\">리액트 + 리덕스 앱을 Jest와 Enzyme으로 테스트하며 얻은 교훈</a></li>\\n</ol>\\n<h2 id=\\\"들어가며번역-서문\\\"><a href=\\\"#%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0%EB%B2%88%EC%97%AD-%EC%84%9C%EB%AC%B8\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>들어가며(번역 서문)</h2>\\n<p>“더 좋은 테스트를 위한 번역 시리즈” 두 번째입니다. 테스트를 작성하는게 좋다는 공감대는 얻었을 지 몰라도 막상 코드 에디터 앞에서는 대략 정신이 멍해지기 일쑤입니다. 전부 다 테스트를 하자니 너무 광범위하고, 함수 단위로 유닛 테스트만 작성하자니 너무 세세해서 실제 제대로 애플리케이션이 동작하는지 파악하기도 어렵거니와 노력 대비 별로 쓸모가 없어보이기도 합니다.</p>\\n<p>그 고민을 조금이나마 덜어드리고자 좋은 조언을 가져와서 번역해 보았습니다.</p>\\n<p><a href=\\\"https://blog.kentcdodds.com/write-tests-not-too-many-mostly-integration-5e8c7fff591c\\\">원문은 여기서 보실 수 있습니다.</a></p>\\n<hr>\\n<p>얼마 전에 <a href=\\\"https://medium.com/@rauchg\\\">Guillermo Rauch</a>(<a href=\\\"https://socket.io\\\">Socket.io</a>의 창시자이자 <a href=\\\"https://zeit.co\\\">Zeit.co</a>의 설립자입니다)가 위 제목으로 <a href=\\\"https://twitter.com/rauchg/status/807626710350839808\\\">심오한 트윗</a>을 하나 작성했습니다. </p>\\n<p><img src=\\\"https://cl.ly/1w0Q053W1B1O/write-integration-test-2.png\\\"></p>\\n<blockquote>\\n<p><strong>테스트를 작성하라. 너무 많이는 말고. 통합 테스트를 많이 써라.</strong></p>\\n</blockquote>\\n<p>짧지만 긴 내용입니다. 더 자세히 들어가보죠.</p>\\n<blockquote>\\n<p><strong>테스트를 작성하라.</strong></p>\\n</blockquote>\\n<p>네, 여러분은 대부분의 프로젝트에 자동화된 테스트를 작성해야 합니다. 특히 자신의 시간을 소중히 여긴다면요. 새벽 두 시에 버그 때문에 불려나가는 것 보다 로컬에서 버그를 잡아내는게 훨씬 낫습니다. <strong>저는 테스트를 작성하는데 시간을 들일 때 오히려 시간을 절약한다고 느낍니다.</strong> 테스트를 작성하다 보면 제가 실제로 만들고자 하는 것 보다 더 오래 걸릴 수도 있고, 그렇지 않을 수도 있지만, 저는(그리고 다른 사람들도) 거의 확실히 유지보수 하는데 드는 시간을 절약하고 있습니다.</p>\\n<p>테스트를 작성할 때는 이 테스트가 프로젝트의 버그를 얼마나 줄여줄 자신이 있는지 신경쓰셔야 합니다. <a href=\\\"https://flow.org/\\\">Flow</a>, <a href=\\\"https://eslint.org/\\\">ESLint</a> 같은 정적 타이핑이나 린트는 의미있는 수준의 자신감을 가져다 줍니다. 혹시 써보지 않으셨다면 반드시 살펴보시길 권합니다. 하지만 <strong>아무리 강한 타입을 적용한 프로그래밍 언어라도 테스트가 있어야 합니다.</strong> 타입과 린트는 여러분의 비지니스 로직에 버그가 없도록 만들어주지 않습니다. 그러니 좋은 테스트를 작성해서 (버그를 줄인다는)자신감을 크게 끌어올릴 필요가 있습니다.</p>\\n<blockquote>\\n<p><strong>너무 많이는 말고.</strong></p>\\n</blockquote>\\n<p>저는 애플리케이션에 100%의 코드 커버리지를 달성하려는 매니저나 팀이 있다고 들었습니다. 이는 굉장히 안 좋은 생각입니다. 커버리지가 70%(제 추측입니다.. 과학적인 증거는 없어요)를 넘어가게 되면서부터 여러분이 테스트로 얻는 이익이 점감하게 되는 문제가 있습니다. 왜 그럴까요? 음, 언제나 100%를 달성하기 위해 힘을 쏟다 보면 막상 테스트 할 필요 없는 것을 테스트하는데 시간을 소모하게 됩니다. 실제 신경써야 할 로직이 없는 것들 말이죠(ESLint나 Flow로도 충분히 잡아낼 수 있는 모든 버그들). <em>이런 규모의 테스트를 유지보수하는데 엄청난 시간이 들고 여러분의 팀을 힘들게 만들 겁니다.</em></p>\\n<p>그리고 테스트 환경에서 재현하기 어려운 한 줄의 코드를 위해 테스트를 작성할 때도 있습니다. 이런 경우는 <em>진짜로</em> 피하고 싶을겁니다. 왜냐면 이 테스트는 애플리케이션이 제대로 작동한다는 자신감을 별로 주지도 못하고, 리팩터링 할 때 속도를 늦출 뿐이기 때문입니다. <strong>코드를 리팩터링 할 때 테스트를 변경해야 하는 경우는 거의 없습니다.</strong></p>\\n<p>제가 작성한 대부분의 오픈 소스 프로젝트는 거의 100%의 코드 커버리지를 가지고 있다는 말씀을 드려야겠군요. 대부분의 프로젝트들은 작은 라이브러리나 툴이며, 여러 다른 상황(코드가 깨진다면 심각한 상황으로 이어질 수 있는 프로젝트들이 사용하는 상황)에서 재사용하기 쉽도록 작성되었습니다. 그래서 어찌저찌 상대적으로 100%의 커버리지를 얻을 수 있었습니다.</p>\\n<blockquote>\\n<p><strong>통합 테스트를 많이 써라.</strong></p>\\n</blockquote>\\n<p>테스트의 종류는 아주 다양합니다(제가 Fluent Conf에서 <a href=\\\"https://youtu.be/Da9wfQ0frGA\\\">“바퀴를 테스트하면서 배울 수 있는 것들”</a>이라는 제목으로 5분짜리 발표를 했습니다). 각각의 테스트는 장단점이 있습니다. 보통 자동화된 테스트를 이야기 할 때 많이 거론되는 테스트는 단위(Unit) 테스트, 통합(Integration) 테스트, E2E(End to End) 테스트입니다.</p>\\n<p>여기 제가 <a href=\\\"https://frontendmasters.com/courses/testing-javascript/\\\">“자바스크립트 애플리케이션 테스트하기”</a> 라는 Frontend Masters 워크샵에서 선보인 <a href=\\\"http://slides.com/kentcdodds/testing-workshop#/4/8\\\">슬라이드</a>를 잠시 보시죠.</p>\\n<p><img src=\\\"https://cl.ly/3x273a0A343P/write-integration-test-1.png\\\"></p>\\n<p>테스팅 피라미드는 <a href=\\\"https://martinfowler.com/bliki/TestPyramid.html\\\">마틴 파울러의 블로그</a>와 <a href=\\\"https://testing.googleblog.com/2015/04/just-say-no-to-more-end-to-end-tests.html\\\">구글 테스팅 블로그</a>에서 얻은 개념을 한데 합친 것입니다.</p>\\n<p>앞서 말씀드린대로 이 피라미드는 바닥부터 꼭대기까지 단위 테스트, 통합 테스트, E2E 테스트로 이루어져 있습니다. 피라미드의 위로 올라갈수록 테스트를 실행하고 작성하는데 더 많은 시간이 들고, 실행하고 유지보수하는데 비용(시간과 자원 측면에서)이 많이 듭니다. 그림만 보면 유닛 테스트를 작성하는데 시간을 더 투자해야 하는 것 처럼 보입니다.</p>\\n<p>미처 언급되지 않은 점이 있는데, 피라미드 위로 올라갈 수록 각 테스트의 신뢰성이 증가한다는 겁니다. 여러분이 생각한 것 보다 훨씬 큰 이득을 얻을 수 있습니다(You get more bang for your buck). 따라서 E2E 테스트가 단위 테스트보다 느리고 비용이 많이 들지라도, 애플리케이션이 의도대로 동작한다는 자신감은 더 크게 제공합니다.</p>\\n<p><a href=\\\"https://twitter.com/kentcdodds/status/628658648001048577\\\">제 트윗 중 가장 많이 리트윗된 트윗</a>이 단위 테스트의 주요 문제를 다루고 있습니다.</p>\\n<blockquote>\\n<p>아직도 이 사진을 좋아해요. 유닛 테스트만 좋아하는 사람들은 이렇게 “작동하는 것 같다” 라고 말하죠.  </p>\\n</blockquote>\\n<p><img src=\\\"https://cl.ly/093u1O2j0k1Y/write-integration-test-3.gif\\\"></p>\\n<p>이 사람이 방에서 달릴 수 있고, 팔굽혀펴기를 하고, 독서를 할 수 있는지 확인하기 위해 단위 테스트를 작성했지만, 이 사람은 자신의 다양한 신체 부위를 아주 효율적으로 사용하지 못하는데다 통합하지 않고 있습니다. 만약 버튼 컴포넌트가 <code class=\\\"language-text\\\">onClick</code> 핸들러를 호출할 때 핸들러가 올바른 데이터를 제대로 요청하지 않는다면, 핸들러의 호출이 잘 되는지 확인하는 일은 그닥 중요한게 아닙니다! 각각 분리 된 부분이 자신의 역할을 제대로 수행하는지 확인하기 위해 단위 테스트를 작성하는 것은 그리 나쁜 일은 아닙니다. *분리 된 부분이 <strong>함께</strong> 제 역할을 수행하는지 확인하지 않는다면 아무 소용 없습니다.*</p>\\n<p><strong>통합 테스트는 자신감을 심어주는 역할 대비 속도/비용을 부담하는 정도를 아주 균형있게 가지고 있습니다.</strong> 그래서 여러분이 <em>대부분</em>(혹시 몰라 말씀드리지만 전부는 아닙니다)의 시간을 통합 테스트에 투자하라는 조언을 드리는 겁니다.</p>\\n<hr>\\n<p><strong>통합 테스트를 더 많이 작성하는 방법</strong></p>\\n<p>통합 테스트와 단위 테스트 사이의 경계는 약간 모호합니다. 어느 쪽이든 더 많은 통합 테스트를 작성하기 위해 가장 도움되는 것이 무엇이냐 물으신다면 <strong>일단 너무 많은 것을 모킹(mocking)하지 않기를 권합니다.</strong> <em>무언가를 모킹할 때, 테스트하고자 하는 것과 모킹된 것 사이의 통합테스트 신뢰도는 떨어지게 됩니다.</em> 때로는 이 방법이 도움 되지 않을 수 있습니다(<a href=\\\"https://www.youtube.com/watch?v=EaxDl5NPuCA&#x26;feature=youtu.be\\\">반대하는 사람도 있지만요</a>). 실제로 매 테스트마다 이메일을 발송하거나 신용카드 결제를 할 필요는 없지만, 대부분의 경우 모킹을 피하면 테스팅을 더 잘 하게 되리라 생각합니다.</p>\\n<p><strong>만약 리액트로 개발을 하고 계시다면, 얕은 랜더링(<a href=\\\"http://airbnb.io/enzyme/docs/api/shallow.html\\\">shallow rendering</a>)도 포함됩니다.</strong> 저는 오랜 시간동안 얕은 랜더링은 세부 구현을 테스트하는 것이나 마찬가지라고 이야기해왔습니다. 이 부분을 <a href=\\\"https://www.briefs.fm/3-minutes-with-kent/49\\\">3분 짜리 팟캐스트</a>에서(그리고 리액트 테스팅에 대한 다른 팁도 포함해서) 다루고 있습니다.</p>\\n<p>도움이 되셨길 바라며 모두 행운을 빕니다! 👍</p>\",\"id\":\"/home/circleci/repo/src/pages/posts/2018-01-15-write-mostly-integration-test-kr/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-01-15\",\"path\":\"/posts/write-mostly-integration-test-kr\",\"title\":\"[번역] 테스트를 작성하라. 너무 많이는 말고. 통합 테스트를 많이 써라.\",\"tags\":[\"Translation\",\"Testing\",\"TDD\"],\"category\":\"Testing\"}},{\"excerpt\":\"더 좋은 테스트를 위한 번역 시리즈 그래서, 자바스크립트 테스트가 뭔가요? 테스트를 작성하라. 너무 많이는 말고. 통합 테스트를 많이 써라. 리덕스 앱을 저비용 고효율로 통합 테스트 하기 리액트 + 리덕스 앱을 Jest와 Enzyme…\",\"html\":\"<p><strong>더 좋은 테스트를 위한 번역 시리즈</strong></p>\\n<ol>\\n<li><a href=\\\"/posts/what-is-testing-javascript-kr\\\">그래서, 자바스크립트 테스트가 뭔가요?</a></li>\\n<li><a href=\\\"/posts/write-mostly-integration-test-kr\\\">테스트를 작성하라. 너무 많이는 말고. 통합 테스트를 많이 써라.</a></li>\\n<li><a href=\\\"/posts/integration-tests-in-redux-apps-kr\\\">리덕스 앱을 저비용 고효율로 통합 테스트 하기</a></li>\\n<li><a href=\\\"/posts/lessons-learned-testing-react-redux-apps-with-jest-and-enzyme-kr\\\">리액트 + 리덕스 앱을 Jest와 Enzyme으로 테스트하며 얻은 교훈</a></li>\\n</ol>\\n<h2 id=\\\"들어가며\\\"><a href=\\\"#%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>들어가며</h2>\\n<p>요즘 개인적으로 “가능한한 내 코드에 모두 테스트를 작성하겠다” 라는 목표를 가지고 있습니다. 하지만 테스트에 대해 두루뭉술한 개념만 가지고 있고, 지금은 상대적으로 쉬운 함수만 테스트를 작성할 수 있는 수준입니다.</p>\\n<p>하지만 실제 개발하고 있는 애플리케이션은 ‘리액트 + 리덕스(혹은 MobX) + 기타등등’ 의 구성으로 되어있기 때문에 조금만 테스트를 제대로 해 보려고 하면 어디부터 손을 대야할지 전혀 감을 못 잡는 상태입니다.</p>\\n<p>그래서 실전에 최대한 도움이 될 수 있도록 유용한 글을 몇개 추려서 단계별로 보기 좋은 참고서가 될 수있도록 번역하는 사이드 프로젝트를 진행하고 있습니다. 이 글을 보시는 분들도 리액트로 만드는 애플리케이션을 테스트하는데 도움이 되었으면 좋겠습니다.</p>\\n<p>그 첫 번째 단계로 <strong>테스트가 대체 뭐냐?</strong> 라는 질문에 가벼운 답이 될 수 있는 글의 번역부터 시작합니다.</p>\\n<p><a href=\\\"https://blog.kentcdodds.com/but-really-what-is-a-javascript-test-46fe5f3fad77\\\">원문은 여기서 읽어보실 수 있습니다.</a></p>\\n<hr>\\n<p><em>일단 한 발짝 물러서서 시작부터 자바스크립트 자동화 테스트를 이해해 보도록 하겠습니다.</em></p>\\n<p>소프트웨어를 테스트하는 이유는 수도 없이 많습니다. 저는 크게 두 가지 이유를 가지고 있습니다.</p>\\n<ol>\\n<li>전체 작업 흐름의 속도를 올려서 개발을 빠르게 한다.</li>\\n<li>변경 사항이 있을 때 기존 코드를 무너트리지 않는다는 확신을 갖도록 도와준다.</li>\\n</ol>\\n<p>그래서 그런데, 저는 여러분에게 몇 가지 여쭈어 보고 싶은게 있습니다. (트위터 투표로 미리 물어보았죠)</p>\\n<ul>\\n<li><a href=\\\"https://twitter.com/kentcdodds/status/942625485829181441\\\">자바스크립트 테스트를 작성해 보신 적 있습니까?</a></li>\\n<li><a href=\\\"https://twitter.com/kentcdodds/status/942625486638759938\\\">자바스크립트 테스팅 프레임워크를 사용해 보신 적 있습니까?</a></li>\\n<li><a href=\\\"https://twitter.com/kentcdodds/status/942625487511154688\\\">자바스크립트 테스팅 프레임워크를 밑바닥부터 설정해 보신 적 있습니까?</a></li>\\n<li><a href=\\\"https://twitter.com/kentcdodds/status/942625489348280320\\\">테스팅 프레임워크를 충분히 이해하고 있고, 아주 간단한 테스팅 프레임워크라도 직접 만들어 보실 수 있습니까?</a></li>\\n</ul>\\n<p>이 글의 목적은 당신이 마지막 질문에 “네” 라고 대답할 수 있도록 돕는 것입니다. 결과적으로 자바스크립트를 테스트한다는게 무엇인지 알아야 더 좋은 테스트를 작성할 수 있으니까요.</p>\\n<p>이제 간단한 <code class=\\\"language-text\\\">math.js</code> 모듈을 만들어서 그 안에 두 함수를 작성한 다음에 내보내겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">sum</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> a <span class=\\\"token operator\\\">+</span> b\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">subtract</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> a <span class=\\\"token operator\\\">-</span> b\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> sum<span class=\\\"token punctuation\\\">,</span> subtract <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><strong>작성하는 모든 코드는 <a href=\\\"https://github.com/kentcdodds/js-test-example\\\">Github에</a> 올려두었으니 참고하시면 됩니다</strong> 🐙😸</p>\\n<h2 id=\\\"1단계\\\"><a href=\\\"#1%EB%8B%A8%EA%B3%84\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>1단계</h2>\\n<p>제가 생각할 수 있는 가장 기본적인 테스트 형식을 보여드리겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// basic-test.js</span>\\n<span class=\\\"token keyword\\\">const</span> actual <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span>\\n<span class=\\\"token keyword\\\">const</span> expected <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>actual <span class=\\\"token operator\\\">!==</span> expected<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'${actual} is not ${expected}'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>터미널에서 <code class=\\\"language-text\\\">node basic-test.js</code> 라고 입력하시면 이 테스트 코드를 실행할 수 있습니다. 이게 테스트입니다!</p>\\n<p><strong>테스트는 기대하던 결과값과 실제 출력된 값이 맞지 않으면 에러를 일으키는 코드입니다.</strong> 만약 특정한 상태값 설정을 해야하는 등(예를 들자면 컴포넌트가 테스트 실행 전에 그려져야(Rendered on Document) 브라우저 이벤트를 확인해볼 수 있다던가, 데이터베이스에 있는 사용자를 가져온다던가) 특수한 경우에는 더 복잡해질 수 있습니다. 하지만 <code class=\\\"language-text\\\">math.js</code> 모듈 같은 순수한 함수(Pure function - 입력값에 따른 출력값이 동일하며 외부의 상태에 영향을 미치지 않는 함수)은 상대적으로 쉽습니다.</p>\\n<p><strong>코드의 <code class=\\\"language-text\\\">actual !== expected</code> 부분을 “단언(assertion)” 이라고 합니다.</strong> 단언은 어떤 것이 특정한 값으로 되어있어야 한다거나 특정 테스트를 통과해야한다고 코드로 표현하는 것을 뜻합니다. <code class=\\\"language-text\\\">actual</code> 부분이 어떠한 정규표현식에 일치해야하거나, 배열이 특정한 길이를 가지고 있어야 한다고 표현하는 것이 단언이 됩니다. 중요한 점은 만약 우리가 작성한 단언이 실패하면 에러가 일어나야 한다는 것입니다.</p>\\n<p>그래서 <code class=\\\"language-text\\\">math.js</code> 를 가장 기본적인 형태로 테스트 해 본다면 이렇게 됩니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 1.js</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span>sum<span class=\\\"token punctuation\\\">,</span> subtract<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./math'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">let</span> result<span class=\\\"token punctuation\\\">,</span> expected\\nresult <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">)</span>\\nexpected <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>result <span class=\\\"token operator\\\">!==</span> expected<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>result<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> is not equal to </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>expected<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nresult <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">subtract</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span>\\nexpected <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">4</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>result <span class=\\\"token operator\\\">!==</span> expected<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>result<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> is not equal to </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>expected<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>짜잔! 이 파일을 <code class=\\\"language-text\\\">node</code> 커맨드로 실행해보면 에러 없이 실행되고 종료됩니다. 이제 <code class=\\\"language-text\\\">sum</code> 함수의 <code class=\\\"language-text\\\">+</code> 연산을 <code class=\\\"language-text\\\">-</code> 연산으로 바꾸고 다시 실행해서 테스트를 깨지도록 만들어보겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">$ node 1.js\\n/Users/kdodds/Desktop/js-test-example/1.js:8\\n  throw new Error(`${result} is not equal to ${expected}`)\\n  ^\\nError: -4 is not equal to 10\\n    at Object.&lt;anonymous&gt; (/Users/kdodds/Desktop/js-test-example/1.js:8:9)\\n    at Module._compile (module.js:635:30)\\n    at Object.Module._extensions..js (module.js:646:10)\\n    at Module.load (module.js:554:32)\\n    at tryModuleLoad (module.js:497:12)\\n    at Function.Module._load (module.js:489:3)\\n    at Function.Module.runMain (module.js:676:10)\\n    at startup (bootstrap_node.js:187:16)\\n    at bootstrap_node.js:608:3</code></pre>\\n      </div>\\n<p>좋습니다! 우리는 벌써 기본적인 테스트를 사용해서 이득을 보고 있어요! 이제 테스트를 변경하지 않는 이상 <code class=\\\"language-text\\\">sum</code> 함수를 마음대로 바꿀 수 없습니다. 쩌네요(Neato)!</p>\\n<p><strong>테스팅 프레임워크(혹은 단언 라이브러리)의 가장 중요한 부분은 에러 메세지를 최대한 도움이 되도록 표현하는 겁니다.</strong> 테스트가 실패할 때마다 여러분이 제일 먼저 에러 메세지를 보게 됩니다. 만약 에러 메세지를 보고 어떤 문제가 밑에 깔려있는지 단박에 파악하지 못한다면, 몇분씩 코드를 직접 들여다보면서 뭐가 잘못됐는지 찾아야 합니다. 에러 메세지의 질은 여러분이 주어진 테스팅 프레임워크를 얼마나 잘 이해하고 적절한 단언을 사용하느냐에 따라서 크게 달라집니다.</p>\\n<h2 id=\\\"2단계\\\"><a href=\\\"#2%EB%8B%A8%EA%B3%84\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>2단계</h2>\\n<p>사실 Node.js 가 위에서 만들어본 <a href=\\\"https://nodejs.org/api/assert.html#assert_assert\\\"><code class=\\\"language-text\\\">assert</code></a> 모듈을 내장하고 있다는 걸 알고 계셨나요🤔? 이 모듈을 써서 리팩터링을 해 보겠습니다!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 2.js</span>\\n<span class=\\\"token keyword\\\">const</span> assert <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'assert'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span>sum<span class=\\\"token punctuation\\\">,</span> subtract<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./math'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">let</span> result<span class=\\\"token punctuation\\\">,</span> expected\\n\\nresult <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">)</span>\\nexpected <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span>\\nassert<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">strictEqual</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">,</span> expected<span class=\\\"token punctuation\\\">)</span>\\n\\nresult <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">subtract</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span>\\nexpected <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">4</span>\\nassert<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">strictEqual</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">,</span> expected<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>좋아요! 저번에 작성했던 코드와 기능적으로 완전히 동일한 테스트 모듈을 작성해보았습니다. 딱 하나 다른게 있다면 에러 메세지입니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">$ node 2.js\\nassert.js:42\\n  throw new errors.AssertionError({\\n  ^\\nAssertionError [ERR_ASSERTION]: -4 === 10\\n    at Object.&lt;anonymous&gt; (/Users/kdodds/Desktop/js-test-example/2.js:8:8)\\n    at Module._compile (module.js:635:30)\\n    at Object.Module._extensions..js (module.js:646:10)\\n    at Module.load (module.js:554:32)\\n    at tryModuleLoad (module.js:497:12)\\n    at Function.Module._load (module.js:489:3)\\n    at Function.Module.runMain (module.js:676:10)\\n    at startup (bootstrap_node.js:187:16)\\n    at bootstrap_node.js:608:3</code></pre>\\n      </div>\\n<p>내용을 보시면 아쉽게도 에러가 더 이상 코드 내용을 보여주지 않고 있습니다. 😦 일단 계속 가보죠.</p>\\n<h2 id=\\\"3단계\\\"><a href=\\\"#3%EB%8B%A8%EA%B3%84\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>3단계</h2>\\n<p>더 나아가서 직접 테스팅 “프레임워크” 와 단언 라이브러리를 작성해보겠습니다. 먼저 단언 라이브러리부터 시작해보죠. Node의 내장 <code class=\\\"language-text\\\">assert</code> 모듈 대신에 <code class=\\\"language-text\\\">expect</code> 라는 라이브러리를 만들어보겠습니다. 변경된 코드는 아래와 같습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 3.js</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span>sum<span class=\\\"token punctuation\\\">,</span> subtract<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./math'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">let</span> result<span class=\\\"token punctuation\\\">,</span> expected\\n\\nresult <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">)</span>\\nexpected <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span>expected<span class=\\\"token punctuation\\\">)</span>\\n\\nresult <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">subtract</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span>\\nexpected <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">4</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span>expected<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>actual<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span>expected<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>actual <span class=\\\"token operator\\\">!==</span> expected<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>actual<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> is not equal to </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>expected<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>이제 원하는대로 단언을 추가하고 객체를 리턴하도록 만들 수 있습니다(<code class=\\\"language-text\\\">toMatchRegex</code>, <code class=\\\"language-text\\\">toHaveLength</code>).</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">$ node 3.js\\n/Users/kdodds/Desktop/js-test-example/3.js:17\\n        throw new Error(`${actual} is not equal to ${expected}`)\\n        ^\\nError: -4 is not equal to 10\\n    at Object.toBe (/Users/kdodds/Desktop/js-test-example/3.js:17:15)\\n    at Object.&lt;anonymous&gt; (/Users/kdodds/Desktop/js-test-example/3.js:7:16)\\n    at Module._compile (module.js:635:30)\\n    at Object.Module._extensions..js (module.js:646:10)\\n    at Module.load (module.js:554:32)\\n    at tryModuleLoad (module.js:497:12)\\n    at Function.Module._load (module.js:489:3)\\n    at Function.Module.runMain (module.js:676:10)\\n    at startup (bootstrap_node.js:187:16)\\n    at bootstrap_node.js:608:3</code></pre>\\n      </div>\\n<p>훨씬 보기 좋아졌네요.</p>\\n<h2 id=\\\"4단계\\\"><a href=\\\"#4%EB%8B%A8%EA%B3%84\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>4단계</h2>\\n<p>그런데 만약 에러 메세지가 나온다 해도 정확하게 <code class=\\\"language-text\\\">sum</code> 함수에 문제가 생겼다고 파악하려면 어떻게 해야할까요😖? 저 파일 안에는 <code class=\\\"language-text\\\">subtract</code> 함수도 있는데 말이죠. 게다가 테스트 파일의 코드는 각각의 테스트를 적절히 분리하지 못하고 있습니다(시각적으로 + 기능적으로). </p>\\n<p>그래서 헬퍼 함수를 만들어서 분리해보았습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 4.js</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span>sum<span class=\\\"token punctuation\\\">,</span> subtract<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./math'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'sum adds numbers'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">const</span> expected <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span>expected<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'subtract subtracts numbers'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">subtract</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">const</span> expected <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">4</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span>expected<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span>title<span class=\\\"token punctuation\\\">,</span> callback<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">callback</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`- [x] </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>title<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">error</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`✕ </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>title<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>actual<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span>expected<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>actual <span class=\\\"token operator\\\">!==</span> expected<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>actual<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> is not equal to </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>expected<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>이제 특정 테스트에 관련된 내용은 전부 “test” 콜백 안에 집어넣고, 테스트에 제목을 매길 수 있습니다. 그리고 <code class=\\\"language-text\\\">test</code> 함수에 유용한 에러 메세지를 출력하도록 할 뿐만 아니라 모든 테스트를 한번에 실행할 수 있게 되었습니다(첫 번째 테스트에서 에러가 발생한다고 멈추지 않구요)!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">$ node 4.js\\n✕ sum adds numbers\\nError: -4 is not equal to 10\\n    at Object.toBe (/Users/kdodds/Desktop/js-test-example/4.js:29:15)\\n    at test (/Users/kdodds/Desktop/js-test-example/4.js:6:18)\\n    at test (/Users/kdodds/Desktop/js-test-example/4.js:17:5)\\n    at Object.&lt;anonymous&gt; (/Users/kdodds/Desktop/js-test-example/4.js:3:1)\\n    at Module._compile (module.js:635:30)\\n    at Object.Module._extensions..js (module.js:646:10)\\n    at Module.load (module.js:554:32)\\n    at tryModuleLoad (module.js:497:12)\\n    at Function.Module._load (module.js:489:3)\\n    at Function.Module.runMain (module.js:676:10)\\n- [x] subtract subtracts numbers</code></pre>\\n      </div>\\n<p>좋아요! 이제 에러 메세지 <em>뿐만 아니라</em> 어떤 부분을 고쳐야하는지 테스트 제목을 보고 찾아갈 수 있습니다.</p>\\n<h2 id=\\\"5단계\\\"><a href=\\\"#5%EB%8B%A8%EA%B3%84\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>5단계</h2>\\n<p>마지막 단계로 모든 테스트 파일을 찾아서 실행하는 <a href=\\\"https://blog.kentcdodds.com/tips-for-making-a-cli-based-tool-with-node-9903255c2a3b\\\">CLI 도구를 작성하기만 하면 됩니다!</a> 처음엔 쉽겠지만 그 위에 해야하는 일들이 굉장히 많아서 좀 어렵습니다 . 😅</p>\\n<p>현재 시점에서 우리는 테스팅 프레임워크와 테스트 실행기(runner)를 만들었습니다. 다행히도 이미 만들어진 도구가 산더미같이 많습니다! 저는 모든 테스팅 도구를 사용해보았고 다 괜찮았습니다. 그래도 제 요구 사항을 가장 만족하는 도구는 Jest 뿐이었습니다. Jest는 아주 대단한 도구입니다. (<a href=\\\"http://kcd.im/egghead-jest\\\">Jest를 더 알아보시려면 이 링크를 확인하세요</a>)</p>\\n<p>그러니 이제 직접 프레임워크를 작성하는 대신 테스트 파일을 Jest 용으로 바꾸어 보겠습니다. 이를 어쩌죠? 안바꿔도 되는데요!? Jest는 <code class=\\\"language-text\\\">test</code>, <code class=\\\"language-text\\\">expect</code> 를 글로벌 객체로 가지고 있기 때문에 그냥 이전에 작성한 <code class=\\\"language-text\\\">test</code> 와 <code class=\\\"language-text\\\">expect</code> 의 구현체를 지우기만 하면 됩니다!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 5.js</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span>sum<span class=\\\"token punctuation\\\">,</span> subtract<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./math'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'sum adds numbers'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">const</span> expected <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span>expected<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'subtract subtracts numbers'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">subtract</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">const</span> expected <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">4</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span>expected<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>Jest로 이 파일을 실행하면 다음과 같은 결과가 출력됩니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">$ jest\\n FAIL  ./5.js\\n  ✕ sum adds numbers (5ms)\\n  - [x] subtract subtracts numbers (1ms)\\n● sum adds numbers\\nexpect(received).toBe(expected)\\n    \\n    Expected value to be (using Object.is):\\n      10\\n    Received:\\n      -4\\n      4 |   const result = sum(3, 7)\\n      5 |   const expected = 10\\n    &gt; 6 |   expect(result).toBe(expected)\\n      7 | })\\n      8 | \\n      9 | test(&#39;subtract subtracts numbers&#39;, () =&gt; {\\n      \\n      at Object.&lt;anonymous&gt;.test (5.js:6:18)\\nTest Suites: 1 failed, 1 total\\nTests:       1 failed, 1 passed, 2 total\\nSnapshots:   0 total\\nTime:        0.6s, estimated 1s\\nRan all test suites.</code></pre>\\n      </div>\\n<p>텍스트만 보아서는 알 수 없지만 사실 결과는 컬러로 출력됩니다. 이미지로 보시면 이렇게 나옵니다.</p>\\n<p><img src=\\\"https://cl.ly/302i0B3V0J45/what-is-javascript-testing-1.png\\\"></p>\\n<p>컬러로 출력되면 관련된 부분을 살펴볼 때 큰 도움이 됩니다. <strong>그리고 에러가 발생하는 부분의 코드를 직접 보여줍니다! 이게 “도움이 되는” 에러 메세지죠!</strong></p>\\n<h2 id=\\\"결론\\\"><a href=\\\"#%EA%B2%B0%EB%A1%A0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>결론</h2>\\n<p>그래서 자바스크립트 테스트가 뭐라고 했죠? 단순히 특정 상태를 설정해놓은 코드를 가지고 특정 동작을 수행한 뒤, 새 상태를 확인하는 단언을 만드는 겁니다. 이번 시간에는 <a href=\\\"https://facebook.github.io/jest/docs/en/api.html#beforeeachfn-timeout\\\"><code class=\\\"language-text\\\">beforeEach</code></a>, <a href=\\\"https://facebook.github.io/jest/docs/en/api.html#describename-fn\\\">\\u0018<code class=\\\"language-text\\\">describe</code></a> 같은 <a href=\\\"https://facebook.github.io/jest/docs/en/api.html\\\">프레임워크 공용으로 사용되는 헬퍼 함수</a>에 대한 이야기는 하지 않았지만, <a href=\\\"https://facebook.github.io/jest/docs/en/expect.html#tomatchobjectobject\\\"><code class=\\\"language-text\\\">toMatchObject</code></a>, <a href=\\\"https://facebook.github.io/jest/docs/en/expect.html#tocontainitem\\\"><code class=\\\"language-text\\\">toContain</code></a> 같이 사용할 수 있는 단언이 아주 많이 있습니다. 적어도 이 글이 여러분들에게 자바스크립트로 테스트하는데 기본적인 개념을 제시해주길 바랍니다.</p>\\n<p>도움이 되었으면 좋겠군요. 행운을 빕니다! 👍</p>\\n<p><strong>놓치지 말고 참고할만한 글 목록(영어 자료)</strong></p>\\n<ul>\\n<li><a href=\\\"https://twitter.com/horse_js/status/942658114209316864\\\">Horse JS on Twitter: “But really, what is a JavaScript”</a> - 문맥을 빗겨가게 끊어진 글을 트윗하는 아주 재밌는 계정입니다.</li>\\n<li><a href=\\\"https://twitter.com/NTulswani/status/942079674527518720\\\">Introducing React Performance Devtool!! - by Nitin Tulswani</a></li>\\n<li><a href=\\\"https://www.javascriptjanuary.com\\\">JavaScript January</a></li>\\n</ul>\",\"id\":\"/home/circleci/repo/src/pages/posts/2018-01-14-what-is-testing-javascript-kr/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-01-14\",\"path\":\"/posts/what-is-testing-javascript-kr\",\"title\":\"[번역] 그래서, 자바스크립트 테스트가 뭔가요?\",\"tags\":[\"Translation\",\"Javascript\",\"Testing\"],\"category\":\"Testing\"}},{\"excerpt\":\"이 글은 Twitter  @ageldama 님의 TDD 조언에 관한 글타래를 허락 받고 정리한 내용입니다. 정리하면서 말씀하신 의도가 약간 달라진 부분 혹은 제 지식이 부족하여 제대로 표현하지 못한 부분도 있을 수 있습니다. 피드백환영합니다. 해당 포스팅은  Medium…\",\"html\":\"<p><img src=\\\"https://cdn-images-1.medium.com/max/1600/1*jFw7ZZMoVcsEYM_fS33DBA.gif\\\"></p>\\n<p>이 글은 Twitter <a href=\\\"https://twitter.com/ageldama\\\">@ageldama</a>님의 TDD 조언에 관한 글타래를 허락 받고 정리한 내용입니다. 정리하면서 말씀하신 의도가 약간 달라진 부분 혹은 제 지식이 부족하여 제대로 표현하지 못한 부분도 있을 수 있습니다. 피드백환영합니다. 해당 포스팅은 <a href=\\\"https://medium.com/@devRinae/tdd-test-driven-development-%EB%A5%BC-%EC%97%B0%EC%8A%B5%ED%95%98%EB%A9%B4%EC%84%9C-%EC%B0%B8%EA%B3%A0%ED%95%98%EA%B8%B0-%EC%A2%8B%EC%9D%80-%ED%8C%81-10%EA%B0%80%EC%A7%80-d8cf46ae1806\\\">Medium에 먼저 발행되었으니</a> 댓글로 의견 공유 부탁드립니다.</p>\\n<p><strong>(번호가 중요도 혹은 순서를 나타내지 않습니다)</strong></p>\\n<ol>\\n<li><strong>유닛 테스트를 한다면 테스트할 주제와 대상 클래스를 정하고, 대상 클래스가 사용하는 의존성(패키지일 수도 있고 특정 함수일 수도있겠지요)들은 Mock이나 Stub으로 만든다.</strong> <a href=\\\"https://stackoverflow.com/questions/3459287/whats-the-difference-between-a-mock-stub\\\">(Mock과 Stub이란?)</a> Mocking을 어떻게 하는지는 사용하는 언어마다 주로 사용하는 테스팅 프레임워크의 레퍼런스를 참고하라. 그러고 나면 자신이 의존성을 잘 정리했는지 살펴보기 좋아지고, 이어서 테스트하기 좋은 형태가 눈에 들어오기 시작한다.</li>\\n<li><strong>무엇을 테스트할지 정하기 어렵다면?</strong> 단위 테스트를 예로 들면 자신이 만든 클래스나 모듈, 함수 등의 기능이 정상적으로 동작하는지 확인하기 위해 테스트를 작성한다고 생각해보라.</li>\\n<li><strong>Q: 테스트를 작성하는데 “망했다” 혹은 “잘못되었다” 는 느낌이 든다. / A:</strong> 오히려 좋은 징조인데, 당신이 작성한 테스트는 리팩토링 및 회귀 테스트 시 복구해야 할 곳이 있음을 보여주고, 제대로 복구하고 있다는 지침이 된다.</li>\\n<li>처음에는 작성한 모듈이나 클래스 비율이 높게 테스트를 짜는데, 단언(assertions)은 조금 엉성하더라도 기본적인 부분만 확인하도록 작성한다. 이후 리팩토링을 하면서 다양한 경우에 대응하기 위해 단계적으로 단언을 추가한다.</li>\\n<li><strong>원칙적으로 TDD인만큼</strong> 테스트를 먼저 스펙에 반영해 작성하고, 그에 따라 테스트를 충족하기 위해 코드를 작성 후 리팩토링 하는 것이 바람직하지만 <strong>실제로는 쉽지 않다</strong>. 초심자라면 코드를 어느 정도 수준까지 짜 놓고 테스트, Mock을 붙이는걸 권한다. — <a href=\\\"https://emaren84.github.io/posts/how-do-you-take-an-app-from-no-tests-to-tdd-kor\\\">참고 포스트</a></li>\\n<li>처음부터 Mocking을 하지 않아도 좋다. 입력과 기대값이 명확하게 나타나는 로직 부분일수록, 또한 다른 모듈이나 DB 등 외부 시스템과 연결이 없을 수록 테스트를 작성하기 쉽고 그 효과를 체감하기 쉽다.</li>\\n<li><strong>가장 중요한 것은 테스트가 다 붙은 상황에서 리팩토링을 시작하는 것이다.</strong> 테스트가 깨지는 것을 보고 코드와 테스트를 계속 수정해나가면서 연습해보면 <strong>“테스트 먼저”</strong>를 어떻게 하게 되는지 자연스럽게 익히게 된다.</li>\\n<li><strong>Q: E2E(End-to-End) 과정을 생각해서 하나씩 시나리오대로 테스트를 짜는 것이 좋지 않나? / A:</strong> 맨 처음 스펙 도출 이후 테스트 작성, 단언, Mocking 등 순차적으로 내려가는 것이 좋겠지만, 일반적인 테스팅 프레임워크를 적용해서 작은 단위로 테스트를 작성해야 단순하고 쉽게 접근할 수 있기 때문에 개별 모듈별로 먼저 단위 테스트를 시도해 보는 것을 권장한다.</li>\\n<li><strong>UI를 테스트할 때는 다른 테스팅 기법과 도구들이 잘 맞을 수도 있다.</strong> 하지만 UI 테스트나 일반 테스트 모두 공통적으로 테스트를 <strong>어떻게든</strong> 만들기 위해 노력하고, 테스트 기법 및 테스트에 맞게 자신의 코드를 생각해야 한다.</li>\\n<li><strong>테스트 커버리지는 모듈 단위로, 단언은 세세하게.</strong> 테스트하고자 하는 모듈의 테스트 골격을 먼저 잡아 놓으면, 이를 기반으로 더 세세한 고려 사항을 쉽게 떠올릴 수 있다. 처음부터 모든 경우를 명확하게 나열할 수 있다면 좋지만 현실적으로 변경 사항이나 버그가 나올 때마다 추가하며 더욱 명확해지도록 만드는 것이 좋다.</li>\\n</ol>\\n<p>TDD 가 좋은 개발 방법론 중 하나라는 것은 초짜인 저도 많이 들었던 내용이지만, 매번 테스트 한줄이라도 작성하려 하면 너무 어렵게 느껴지고 여러 가지 핑계로 제대로 도입을 하지 못하고 있었습니다. 이번에 접한 조언을 계기로 테스트 작성에 더 익숙해지면서 더 좋은 코드를 작성하고 싶습니다.</p>\\n<p>자바스크립트 기본적인 문법에 익숙하신 분이라면 <a href=\\\"https://github.com/dwyl/learn-tdd\\\">이 글</a>과 함께 TDD를 도전해보셔도 괜찮아 보입니다.</p>\",\"id\":\"/home/circleci/repo/src/pages/posts/2017-11-04-tdd-practice-tips/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-11-04\",\"path\":\"/posts/tdd-practice-tips\",\"title\":\"TDD(Test Driven Development) 를 연습하면서 참고하기 좋은 팁 10가지\",\"tags\":[\"TDD\",\"Testing\"],\"category\":\"TDD\"}},{\"excerpt\":\"이 번역글은  Justin Weiss의 포스팅 을 번역한 글입니다 오류 지적 및 피드백은 언제나 환영합니다. 댓글이나 메일로 알려주세요 당신은 자신이 만든 앱을 보고 매우 흥분한 상태이다. 한가지 문제가 있다는 점만 빼고 - 테스트를 전혀 작성하지 않았다는 점 말이다. 당신은 TDD(Test-Driven Development…\",\"html\":\"<ul>\\n<li><strong>이 번역글은 <a href=\\\"http://www.justinweiss.com/articles/how-do-you-take-an-app-from-test-less-to-tdd/\\\">Justin Weiss의 포스팅</a>을 번역한 글입니다</strong></li>\\n<li><strong>오류 지적 및 피드백은 언제나 환영합니다. 댓글이나 메일로 알려주세요</strong></li>\\n</ul>\\n<hr>\\n<p>당신은 자신이 만든 앱을 보고 매우 흥분한 상태이다. 한가지 문제가 있다는 점만 빼고 - 테스트를 전혀 작성하지 않았다는 점 말이다. 당신은 TDD(Test-Driven Development) 방법론을 적용하여 코드를 쓰고 싶었지만, 어디부터 시작해야 할지 전혀 몰라서 막혀버렸다. 어디부터 시작해야 할 것인가? <strong>어떻게 하면 테스트가 없는 앱을 가지고 TDD를 이용한 앱을 작성할 수 있을까?</strong></p>\\n<h2 id=\\\"이미-작성한-코드를-테스트하라\\\"><a href=\\\"#%EC%9D%B4%EB%AF%B8-%EC%9E%91%EC%84%B1%ED%95%9C-%EC%BD%94%EB%93%9C%EB%A5%BC-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EB%9D%BC\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>이미 작성한 코드를 테스트하라</h2>\\n<p>당신은 테스트가 없는 코드 뭉치를 가지고 있다. 그렇다고 <em>당장</em> 기존의 코드를 가지고 테스트를 작성할 수 없다는 뜻은 아니다. 이미 가지고 있는 코드를 테스트하는 것 부터 시작해보라. 기대하던대로 코드가 작동하는지 확인해보는 것이다.</p>\\n<p>이건 TDD가 아니다. <strong>그러나 이미 존재하는 코드를 테스팅하는 것은 TDD를 배우는데 도움을 줄 것이다.</strong></p>\\n<ul>\\n<li>\\n<p><strong>예외적인 경우나 에러가 발생하는 조건에 대해 생각하는 연습을 하게 된다</strong></p>\\n<p>모든 가능한 입력을 테스트하느라 수 년을 허비하지 않고 테스트를 작성하기 위해서, 당신은 보통 코드의 어느 부분에서 문제가 발생하는지 생각해야 한다. 만약 문자열을 받는 메서드를 테스트한다고 할 때, 대신 심볼을 넣으면 어떤 일이 생길 것인가?  <code class=\\\"language-text\\\">nil</code> 을 넣는다면? 혹은 숫자를 나누는 함수를 테스트한다면, 0을 입력하는 경우에 대한 테스트를 하는 것이 좋다. 하지만 아마 1과 2를 테스트 할 필요는 없을 것이다.</p>\\n<p>당신은 충분한 테스트를 작성한 뒤에 메서드의 어느 부분에서 문제가 발생할지 예측하기 시작할 것이다. 그리고 한번 TDD를 시작하면 이 기술을 이용하여 탄탄한 테스트를 작성할 수 있을 것이다. 이 테스트들은 예외 사항들을 더욱 잘 처리하도록 코드를 강제하는 역할을 한다. </p>\\n</li>\\n<li>\\n<p><strong>짜임새있는 테스트를 작성하는 연습을 하게 된다</strong></p>\\n<p>이미 작성한 코드에 대한 테스트를 작성한다면, 이 테스트들을 <a href=\\\"https://www.justinweiss.com/articles/writing-better-tests-with-the-three-phase-pattern//\\\">구조화하는 다른 패턴들</a>을 시도해볼 수도 있다. 테스트하고자 하는 코드는 이미 있다. 그러니 당신은 테스트 자체, 그리고 이 테스트가 어떤 식으로 작성되어야 하는지에 대해 집중할 수 있다. 그리고 한번 몇몇 좋은 패턴들을 익히고 나면 당신이 기댈 코드가 <em>없을</em> 때에도 더 좋은 테스트를 작성할 것이다.</p>\\n</li>\\n<li>\\n<p><strong>코드를 테스트하기 힘들게 하는 요소들을 발견하게 된다</strong></p>\\n<p>테스트들을 작성할 수록 점점 시스템 어느 부분이 테스트하기 제일 어려운지 느끼게 될 것이다. 그런 부분들을 알아차리게 되면 그 부분을 리팩터링이 필요한 부분이라고 표시해둘 수 있다. 더 나아가 처음부터 더욱 테스트하기 좋은 코드를 작성하기 시작할 것이다.</p>\\n<p>테스트하기 좋은 코드가 어떤 식으로 생겼는지 알기 시작하면, 그 지식을 기반으로 TDD하기 쉬운 API를 개발할 수 있으며 더욱 빨리 앱을 개발할 수 있을 것이다.</p>\\n</li>\\n</ul>\\n<h2 id=\\\"tdd에-익숙해지기ease-into-tdd\\\"><a href=\\\"#tdd%EC%97%90-%EC%9D%B5%EC%88%99%ED%95%B4%EC%A7%80%EA%B8%B0ease-into-tdd\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>TDD에 익숙해지기(Ease into TDD)</h2>\\n<p>'테스트를 나중에' 기법을 TDD를 배우는데 도움이 되는 기술로 사용할 수 있다. 하지만 여전히 당신 앱의 일부에 TDD를 적용하고 싶을 것이다.<em>(역주: 테스트를 먼저 작성하고 기능을 개발하는 것을 의미하는 것이라 추정합니다)</em> <strong>그리고 기존의 코드를 가지고 TDD에 익숙해지는 간단한 방법이 있다: <a href=\\\"https://ko.wikipedia.org/wiki/%ED%9A%8C%EA%B7%80_%ED%85%8C%EC%8A%A4%ED%8A%B8\\\">회귀 테스트를 작성하는 것이다</a></strong></p>\\n<p>회귀 테스트는 이미 확정한 코드를 부수는 것을 억누른다. 아이디어 자체는 아주 간단하다. 당신이 버그를 발견할 때마다, 그 버그를 다시 만들어보기 위해 브라우저에서 여기저기 클릭해보는 대신에:</p>\\n<ul>\\n<li>버그를 재생성하기 위해 <strong>실패하는 테스트를 작성하라.</strong></li>\\n<li><strong>테스트를 실행하라,</strong> 그리고 그 테스트가 확실히 실패하는지 확인하라 (왜냐면 버그는 아직 존재하니까).</li>\\n<li>가능한한 가장 간단한 방법으로 <strong>버그를 수정하라.</strong></li>\\n<li><strong>테스트를 실행하라,</strong> 그리고 테스트가 통과하는지 확인하라.</li>\\n<li>만약 필요하다면 당신이 수정한 방법을 <strong>리팩터링하라.</strong></li>\\n</ul>\\n<p>이 방법은 새 시스템을 밑바닥부터 TDD로 개발하는 것 보단 훨씬 쉽다. 왜냐면 이미 작성된 코드를 단지 테스트 주도적으로 바꾸기만 하는 것이기 때문이다. 그리고 \\\"Red, Green, Refactor\\\" 라는 TDD의 핵심적인 루프를 습관화하게 된다. <strong>그리고 이쯤부터 당신의 TDD는 테스트가 없는 상태에서 바로 TDD로 개발하는 것에 가까워지게 된다.(And from here, TDD is a shorter step away than trying to go straight to TDD from no tests.)</strong></p>\\n<h2 id=\\\"테스트가-없는-상태에서-tdd로\\\"><a href=\\\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EA%B0%80-%EC%97%86%EB%8A%94-%EC%83%81%ED%83%9C%EC%97%90%EC%84%9C-tdd%EB%A1%9C\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>테스트가 없는 상태에서 TDD로</h2>\\n<p>테스트가 없는 앱은 그렇게 나쁜 출발점은 아니다. 이미 작성된 코드를 테스트할 때, 당신은 좋은 TDD 테스트를 작성하기 위해 무엇이 필요한지 많이 배우게 될 것이다. '테스트를 나중에' 하는 것은 시작부터 TDD로 개발하는 것 보다 쉽다. 왜냐면 아직 어떻게 디자인해야할지 모르는 API들을 상상할 필요가 없기 때문이다. 그리고 자신의 앱에 한번 TDD를 도입하기로 결정했다면 회귀 테스트를 통해 익숙해질 수 있다.</p>\\n<p>그러니 만약 당신이 상상하고 있는 시스템에 TDD를 어떻게 도입해야 할 지 모르겠다면, 계속 테스트를 작성하라. 비록 코드를 먼저 써야 하더라도 말이다.</p>\\n<hr>\\n<h2 id=\\\"번역-후기\\\"><a href=\\\"#%EB%B2%88%EC%97%AD-%ED%9B%84%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>번역 후기</h2>\\n<p>2017년 첫 번역은 TDD에 관한 글입니다. TDD 혹은 BDD(Behavior Driven Development)가 개발 방법론에 있어서 절대적인 진리는 아닐 겁니다. 다만 많이 권장되는데는 이유가 있겠지요. 저는 간단하게 TDD가 확장성, 유지보수성에 큰 도움이 된다고 인지하고 있습니다.</p>\\n<p>제 자신도 아직 실력이 미천하여 코드 없이 테스트를 작성한다는 것에 큰 두려움을 느끼면서 지내왔습니다. 최근에야 일부 기능에 대해 예측되는 결과를 먼저 테스트로 작성하고, 이후에 실제 기능을 작성하여 잘 작동하는지 확인하는 수준에 불과합니다.</p>\\n<p>그러다가 마침 기존에 작성한 코드를 이용하여 TDD를 배워나가는 과정에 대해 간단한 포스팅이 있어 이렇게 소개를 하게 되었습니다. 음.. 당장은 기존의 코드를 이용하여 테스트를 작성하는게 꽤 부끄럽지만 (왜냐면 테스트를 작성할 것도 없이 손대야 할 부분들이 수두룩하게 보이니까요) 이런 방식으로 약간 우회하여 TDD를 습득하는 방법도 있겠지요. </p>\\n<p>그럼 모두 2017년 한해에도 좋은 테스트 + 테스트를 통과하는 좋은 코드 작성이 잘 되시길 바랍니다 :)</p>\\n<p>(추가) 피드백에 의해 'You' 라는 단어의 직역이 너무 많이 들어간 것 같아 조금 수정하였습니다. 확실히 번역할 때 '당신' 이라는 단어가 일일이 들어갈 필요는 없겠네요. 좋은 피드백을 주신 <a href=\\\"https://twitter.com/initnirvana\\\">@initNirvana</a> 님께 감사드립니다.</p>\",\"id\":\"/home/circleci/repo/src/pages/posts/2017-01-16-how-do-you-take-an-app-from-no-tests-to-tdd-kor/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-01-16\",\"path\":\"/posts/how-do-you-take-an-app-from-no-tests-to-tdd-kor\",\"title\":\"[번역] 테스트가 없는 앱을 이용하여 TDD를 배우는 방법\",\"tags\":[\"Ruby\",\"Testing\",\"Translation\"],\"category\":\"Translation\"}},{\"excerpt\":\"본 포스트는  Luca Guidi의 포스팅을  번역한 글입니다 문제를 설명하는데 나온 하나미(Hanami…\",\"html\":\"<ul>\\n<li><strong>본 포스트는 <a href=\\\"https://lucaguidi.com/2016/12/27/isolate-global-state.html\\\">Luca Guidi의 포스팅을</a> 번역한 글입니다</strong></li>\\n<li><strong>문제를 설명하는데 나온 하나미(Hanami)에 대해서는 <a href=\\\"https://emaren84.github.io/blog/archivers/hanami-introduction\\\">이 포스팅</a>을 참조해주세요</strong></li>\\n<li><strong>전문 번역이 아니기에 부족한 표현이나 오역은 언제든지 지적해주세요</strong></li>\\n</ul>\\n<hr>\\n<p>소프트웨어 프로그램에서 전역 상태를 사용하는건 개발하기엔 쉽지만 유지보수 할 때는 악몽이 된다. 예상치 못한 상황에서 발생하여 추적하기도 어려운 버그가 되기 쉽상이다.</p>\\n<p>왜 그렇게 되는지, 그리고 어떻게 그 문제를 완화할 수 있을지 살펴보자.</p>\\n<p><em>역주: 이 글에서 전역 상태는 전역 변수와 거의 동일한 의미로 사용되는 것으로 추정됩니다.</em></p>\\n<h2 id=\\\"문제의-예시\\\"><a href=\\\"#%EB%AC%B8%EC%A0%9C%EC%9D%98-%EC%98%88%EC%8B%9C\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>문제의 예시</h2>\\n<p>예를 들자면 하나미의 코드 베이스 안에서 우리는 환경 변수에 따라 어떻게 프레임워크가 설정되는지 테스트 할 필요가 있다.</p>\\n<p>우리<em>(역주: 하나미 개발팀으로 보입니다)</em>는 보통 테스트를 이런 식으로 작성한다:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code class=\\\"language-ruby\\\"><span class=\\\"token constant\\\">RSpec</span><span class=\\\"token punctuation\\\">.</span>describe <span class=\\\"token constant\\\">Hanami</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token constant\\\">Environment</span> <span class=\\\"token keyword\\\">do</span>\\n  before <span class=\\\"token keyword\\\">do</span>\\n    <span class=\\\"token constant\\\">ENV</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'HANAMI_ENV'</span><span class=\\\"token punctuation\\\">]</span>  <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">nil</span>\\n    <span class=\\\"token constant\\\">ENV</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'RACK_ENV'</span><span class=\\\"token punctuation\\\">]</span>    <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">nil</span>\\n    <span class=\\\"token constant\\\">ENV</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'HANAMI_HOST'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">nil</span>\\n    <span class=\\\"token constant\\\">ENV</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'HANAMI_PORT'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">nil</span>\\n\\n    <span class=\\\"token comment\\\"># ...</span>\\n  <span class=\\\"token keyword\\\">end</span>\\n\\n  context <span class=\\\"token string\\\">\\\"when HANAMI_ENV is set\\\"</span> <span class=\\\"token keyword\\\">do</span>\\n    before <span class=\\\"token keyword\\\">do</span>\\n      <span class=\\\"token constant\\\">ENV</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'HANAMI_ENV'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'production'</span>\\n      <span class=\\\"token variable\\\">@env</span> <span class=\\\"token operator\\\">=</span> described_class<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">new</span>\\n    <span class=\\\"token class-name\\\">end</span>\\n\\n    <span class=\\\"token comment\\\"># ...</span>\\n  <span class=\\\"token keyword\\\">end</span>\\n<span class=\\\"token keyword\\\">end</span></code></pre>\\n      </div>\\n<p>우리는 보통 각각의 테스트를 실행하기 전에 모든 환경 변수를 초기화해왔다. 그리고 우리가 필요로 하는 특별한 상황(the edge case)에서만 하나씩 설정했다.</p>\\n<p>이러한 접근 방식을 사용할 때의 <strong>문제는</strong> 이 방법이 루비 프로세스의 전역 상태를 <strong>더럽힌다는</strong> 것이다. 우리가 테스트 파일을 단독으로 실행할 때는  <code class=\\\"language-text\\\">before</code> 블록이 환경 변수를 리셋하기 때문에 잘 작동한다.</p>\\n<p>그러나 모든 테스트를 한번에 실행할 때, 테스트는 꼬이게 될 것이다. 환경 변수 초기화가 언제나 작동하진 않기 때문이다.</p>\\n<p>만약 한 테스트가 <code class=\\\"language-text\\\">ENV</code> 속성을 변환하고 나서 뒷정리를 하지 않으면, 그 다음 테스트는 기존의 <code class=\\\"language-text\\\">ENV</code> 값의 변화를 <strong>물려받아서</strong> 우리가 기대하던대로 작동하지 않을 수 있다.</p>\\n<p>때때로 위의 예시 처럼 눈에 띄는 부분에서 변화를 준 경우에는 우리가 <code class=\\\"language-text\\\">after</code> 블록을 설정하여 뒷정리를 할 수 있다. 그러나 다른 때엔 변환한 것(the mutation)이 우리 눈에 보이지 않는 부분에서 부작용을 초래할 수 있다.</p>\\n<p>이건 소스의 버그다. 그리고 이 버그는 엉킨 실타래처럼 되어 디버그하기 힘들다.</p>\\n<p><strong>오랜 시간동안, 여러 가지 전역 상태의 조합하는 것은 하나미를 지속적 통합 개발(<a href=\\\"https://ko.wikipedia.org/wiki/%EC%A7%80%EC%86%8D%EC%A0%81_%ED%86%B5%ED%95%A9\\\">CI builds</a>)이 힘들도록 만들고 여러 버그를 일으켰다.</strong></p>\\n<p>개발자로서의 내 경험으로 미루어보아(<em>역주: Luca Guidi는 숙련된 웹 개발자입니다</em>) 이런 형태의 문제를 완화할 수 있는 유일한 방법은 <strong>전역 상태를 격리하거나, 전역 상태를 사용하는 것을 아예 피하는 것이다.</strong> 우리는 <strong>가능한한 전역 상태를 사용하는 것을 줄이도록</strong> 하나미의 내부 구현을 바꾸고 있다.</p>\\n<h2 id=\\\"문제의-해법\\\"><a href=\\\"#%EB%AC%B8%EC%A0%9C%EC%9D%98-%ED%95%B4%EB%B2%95\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>문제의 해법</h2>\\n<p>앞서 이야기한 특별한 경우를 위해 우리는 환경 변수를 격리할 수 있는 새로운 객체를 선보였다. 이는 <code class=\\\"language-text\\\">Hanami::Env</code> 라고 불린다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code class=\\\"language-ruby\\\"><span class=\\\"token keyword\\\">module</span> <span class=\\\"token constant\\\">Hanami</span>\\n  <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Env</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">initialize</span><span class=\\\"token punctuation\\\">(</span>env<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token constant\\\">ENV</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token variable\\\">@env</span> <span class=\\\"token operator\\\">=</span> env\\n    <span class=\\\"token keyword\\\">end</span>\\n\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token variable\\\">@env</span><span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token keyword\\\">end</span>\\n\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token variable\\\">@env</span><span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> value\\n    <span class=\\\"token keyword\\\">end</span>\\n\\n    <span class=\\\"token comment\\\"># ...</span>\\n  <span class=\\\"token keyword\\\">end</span>\\n<span class=\\\"token keyword\\\">end</span></code></pre>\\n      </div>\\n<p>구현 자체는 별 것 아니다: <code class=\\\"language-text\\\">ENV</code> 에 접근하는 것을 캡슐화하는 것이다.</p>\\n<p>우리는 환경 변수를 관리하기 위해 자체 인터페이스를 정의했다. 우리는 명시적인 구현(concrete implementation)을 사용하기보다(<code class=\\\"language-text\\\">ENV</code>) 추상화(<code class=\\\"language-text\\\">Hanami::Env</code>)에 의존하고 있다(<a href=\\\"https://ko.wikipedia.org/wiki/%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84_%EC%97%AD%EC%A0%84_%EC%9B%90%EC%B9%99\\\">의존관계 역전 원칙 참고</a>). </p>\\n<p><code class=\\\"language-text\\\">Hanami::Environment</code> 는 프로젝트의 환경 변수를 설정하는 책임을 가지고 있는데, 우리는 이런 방식으로 사용한다:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code class=\\\"language-ruby\\\"><span class=\\\"token keyword\\\">module</span> <span class=\\\"token constant\\\">Hanami</span>\\n  <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Environment</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">initialize</span><span class=\\\"token punctuation\\\">(</span>options<span class=\\\"token punctuation\\\">)</span>\\n      opts <span class=\\\"token operator\\\">=</span> options<span class=\\\"token punctuation\\\">.</span>to_h<span class=\\\"token punctuation\\\">.</span>dup\\n      <span class=\\\"token variable\\\">@env</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">Hanami</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token constant\\\">Env</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">new</span><span class=\\\"token punctuation\\\">(</span>env<span class=\\\"token punctuation\\\">:</span> opts<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">delete</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token symbol\\\">:env</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token constant\\\">ENV</span><span class=\\\"token punctuation\\\">)</span>\\n\\n      <span class=\\\"token comment\\\"># ...</span>\\n    <span class=\\\"token keyword\\\">end</span>\\n  <span class=\\\"token keyword\\\">end</span>\\n<span class=\\\"token keyword\\\">end</span></code></pre>\\n      </div>\\n<p>우리가 하나미 프로젝트를 사용할 때, <code class=\\\"language-text\\\">:env</code> 옵션은 설정되지 않은 상태이다. 이로 인해 <code class=\\\"language-text\\\">@env</code> 는 <code class=\\\"language-text\\\">ENV</code> 를 참조하여 루비 프로세스의 진짜 환경 변수를 읽거나 쓰게 된다.</p>\\n<p>이렇게 우리는 <code class=\\\"language-text\\\">Hanami::Environment</code> 의 테스트 중에 많은 양의 코드를 단순화하고, <strong>공유되고 변화 가능한 상태(shared mutable state, 즉 <code class=\\\"language-text\\\">ENV</code> 말이다)의 사용을 피할 수 있었다.</strong> 아래 코드에서 우리는 <code class=\\\"language-text\\\">ENV</code> 와 유사하게 동작하는 <code class=\\\"language-text\\\">:env</code> 를 객체의 옵션으로 전달하지만, 이 것은 실제로 <code class=\\\"language-text\\\">ENV</code>가 아니다: 그냥 <code class=\\\"language-text\\\">Hash</code> 이다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code class=\\\"language-ruby\\\"><span class=\\\"token constant\\\">RSpec</span><span class=\\\"token punctuation\\\">.</span>describe <span class=\\\"token constant\\\">Hanami</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token constant\\\">Environment</span> <span class=\\\"token keyword\\\">do</span>\\n  context <span class=\\\"token string\\\">\\\"when HANAMI_ENV is set\\\"</span> <span class=\\\"token keyword\\\">do</span>\\n    <span class=\\\"token function\\\">let</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token symbol\\\">:env</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token builtin\\\">Hash</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"HANAMI_ENV\\\"</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token string\\\">\\\"production\\\"</span><span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    it <span class=\\\"token string\\\">\\\"tests something interesting\\\"</span>\\n      <span class=\\\"token variable\\\">@env</span> <span class=\\\"token operator\\\">=</span> described_class<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">new</span><span class=\\\"token punctuation\\\">(</span>env<span class=\\\"token punctuation\\\">:</span> env<span class=\\\"token punctuation\\\">)</span>  \\n    <span class=\\\"token keyword\\\">end</span>\\n\\n    <span class=\\\"token comment\\\"># ...</span>\\n  <span class=\\\"token keyword\\\">end</span>\\n<span class=\\\"token keyword\\\">end</span></code></pre>\\n      </div>\\n<h2 id=\\\"결론\\\"><a href=\\\"#%EA%B2%B0%EB%A1%A0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>결론</h2>\\n<p><a href=\\\"https://ko.wikipedia.org/wiki/%EC%BA%A1%EC%8A%90%ED%99%94\\\">캡슐화</a>와 <a href=\\\"http://solnic.eu/2013/12/17/the-world-needs-another-post-about-dependency-injection-in-ruby.html\\\">의존성 주입</a>을 적절하게 사용하여, 각각의 테스트에서 발생할 수 있는 변화는 나머지 테스트에서는 보이지 않게 되었다. 결과적으로 안정적인 테스트 수행을 할 수 있게 되었고, 하나미 내부를 <a href=\\\"https://ko.wikipedia.org/wiki/SOLID\\\">SOLID 디자인</a>에 맞게 구성할 수 있었다. </p>\\n<hr>\\n<h2 id=\\\"번역-후기\\\"><a href=\\\"#%EB%B2%88%EC%97%AD-%ED%9B%84%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>번역 후기</h2>\\n<p>보통 루비 프로젝트에서 <code class=\\\"language-text\\\">dotenv</code> 같은 젬으로 환경 변수를 관리합니다. 사실 이 환경 변수라는 개념도 저에게 아직 모호한 개념이지만, 객체지향 프로그래밍의 핵심적인 주제인 캡슐화와 의존성 주입을 어떤 식으로 활용하는지 좋은 예를 보여준 것 같아 한번 번역해보게 되었습니다.</p>\\n<p>특히 제가 요즘에야 테스트를 작성해보기 시작했는데, 테스트를 개별로 실행할 때는 몰라도 전체 테스트를 실행할 때 원인을 알 수 없는 오류가 생길 때가 종종 있었습니다. 이 글을 통해 약간의 힌트를 얻었다는 생각도 듭니다. </p>\",\"id\":\"/home/circleci/repo/src/pages/posts/2016-12-30-isolate-global-state-kor/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2016-12-30\",\"path\":\"/posts/isolate-global-state-kor\",\"title\":\"[번역] 전역 상태를 격리하라\",\"tags\":[\"Ruby\",\"Hanami\",\"Testing\",\"Translation\"],\"category\":\"Translation\"}}],\"tagName\":\"Testing\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tags-testing.json\n// module id = 485\n// module chunks = 79338355588033"],"sourceRoot":""}