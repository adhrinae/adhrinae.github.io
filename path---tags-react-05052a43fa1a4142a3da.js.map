{"version":3,"sources":["webpack:///path---tags-react-05052a43fa1a4142a3da.js","webpack:///./.cache/json/tags-react.json"],"names":["webpackJsonp","441","module","exports","pathContext","postsByTag","excerpt","html","id","frontmatter","date","path","title","tags","category","tagName"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,aAAeC,QAAA,IAAAC,KAAA,6i+BAA+09BC,GAAA;AAAAC,aAA25CC,KAAA,aAAAC,KAAA,yCAAAC,MAAA,iCAAAC,MAAA,gCAAAC,SAAA,aAA6KR,QAAA,2MAAAC,KAAA;AAAkujCC,GAAA,+GAAAC,aAAwXC,KAAA,aAAAC,KAAA,yBAAAC,MAAA,iBAAAC,MAAA,4BAAAC,SAAA,eAA2IR,QAAA,wPAAAC,KAAA,q50BAAqg0BC,GAAA,mHAAAC,aAA0zDC,KAAA,aAAAC,KAAA,6BAAAC,MAAA,gBAAAC,MAAA,6BAAAC,SAAA,UAA0IR,QAAA,yJAAAC,KAAA;AAAsknGC,GAAA,yIAAAC,aAA8mDC,KAAA,aAAAC,KAAA,mDAAAC,MAAA,0CAAAC,MAAA,SAAAC,SAAA,WAAuKR,QAAA,wNAAAC,KAAA;AAA0/xDC,GAAA,6HAAAC,aAA4xBC,KAAA,aAAAC,KAAA,uCAAAC,MAAA,sBAAAC,MAAA,8BAAAC,SAAA,YAA2JC,QAAA","file":"path---tags-react-05052a43fa1a4142a3da.js","sourcesContent":["webpackJsonp([84586273293571],{\n\n/***/ 441:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"postsByTag\":[{\"excerpt\":\"…\",\"html\":\"<h2 id=\\\"번역-서문\\\"><a href=\\\"#%EB%B2%88%EC%97%AD-%EC%84%9C%EB%AC%B8\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>번역 서문</h2>\\n<p><a href=\\\"/posts/what-is-testing-javascript-kr\\\">지난번</a> <a href=\\\"/posts/write-mostly-integration-test-kr\\\">시리즈</a>를 통해 테스트가 무엇인지, 어떤 방향으로 테스트를 해야할지 조금 감을 잡으셨을 겁니다. 이제 본격적으로 리액트 애플리케이션을 테스트하고자 하는데, 또 한번 막히게 되죠.</p>\\n<blockquote>\\n<p>통합 테스트가 좋다는 건 알겠는데 좀더 실전에 가까운 예가 필요하다</p>\\n</blockquote>\\n<p>라고 생각하실지 몰라서 (저도 그렇게 생각하기 때문에) 남은 두 번의 번역 시리즈는 리액트 + 리덕스 애플리케이션 개발 시 테스트를 어떻게 했는지, 참고할만한 팁을 번역할 예정입니다.</p>\\n<p>참고로 원작자는 ‘Redux app’ 이라는 용어를 계속 사용하고 있어서 저도 그냥 리덕스 앱이라고 번역했습니다. (앵귤러도 리덕스 쓸 수 있는데...) 또한 mocking(흉내내기, 모조품 만들기)의 번역이 부자연스러워 바로 음차했습니다. 더 좋은 표현이 있다면 제안 부탁드립니다.</p>\\n<p><a href=\\\"https://hackernoon.com/low-effort-high-value-integration-tests-in-redux-apps-d3a590bd9fd5\\\">원문은 여기서 보실 수 있습니다.</a></p>\\n<hr>\\n<p><strong>짧은 정리: 여러분은 노드 환경에서 앱을 랜더링하고, 사용자 동작을 흉내내며 상태나 마크업의 변화를 확인할 수 있습니다. 이런 테스트는 상대적으로 작성하기 쉽고 빠르게 작동하며 이를 통해 많은 자신감을 얻을 수 있습니다.</strong></p>\\n<p>효율적인 소프트웨어 테스트를 작성하는 일은 아슬아슬한 줄타기 같습니다(tricky balancing act). ‘효율성’ 이라는 용어는 실행 속도나 자원 소모를 의미하는 것이 아니라, 테스트를 작성하는데 드는 노력과 테스트가 제공하는 가치 사이에서 최고로 얻어낼 수 있는 절충안을 의미합니다.</p>\\n<p>이 문제는 알려지지 않았거나 전혀 새로운 문제가 아닙니다. 과거에 수 많은 똑똑한 사람들이 달려들었고, 나중에 이 문제에 맞딱뜨릴 개발자를 위해 가이드라인을 만들었습니다. 저는 <a href=\\\"https://martinfowler.com/bliki/TestPyramid.html\\\">테스팅 피라미드</a>를 신봉합니다. 테스팅 피라미드는 다양한 종류의 테스트를 제대로 다루는데 앞서, 각각의 코드를 개별적으로 다루는 단위 테스트(Unit test)가 기반이 되어야 한다고 강조합니다.</p>\\n<h2 id=\\\"단위-테스트와-리덕스redux\\\"><a href=\\\"#%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%99%80-%EB%A6%AC%EB%8D%95%EC%8A%A4redux\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>단위 테스트와 리덕스(Redux)</h2>\\n<p>리덕스가 제시하는(역주: ‘강요하는’ 에 가까운 어감으로 느껴집니다) 구조 덕에 단위 테스트를 아주 쉽게 작성할 수 있습니다. 서로 분리되어있는 부분(리듀서, 액션 생성자, 컨테이너 등)을 각각 불러와서 여타 순수 함수와 똑같이 테스트 하면 됩니다. 데이터를 집어넣고, 나온 데이터를 단언(assertion)과 맞춰봅니다. 모킹(mocking)을 할 필요가 없지요. <a href=\\\"http://redux.js.org/docs/recipes/WritingTests.html\\\">리덕스 문서 안에 있는 테스팅 가이드</a>에 각 부분의 단위 테스트를 하는 방법이 작성되어 있습니다.</p>\\n<p>이 가이드를 따라가면서 지루하게 리듀서끼리, 액션 생성자끼리 테스트를 복-붙(copy-paste) 하다보면 단위 테스트 작성을 끝낼 수 있습니다. 그렇게 모든 작업이 끝나면 테스팅 피라미드가 뒷통수를 때리죠. 단순히 단위 테스트만 가지고는 ‘이 앱이 제대로 작동하는가?’ 라는 가장 기본적인 질문에 답할 수가 없습니다.</p>\\n<h2 id=\\\"피라미드-오르기\\\"><a href=\\\"#%ED%94%BC%EB%9D%BC%EB%AF%B8%EB%93%9C-%EC%98%A4%EB%A5%B4%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>피라미드 오르기</h2>\\n<p>웹 애플리케이션을 작성하면서 테스팅 피라미드의 윗 단계로 올라가는데 몇 가지 방법이 있습니다. 맨 꼭대기에 있는 end-to-end(e2e) 계층은 Selenium과 <a href=\\\"http://webdriver.io\\\">webdriver.io</a>를 사용해서 구현할 수 있습니다. 이런 종류의 테스트는 기술 독립적이라 여러분이 다른 프레임워크를 사용하도록 앱을 포팅해도 잘 작동합니다. 하지만 구현하고 돌려보는데 오래 걸리고, 디버그하기도 어려우며, 종종 원인 모를 문제에 시달릴 수 있습니다. 보통 아주 적은 종류의 e2e 테스트만 프로젝트에 적용하게 됩니다.</p>\\n<p>그렇다면 e2e테스트와 단위 테스트 사이에 있는 계층은 어떨까요? 일반적으로 이런 테스트를 통합 테스트(integration test)라고 부릅니다. 애플리케이션의 모듈이 어떻게 상호작용하는지 테스트하지요. 통합 테스트의 범위는 넓습니다. 예를 들자면 액션을 보내기 위해(dispatch) 액션 생성자를 사용하는 리듀서를 테스트한다면 이미 단위 테스트의 범위를 넘어간 겁니다. 다른 측면에서 보면 e2e 테스트는 아주 극단적인 형태의 통합 테스트라고 볼 수 있습니다.</p>\\n<p>우리는 리덕스에서 통합 테스트 하기에 아주 적절한 지점(sweet-spot)을 찾아보려 합니다. 개발 과정에서 충분히 빨리 돌려볼 수 있어야 하고, 단위 테스트와 같은 테스트 환경을 사용해야 하면서 리덕스로 관리되는 애플리케이션이 제대로 동작하고 있다는 충분한 확신을 줄 수 있어야 합니다.</p>\\n<h2 id=\\\"범위를-찾기\\\"><a href=\\\"#%EB%B2%94%EC%9C%84%EB%A5%BC-%EC%B0%BE%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>범위를 찾기</h2>\\n<p>우선 테스트 하고자 하는 범위를 설정하는 게 좋은 출발점이 됩니다. 일반적인 웹 앱은 이런 방식으로 구성되어있는데요.</p>\\n<p><img src=\\\"https://cl.ly/271c282D101g/typical-webapp-structure.png\\\" alt=\\\"일반적으로 고도화된 웹앱의 구조\\\"></p>\\n<p>시스템의 일부는 올바른 테스트 결과를 얻기 위해 모킹되어야 합니다. 제일 제약이 심한 부분이 저 맨 꼭대기 위에 있는 ‘브라우저’입니다. (비록 헤드리스-Headless 라도) 브라우저 인스턴스를 띄워서 테스트를 돌리는 일은 Node.js(이하 노드)에서 테스트 코드를 실행하는 것보다 훨씬 오래 걸립니다. 시작부터 끝까지 진짜 요청이 끝나길 기다릴 필요는 없습니다. 네트워크 계층(역주: 프론트엔드와 백엔드 사이에 통신하는 부분을 지칭하는 것으로 보입니다)은 명확히 정의된 인터페이스라서 적절히 모킹하기 쉽습니다.</p>\\n<h2 id=\\\"범위를-모킹하기\\\"><a href=\\\"#%EB%B2%94%EC%9C%84%EB%A5%BC-%EB%AA%A8%ED%82%B9%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>범위를 모킹하기</h2>\\n<p>리액트와 리덕스를 쓰는 앱이 있다고 가정하면, 노드 환경에서 부드럽게 돌아가는 테스트를 작성하는게 꽤 쉽습니다(심지어 서버 사이드 랜더링을 한다면 프로덕션 환경에서도 가능합니다). <a href=\\\"https://facebook.github.io/jest/\\\">Jest</a>라는 걸출한 테스팅 프레임워크로 테스트를 돌릴 수 있는데다, 마찬가지로 대단한 <a href=\\\"https://github.com/airbnb/enzyme\\\">Enzyme</a>은 브라우저 환경 없이 애플리케이션의 일부 혹은 전체를 랜더링해주고 동작을 확인해볼 수 있게 만들어주기 때문입니다.</p>\\n<p>Enzyme은 <code>mount</code> 라는 함수를 제공하는데, 이 함수로 어떠한 리액트 컴포넌트라도 그려내고 동작을 확인해볼 수 있습니다. 리덕스를 쓰는 앱도 마찬가지로 테스트 가능합니다. 매번 테스트할 때 같은 코드를 반복하지 않기 위해 간단한 유틸리티 함수를 작성해두면 도움이 됩니다. 이 함수는 주어진 상태(Redux 스토어)와 Enzyme의 래퍼 객체(역주: Enzyme을 통해 그려진 컴포넌트를 객체화 한 것. 이후 다양한 메서드를 통해 하위 DOM 탐색 및 다양한 동작을 확인해볼 수 있습니다)를 리턴합니다. 이렇게 만들어둔 함수는 나중에 단언 작성을 꽤 편하게 해줍니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Provider <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-redux'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> mount <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'enzyme'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> MyApp <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./containers/MyApp'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> createStore <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./createStore'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">renderAppWithState</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> store <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">createStore</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> wrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">mount</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>Provider store<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>store<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>MyApp <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Provider<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span>store<span class=\\\"token punctuation\\\">,</span> wrapper<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">,</span> wrapper<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">renderAppWithState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'bar'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nwrapper\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'input'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">simulate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'change'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> target<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'hello'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>노드 환경에서 테스트를 실행할 때 네트워크 계층을 깔끔하게 모킹하는 방법이 있습니다. 예를 들어 <a href=\\\"https://github.com/node-nock/nock\\\">nock</a> 같은 라이브러리가 있지요. nock은 테스트를 실행하기 전에 네트워크 요청에 따른 응답 데이터나 에러를 쉽게 선언할 수 있도록 만들어줍니다. 성공적인 GET 요청을 모킹하는 예는 다음과 같습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">import</span> nock <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'nock'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">nock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'https://example.com/api'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/12345'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reply</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">200</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'bar'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 이후 코드 어디에서나 https://example.com/api/1234 로 요청을 하면</span>\\n<span class=\\\"token comment\\\">// 성공했다는 응답과 함께 { foo: 'bar' } 를 응답값으로 리턴하게 됩니다.</span>\\n</code></pre>\\n      </div>\\n<p>이렇게 설정하면 통합 테스트를 단위 테스트와 비슷한 수준으로 빠르고 편하게 실행할 수 있습니다. 이제 테스트를 구현하기만 하면 됩니다...</p>\\n<p><img src=\\\"https://cl.ly/3j3q0t3Q0b2G/mock-boundaries.png\\\" alt=\\\"리덕스 통합 테스트를 위해 테스트 범위 모킹\\\"></p>\\n<h2 id=\\\"무엇을-테스트하나\\\"><a href=\\\"#%EB%AC%B4%EC%97%87%EC%9D%84-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EB%82%98\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>무엇을 테스트하나?</h2>\\n<p>여러분이 만든 앱이 정상적으로 동작한다는 자신감을 가장 크게 얻으려면 사용자의 시점에서 통합 테스트를 작성해야 합니다. 버튼 클릭, 폼 채우기 등의 사용자가 조작하는 행위에 따라 앱이 기대한대로 반응하는지 확인하는게 목표입니다.</p>\\n<p>간단한 폼을 제출한다는 시나리오를 생각해 보겠습니다. 데이터가 폼에 들어있는 상태로 랜더링 한 뒤에 사용자가 ‘제출’ 버튼을 누르는 행위를 흉내를 내 보겠습니다(simulate). 그리고 지정된 API 엔드포인트로 요청을 제대로 보내는지 확인해보겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Submitting the form'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">,</span> wrapper<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">renderAppWithState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'John Doe'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> submitButton <span class=\\\"token operator\\\">=</span> wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'[type=\\\"submit\\\"]'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'sends the data and shows the confirmation page'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">nock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'https://myapp.com/api'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">post</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/12345'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reply</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">200</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    submitButton<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">simulate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// 이제 무슨 일이 일어나는지 확인합니다</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"언제-테스트하나\\\"><a href=\\\"#%EC%96%B8%EC%A0%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EB%82%98\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>언제 테스트하나?</h2>\\n<p>본격적으로 단언을 작성하기 전에, 또 하나의 문제가 있습니다. “테스트를 언제 실행하냐” 인데요(역주: 테스트 코드를 실행하는 행위가 아니라 모든 작업이 다 끝나고 기대값과 결과값을 비교하는 ‘단언’ 을 의미하나봅니다). 모든 변화가 순차적으로 일어나는 단순한 상황에서는 사용자 동작을 흉내를 낸 뒤에 바로 단언을 실행하면 됩니다. 하지만 여러분의 앱은 보통 네트워크 요청 같은 비동기 코드를 다루기 위해 프로미스(Promise) 등을 사용할 겁니다. 네트워크 요청을 순차적으로 실행되게 모킹해놓았다 하더라도, 성공한 프로미스는 <code>submitButton.simulate('click')</code> 부분 다음의 코드를 바로 실행할겁니다. 우리는 단언이 실행되기 전에 앞선 작업이 “제대로 끝나기를” 기다리게 해야합니다.</p>\\n<p>Jest는 여러가지로 비동기 코드를 다루는 방법을 제공하지만, Promise 체인을 직접 다루는 방식으로 동작하거나(이번 예시에는 없지요) , 타이머를 모킹해야 합니다(Promise 기반 코드에는 동작하지 않습니다). <code>setTimeout(() => {}, 0)</code> 같은 코드를 사용할 수 있지만 <a href=\\\"https://facebook.github.io/jest/docs/en/asynchronous.html\\\">Jest의 비동기 콜백 기능</a>을 사용해야 해서 코드의 가독성이 떨어지게 됩니다.</p>\\n<p>하지만 이 문제를 멋지게 해결하기 위해 한 줄짜리 보조 함수를 사용하면 됩니다. 이 함수는 성공한 Promise를 이벤트 루프의 바로 다음 차례로 넘기는 일을 합니다. Jest에서 기본적으로 지원하는 Promise 리턴과 같이 사용하면 됩니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">flushAllPromises</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span>resolve <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">setImmediate</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'runs some promise based code'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">triggerSomethingPromiseBased</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Promise 기반의 동작 실행</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">flushAllPromises</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n     <span class=\\\"token comment\\\">// 무슨 일이 일어나는지 확인하기</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"어떻게-테스트하나\\\"><a href=\\\"#%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EB%82%98\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>어떻게 테스트하나?</h2>\\n<p>사용자와 앱의 상호작용이 제대로 이루어지고 있나 확인하려면 어떤 방법이 있을까요?</p>\\n<p><strong>마크업(Markup)</strong> - UI가 제대로 변경되었는지 확인하기 위해 페이지의 마크업을 들여다볼 수 있습니다. 예를 들어 <a href=\\\"https://facebook.github.io/jest/docs/snapshot-testing.html\\\">Jest의 스냅샷 기능으로요.</a> (유의할 점: 아래의 테스트 코드를 실행하기 위해 <a href=\\\"https://github.com/adriantoine/enzyme-to-json#serializer\\\">enzyme-to-json</a>같은 Jest 스냅샷 직렬화 모듈(serializer)을 설치해야 합니다)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>wrapper<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toMatchSnapshot</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nsubmitButton<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">simulate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">flushAllPromises</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>wrapper<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toMatchSnapshot</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p>이런 방식의 단언은 작성하기 아주 쉽지만, 어디에 문제가 있는지 살펴보기 어려워지는 경향이 있습니다. 스냅샷은 가끔 겉으로 보기에 상관없어 보이는 테스트가 실패할 때도 변할 수 있습니다. 게다가 변화가 있었는지 확인만 할 뿐 무슨 행동을 했는지 기록을 남기진 않습니다.</p>\\n<p><strong>상태(State)</strong> - 애플리케이션의 상태 변경을 확인하는 방법입니다. 한 곳에 집중된 스토어를 가지고 있는 리덕스 애플리케이션은 테스트하기 쉽지만, 상태가 나뉘어있다면 조금 복잡해질 수 있습니다. 이 때도 스냅샷 테스트를 할 수 있지만 저는 객체를 직접 비교하는 방식을 선호하는 편입니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>store<span class=\\\"token punctuation\\\">,</span> wrapper<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">renderAppWithState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'John Doe'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>store<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toEqual</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'John Doe'</span><span class=\\\"token punctuation\\\">,</span>\\n  confirmationVisible<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nsubmitButton<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">simulate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">flushAllPromises</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>store<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toEqual</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'John Doe'</span><span class=\\\"token punctuation\\\">,</span>\\n    confirmationVisible<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p>상태 스토어는 사용자가 보지 못하는 곳에 감추어져 있기 때문에 사용자 중심적인 테스트와는 약간 거리가 있습니다. 하지만 디자인 변경에 따른 마크업 수정이 일어나는 경우 영향을 덜 받습니다.</p>\\n<p><strong>부수 기능(Side effects)</strong> - 여러분의 애플리케이션에 따라 확인해야 하는 부수 기능도 있습니다(네트워크 요청, <code>localStorage</code> 변화 등). 이럴 때 nock의 <code>isDone</code> 메서드를 활용하여 모킹한 요청이 실제로 사용되었는지 확인할 수도 있습니다. </p>\\n<p><strong>액션 보내기(Dispatched actions)</strong> - 리덕스의 기능을 십분 활용하여 어떤 액션이 발생했는지 쉽게 로그를 정리하고 나열할 수 있습니다. 이를 이용해서 스토어에 액션을 보내는 흐름을 확인해볼 수 있습니다. <a href=\\\"https://github.com/arnaudbenard/redux-mock-store\\\">redux-mock-store</a> 같은 유용한 라이브러리의 도움을 받을 수도 있습니다. 먼저 위에서 정의한 <code>renderAppWithState</code> 메서드를 조금 수정해서 가상의 리덕스 스토어를 적용하면, 그 다음 스토어에 어떤 액션들이 호출되었는지 확인하기 위해 <code>getActions</code> 메서드를 사용할 수 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token comment\\\">// 이제 renderAppWithState는 redux-mock-state를 사용해서 스토어를 생성합니다.</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>store<span class=\\\"token punctuation\\\">,</span> wrapper<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">renderAppWithState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'John Doe'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>store<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toEqual</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'John Doe'</span><span class=\\\"token punctuation\\\">,</span>\\n  confirmationVisible<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nsubmitButton<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">simulate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">flushAllPromises</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>store<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getActions</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toEqual</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'SUBMIT_FORM_START'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> \\n    <span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'SUBMIT_FORM_SUCCESS'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p>이런 유형의 단언은 특히 코드가 비동기로 흘러갈 때 테스트 하고자 할 때 유용합니다. 또한 테스트 시나리오가 어떤 흐름으로 구성되는지 보여주면서 일종의 문서 역할을 합니다.</p>\\n<h2 id=\\\"중심-잡기\\\"><a href=\\\"#%EC%A4%91%EC%8B%AC-%EC%9E%A1%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>중심 잡기</h2>\\n<p>앞서 소개한 통합 테스트가 단위 테스트를 완전히 대체한다는 뜻은 아닙니다. 특히 애플리케이션에 무거운 로직이 있는 부분(리듀서나 셀렉터)은 여전히 철저하게 단위 테스트가 적용되어야 합니다. 테스팅 피라미드의 계층은 여전히 유효합니다! 하지만 통합 테스트는 테스트 방법 중 하나로서 충분히 유효하며, 가능한 한 고통을 덜고 더 자신있게 소프트웨어를 배포할 수 있도록 좋은 테스트를 구축하는데 도움이 됩니다.</p>\\n<p>소프트웨어 테스트라는 주제는 업계에서 가장 많이 오가는 주제 중 하나입니다. 제 동료는 제 글을 검수해주면서 “<a href=\\\"http://blog.thecodewhisperer.com/permalink/integrated-tests-are-a-scam\\\">통합 테스트는 사기다</a>” 라는 글을 알려주기도 했습니다. 어떤 사람들은 저 글을 쓴 사람이 맞다고도 하지만, 제가 생각하기에 흑백 논리로 따질 수 없는 주제라고 생각합니다. 여러분은 어떻게 생각하시나요?</p>\",\"id\":\"/Users/rinae/Dev/blog/src/pages/posts/2018-01-19-intergration-tests-in-redux-apps/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-01-19\",\"path\":\"/posts/integration-tests-in-redux-apps\",\"title\":\"[번역] 리덕스 앱을 저비용 고효율로 통합 테스트 하기\",\"tags\":[\"Testing\",\"React\",\"Javascript\"],\"category\":\"Testing\"}},{\"excerpt\":\"다음 프로젝트에서 본격적으로 타입스크립트를 사용한 리액트 애플리케이션을 도입하고자 하는데, CSS를 입히기 위한 도구로  TypeStyle 을 활용하는 방안을 검토중이다. 그래서  egghead의 강좌 를 가볍게 따라가며 내용을 정리해보았다. 이 정도면 충분히 도입할 만한 가치가 있어 보인다. 적어도 스타일 속성 이름으로 오타가 날 일은 없어 보이며 JS…\",\"html\":\"<p>다음 프로젝트에서 본격적으로 타입스크립트를 사용한 리액트 애플리케이션을 도입하고자 하는데, CSS를 입히기 위한 도구로 <a href=\\\"https://typestyle.github.io\\\">TypeStyle</a>을 활용하는 방안을 검토중이다.</p>\\n<p>그래서 <a href=\\\"https://egghead.io/courses/maintainable-css-using-typestyle\\\">egghead의 강좌</a>를 가볍게 따라가며 내용을 정리해보았다. 이 정도면 충분히 도입할 만한 가치가 있어 보인다.</p>\\n<p>적어도 스타일 속성 이름으로 오타가 날 일은 없어 보이며 JS를 적극적으로 활용하여 동적인 스타일을 입힐 수 있으리라 기대한다.</p>\\n<p>참고로 아래의 예제 코드는 모두 리액트 애플리케이션을 개발한다는 전제하에 소개하고 있다. 하지만 TypeStyle 자체는 어느 환경에서나 사용 가능하다.</p>\\n<h2 id=\\\"기본-사용법\\\"><a href=\\\"#%EA%B8%B0%EB%B3%B8-%EC%82%AC%EC%9A%A9%EB%B2%95\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>기본 사용법</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> ReactDOM <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span><span class=\\\"token punctuation\\\">,</span>\\n  position<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'relative'</span> \\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>className<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n    Hello TypeStyle<span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p><code>style</code> 함수로 생성된 내용이 스타일이 적용된 임의의 클래스 이름을 만들게 되고 DOM은 바로 클래스 이름을 사용하면 되도록 구성되어 있다.</p>\\n<p>이 과정에서 객체 형식으로 되어있는 key-value 값은 이미 라이브러리에 CSS 스펙에 맞게 정의되어 있기 때문에 오타가 날 시 컴파일러가 친절하게 에러를 잡아준다.</p>\\n<h2 id=\\\"스타일-믹스인\\\"><a href=\\\"#%EC%8A%A4%ED%83%80%EC%9D%BC-%EB%AF%B9%EC%8A%A4%EC%9D%B8\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>스타일 믹스인</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token comment\\\">// 위 코드와 동일한 DOM 랜더링</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fontSize</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">number</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> valueStr <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">typeof</span> value <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'string'</span>\\n    <span class=\\\"token operator\\\">?</span> value\\n    <span class=\\\"token punctuation\\\">:</span> value <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'px'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    fontSize<span class=\\\"token punctuation\\\">:</span> valueStr\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> fontColor <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">fontSize</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'3em'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  fontColor\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p>위의 코드 처럼 <code>style</code> 함수는 객체를 믹스인 할 수 있다. 프로퍼티가 맞는 순수 객체가 들어가면 아무 없이 작동하기 때문에 위의 <code>fontSize</code> 함수처럼 상황에 맞게 적절한 객체를 리턴하는 함수를 만들어서 다양한 상황에 맞게 사용할 수 있다.</p>\\n<h2 id=\\\"미디어-쿼리\\\"><a href=\\\"#%EB%AF%B8%EB%94%94%EC%96%B4-%EC%BF%BC%EB%A6%AC\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>미디어 쿼리</h2>\\n<p><code>media</code> 함수로 간단히 미디어 쿼리를 생성할 수 있다. 생성된 쿼리를 <code>style</code> 함수 안에 넣으면 자동으로 Nested 쿼리 형식으로 생성된다. 수동으로 Nested 쿼리를 입력하고자 할 때는 <code>style</code> 함수 안에 넣는 객체에 <code>$nest</code> 속성을 사용하면 된다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style<span class=\\\"token punctuation\\\">,</span> media <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span> \\n    color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span><span class=\\\"token punctuation\\\">,</span>\\n    transition<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'font-size .2s'</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">media</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> minWidth<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">500</span><span class=\\\"token punctuation\\\">,</span> maxWidth<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">700</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'30px'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">media</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> minWidth<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">701</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'50px'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"수도-클래스pseudo-class-작성\\\"><a href=\\\"#%EC%88%98%EB%8F%84-%ED%81%B4%EB%9E%98%EC%8A%A4pseudo-class-%EC%9E%91%EC%84%B1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>수도 클래스(pseudo class) 작성</h2>\\n<p>Sass, Less와 유사한 형태로 계층 화된 쿼리를 작성할 수 있다. 위에서 언급한 <code>$nest</code> 속성을 선택하면 해당 클래스의 계층 쿼리를 작성할 수 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span> \\n    color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span><span class=\\\"token punctuation\\\">,</span>\\n    transition<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'font-size .2s'</span><span class=\\\"token punctuation\\\">,</span>\\n    $nest<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token string\\\">'&amp;:focus'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// .class:focus</span>\\n        fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'30px'</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token string\\\">'&amp;&amp;:hover'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// .class.class:focus</span>\\n        fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'50px'</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"css-클래스-조합하기\\\"><a href=\\\"#css-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%A1%B0%ED%95%A9%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>CSS 클래스 조합하기</h2>\\n<p>클래스를 조합하는건 <code>style</code> 함수로 만들어진 클래스들을 분기에 따라 추가하고 제거하도록 만들면 된다. 다만 이 과정에서 있는 경우와 없는 경우에 따라 문자열을 조합하는게 번거로울 수 있는데, <code>classes</code> 함수가 귀찮은 부분을 쉽게 해결하도록 도와준다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">const</span> baseClassName <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span> color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'#333'</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> errorClassName <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span> backgroundColor<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">AppProps</span> <span class=\\\"token punctuation\\\">{</span>\\n  className<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n  hasError<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">boolean</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">App</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> className<span class=\\\"token punctuation\\\">,</span> hasError <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">:</span> AppProps<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">classes</span><span class=\\\"token punctuation\\\">(</span>\\n      baseClassName<span class=\\\"token punctuation\\\">,</span>\\n      className<span class=\\\"token punctuation\\\">,</span>\\n      hasError <span class=\\\"token operator\\\">&amp;&amp;</span> errorClassName\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n    Hello world\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"keyframes-함수로-애니메이션-만들기\\\"><a href=\\\"#keyframes-%ED%95%A8%EC%88%98%EB%A1%9C-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98-%EB%A7%8C%EB%93%A4%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Keyframes 함수로 애니메이션 만들기</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style<span class=\\\"token punctuation\\\">,</span> keyframes <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> colorAnimationName <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">keyframes</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token string\\\">'0%'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'black'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token string\\\">'50%'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'blue'</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'20px'</span><span class=\\\"token punctuation\\\">,</span>\\n    animationName<span class=\\\"token punctuation\\\">:</span> colorAnimationName<span class=\\\"token punctuation\\\">,</span>\\n    animationDuration<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'1s'</span><span class=\\\"token punctuation\\\">,</span>\\n    animationIterationCount<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'infinite'</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p><code>colorAnimationName</code> 을 일일이 변수로 분리 할 필요는 없다. 한번만 사용할거면 <code>animationName</code> 속성에 바로 <code>keyframes</code> 를 사용한 객체를 리턴하도록 만들면 된다.</p>\\n<h2 id=\\\"일반-css를-사용하기\\\"><a href=\\\"#%EC%9D%BC%EB%B0%98-css%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>일반 CSS를 사용하기</h2>\\n<p><code>cssRaw</code> 함수를 사용하고 그 안에 일반 CSS를 문자열로 집어넣으면 그대로 글로벌 스타일로 변환된다. 그리고 그 파일안에 있는 컴포넌트에 전부 영향을 준다. 특정 이름을 가진 클래스를 만들고, 간단하게 기존 스타일을 마이그레이션 하거나 NormalizeCSS 등을 바로 가져올 때도 유용하게 사용할 수 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style<span class=\\\"token punctuation\\\">,</span> cssRaw <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">cssRaw</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n.red {\\n  color: red;\\n}\\n`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">cssRaw</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n.bold {\\n  font-weight: bold;\\n}\\n`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span> fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'30px'</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>className <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">' red bold'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span> <span class=\\\"token comment\\\">// red, bold 클래스 사용 가능</span>\\n    Hello world\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"구형-브라우저용-속성-사용하기\\\"><a href=\\\"#%EA%B5%AC%ED%98%95-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%9A%A9-%EC%86%8D%EC%84%B1-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>구형 브라우저용 속성 사용하기</h2>\\n<p><code>rgba</code> 같은 구형 브라우저에서 지원되지 않는 속성을 사용하면서 구형 브라우저를 지원하는 용도로 <code>rgb</code> 를 사용하는 경우, CSS 파일에서는 보통 같은 속성을 두번 작성해서 문제를 해결할 수 있다. 하지만 TypeStyle은 객체를 파싱하기 때문에 같은 속성 값을 두번 선언할 수는 없다.</p>\\n<p>하지만 배열을 사용하면 한 속성에 배열의 요소를 순차적으로 따라 스타일을 적용하도록 만들 수 있으며, 비슷한 원리를 vendor prefix에도 적용할 수 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style<span class=\\\"token punctuation\\\">,</span> types <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> scroll<span class=\\\"token punctuation\\\">:</span> types<span class=\\\"token punctuation\\\">.</span>NestedCSSProperties <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token string\\\">'-webkit-overflow-scrolling'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'touch'</span><span class=\\\"token punctuation\\\">,</span>\\n  overflow<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'auto'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  scroll<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'30px'</span><span class=\\\"token punctuation\\\">,</span>\\n    backgroundColor<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token string\\\">'rgb(200, 54, 54)'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 구형 브라우저용</span>\\n      <span class=\\\"token string\\\">'rgba(200, 54, 54, 0.5)'</span> <span class=\\\"token comment\\\">// 요즘 브라우저용</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"정적-페이지-만들어보기\\\"><a href=\\\"#%EC%A0%95%EC%A0%81-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>정적 페이지 만들어보기</h2>\\n<p><code>getStyles</code> 함수는 현재 작성된 파일 안에 정의된 TypeStyle 스타일을 문자열로 변환하는 기능을 한다. 이를 이용해서 간단한 HTML 페이지를 만들 수 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token comment\\\">// app.tsx</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> fs <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> ReactDOMServer <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-dom/server'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style<span class=\\\"token punctuation\\\">,</span> getStyles <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span><span class=\\\"token punctuation\\\">,</span>\\n  fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'30px'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">App</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>className<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n    Hello World\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> html <span class=\\\"token operator\\\">=</span> ReactDOMServer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">renderToStaticMarkup</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&lt;</span>App <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> css <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getStyles</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">renderPage</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> html<span class=\\\"token punctuation\\\">,</span> css <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> html<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">;</span> css<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n&lt;html>\\n  &lt;head>\\n    &lt;style></span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>css<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">&lt;/style>\\n  &lt;/head>\\n  &lt;body>\\n    </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>html<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\n  &lt;/body>\\n&lt;/html>\\n`</span></span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> renderedPage <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">renderPage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> html<span class=\\\"token punctuation\\\">,</span> css <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nfs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeFileSync</span><span class=\\\"token punctuation\\\">(</span>__dirname <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'/index.html'</span><span class=\\\"token punctuation\\\">,</span> renderedPage<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code><span class=\\\"token comment\\\">&lt;!-- 결과물 --></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>html</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>style</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token style language-css\\\"><span class=\\\"token selector\\\">.fyuerk</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span>red<span class=\\\"token punctuation\\\">;</span><span class=\\\"token property\\\">font-size</span><span class=\\\"token punctuation\\\">:</span>30px<span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>style</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>fyuerk<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>Hello World<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>html</span><span class=\\\"token punctuation\\\">></span></span>\\n</code></pre>\\n      </div>\\n<p>위 방식을 응용하여 서버 사이드 랜더링에서도 스타일을 적용할 수 있다. <a href=\\\"https://egghead.io/lessons/css-render-html-css-server-side-using-typestyle\\\">영상 참고.</a></p>\",\"id\":\"/Users/rinae/Dev/blog/src/pages/posts/2018-01-16-typestyle-basic/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-01-16\",\"path\":\"/posts/typestyle-basic\",\"title\":\"TypeStyle 사용하기\",\"tags\":[\"TypeScript\",\"React\",\"CSS\"],\"category\":\"TypeStyle\"}},{\"excerpt\":\"MobX를 리액트에 쓰기 위해 필요한 기본 구성은  mobx ,  mobx-react  패키지이다. 그리고 각각  observable ,  observer  데코레이터(이자 그냥 함수)를 가져다 쓸 수 있다. Observer 생성한 스토어가  observable  로 구성되어 있고, 컴포넌트가  observer  데코레이터로 감싸져 있다면 스토어를 사용할 조건은 충족된다. 그래서 다음의 코드로 간단한 카운터를 만들 수 있다. MobX…\",\"html\":\"<p>MobX를 리액트에 쓰기 위해 필요한 기본 구성은 <code>mobx</code>, <code>mobx-react</code> 패키지이다. 그리고 각각 <code>observable</code>, <code>observer</code> 데코레이터(이자 그냥 함수)를 가져다 쓸 수 있다.</p>\\n<h2 id=\\\"observer\\\"><a href=\\\"#observer\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Observer</h2>\\n<p>생성한 스토어가 <code>observable</code> 로 구성되어 있고, 컴포넌트가 <code>observer</code> 데코레이터로 감싸져 있다면 스토어를 사용할 조건은 충족된다. 그래서 다음의 코드로 간단한 카운터를 만들 수 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> appState <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">observable</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  count<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nappState<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">increment</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>count<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nappState<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">decrement</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>count<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n@observer\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Counter</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function-variable function\\\">handleInc</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>store<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">increment</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function-variable function\\\">handleDec</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>store<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">decrement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n        Counter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>store<span class=\\\"token punctuation\\\">.</span>count<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">&lt;</span>br<span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleInc<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleDec<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>MobX의 리액트 개발자 도구는 크롬 같은 브라우저의 확장으로 설치하는 것이 아니라 일종의 리액트 컴포넌트로 되어있다. 따라서 프로젝트에 <code>mobx-react-devtools</code> 를 설치하고 <code>&#x3C;Devtools /></code> 같은 컴포넌트를 컴포넌트 트리에 삽입하면 된다.\\nObservable 스토어를 다룰 때 DOM을 그리는 등의 동작은 Side Effects(부가 동작)으로 처리된다. 이 때 스토어의 상태를 효율적으로 다루기 위해 <code>computed</code> 속성을 쓰면 필요한 부분만 스토어의 변경을 감지하여 효과적인 컴포넌트 랜더링이 가능하다.</p>\\n<h2 id=\\\"action\\\"><a href=\\\"#action\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Action</h2>\\n<p><code>@action</code> 데코레이터는 리듀서의 액션 디스패치와 같은 역할을 한다. 데코레이터와 함께 메서드를 작성하고, 이에 따라 Observable 값이 변경되도록 하면 MobX가 알아서 처리 해줄 것이다. Observable한 값을 직접 변경해주는 것도 일종의 액션이다. 상태 변경의 방법을 밖으로 드러내어 실수를 미연에 방지하는 것이 액션의 역할 뿐 아니라, 상태 변경을 하나의 단위로 묶어 트랜잭션을 수행하는 역할도 가지고 있다. 또한 비동기 작업 수행을 효과적으로 제어할 때도 사용된다. 예를 들어 작업 시행 -> 작업 종료가 명료하게 동기화되어야 할 때 액션을 사용하면 의도치 않은 동작을 방지할 수 있다.</p>\\n<p><code>@action(name: string)</code> 같은 형식으로 이름을 넣어서 개발 도구에서 손쉽게 액션을 파악할 수 있다. 그리고 액션을 쓰지 않고 직접 상태를 변경하는 일을 막기 위해 <code>useStrict</code> 함수로 strict mode를 설정할 수 있다. 이 때는 액션 데코레이터 없이는 상태 변경을 수행할 수 없다.</p>\\n<h2 id=\\\"observable-data-structure\\\"><a href=\\\"#observable-data-structure\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Observable Data Structure</h2>\\n<p><code>observable</code> 함수로 배열, 객체, Map 등을 감싸서 활용할 수 있다. 이 세 가지는 MobX에서 가장 중요하게 여기는 자료구조이다. 여기서 객체나 배열에 들어갈 값은 기존 자바스크립트에서 쓰는 단순한 객체나 원시 타입의 값일 수도 있지만, 개발자가 MobX의 기능을 활용하여 만든 상태 모델의 인스턴스를 넣어서 조작할 수도 있다. 가령 위에서 이야기한 <code>computed</code>, <code>action</code> 등을 활용한 임의의 클래스를 만들고, 그 클래스의 인스턴스들을 배열에다 넣어서 다룰 수 있다는 이야기다.</p>\\n<p><code>observable([])</code> 같은 명령어로 만들어진 배열은 유사 배열이기 때문에 실제 배열처럼 다루려면 <code>toJS</code> 같은 별도의 가공이 필요하다.</p>\\n<h2 id=\\\"컴포넌트를-나누어-관리하기\\\"><a href=\\\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A5%BC-%EB%82%98%EB%88%84%EC%96%B4-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>컴포넌트를 나누어 관리하기</h2>\\n<p>Observable 상태를 <code>map</code> 함수로 순회하며 하위 컴포넌트를 생성할 때 고려해야 할 점이 있다. 아무 처리도 없이 <code>map</code> 함수로 생성한 하위 컴포넌트에서 <code>onClick</code> 등으로 상태를 바꾸면, 겉으로 보기에는 상태가 변한 부분만 다시 랜더링 되는 것으로 보이지만 실제로 모든 하위 컴포넌트가 다시 랜더링된다. 이런 구조가 누적되면 결과적으로 큰 자원 낭비를 초래하기 때문에 최적화헤야 한다.\\n가장 간단한 방법은 <code>map</code> 함수 안에서 생성되는 하위 컴포넌트가 <code>@observer</code> 임을 명시해주고, 상태 변화 액션도 <code>@action</code> 으로 관리해주면 된다. 최적화는 MobX가 알아서 해 준다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> App <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">observer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> temperatures <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>ul<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">{</span>temperatures<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>t <span class=\\\"token operator\\\">=></span>\\n      <span class=\\\"token operator\\\">&lt;</span>TView Key<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>t<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">}</span> temperature<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>t<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">&lt;</span>DevTools <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>ul<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n@observer\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">TView</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> t <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>temperature<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>li onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onTempClick<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">{</span>t<span class=\\\"token punctuation\\\">.</span>temperature<span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>li<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  @action <span class=\\\"token function-variable function\\\">onTempClick</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>temperature<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">inc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"provider-컴포넌트-사용하기\\\"><a href=\\\"#provider-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Provider 컴포넌트 사용하기</h2>\\n<p><code>mobx-react</code> 는 <code>react-redux</code> 처럼 <code>Provider</code> 컴포넌트를 제공한다. 사실 MobX의 스토어는 한번 선언되어있으면 어디서 어떻게 가져다쓰던 <code>observer</code>, <code>observable</code> 선언만 제대로 되어있으면 동적으로 연결된다. 하지만 기존에 리덕스를 사용할 때 처럼 최상단 컴포넌트를 Provider 컴포넌트로 감싸기만 하면 <code>connect</code>, <code>mapStateToProps</code> 같은 함수를 사용하지 않아도 바로 자유자재로 사용할 수 있다. 단지 <code>@observer</code> 데코레이터 선언 시 어떤 스토어를 사용할지만 명시하면 된다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 스토어 선언 및 Provider 감싸기</span>\\n<span class=\\\"token keyword\\\">const</span> temps <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">observable</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>Provider temperatures<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>temps<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span>App <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Provider<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"app\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// App 컴포넌트</span>\\n<span class=\\\"token keyword\\\">const</span> App <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">observer</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"temperatures\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> temperatures <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>ul<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>TemperatureInput <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token punctuation\\\">{</span>temperatures<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>t <span class=\\\"token operator\\\">=></span>\\n        <span class=\\\"token operator\\\">&lt;</span>TView key<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>t<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">}</span> temperature<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>t<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">&lt;</span>DevTools <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>ul<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// temperatures를 사용하는 컴포넌트</span>\\n<span class=\\\"token comment\\\">// 위의 App 컴포넌트를 보면 알겠지만 따로 props 선언이 없었음에도 바로 사용 가능하다.</span>\\n@<span class=\\\"token function\\\">observer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"temperatures\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">TemperatureInput</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  @observable input <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>li<span class=\\\"token operator\\\">></span>\\n        Destination\\n        <span class=\\\"token operator\\\">&lt;</span>input onChange<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onChange<span class=\\\"token punctuation\\\">}</span>\\n        value<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>input<span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onSubmit<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>Add<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>li<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"특정-상황에서-반응하는-액션-작성하기\\\"><a href=\\\"#%ED%8A%B9%EC%A0%95-%EC%83%81%ED%99%A9%EC%97%90%EC%84%9C-%EB%B0%98%EC%9D%91%ED%95%98%EB%8A%94-%EC%95%A1%EC%85%98-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>특정 상황에서 반응하는 액션 작성하기</h2>\\n<p>작성해놓은 스토어를 사용할 때 특정 조건에 맞추어 원하는 동작이 발생하도록 훅을 걸거나(<code>when</code>), 모든 상태 변화마다 실행되는 함수를 지정할 수도 있다(<code>autorun</code>).</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// when의 사용 예</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">isNice</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> t<span class=\\\"token punctuation\\\">.</span>temperatureCelsius <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">25</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">when</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> temps<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">some</span><span class=\\\"token punctuation\\\">(</span>isNice<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> t <span class=\\\"token operator\\\">=</span> temps<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span>isNice<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Book now! \\\"</span> <span class=\\\"token operator\\\">+</span> t<span class=\\\"token punctuation\\\">.</span>location<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// autorun의 사용 예</span>\\n<span class=\\\"token keyword\\\">const</span> numbers <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">observable</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> sum <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">computed</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> numbers<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> a <span class=\\\"token operator\\\">+</span> b<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">autorun</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>sum<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// prints '6'</span>\\nnumbers<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// prints '10'</span>\\n</code></pre>\\n      </div>\\n<p><a href=\\\"https://mobx.js.org/refguide/computed-decorator.html\\\">공식 문서</a>에 따르면 <code>autorun</code> 함수는 상태 값을 변화시키지 않으면서 항상 실행되어야 하는 상황(로깅, UI 업데이트)에서 사용되며 그 이외의 경우는 전부 <code>computed</code> 사용을 권장하고 있다.</p>\\n<blockquote>\\n<p>Don't confuse computed with autorun. They are both reactively invoked expressions, but use @computed if you want to reactively produce a value that can be used by other observers and autorun if you don't want to produce a new value but rather want to achieve an effect. For example imperative side effects like logging, making network requests etc.</p>\\n</blockquote>\\n<h2 id=\\\"참고-자료\\\"><a href=\\\"#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>참고 자료</h2>\\n<ul>\\n<li><a href=\\\"https://egghead.io/courses/manage-complex-state-in-react-apps-with-mobx\\\">Manage Complex State in React Apps with MobX from @mweststrate on @eggheadio</a></li>\\n<li><a href=\\\"https://egghead.io/courses/manage-application-state-with-mobx-state-tree\\\">Manage Application State with Mobx-state-tree from @mweststrate on @eggheadio</a></li>\\n<li><a href=\\\"https://mobx.js.org/\\\">Mobx Documentation</a></li>\\n</ul>\",\"id\":\"/Users/rinae/Dev/blog/src/pages/posts/2017-12-31-mobx-basic-concepts/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-12-31\",\"path\":\"/posts/mobx-basic-concepts\",\"title\":\"MobX로 상태 관리하기\",\"tags\":[\"Javascript\",\"MobX\",\"React\"],\"category\":\"MobX\"}},{\"excerpt\":\"Advanced React Component Patterns 강좌 강좌에 수록된 코드 Kent C. Dodds 의 강좌가 egghead에 한정된 기간동안 무료로 올라왔다. 때문에 다른 강의들을 제쳐두고 일단 이 강의부터 끝내기로 했다. HOC, Render props…\",\"html\":\"<ul>\\n<li><a href=\\\"https://egghead.io/courses/advanced-react-component-patterns\\\">Advanced React Component Patterns 강좌</a></li>\\n<li><a href=\\\"https://github.com/kentcdodds/advanced-react-patterns\\\">강좌에 수록된 코드</a></li>\\n</ul>\\n<p><a href=\\\"https://kentcdodds.com/\\\">Kent C. Dodds</a>의 강좌가 egghead에 한정된 기간동안 무료로 올라왔다. 때문에 다른 강의들을 제쳐두고 일단 이 강의부터 끝내기로 했다. HOC, Render props같은 고급 리액트 개발 방법론에 관심은 있었으나 대강 글만 봐서는 이해가 되지 않았기 때문이다.</p>\\n<p>강의에 들어가는 코드는 복잡한 개발환경을 설정하는데 시간을 낭비하지 않기 위해 html페이지 하나로 모든 작업을 다 할 수 있도록 만들어져있다. React, ReactDOM, Babel을 unpkg로 불러온 뒤 수업을 따라가면 된다. 처음에는 강의 코드를 제공하지 않는 줄 알고 토글 버튼의 스타일은 <a href=\\\"https://codepen.io/designcouch/pen/qdBErE\\\">구글링해서 넣었었다</a>.</p>\\n<p>이후에 작성된 코드는 강의에서 나온 코드 중 핵심 부분을 발췌해서 넣어둔 것이며, 맥락을 파악하기 위해서 강의 자료를 보거나 코드 저장소에 있는 완결된 코드를 살펴보기 바란다.</p>\\n<hr>\\n<h2 id=\\\"compound-components\\\"><a href=\\\"#compound-components\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Compound Components</h2>\\n<p>만약 <code>Toggle</code> 컴포넌트를 랜더할 때 현재 켜졌는지 꺼졌는지 텍스트를 표시하면서도 그 위치를 때에 따라 조절하고자 한다면 단순히 <code>render</code> 메서드 안에 삼항연산자 등을 쓸 수 있을 것이다. 하지만 이 경우 텍스트를 표시하지 않으면서 컴포넌트를 재사용하기 어려워진다. 이 때 <code>React.Children.map</code> 함수를 이용해서 자손 컴포넌트를 생성함과 동시에 컴포넌트의 state, prop을 전달할 수 있고, 자손 컴포넌트는 이를 받아 상태에 따라 랜더할 수 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">ToggleOn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> on<span class=\\\"token punctuation\\\">,</span> children <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> on <span class=\\\"token operator\\\">?</span> children <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">ToggleOff</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> on<span class=\\\"token punctuation\\\">,</span> children <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> on <span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token punctuation\\\">:</span> children<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">ToggleButton</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> on<span class=\\\"token punctuation\\\">,</span> toggle<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>props <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Switch</span> <span class=\\\"token attr-name\\\">on</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>on<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token attr-name\\\">onClick</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>toggle<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">props</span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Toggle</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">static</span> On <span class=\\\"token operator\\\">=</span> ToggleOn<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">static</span> Off <span class=\\\"token operator\\\">=</span> ToggleOff<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">static</span> Button <span class=\\\"token operator\\\">=</span> ToggleButton<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">static</span> defaultProps <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> onToggle<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> on<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  \\n  <span class=\\\"token function-variable function\\\">toggle</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> \\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> on <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> on<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">!</span>on <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">onToggle</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>on<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  \\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> children <span class=\\\"token operator\\\">=</span> React<span class=\\\"token punctuation\\\">.</span>Children<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>children<span class=\\\"token punctuation\\\">,</span>\\n      child <span class=\\\"token operator\\\">=></span>\\n        React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">cloneElement</span><span class=\\\"token punctuation\\\">(</span>child<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n          on<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>on<span class=\\\"token punctuation\\\">,</span>\\n          toggle<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>toggle<span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">{</span>children<span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">App</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Toggle</span> <span class=\\\"token attr-name\\\">onToggle</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>on <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'toggle'</span><span class=\\\"token punctuation\\\">,</span> on<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Toggle.On</span><span class=\\\"token punctuation\\\">></span></span>The Button is on<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Toggle.On</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Toggle.Button</span> <span class=\\\"token punctuation\\\">/></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Toggle.Off</span><span class=\\\"token punctuation\\\">></span></span>The Button is off<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Toggle.Off</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Toggle</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"context로-확장성을-더하기\\\"><a href=\\\"#context%EB%A1%9C-%ED%99%95%EC%9E%A5%EC%84%B1%EC%9D%84-%EB%8D%94%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Context로 확장성을 더하기</h2>\\n<p><a href=\\\"https://reactjs.org/docs/context.html#how-to-use-context\\\">Context란?</a></p>\\n<p>위의 코드에는 약간의 문제가 있는데, children은 바로 하위 컴포넌트만 처리하기 때문에 계층을 조금 더 복잡하게 만드는 순간 전혀 작동하지 않는다. 예를 들자면</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">App</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Toggle</span> <span class=\\\"token attr-name\\\">onToggle</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>on <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'toggle'</span><span class=\\\"token punctuation\\\">,</span> on<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Toggle.On</span><span class=\\\"token punctuation\\\">></span></span>The Button is on<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Toggle.On</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Toggle.Button</span> <span class=\\\"token punctuation\\\">/></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Toggle.Off</span><span class=\\\"token punctuation\\\">></span></span>The Button is off<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Toggle.Off</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Toggle</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>이렇게 <code>div</code>로 감싸진 <code>child</code>는 작동하지 않는다. 이 때 Context 속성을 사용하는데, 예전에 <a href=\\\"https://egghead.io/courses/getting-started-with-redux\\\">Dan의 Redux 직강</a>에서 리덕스를 직접 구현하는 방법을 보여줄 때 사용했던 요소이다. 사실 Context API는 실제로 사용자가 이를 직접 쓰기보단 라이브러리 등에서 유용하게 쓰기 위한 목적으로 만들어진 것으로 보인다.</p>\\n<p>혹시나 Context가 중복되지 않도록 고유의 context key를 선언한 다음, 부모 컴포넌트에는 <code>getChildContext</code> 메서드를 선언해서 key에 맞는 값을 돌려주는 객체를 리턴하도록 만든다. 그리고 <code>contextTypes</code>라는 PropTypes 검사를 항상 마련해두어야 하는 것으로 보인다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">ToggleOn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> children <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> context<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> on <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">[</span>TOGGLE_CONTEXT<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> on <span class=\\\"token operator\\\">?</span> children <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nToggleOn<span class=\\\"token punctuation\\\">.</span>contextTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token punctuation\\\">[</span>TOGGLE_CONTEXT<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>object<span class=\\\"token punctuation\\\">.</span>isRequired\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token comment\\\">// 부모 컴포넌트의 메서드 정의</span>\\n<span class=\\\"token function\\\">getChildContext</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">[</span>TOGGLE_CONTEXT<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      on<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>on<span class=\\\"token punctuation\\\">,</span>\\n      toggle<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>toggle\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p>이러면 얼마나 깊이 해당 컴포넌트가 묻혀있는지 상관없이 자손 컴포넌트이기만 하고, 알맞은 context key를 가져올 수 있다면 원하는 상태를 추출할 수 있다.</p>\\n<hr>\\n<h2 id=\\\"higher-order-components\\\"><a href=\\\"#higher-order-components\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Higher Order Components</h2>\\n<h3 id=\\\"hoc-만들기\\\"><a href=\\\"#hoc-%EB%A7%8C%EB%93%A4%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>HOC 만들기</h3>\\n<p>이번에는 더 작은 규모의 <code>MyToggle</code> 이라는 버튼으로만 이루어진 컴포넌트를 만들면서 시작한다. 버튼 자체는 <code>on</code> 속성에 따라 다른 텍스트를 보여주는 정도인데, 이 버튼이 손쉽게 Context의 속성을 받기 위해 새로운 함수를 만든다. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token comment\\\">// Higher order component</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">withToggle</span><span class=\\\"token punctuation\\\">(</span>Component<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Wrapper</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">,</span> context<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> toggleContext <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">[</span>TOGGLE_CONTEXT<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Component</span> <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">toggleContext</span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">props</span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  Wrapper<span class=\\\"token punctuation\\\">.</span>contextTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">[</span>TOGGLE_CONTEXT<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>object<span class=\\\"token punctuation\\\">.</span>isRequired\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> Wrapper<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> MyToggle <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">withToggle</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> on<span class=\\\"token punctuation\\\">,</span> toggle <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span> <span class=\\\"token attr-name\\\">onClick</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>toggle<span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">{</span>on <span class=\\\"token operator\\\">?</span> <span class=\\\"token string\\\">'on'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'off'</span><span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p><code>withToggle</code> 함수가 컴포넌트를 인자로 받은 뒤 이를 <code>toggleContext</code> 속성이 추가된 컴포넌트로 돌려주고 있다. 결과적으로 toggleContext가 필요한 컴포넌트는 모두 <code>withToggle</code> 함수로 감싸면 되도록 만들었다.</p>\\n<h3 id=\\\"네임스페이스-충돌을-방지하기\\\"><a href=\\\"#%EB%84%A4%EC%9E%84%EC%8A%A4%ED%8E%98%EC%9D%B4%EC%8A%A4-%EC%B6%A9%EB%8F%8C%EC%9D%84-%EB%B0%A9%EC%A7%80%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>네임스페이스 충돌을 방지하기</h3>\\n<p>하지만 나중에 이 HOC를 이용하는 사용자가 우리가 미리 정의해놓은 속성과 같은 이름의 속성을 사용하는 경우 충돌이 날 수 있다. 지금의 경우는 <code>on</code>  속성이 문제가 될 수 있을 것이다. 따라서 HOC를 위한 네임스페이스를 별도로 지정해주어 문제를 해결한다. 다만 이 때는 객체 분해 시 별도의 이름을 지정해주어야하는 번거로움이 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token comment\\\">// Higher order component with their own namespace</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">withToggle</span><span class=\\\"token punctuation\\\">(</span>Component<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Wrapper</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">,</span> context<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> toggleContext <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">[</span>TOGGLE_CONTEXT<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Component</span>\\n      <span class=\\\"token attr-name\\\">toggle</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>toggleContext<span class=\\\"token punctuation\\\">}</span></span>\\n      <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">props</span><span class=\\\"token punctuation\\\">}</span></span>\\n    <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  Wrapper<span class=\\\"token punctuation\\\">.</span>contextTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">[</span>TOGGLE_CONTEXT<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>object<span class=\\\"token punctuation\\\">.</span>isRequired\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> Wrapper<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// extract toggle context from HOC</span>\\n<span class=\\\"token keyword\\\">const</span> MyToggle <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">withToggle</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> toggle<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> on<span class=\\\"token punctuation\\\">,</span> toggle <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span> <span class=\\\"token attr-name\\\">onClick</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>toggle<span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">{</span>on <span class=\\\"token operator\\\">?</span> <span class=\\\"token string\\\">'on'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'off'</span><span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"개발자-도구의-사용성-높이기\\\"><a href=\\\"#%EA%B0%9C%EB%B0%9C%EC%9E%90-%EB%8F%84%EA%B5%AC%EC%9D%98-%EC%82%AC%EC%9A%A9%EC%84%B1-%EB%86%92%EC%9D%B4%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>개발자 도구의 사용성 높이기</h3>\\n<p>HOC를 쓰게 되는 경우 브라우저의 리액트 개발자 도구로 디버깅을 할 때 예기치 못한 문제가 발생하는데, 개발자 도구에 표시되는 컴포넌트 이름은 함수 이름 기반이기 때문에 <code>Wrapper</code> 라는 이름으로 감싸는 컴포넌트가 표시되고, 감싸지는 컴포넌트는 익명함수를 전달했기 때문에 <code>Unknown</code> 이라는 이름으로 표시된다. 이러면 아주 복잡한 컴포넌트 트리에서 원하는 이름의 컴포넌트를 찾고자 검색을 이용하고자 해도 원하는 결과를 찾을 수 없다.</p>\\n<p>그러면 두 가지 문제를 해결해야 하는데 먼저 <code>withToggle(something)</code> 이라고 HOC의 명확한 이름을 지정해주는 것과, 감싸지는 컴포넌트에도 명확한 이름을 지정해주는 것이다.</p>\\n<p>첫 번째 문제는 HOC에 <code>displayName</code> 속성을 지정해주어 해결할 수 있다. 두 번째 문제는 익명함수들을 명확한 이름을 가진 함수로 분리하고, <code>withToggle</code> 로 따로 감싸서 해결하면 된다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token comment\\\">// displayName 속성 추가</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">withToggle</span><span class=\\\"token punctuation\\\">(</span>Component<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Wrapper</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">,</span> context<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> toggleContext <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">[</span>TOGGLE_CONTEXT<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Component</span> <span class=\\\"token attr-name\\\">toggle</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>toggleContext<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">props</span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  Wrapper<span class=\\\"token punctuation\\\">.</span>contextTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">[</span>TOGGLE_CONTEXT<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>object<span class=\\\"token punctuation\\\">.</span>isRequired\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// displayName이 지정되지 않은 컴포넌트는 각자 함수의 이름을 name 속성으로 가진다</span>\\n  Wrapper<span class=\\\"token punctuation\\\">.</span>displayName <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`withToggle(</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>Component<span class=\\\"token punctuation\\\">.</span>displayName <span class=\\\"token operator\\\">||</span> Component<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">)`</span></span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> Wrapper<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">MyToggle</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> toggle<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> on<span class=\\\"token punctuation\\\">,</span> toggle <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span> <span class=\\\"token attr-name\\\">onClick</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>toggle<span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">{</span>on <span class=\\\"token operator\\\">?</span> <span class=\\\"token string\\\">'on'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'off'</span><span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> MyToggleWrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">withToggle</span><span class=\\\"token punctuation\\\">(</span>MyToggle<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"ref-속성-제어\\\"><a href=\\\"#ref-%EC%86%8D%EC%84%B1-%EC%A0%9C%EC%96%B4\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>ref 속성 제어</h3>\\n<p>만약 토글 상태에 따라 버튼의 포커스를 조절하고 싶을 때는 <code>ref</code> 를 이용해서 컴포넌트를 제어할 수 있을 것이다. 하지만 <code>ref</code> 속성은 SFC(Stateless Functional Component)에는 사용할 수 없다. 게다가 클래스 컴포넌트를 만들었다 하더라도 HOC로 감싸게 되면 <code>Wrapper</code> 함수가 SFC를 리턴하기 때문에 제대로 써 먹을 수가 없다. </p>\\n<p>간단한 해법은 <code>ref</code> 를 HOC로 전달하는건데, 유의할 점은 <code>ref</code> 는 그 이름 바로 전달할 수가 없다. 따라서 <code>innerRef</code> 같은 별도의 이름을 지정해서 전달하면 된다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token comment\\\">// handle innerRef</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">withToggle</span><span class=\\\"token punctuation\\\">(</span>Component<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Wrapper</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> innerRef<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>props <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> context<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> toggleContext <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">[</span>TOGGLE_CONTEXT<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Component</span>\\n        <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">props</span><span class=\\\"token punctuation\\\">}</span></span>\\n        <span class=\\\"token attr-name\\\">ref</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>innerRef<span class=\\\"token punctuation\\\">}</span></span>\\n        <span class=\\\"token attr-name\\\">toggle</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>toggleContext<span class=\\\"token punctuation\\\">}</span></span>\\n      <span class=\\\"token punctuation\\\">/></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  Wrapper<span class=\\\"token punctuation\\\">.</span>contextTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">[</span>TOGGLE_CONTEXT<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>object<span class=\\\"token punctuation\\\">.</span>isRequired\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  Wrapper<span class=\\\"token punctuation\\\">.</span>displayName <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`withToggle(</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>Component<span class=\\\"token punctuation\\\">.</span>displayName <span class=\\\"token operator\\\">||</span> Component<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">)`</span></span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> Wrapper<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyToggle</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function-variable function\\\">focus</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>button<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">focus</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> toggle <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> on<span class=\\\"token punctuation\\\">,</span> toggle <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span>\\n        <span class=\\\"token attr-name\\\">onClick</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>toggle<span class=\\\"token punctuation\\\">}</span></span>\\n        <span class=\\\"token attr-name\\\">ref</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>button <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>button <span class=\\\"token operator\\\">=</span> button<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span></span>\\n      <span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token punctuation\\\">{</span>on <span class=\\\"token operator\\\">?</span> <span class=\\\"token string\\\">'on'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'off'</span><span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> MyToggleWrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">withToggle</span><span class=\\\"token punctuation\\\">(</span>MyToggle<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">App</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Toggle</span> <span class=\\\"token attr-name\\\">onToggle</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>on <span class=\\\"token operator\\\">=></span> on <span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>myToggle<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">focus</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Toggle.On</span><span class=\\\"token punctuation\\\">></span></span>The Button is on<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Toggle.On</span><span class=\\\"token punctuation\\\">></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Toggle.Off</span><span class=\\\"token punctuation\\\">></span></span>The Button is off<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Toggle.Off</span><span class=\\\"token punctuation\\\">></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Toggle.Button</span> <span class=\\\"token punctuation\\\">/></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>hr</span> <span class=\\\"token punctuation\\\">/></span></span>\\n          <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/* inject ref */</span><span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>MyToggleWrapper</span>\\n            <span class=\\\"token attr-name\\\">innerRef</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>myToggle <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>myToggle <span class=\\\"token operator\\\">=</span> myToggle<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span></span>\\n          <span class=\\\"token punctuation\\\">/></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Toggle</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"테스트를-용이하게-만들기\\\"><a href=\\\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%9A%A9%EC%9D%B4%ED%95%98%EA%B2%8C-%EB%A7%8C%EB%93%A4%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>테스트를 용이하게 만들기</h3>\\n<p>컴포넌트가 제대로 랜더링 되는지 테스트를 한다고 할 때도 문제가 생길 수 있다. 왜냐면 실질적으로 랜더링되는 컴포넌트는 <strong>감싸진</strong> 컴포넌트이기 때문이다. 이 때는 <code>Wrapper</code> 에 <code>WrappedComponent</code> 라는 속성을 지정해주고, 테스트 시 컴포넌트 랜더링을 할 대는 <code>HOC.WrappedComponent</code> 같은 방식으로 불러오면 된다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">withToggle</span><span class=\\\"token punctuation\\\">(</span>Component<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Wrapper</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> innerRef<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>props <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> context<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> toggleContext <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">[</span>TOGGLE_CONTEXT<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Component</span>\\n        <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">props</span><span class=\\\"token punctuation\\\">}</span></span>\\n        <span class=\\\"token attr-name\\\">ref</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>innerRef<span class=\\\"token punctuation\\\">}</span></span>\\n        <span class=\\\"token attr-name\\\">toggle</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>toggleContext<span class=\\\"token punctuation\\\">}</span></span>\\n      <span class=\\\"token punctuation\\\">/></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  Wrapper<span class=\\\"token punctuation\\\">.</span>contextTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">[</span>TOGGLE_CONTEXT<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>object<span class=\\\"token punctuation\\\">.</span>isRequired\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  Wrapper<span class=\\\"token punctuation\\\">.</span>displayName <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`withToggle(</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>Component<span class=\\\"token punctuation\\\">.</span>displayName <span class=\\\"token operator\\\">||</span> Component<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">)`</span></span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// Set wrapped component so that can be easily tested.</span>\\n  Wrapper<span class=\\\"token punctuation\\\">.</span>WrappedComponnet <span class=\\\"token operator\\\">=</span> Component<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> Wrapper<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"static-속성과-함께-사용하기\\\"><a href=\\\"#static-%EC%86%8D%EC%84%B1%EA%B3%BC-%ED%95%A8%EA%BB%98-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Static 속성과 함께 사용하기</h3>\\n<p>마지막으로 누군가 HOC를 이용해서 또 다른 Compound component를 만들었을 때 그 컴포넌트는 제대로 표현되지 않을 것이다. HOC 안에서 일일이 Static 속성을 지정해주어야 할 텐데 현실적으로 불가능하다. 그래서 React에서 기본적으로 사용하고 있는 속성을 제외한 이름의 속성을 끌어올려주는 라이브러리(hoist-non-react-statics)를 사용한다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">withToggle</span><span class=\\\"token punctuation\\\">(</span>Component<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Wrapper</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> innerRef<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>props <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> context<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> toggleContext <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">[</span>TOGGLE_CONTEXT<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Component</span>\\n        <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">props</span><span class=\\\"token punctuation\\\">}</span></span>\\n        <span class=\\\"token attr-name\\\">ref</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>innerRef<span class=\\\"token punctuation\\\">}</span></span>\\n        <span class=\\\"token attr-name\\\">toggle</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>toggleContext<span class=\\\"token punctuation\\\">}</span></span>\\n      <span class=\\\"token punctuation\\\">/></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  Wrapper<span class=\\\"token punctuation\\\">.</span>contextTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">[</span>TOGGLE_CONTEXT<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>object<span class=\\\"token punctuation\\\">.</span>isRequired\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  Wrapper<span class=\\\"token punctuation\\\">.</span>displayName <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`withToggle(</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>Component<span class=\\\"token punctuation\\\">.</span>displayName <span class=\\\"token operator\\\">||</span> Component<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">)`</span></span><span class=\\\"token punctuation\\\">;</span>\\n  Wrapper<span class=\\\"token punctuation\\\">.</span>WrappedComponnet <span class=\\\"token operator\\\">=</span> Component<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// use host-non-react-static library</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">hoistNonReactStatics</span><span class=\\\"token punctuation\\\">(</span>Wrapper<span class=\\\"token punctuation\\\">,</span> Component<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyToggle</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">static</span> ToggleMessage <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">withToggle</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> toggle<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> on <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n      on\\n        <span class=\\\"token operator\\\">?</span> <span class=\\\"token string\\\">'Warning: The button is toggled on'</span>\\n        <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> toggle<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> on<span class=\\\"token punctuation\\\">,</span> toggle <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span> <span class=\\\"token attr-name\\\">onClick</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>toggle<span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token punctuation\\\">{</span>on <span class=\\\"token operator\\\">?</span> <span class=\\\"token string\\\">'on'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'off'</span><span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<hr>\\n<h2 id=\\\"render-props\\\"><a href=\\\"#render-props\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Render props</h2>\\n<p>앞서 해결한 많은 양의 HOC 문제를 Render props를 사용하면 별 문제 없이 해결할 수 있다. 물론 만능은 아니지만, 확연한 차이점은 앞에서 해결한 Compound 컴포넌트의 Context 문제, Wrapper의 속성 지정 같은 문제들로부터 자유로워진다는 점이다.</p>\\n<ul>\\n<li>\\n<p>HOC</p>\\n<ul>\\n<li>필요한 컴포넌트를 일일이 다 HOC로 감싸주어야 한다</li>\\n<li>Static 속성의 문제</li>\\n<li>HOC가 중첩될 경우 문제가 생길 때 디버깅이 어렵다</li>\\n<li>중간에 추가적인 속성이 들어갈 경우 일일이 HOC의 구현을 살펴보아야 한다</li>\\n<li>Typescript, Flow 등의 도움을 받기 힘들다</li>\\n<li>컴포넌트의 조합이 <code>render</code> 메서드 전에 발생한다 -> 때문에 동적인 상태를 활용할 때 Context 같은 부가적인 작업이 필요하다</li>\\n</ul>\\n</li>\\n<li>\\n<p>Render Props</p>\\n<ul>\\n<li>위에 제기된 문제로부터 자유롭다</li>\\n<li>컴포넌트의 조합이 일반적인 <code>render</code> 메서드 시점에서 발생하기 때문에 동적인 조합을 만들어내기 쉽다</li>\\n</ul>\\n</li>\\n</ul>\\n<h3 id=\\\"prop-collections-만들어서-재사용성-높이기\\\"><a href=\\\"#prop-collections-%EB%A7%8C%EB%93%A4%EC%96%B4%EC%84%9C-%EC%9E%AC%EC%82%AC%EC%9A%A9%EC%84%B1-%EB%86%92%EC%9D%B4%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Prop Collections 만들어서 재사용성 높이기</h3>\\n<p>Render props 안의 여러 컴포넌트에게 같은 속성을 주입해주고자 할 때는 감싸는 컴포넌트에서 컬렉션을 만들어서 전달해주면 된다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Toggle</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> on<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function-variable function\\\">toggle</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> \\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> on <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> on<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">!</span>on <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">onToggle</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>on<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      on<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>on<span class=\\\"token punctuation\\\">,</span>\\n      toggle<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>toggle<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token comment\\\">// 여러 하위 컴포넌트에 공통되는 속성을 한꺼번에 넘겨주기 위해 사용</span>\\n      togglerProps<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token string\\\">'aria-expanded'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>on<span class=\\\"token punctuation\\\">,</span>\\n        onClick<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>toggle\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">App</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>Toggle\\n      onToggle<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>on <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'toggle'</span><span class=\\\"token punctuation\\\">,</span> on<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n      render<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> on<span class=\\\"token punctuation\\\">,</span> toggle<span class=\\\"token punctuation\\\">,</span> togglerProps <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Switch</span> <span class=\\\"token attr-name\\\">on</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>on<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">togglerProps</span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>hr</span> <span class=\\\"token punctuation\\\">/></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span> <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">togglerProps</span><span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token punctuation\\\">{</span>on <span class=\\\"token operator\\\">?</span> <span class=\\\"token string\\\">'on'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'off'</span><span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"prop-getters-만들기\\\"><a href=\\\"#prop-getters-%EB%A7%8C%EB%93%A4%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Prop Getters 만들기</h3>\\n<p><code>togglerProps</code> 에 이미 정의된 속성(함수)에 별도의 추가 동작과 속성을 얹으려면 별도의 함수를 만들어야 한다. Props Getter 패턴으로 불리는 것 같다. 먼저 <code>getTogglerProps</code> 함수를 만들어보고 거기에 기존 toggle 동작 이전에 alert을 띄우도록 만들어본다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token comment\\\">// ... Toggle Class</span>\\n  <span class=\\\"token function-variable function\\\">getTogglerProps</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> onClick<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>props <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">'aria-expanded'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>on<span class=\\\"token punctuation\\\">,</span>\\n    onClick<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>args<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">onClick</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>args<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toggle</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>args<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token operator\\\">...</span>props\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      on<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>on<span class=\\\"token punctuation\\\">,</span>\\n      toggle<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>toggle<span class=\\\"token punctuation\\\">,</span>\\n      getTogglerProps<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>getTogglerProps\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">App</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>Toggle\\n      onToggle<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>on <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'toggle'</span><span class=\\\"token punctuation\\\">,</span> on<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n      render<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> on<span class=\\\"token punctuation\\\">,</span> toggle<span class=\\\"token punctuation\\\">,</span> getTogglerProps <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n          <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/* 이 Switch 버튼은 클릭 시 동작하지 않는다. onClick이 정의되어있지 않으니까. */</span><span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token operator\\\">&lt;</span>Switch on<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>on<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span><span class=\\\"token function\\\">getTogglerProps</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>hr</span> <span class=\\\"token punctuation\\\">/></span></span>\\n          <span class=\\\"token operator\\\">&lt;</span>button <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span><span class=\\\"token function\\\">getTogglerProps</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n            onClick<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'HI'</span><span class=\\\"token punctuation\\\">)</span>\\n          <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token punctuation\\\">{</span>on <span class=\\\"token operator\\\">?</span> <span class=\\\"token string\\\">'on'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'off'</span><span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p><code>Switch</code> 컴포넌트는 <code>onClick</code> 에 새 함수를 조합할 필요가 없었기 때문에 아무 값도 넣지 않았는데, 문제가 발생했다. <code>getTogglerProps</code>  함수가 실행시킬 <code>onClick</code> 이 없어서 에러가 나는 것이다. 간단히 문제를 해결하려면 <code>onClick &#x26;&#x26; onClick()</code> 같은 방식으로 해결할 수 있지만 매번 이런 식의 코드를 넣어줄 수는 없다. 그래서 별도로  <code>compose</code> 함수를 만들어 적용하면 된다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">compose</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>fns<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>args<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> fns<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span>fn <span class=\\\"token operator\\\">=></span> fn <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>args<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token function-variable function\\\">getTogglerProps</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> onClick<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>props <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// ...</span>\\n    onClick<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">compose</span><span class=\\\"token punctuation\\\">(</span>onClick<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>toggle<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"초기-상태-설정하기\\\"><a href=\\\"#%EC%B4%88%EA%B8%B0-%EC%83%81%ED%83%9C-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>초기 상태 설정하기</h3>\\n<p>이번에는 토글 하고 나서 리셋 버튼을 만들고자 한다. 리셋을 하려면 기본이 되는 상태를 가지고 있어야 할텐데 컴포넌트 내부에 기본 상태를 지정해두는 것 보다 속성으로 내려받도록 해야 더 유연한 구현을 할 수 있다. 또한 그 속성을 <code>initialState</code> 같은 맴버 변수로 보관하고 있으면 컴포넌트에 메서드를 정의할 때 ‘초기 상태로 되돌릴 필요가 있다면’ 언제든지 이 변수를 가져다 쓰면 된다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Toggle</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">static</span> defaultProps <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    defaultOn<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n    onToggle<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    onReset<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  initialState <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> on<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>defaultOn <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  state <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>initialState<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function-variable function\\\">reset</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>initialState<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">onReset</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>on<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"controlled-props-설정하기\\\"><a href=\\\"#controlled-props-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Controlled Props 설정하기</h3>\\n<p>특정 상태를 컴포넌트 외부에서 다룰지 내부에서 다룰지 조절할 수도 있다. 외부에서 다루어질 경우 Controlled props라고 한다.</p>\\n<p>같은 컴포넌트를 재사용하는데 어떤 컴포넌트는 사용자가 4번 클릭하면 동작하지 않도록 막고, 어떤 컴포넌트는 경고만 띄운 채로 계속 동작할 수 있도록  만든다고 가정해보자. 그러면 부모 컴포넌트에 별도의 상태를 정의한 뒤 자손 컴포넌트에 상태를 주입할 경우에는 동작을 제어하고, 그렇지 않은 경우 자손 컴포넌트의 자체 상태를 이용하게 만들 수 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token comment\\\">// Toogle 컴포넌트</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token function-variable function\\\">isOnControlled</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>on <span class=\\\"token operator\\\">!==</span> undefined<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// 부모 컴포넌트로부터 상태를 받았는지 아닌지에 따라 다른 행동 정의</span>\\n  <span class=\\\"token function-variable function\\\">reset</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isOnControlled</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">onReset</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>on<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>initialState<span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">onReset</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>on<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n\\n<span class=\\\"token comment\\\">// App 컴포넌트</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">App</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  initialState <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> timesClicked<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> on<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  state <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>initialState<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function-variable function\\\">handleToggle</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> timesClicked<span class=\\\"token punctuation\\\">,</span> on <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      timesClicked<span class=\\\"token punctuation\\\">:</span> timesClicked <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n      on<span class=\\\"token punctuation\\\">:</span> timesClicked <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">4</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">!</span>on\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function-variable function\\\">handleReset</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>initialState<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> timesClicked<span class=\\\"token punctuation\\\">,</span> on <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>Toggle\\n        <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/* on이 있으면 부모가 통제, 없으면 자손이 통제 */</span><span class=\\\"token punctuation\\\">}</span>\\n        on<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>on<span class=\\\"token punctuation\\\">}</span> \\n        onToggle<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleToggle<span class=\\\"token punctuation\\\">}</span>\\n        onReset<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleReset<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"provider-컴포넌트-만들기\\\"><a href=\\\"#provider-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Provider 컴포넌트 만들기</h3>\\n<p>애플리케이션의 규모가 더 커져서 컴포넌트는 여러개로 나누었는데, <code>toggle</code> 속성을 일일이 주입해주는 구현을 해 버렸다고 할 때, 리팩터링을 하기 위해서 다시 한번 Context가 등장한다. 이번에는 HOC로 감싸는게 아니라 Render props를 이용해서 Provider를 만든다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token comment\\\">// Provider 정의</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ToggleProvider</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">static</span> contextName <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'__toggle__'</span>\\n  <span class=\\\"token keyword\\\">static</span> Renderer <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">extends</span> React<span class=\\\"token punctuation\\\">.</span>Component <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">static</span> childContextTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token punctuation\\\">[</span>ToggleProvider<span class=\\\"token punctuation\\\">.</span>contextName<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span>\\n        PropTypes<span class=\\\"token punctuation\\\">.</span>object<span class=\\\"token punctuation\\\">.</span>isRequired<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">getChildContext</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token punctuation\\\">[</span>ToggleProvider<span class=\\\"token punctuation\\\">.</span>contextName<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props\\n          <span class=\\\"token punctuation\\\">.</span>toggle<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>children\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span>\\n      children<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token operator\\\">...</span>remainingProps\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Toggle</span>\\n        <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">remainingProps</span><span class=\\\"token punctuation\\\">}</span></span>\\n        <span class=\\\"token attr-name\\\">render</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>toggle <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n          <span class=\\\"token operator\\\">&lt;</span>ToggleProvider<span class=\\\"token punctuation\\\">.</span>Renderer\\n            toggle<span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>toggle<span class=\\\"token punctuation\\\">}</span>\\n            children<span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>children<span class=\\\"token punctuation\\\">}</span></span>\\n          <span class=\\\"token punctuation\\\">/></span></span>\\n        <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// Toggle 속성과 연결  </span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">ConnectedToggle</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">,</span> context<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n    context<span class=\\\"token punctuation\\\">[</span>ToggleProvider<span class=\\\"token punctuation\\\">.</span>contextName<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nConnectedToggle<span class=\\\"token punctuation\\\">.</span>contextTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token punctuation\\\">[</span>ToggleProvider<span class=\\\"token punctuation\\\">.</span>contextName<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span>\\n    PropTypes<span class=\\\"token punctuation\\\">.</span>object<span class=\\\"token punctuation\\\">.</span>isRequired<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token comment\\\">// 컴포넌트와 연결하는 방법</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Title</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token operator\\\">&lt;</span>ConnectedToggle\\n          render<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>toggle <span class=\\\"token operator\\\">=></span>\\n            <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`Who is </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>toggle<span class=\\\"token punctuation\\\">.</span>on\\n              <span class=\\\"token operator\\\">?</span> <span class=\\\"token string\\\">'🕶❓'</span>\\n              <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'awesome?'</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Subtitle</span> <span class=\\\"token punctuation\\\">/></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>실제 구현에서는 컴포넌트 최상단에서 <code>ToggleProvider</code> 로 감싸두었기 때문에 <code>ConnectedToggle</code> 컴포넌트를 사용할 시 자연스럽게 Context에 접근할 수 있다.</p>\\n<h3 id=\\\"자손-컴포넌트의-리랜더링rerendering과-shouldcomponentupdate\\\"><a href=\\\"#%EC%9E%90%EC%86%90-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%EB%A6%AC%EB%9E%9C%EB%8D%94%EB%A7%81rerendering%EA%B3%BC-shouldcomponentupdate\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>자손 컴포넌트의 리랜더링(Rerendering)과 shouldComponentUpdate</h3>\\n<p>리액트의 퍼포먼스에서 제일 신경써야 할 점은 컴포넌트가 업데이트되면서 화면을 다시 그리는 일을 최소화하는 것이다. <code>shouldComponentUpdate</code> 라이프사이클 훅을 사용하는 방법이 가장 일반적이겠지만 Provider로 감싸진 컴포넌트에 사용하면 예기치 못한 결과를 초래할 수 있다. <a href=\\\"https://github.com/ReactTraining/react-broadcast\\\">react-broadcast</a> 라이브러리를 사용하여 채널을 설정하고, 값을 설정하면 새로 내려지는 값이 변화했는지 아닌지에 따라 랜더링을 제어해준다.</p>\\n<hr>\\n<p>강좌 마지막에는 Redux와 Redner props를 함께 활용하는 방법 등이 있었지만 바로 이해가 되지 않아서 나중에 활용 가능할 때 업데이트 할 예정이다. 또한 Provider 패턴에 들어서면서도 내용이 조금 복잡해져서 잘못 정리된 정보를 전달할 수 있는 여지가 있으니 글 내용이 확실해보이지 않을 경우 강좌를 참고하기 바란다.</p>\",\"id\":\"/Users/rinae/Dev/blog/src/pages/posts/2017-12-10-advanced-react-component-patterns-summary/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-12-10\",\"path\":\"/posts/advanced-react-component-patterns-summary\",\"title\":\"Advanced React Component Patterns 내용 정리\",\"tags\":[\"React\"],\"category\":\"React\"}},{\"excerpt\":\"새로운 도전의 시작 올 여름 이런저런 일을 겪고 나서, 많은 고민 끝에 한동안 프론트엔드 개발자로 커리어를 쌓아가기로 결정하였습니다. 이전에는 루비 백엔드를 기반으로 한 그냥저냥한 웹 개발자였습니다만.. 오랫동안 업무에서 루비를 쓸 일이 없겠네요. (물론 여전히 루비라는 언어 자체는 사랑하고 관심은 계속 가지고 있습니다) 기존에도 프론트엔드 라이브러리로 React와 Vue.js…\",\"html\":\"<h2 id=\\\"새로운-도전의-시작\\\"><a href=\\\"#%EC%83%88%EB%A1%9C%EC%9A%B4-%EB%8F%84%EC%A0%84%EC%9D%98-%EC%8B%9C%EC%9E%91\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>새로운 도전의 시작</h2>\\n<p>올 여름 이런저런 일을 겪고 나서, 많은 고민 끝에 한동안 프론트엔드 개발자로 커리어를 쌓아가기로 결정하였습니다. 이전에는 루비 백엔드를 기반으로 한 그냥저냥한 웹 개발자였습니다만.. 오랫동안 업무에서 루비를 쓸 일이 없겠네요. (물론 여전히 루비라는 언어 자체는 사랑하고 관심은 계속 가지고 있습니다)</p>\\n<p>기존에도 프론트엔드 라이브러리로 React와 Vue.js에 많은 관심을 가지고 있었는데, 이제 본격적으로 리액트를 업무에 사용하게 되었기 때문에 <strong>리액트로 뭘 만들어볼까?</strong> 하다가 가장 만만한 블로그부터 다시 만들어 보기로 결심했습니다. 블로그를 만들고자 했던 이유는 몇 가지 더 있었습니다.</p>\\n<ol>\\n<li>기왕 하는거 간단한 디자인 및 프로토타이핑까지 하여 하나의 사이트 개발을 처음부터 끝까지 직접 해 보고 싶다.</li>\\n<li>기존 블로그는 테마를 바로 가져다 썼는데, 충분히 좋지만 불필요한 요소나 레이아웃을 걷어내고 최대한 간소하게 만들어보고 싶다.</li>\\n<li>간소하게 만들면서 관리 및 유지보수가 더 원활한 형태로 재구성하고 싶다.</li>\\n</ol>\\n<p>결론부터 말씀드리자면 1번은 절반의 성공만 거두고 나머지는 성공했습니다. 종이에다 어떤 모양이 나와야하는지 그려본 뒤에, 그 모습을 실제 코드로 옮기는데 성공했지만 CSS를 밑바닥부터 그려낼 실력은 되지 않아 <a href=\\\"https://bulma.io\\\">Bulma</a>를 활용하여 만들었습니다.</p>\\n<p>그러면 2, 3번은 어떻게 달성했을까요?</p>\\n<h2 id=\\\"gatsby를-만나다\\\"><a href=\\\"#gatsby%EB%A5%BC-%EB%A7%8C%EB%82%98%EB%8B%A4\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Gatsby를 만나다</h2>\\n<p>이전에 ‘리액트를 학습하는 과정’ 을 안내하는 포스팅을 읽은 적이 있는데 <em>기본을 익혔다면 <a href=\\\"https://www.gatsbyjs.org\\\">Gatsby</a>같은 리액트 기반의 정적 페이지 생성기를 사용하여 리액트를 연습해보라</em> 라는 내용이 적혀있더군요. <strong>어떻게 리액트로 정적 페이지를 만들 수 있을까?</strong> 하며 궁금해하면서 이름을 기억해두고 있었습니다.</p>\\n<p>보통 정적 페이지 생성기를 사용하여 블로그를 만든다고 하면 루비를 이용한 <a href=\\\"https://jekyllrb.com\\\">Jekyll</a>과 Node.js를 이용한 <a href=\\\"https://hexo.io\\\">Hexo</a> 등을 사용하게 됩니다. 각각의 포스팅을 마크다운으로 작성하고 생성기가 이를 html 파일로 변환해주며, 특정 정보가 삽입되어야 할 때(날짜, 사용자가 직접 입력한 정보 등)는 템플릿 엔진이 페이지 생성을 도와주는 형식으로 되어 있습니다.</p>\\n<p>그런데 당시 제가 아는 수준에서 리액트로 블로그를 만드는 것은 굉장히 기술을 과하게 사용하는 일이었습니다. 먼저 블로그를 정말 메모장 대신으로 쓸 것이 아니면 검색 엔진에 노출 되는 것이 좋다고 생각하는데, 리액트로 SPA(Single Page Application)을 제작하게되면 검색엔진 봇이 내용을 수집하기 힘듭니다. 아니면 별도로 라우팅과 SSR(Server Side Rendering)을 구성해야 합니다.</p>\\n<p>하지만 Gatsby의 도움을 받으면 비교적 간단하게 리액트를 활용하여 빠르고 유연한 정적 페이지를 생성할 수 있습니다. Gatsby를 활용할 때 생기는 장점 소개는 공식 사이트의 소개와 <a href=\\\"https://blog.scottnonnenberg.com/static-site-generation-with-gatsby-js/\\\">이 포스팅</a>으로 가볍게 미루겠습니다.</p>\\n<p><strong>여담이지만 이번에 Facebook에서 React 16 발매와 함께 <a href=\\\"https://reactjs.org\\\">웹사이트</a>를 개편할 때 Gatsby를 사용했습니다</strong> 😏</p>\\n<p>제가 블로그를 다시 만들면서 했던 일들은 기본적인 프로젝트 설정을 한 뒤에, 일반적인 리액트 애플리케이션 만들듯이 컴포넌트를 작성하고 배포 커맨드를 입력한 정도밖에 되지 않았습니다. (실제로는 자잘한 작업들이 더 있긴 했지만 큰 틀은 이렇습니다) 이제부터 실제로 이 블로그를 제작한 과정 일부와 문제 해결 과정을 코드와 함께 소개해 드리겠습니다.</p>\\n<p><strong>아래 내용을 보시기에 앞서 <a href=\\\"https://www.gatsbyjs.org/tutorial/\\\">Gatsby 공식 튜토리얼</a>을 참고하시기 바랍니다. 대부분은 공식 튜토리얼에서 사용한 코드 및 Gatsby로 만들어진 블로그의 코드 일부를 참고하였습니다.</strong></p>\\n<p><strong>또한 아래에 정리하는 내용은 기초 수준 이상의 리액트 라이브러리의 이해를 전제로 작성하였습니다.</strong></p>\\n<h2 id=\\\"프로젝트-설정\\\"><a href=\\\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%84%A4%EC%A0%95\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>프로젝트 설정</h2>\\n<p>먼저 이 블로그를 만들기 시작한 시점의 로컬 개발환경은 다음과 같습니다</p>\\n<ul>\\n<li><strong>Yarn</strong>: <code>1.1.0</code> (npm은 사용하지 않았습니다)</li>\\n<li><strong>Node.js</strong>: <code>8.6.0</code></li>\\n</ul>\\n<p>핵심은 이 둘이고 나머지는 필요한 패키지만 설치하면 가능한 한 최신 버전으로 유지하시면서 개발하시면 됩니다.</p>\\n<h3 id=\\\"gatsby-프로젝트-생성\\\"><a href=\\\"#gatsby-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Gatsby 프로젝트 생성</h3>\\n<p>먼저 Gatsby의 CLI를 설치합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>yarn global add gatsby-cli</code></pre>\\n      </div>\\n<p>그리고 레일즈 등의 프로젝트를 생성하듯이 터미널에 명령어를 <code>gatsby new blog</code> 명령어를 입력하시면 되는데, 만약 마음에 드는 Gatsby 스타터(보일러플레이트)를 발견하시면 Git 주소를 인자로 입력하실 수 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code># 빈 프로젝트 생성\\ngatsby new blog\\n\\n# 보일러플레이트 이용 예\\ngatsby new blog https://github.com/dschau/gatsby-blog-starter-kit</code></pre>\\n      </div>\\n<p>그리고 <code>blog</code> 폴더를 에디터로 열어 작업하시면 됩니다. 저는 Visual Studio Code를 사용했습니다.</p>\\n<h3 id=\\\"prettier-설정\\\"><a href=\\\"#prettier-%EC%84%A4%EC%A0%95\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Prettier 설정</h3>\\n<p>기존에는 프로젝트에 ESLint를 활용해서 코드 스타일을 유지했는데, <a href=\\\"https://github.com/prettier/prettier\\\">Prettier</a>를 활용하기 시작하면서 굳이 필요가 없게 되었습니다. 특히 이 트윗을 보고 나서 <code>prettier-eslint</code> 플러그인마저 필요 없다는 사실을 뒤늦게 깨달았습니다.</p>\\n<blockquote class=\\\"twitter-tweet\\\" data-lang=\\\"en\\\"><p lang=\\\"en\\\" dir=\\\"ltr\\\">PSA: I&#39;m no longer using prettier-eslint. I use raw prettier and disable all eslint style rules.<br><br>My life has been better ever since...</p>&mdash; Kent C. Dodds (@kentcdodds) <a href=\\\"https://twitter.com/kentcdodds/status/913760103118991361?ref_src=twsrc%5Etfw\\\">September 29, 2017</a></blockquote>\\n<script async src=\\\"//platform.twitter.com/widgets.js\\\" charset=\\\"utf-8\\\"></script>\\n<p>여러분들도 가독성있는 코드 스타일을 유지하는데 관심이 있으시다면 다음 설정을 참고해 보시기 바랍니다.\\n먼저 프로젝트에 Prettier를 추가합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>yarn add prettier --dev</code></pre>\\n      </div>\\n<p>VS Code 사용자 기준으로 다음 플러그인도 설치하셔야 합니다.</p>\\n<p><a href=\\\"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\\\">Prettier - JavaScript formatter - Visual Studio Marketplace</a></p>\\n<p>그리고 커맨드 팔레트(macOS기준 Cmd+Shift+P)를 열어 <code>Preferences: Open Workspace Settings</code> 를 선택하신 뒤에 Prettier 스타일 세팅 및 저장시 자동 적용을 활성화 하시면 됩니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code>// .vscode/settings.json\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"editor.formatOnSave\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"prettier.printWidth\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">100</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>저는 스타일 기본값을 사용하고 한 줄당 길이만 100이 되도록 설정하였습니다. 앞으로는 저장 시 자동으로 파일마다 Prettier가 작동하여 코드의 스타일을 다듬어줍니다.</p>\\n<h3 id=\\\"플러그인-설치\\\"><a href=\\\"#%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EC%84%A4%EC%B9%98\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>플러그인 설치</h3>\\n<p>Gatsby의 다양한 플러그인을 활용하여 사용자가 더 편하게 웹페이지를 제작할 수 있습니다. 특히 보통 리액트를 사용할 때 많이 활용하는 패키지와 Gatsby가 잘 결합되도록 따로 플러그인을 만들어 배포하고 있습니다. 예를 들어 <code>react-helmet</code> 을 사용하시려면 <code>gatsby-plugin-react-helmet</code> 플러그인을 설치하여 설정 파일에서 불러오도록 만들어야 합니다. 사용 가능한 플러그인 리스트는 <a href=\\\"https://www.gatsbyjs.org/docs/plugins/\\\">공식 문서</a>를 참고해주세요.</p>\\n<p>저는 제 블로그를 구현하기 위한 기능을 먼저 정의한 뒤에 필요한 부분만 플러그인을 추가 &#x26; 설정하였습니다.</p>\\n<ul>\\n<li>유동적으로 HTML <code>head</code> 태그가 바뀌어야 한다(제목 등) -> <code>gatsby-react-helmet</code></li>\\n<li>Sass(SCSS)를 사용한다 -> <code>gatsby-plugin-sass</code></li>\\n<li>\\n<p>(당연하지만) 본문에 마크다운을 사용한다 -> <code>gatsby-transformer-remark</code></p>\\n<ul>\\n<li>마크다운에 트위터 임베딩이 필요하다 -> <code>gatsby-plugin-twitter</code></li>\\n<li>마크다운에 Syntax highlighting이 필요하다 -> <code>gatsby-remark-prismjs</code></li>\\n<li>…</li>\\n</ul>\\n</li>\\n<li>…</li>\\n</ul>\\n<p>실제 적용된 플러그인의 전체 목록은 소스코드를 참고해 주시기 바랍니다.</p>\\n<p>플러그인은 프로젝트 폴더에 <code>gatsby-config.js</code> 파일을 만들어서 자바스크립트 객체로 내보내시면 됩니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// gatsby-config.js</span>\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  siteMetadata<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    siteUrl<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"https://emaren84.github.io\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    title<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"rinae's blog\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    description<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"about Translation, Ruby, Javascript, Practical Dev etc.\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  plugins<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token string\\\">\\\"gatsby-plugin-react-helmet\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"gatsby-plugin-catch-links\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"gatsby-plugin-sass\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"gatsby-plugin-styled-components\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"gatsby-plugin-twitter\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token comment\\\">// ...</span>\\n    <span class=\\\"token string\\\">\\\"gatsby-remark-responsive-iframe\\\"</span>\\n  <span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"실제-블로그-포스트를-가져오기\\\"><a href=\\\"#%EC%8B%A4%EC%A0%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%8F%AC%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>실제 블로그 포스트를 가져오기</h2>\\n<h3 id=\\\"프로젝트-폴더-구성\\\"><a href=\\\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%8F%B4%EB%8D%94-%EA%B5%AC%EC%84%B1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>프로젝트 폴더 구성</h3>\\n<p>Gatsby로 페이지를 작성하는데 필요한 폴더는 세 가지 입니다.</p>\\n<ul>\\n<li><code>src/layouts</code> - 페이지의 전반적인 레이아웃을 담당. 모든 개별 페이지가 이 폴더의 <code>index.js</code> 파일의 하위 컴포넌트로 동작함.</li>\\n<li><code>src/pages</code> - 개별 페이지를 담아두는 폴더. 블로그 포스트(마크다운)나 404, index 페이지를 작성</li>\\n<li><code>src/templates</code> - 반복되는 페이지의 템플릿을 저장 (예: 블로그 포스트의 템플릿)</li>\\n</ul>\\n<p>위 폴더의 구조는 얼마든지 사용자화 할 수 있습니다. 다만 저는 제시된 구조로 충분했기 때문에 특별히 변형하진 않았습니다. 추가적으로 재사용이 잦은 컴포넌트를 <code>src/components</code> 폴더에 정의하여 사용했습니다.</p>\\n<p>참고로 <code>src/pages</code> 폴더에 저장해 둔 마크다운 파일을 불러오기 위해서 약간의 설정이 필요합니다. 위에서 언급한 <code>gatsby-config.js</code> 파일에 다음 플러그인을 추가해야 합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// gatsby-config.js</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n\\tplugins<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n\\t\\t<span class=\\\"token comment\\\">// ...</span>\\n\\t\\t<span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\tresolve<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"gatsby-source-filesystem\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\t\\toptions<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t\\tpath<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>__dirname<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">/src/pages`</span></span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\t\\t\\tname<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"pages\\\"</span>\\n\\t\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\t<span class=\\\"token comment\\\">// ...</span>\\n\\t<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"기본-레이아웃-작성\\\"><a href=\\\"#%EA%B8%B0%EB%B3%B8-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83-%EC%9E%91%EC%84%B1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>기본 레이아웃 작성</h3>\\n<p><code>src/layout/index.js</code> 파일은 대부분의 리액트 프로젝트의 <code>index.html</code> 같은 파일입니다. 보통 <code>index.html</code> 파일에서 favicon, head 태그 등의 공통적인 내용을 정의한 뒤에 ReactDOM이 랜더링될 위치를 지정해 주지요.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token keyword\\\">import</span> React<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> Component <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"react\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> PropTypes <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"prop-types\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> Link <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"gatsby-link\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> Helmet <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"react-helmet\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// import styles</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token string\\\">\\\"typeface-noto-sans\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token string\\\">\\\"bulma\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token string\\\">\\\"mdi/scss/materialdesignicons.scss\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token string\\\">\\\"prismjs/themes/prism-solarizedlight.css\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token string\\\">\\\"./layout-style.scss\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> favicon <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"../assets/favicon.ico\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// ...</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">TemplateWrapper</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> children <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Helmet</span><span class=\\\"token punctuation\\\">></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>meta</span> <span class=\\\"token attr-name\\\">charSet</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>utf-8<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>title</span><span class=\\\"token punctuation\\\">></span></span>Rinae's playground<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>title</span><span class=\\\"token punctuation\\\">></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>link</span> <span class=\\\"token attr-name\\\">rel</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>shortcut icon<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>favicon<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Helmet</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Header</span> <span class=\\\"token attr-name\\\">toggled</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>toggled<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token attr-name\\\">handleToggled</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleToggled<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token function\\\">children</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Footer</span> <span class=\\\"token punctuation\\\">/></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p><code>Helmet</code> 컴포넌트는 html의 <code>head</code> 태그를 생성해주는 역할을 합니다. 그리고 <code>Link</code> 컴포넌트는 react-router의 <code>Link</code> 컴포넌트와 거의 동일하게 작동합니다. 주로 특정 DOM 엘리먼트를 클릭하면 페이지 어디로 이동할지 지정해줄 때 사용합니다. 개발자 도구를 열어보면 <code>a</code>  태그가 랜더링되지만 페이지를 다시 불러오지 않고 미리 준비된 다른 컴포넌트와 바꿔치기 하는 방식으로 동작하나 봅니다.</p>\\n<p><code>props</code> 로 내려온 <code>children</code> 이 일반 페이지 컴포넌트들이 됩니다. 말 그대로 <code>src/layout/index.js</code> 는 모든 페이지들의 부모 컴포넌트가 된다고 이해하시면 되겠습니다.</p>\\n<h3 id=\\\"포스트-리스트-보여주기\\\"><a href=\\\"#%ED%8F%AC%EC%8A%A4%ED%8A%B8-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EB%B3%B4%EC%97%AC%EC%A3%BC%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>포스트 리스트 보여주기</h3>\\n<p>이번에는 <code>src/pages/index.js</code> 파일을 살펴보겠습니다. 이 페이지는 블로그에 접속하면 가장 처음 접하게 되는 페이지로, 모든 포스트를 리스트로 가져와서 최신 순서대로 나열해주는 역할을 합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token keyword\\\">import</span> React<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> Component <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"react\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> Link <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"gatsby-link\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> Hero <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"../components/Hero\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> PostList <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"../components/PostList\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">IndexPage</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> edges <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">.</span>allMarkdownRemark<span class=\\\"token punctuation\\\">.</span>edges<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> postsData <span class=\\\"token operator\\\">=</span> edges<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>edge <span class=\\\"token operator\\\">=></span> edge<span class=\\\"token punctuation\\\">.</span>node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Hero</span>\\n          <span class=\\\"token attr-name\\\">title</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>Welcome to my writing playground<span class=\\\"token punctuation\\\">\\\"</span></span>\\n          <span class=\\\"token attr-name\\\">subtitle</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>about Translation, Ruby, Javascript, Practical Dev etc.<span class=\\\"token punctuation\\\">\\\"</span></span>\\n        <span class=\\\"token punctuation\\\">/></span></span>\\n\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>container<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>columns<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>column is-10-mobile is-offset-1-mobile is-10-tablet is-offset-1-tablet<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n              <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>PostList</span> <span class=\\\"token attr-name\\\">postsData</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>postsData<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> IndexPage<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> pageQuery <span class=\\\"token operator\\\">=</span> graphql<span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n  query IndexQuery {\\n    allMarkdownRemark(limit: 1000, sort: { order: DESC, fields: [frontmatter___date] }) {\\n      edges {\\n        node {\\n          excerpt(pruneLength: 250)\\n          id\\n          frontmatter {\\n            title\\n            category\\n            date(formatString: \\\"YYYY/MM/DD\\\")\\n            path\\n          }\\n        }\\n      }\\n    }\\n  }\\n`</span></span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>파일 아래 부분에 <code>pageQuery</code>를 주목해주세요. <code>graphql</code>? 무슨 정적 사이트 생성기에 GraphQL을 쓰지? 라는 생각을 했는데, Gatsby에서 나름 효율적으로 사용자가 원하는 자료를 가져올 수 있도록 제공된 인터페이스를 사용하는 느낌이었습니다.</p>\\n<p>저도 GraphQL을 이름만 들어보고 실제로 사용해본 적은 한 번도 없었지만 공식 사이트의 튜토리얼을 참고해보고, Gatsby에서 제공하는 GraphQL IDE(개발 모드에서 <code>localhost:8000/___graphql</code>)로 여러가지 실험을 해 보니 필요한 만큼은 이해할 수 있었습니다. 당장 GraphQL에 익숙하지 않으시더라도 저 쿼리가 대강 어떤 자료를 가져오려고 하는 지 눈에 잘 들어올겁니다. 실제 리턴받는 데이터도 저 구조대로 자바스크립트 객체 형태를 가지고 있습니다.</p>\\n<hr>\\n<p>미처 설명드리지 못했지만 <code>frontmatter</code> 는 각각의 마크다운 파일 맨 처음에 작성하는 일종의 헤더로 다음과 같이 작성합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>---\\ntitle: \\\"Some title\\\"\\ncategory: \\\"Example\\\"\\ndate: \\\"2017/10/04\\\"\\npath: \\\"/posts/some-title\\\"\\n...\\n---</code></pre>\\n      </div>\\n<hr>\\n<p>쿼리하고 받은 데이터는 같은 파일에 작성된 리액트 컴포넌트에 <code>props</code>로 자동 설정됩니다. 그래서 <code>this.props.data.allMarkdownRemark</code> 처럼 사용할 수 있는 겁니다.</p>\\n<p>그런데 마크다운으로 작성된 블로그 포스트는 어떻게 리액트 컴포넌트로 표현해주어야 할까요? <code>http://blog.com/post/1</code> 같이 포스트마다 고유의 경로를 가져야 할 테고, 그러려면 <code>src/pages</code> 안에 각각의 포스트마다 컴포넌트를 작성해주어야 할까요? 다행히도 그렇게 복잡한 방식을 사용할 필요는 없습니다.</p>\\n<h3 id=\\\"블로그-포스트-생성하기\\\"><a href=\\\"#%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%8F%AC%EC%8A%A4%ED%8A%B8-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>블로그 포스트 생성하기</h3>\\n<p>Gatsby는 자체 Node API를 제공하여 페이지를 생성하거나 수정하는 작업을 처리할 수 있습니다. 리액트의  Lifecycle methods 처럼 페이지 생성부터 종료까지 다양한 시점에 걸쳐 설정을 할 수 있지만, 저는 <code>createPages</code> 메서드만 사용했습니다.</p>\\n<p>자세한 내용은 <a href=\\\"https://www.gatsbyjs.org/docs/creating-and-modifying-pages/\\\">공식 문서</a>를 참고해주세요. 또한 대부분 공식 튜토리얼 파트4에 소개되어있는 내용을 참고했습니다.</p>\\n<p>먼저 프로젝트 루트에 <code>gatsby-node.js</code> 파일을 생성합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// gatsby-node.js</span>\\n<span class=\\\"token keyword\\\">const</span> path <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"path\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nexports<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">createPages</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> boundActionCreators<span class=\\\"token punctuation\\\">,</span> graphql <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p><code>boundActionCreators</code> 는 Redux로 구현된 다양한 행동 모음집(액션 디스패처들)입니다. 우리는 여기서 <code>createPage</code> 액션 하나만 사용할 예정입니다. <code>graphql</code> 은 GraphQL 쿼리를 실행하고 그 결과를 프로미스로 리턴하는 함수입니다. <code>createPages</code> 함수 내부를 조금 더 자세히 살펴보겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// ...</span>\\nexports<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">createPages</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> boundActionCreators<span class=\\\"token punctuation\\\">,</span> graphql <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> createPage <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> boundActionCreators<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">const</span> blogPostTemplate <span class=\\\"token operator\\\">=</span> path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`src/templates/blog-post.js`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">graphql</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n    {\\n      allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }, limit: 1000) {\\n        edges {\\n          node {\\n            excerpt(pruneLength: 250)\\n            html\\n            id\\n            frontmatter {\\n              date\\n              path\\n              title\\n              tags\\n              category\\n            }\\n          }\\n        }\\n      }\\n    }\\n  `</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>result <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span>errors<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span>errors<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">return</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span>errors<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">const</span> posts <span class=\\\"token operator\\\">=</span> result<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">.</span>allMarkdownRemark<span class=\\\"token punctuation\\\">.</span>edges<span class=\\\"token punctuation\\\">;</span>\\n\\n    posts<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> node <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">createPage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n        path<span class=\\\"token punctuation\\\">:</span> node<span class=\\\"token punctuation\\\">.</span>frontmatter<span class=\\\"token punctuation\\\">.</span>path<span class=\\\"token punctuation\\\">,</span>\\n        component<span class=\\\"token punctuation\\\">:</span> blogPostTemplate<span class=\\\"token punctuation\\\">,</span>\\n        context<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p><code>blogPostTemplate</code> 는 블로그 포스트를 표현하기 위한 리액트 컴포넌트입니다. 조금 뒤에 살펴보겠습니다.</p>\\n<p><code>graphql</code> 함수가 쿼리를 하고 나온 결과는 <code>result.data</code> 에 담기게 되며 아까 <code>src/pages/index.js</code> 파일 안에서 GraphQL 쿼리 결과를 가져올 때랑 똑같이 다룰 수 있습니다.</p>\\n<p>그리고 <code>createPage</code> 라는 함수에 각각의 포스트를 인자로 넘기면 됩니다. <code>path</code> 속성은 어떤 URL로 생성될지, <code>component</code> 는 어떤 컴포넌트를 사용하여 페이지를 만들지 지정합니다. <code>context</code> 는 상황에 따라 사용자 임의의 속성을 지정해줄 수 있는 기능인데, 저는 굳이 사용하지 않았습니다.</p>\\n<p>중요한 점은 저 <code>path</code> 속성이 템플릿 컴포넌트로 넘어갈때 GraphQL의 인자로 사용된다는 것입니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token comment\\\">// src/templates/blog-post.js</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Template</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> data <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> markdownRemark<span class=\\\"token punctuation\\\">:</span> post <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> data<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> tags <span class=\\\"token operator\\\">=</span> post<span class=\\\"token punctuation\\\">.</span>frontmatter<span class=\\\"token punctuation\\\">.</span>tags<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>container<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>columns is-mobile<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>column is-10-mobile is-offset-1-mobile is-8-tablet is-offset-2-tablet is-8-desktop is-offset-2-desktop<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>content<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token operator\\\">&lt;</span>Helmet title<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>post<span class=\\\"token punctuation\\\">.</span>frontmatter<span class=\\\"token punctuation\\\">.</span>title<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> - Rinae's playground`</span></span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>post-title<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n              <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">{</span>post<span class=\\\"token punctuation\\\">.</span>frontmatter<span class=\\\"token punctuation\\\">.</span>title<span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span>\\n              <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>span</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>has-text-grey-light is-size-6<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">{</span>post<span class=\\\"token punctuation\\\">.</span>frontmatter<span class=\\\"token punctuation\\\">.</span>date<span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>span</span><span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">dangerouslySetInnerHTML</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span> __html<span class=\\\"token punctuation\\\">:</span> post<span class=\\\"token punctuation\\\">.</span>html <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>hr</span> <span class=\\\"token punctuation\\\">/></span></span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>TagList</span> <span class=\\\"token attr-name\\\">tags</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>tags<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>About</span> <span class=\\\"token punctuation\\\">/></span></span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>ButtonWrapper</span><span class=\\\"token punctuation\\\">></span></span>\\n              <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Link</span> <span class=\\\"token attr-name\\\">to</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>/<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>button is-info is-large<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n                <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>span</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>icon is-medium<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n                  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>i</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>mdi mdi-36px mdi-format-list-bulleted<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n                <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>span</span><span class=\\\"token punctuation\\\">></span></span>\\n                <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>span</span><span class=\\\"token punctuation\\\">></span></span>Back to All posts<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>span</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\" \\\"</span><span class=\\\"token punctuation\\\">}</span>\\n              <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Link</span><span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>ButtonWrapper</span><span class=\\\"token punctuation\\\">></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> pageQuery <span class=\\\"token operator\\\">=</span> graphql<span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n  query BlogPostByPath($path: String!) {\\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\\n      html\\n      frontmatter {\\n        date(formatString: \\\"YYYY/MM/DD\\\")\\n        path\\n        title\\n        tags\\n      }\\n    }\\n  }\\n`</span></span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p><code>pageQuery</code> 의 <code>graphql</code> 이 인자로 <code>$path</code> 를 받는데 아까 <code>createPage</code> 함수에서 가져온 <code>path</code> 속성을 의미합니다. 그리고 <code>$path</code> 를 이용하여 <strong>마크다운 파일 중에  frontmatter의 path가 <code>$path</code> 와 같은 노드를 검색하라</strong> 라는 쿼리를 전달할 수 있는 것입니다. 나머지는 그 데이터를 그대로 컴포넌트에 넘겨주기만 하면 됩니다.</p>\\n<p>그리고 마크다운 파일은 플러그인에 의해 자동으로 html로 변환되는데, 이 html을 <a href=\\\"https://reactjs.org/docs/dom-elements.html#dangerouslysetinnerhtml\\\"><code>dangerouslySetInnerHTML</code> 속성</a>을 사용해서 주입했습니다.</p>\\n<p>설명을 보시면서 생략된 부분이 많다고 느끼실 수 있지만, 앞서 언급한 공식 튜토리얼을 가볍게 진행해보시면 생각보다 쉽게 간단한 블로그정도는 만들 수 있다는 생각이 드실 겁니다.</p>\\n<h2 id=\\\"자잘한-문제-해결\\\"><a href=\\\"#%EC%9E%90%EC%9E%98%ED%95%9C-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>자잘한 문제 해결</h2>\\n<p>하지만 공식 문서에서는 미처 언급되지 않아 제가 약간 삽질을 하면서 해결했던 문제들이 있습니다. 기록 겸 이 글을 읽으시는 분들이 만약 같은 문제를 겪으실 때 쉽게 해결하실 수 있었으면 좋겠습니다.</p>\\n<h3 id=\\\"rss-feed-설정\\\"><a href=\\\"#rss-feed-%EC%84%A4%EC%A0%95\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>RSS Feed 설정</h3>\\n<p>Gatsby는 RSS Feed를 생성하는 플러그인을 제공합니다. 제 블로그가 아무리 대단한 내용이 없다 하더라도 RSS Feed를 제공하는 것은 기본 중의 기본이라 생각하여 설정하고 있었는데, 아무리 해도 <code>head</code> 태그에 <code>rss.xml</code> 파일이 제대로 된 경로로 설정되지 않았습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token comment\\\">&lt;!-- rss.xml의 경로가 절대경로로만 표시된다 --></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>link</span> <span class=\\\"token attr-name\\\">rel</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>alternate<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>application/rss+xml<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>/rss.xml<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n</code></pre>\\n      </div>\\n<p>이렇게 되면 제가 기존에 쓰던 블로그 주소인 <code>https://emaren84.github.io/blog</code> 를 사용할 경우 RSS Feed를 제공할 수 없게 됩니다. 왜냐면 <code>rss.xml</code> 의 위치는 <code>https://emaren84.github.io/rss.xml</code> 이 되어버리기 때문입니다.</p>\\n<p>플러그인 소스를 보니  <code>pathPrefix</code> 설정을 받아들이는 부분도 없고 무조건 절대경로로 파일을 생성하도록 되어있나봅니다.</p>\\n<p>결국 블로그 주소를 바꿔서 해결했지만.. 기존에 사용하던 지킬 테마에서는 피드 생성이 잘 되었다는 것을 생각해보면 나중에 수정되었으면 좋겠습니다.</p>\\n<h3 id=\\\"gif-파일-표시\\\"><a href=\\\"#gif-%ED%8C%8C%EC%9D%BC-%ED%91%9C%EC%8B%9C\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>GIF 파일 표시</h3>\\n<p>Gatsby의 remark-images 플러그인은 jpg, png 파일은 아주 잘 처리합니다. 다만 gif파일은 처리하지 않습니다. 보통 gif 파일을 쓸 일이 없긴 하지만, 몇몇 포스트에 gif파일을 사용하기 때문에 문제를 해결해야 했습니다.</p>\\n<p><code>gatsby-remark-copy-linked-files</code> 을 추가하면 문제는 해결됩니다. 이 플러그인은 PDF 파일 등의 링크를 제공할 때 사용하는 플러그인으로 생각하고 간과하고 있었는데, 이 플러그인을 설치한 채로 gif파일의 링크를 설정하니 잘 작동합니다.</p>\\n<h3 id=\\\"코드-블락의-css-오류\\\"><a href=\\\"#%EC%BD%94%EB%93%9C-%EB%B8%94%EB%9D%BD%EC%9D%98-css-%EC%98%A4%EB%A5%98\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>코드 블락의 CSS 오류</h3>\\n<p>개발 블로그를 작성하면서 가장 중요한게 코드의 표현인데, Gatsby로 블로그를 만들고 나니 일부 코드 블락이 이상하게 표현되었습니다. 처음에는 PrismJS 플러그인의 문제라고 생각했는데, 제가 이 블로그를 만들기 위해 사용한 CSS 프레임워크인 Bulma의 CSS와 일부 충돌하는 부분이 있었기 때문에 코드가 이상하게 나온 것이었습니다.</p>\\n<p>블로그 포스트 템플릿에 CSS를 추가하여 문제를 해결했습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token comment\\\">// resolve conflicts between bulma css preset and prismjs</span>\\n<span class=\\\"token selector\\\">pre[class*=\\\"language-\\\"] .tag,\\npre[class*=\\\"language-\\\"] .number </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">align-items</span><span class=\\\"token punctuation\\\">:</span> stretch<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> transparent<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-radius</span><span class=\\\"token punctuation\\\">:</span> 0<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">display</span><span class=\\\"token punctuation\\\">:</span> inline<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">font-size</span><span class=\\\"token punctuation\\\">:</span> 1em<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">justify-content</span><span class=\\\"token punctuation\\\">:</span> flex-start<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">line-height</span><span class=\\\"token punctuation\\\">:</span> normal<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">padding</span><span class=\\\"token punctuation\\\">:</span> 0<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">white-space</span><span class=\\\"token punctuation\\\">:</span> pre<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">margin-right</span><span class=\\\"token punctuation\\\">:</span> 0<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">min-width</span><span class=\\\"token punctuation\\\">:</span> auto<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">text-align</span><span class=\\\"token punctuation\\\">:</span> left<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">vertical-align</span><span class=\\\"token punctuation\\\">:</span> baseline<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<hr>\\n<p>제가 만든 블로그는 <a href=\\\"https://github.com/emaren84/gatsby-blog\\\">Github에 공개 되어 있습니다</a>. 커밋 로그를 조금 살펴보시면 블로그에서 미처 언급하지 못했던 제작과정을 참고하실 수 있습니다.</p>\\n<p><strong>참고자료</strong></p>\\n<ul>\\n<li><a href=\\\"https://www.gatsbyjs.org/tutorial/\\\">Gatsby Tutorial</a></li>\\n<li><a href=\\\"https://github.com/alxshelepenok/gatsby-starter-lumen\\\">GitHub - alxshelepenok/gatsby-starter-lumen: Lumen is a minimal, lightweight and mobile-first starter for creating blogs uses Gatsby</a></li>\\n<li><a href=\\\"https://dustinschau.com/blog/getting-started-with-gatsby\\\">Dustin Schau - Creating a Blog with Gatsby</a></li>\\n</ul>\",\"id\":\"/Users/rinae/Dev/blog/src/pages/posts/2017-10-05-creating-new-blog-with-gatsby/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-10-05\",\"path\":\"/posts/creating-new-blog-with-gatsby\",\"title\":\"Gatsby를 활용한 블로그 재구성\",\"tags\":[\"Markdown\",\"React\",\"GraphQL\"],\"category\":\"Gatsby\"}}],\"tagName\":\"React\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tags-react-05052a43fa1a4142a3da.js","module.exports = {\"pathContext\":{\"postsByTag\":[{\"excerpt\":\"…\",\"html\":\"<h2 id=\\\"번역-서문\\\"><a href=\\\"#%EB%B2%88%EC%97%AD-%EC%84%9C%EB%AC%B8\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>번역 서문</h2>\\n<p><a href=\\\"/posts/what-is-testing-javascript-kr\\\">지난번</a> <a href=\\\"/posts/write-mostly-integration-test-kr\\\">시리즈</a>를 통해 테스트가 무엇인지, 어떤 방향으로 테스트를 해야할지 조금 감을 잡으셨을 겁니다. 이제 본격적으로 리액트 애플리케이션을 테스트하고자 하는데, 또 한번 막히게 되죠.</p>\\n<blockquote>\\n<p>통합 테스트가 좋다는 건 알겠는데 좀더 실전에 가까운 예가 필요하다</p>\\n</blockquote>\\n<p>라고 생각하실지 몰라서 (저도 그렇게 생각하기 때문에) 남은 두 번의 번역 시리즈는 리액트 + 리덕스 애플리케이션 개발 시 테스트를 어떻게 했는지, 참고할만한 팁을 번역할 예정입니다.</p>\\n<p>참고로 원작자는 ‘Redux app’ 이라는 용어를 계속 사용하고 있어서 저도 그냥 리덕스 앱이라고 번역했습니다. (앵귤러도 리덕스 쓸 수 있는데...) 또한 mocking(흉내내기, 모조품 만들기)의 번역이 부자연스러워 바로 음차했습니다. 더 좋은 표현이 있다면 제안 부탁드립니다.</p>\\n<p><a href=\\\"https://hackernoon.com/low-effort-high-value-integration-tests-in-redux-apps-d3a590bd9fd5\\\">원문은 여기서 보실 수 있습니다.</a></p>\\n<hr>\\n<p><strong>짧은 정리: 여러분은 노드 환경에서 앱을 랜더링하고, 사용자 동작을 흉내내며 상태나 마크업의 변화를 확인할 수 있습니다. 이런 테스트는 상대적으로 작성하기 쉽고 빠르게 작동하며 이를 통해 많은 자신감을 얻을 수 있습니다.</strong></p>\\n<p>효율적인 소프트웨어 테스트를 작성하는 일은 아슬아슬한 줄타기 같습니다(tricky balancing act). ‘효율성’ 이라는 용어는 실행 속도나 자원 소모를 의미하는 것이 아니라, 테스트를 작성하는데 드는 노력과 테스트가 제공하는 가치 사이에서 최고로 얻어낼 수 있는 절충안을 의미합니다.</p>\\n<p>이 문제는 알려지지 않았거나 전혀 새로운 문제가 아닙니다. 과거에 수 많은 똑똑한 사람들이 달려들었고, 나중에 이 문제에 맞딱뜨릴 개발자를 위해 가이드라인을 만들었습니다. 저는 <a href=\\\"https://martinfowler.com/bliki/TestPyramid.html\\\">테스팅 피라미드</a>를 신봉합니다. 테스팅 피라미드는 다양한 종류의 테스트를 제대로 다루는데 앞서, 각각의 코드를 개별적으로 다루는 단위 테스트(Unit test)가 기반이 되어야 한다고 강조합니다.</p>\\n<h2 id=\\\"단위-테스트와-리덕스redux\\\"><a href=\\\"#%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%99%80-%EB%A6%AC%EB%8D%95%EC%8A%A4redux\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>단위 테스트와 리덕스(Redux)</h2>\\n<p>리덕스가 제시하는(역주: ‘강요하는’ 에 가까운 어감으로 느껴집니다) 구조 덕에 단위 테스트를 아주 쉽게 작성할 수 있습니다. 서로 분리되어있는 부분(리듀서, 액션 생성자, 컨테이너 등)을 각각 불러와서 여타 순수 함수와 똑같이 테스트 하면 됩니다. 데이터를 집어넣고, 나온 데이터를 단언(assertion)과 맞춰봅니다. 모킹(mocking)을 할 필요가 없지요. <a href=\\\"http://redux.js.org/docs/recipes/WritingTests.html\\\">리덕스 문서 안에 있는 테스팅 가이드</a>에 각 부분의 단위 테스트를 하는 방법이 작성되어 있습니다.</p>\\n<p>이 가이드를 따라가면서 지루하게 리듀서끼리, 액션 생성자끼리 테스트를 복-붙(copy-paste) 하다보면 단위 테스트 작성을 끝낼 수 있습니다. 그렇게 모든 작업이 끝나면 테스팅 피라미드가 뒷통수를 때리죠. 단순히 단위 테스트만 가지고는 ‘이 앱이 제대로 작동하는가?’ 라는 가장 기본적인 질문에 답할 수가 없습니다.</p>\\n<h2 id=\\\"피라미드-오르기\\\"><a href=\\\"#%ED%94%BC%EB%9D%BC%EB%AF%B8%EB%93%9C-%EC%98%A4%EB%A5%B4%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>피라미드 오르기</h2>\\n<p>웹 애플리케이션을 작성하면서 테스팅 피라미드의 윗 단계로 올라가는데 몇 가지 방법이 있습니다. 맨 꼭대기에 있는 end-to-end(e2e) 계층은 Selenium과 <a href=\\\"http://webdriver.io\\\">webdriver.io</a>를 사용해서 구현할 수 있습니다. 이런 종류의 테스트는 기술 독립적이라 여러분이 다른 프레임워크를 사용하도록 앱을 포팅해도 잘 작동합니다. 하지만 구현하고 돌려보는데 오래 걸리고, 디버그하기도 어려우며, 종종 원인 모를 문제에 시달릴 수 있습니다. 보통 아주 적은 종류의 e2e 테스트만 프로젝트에 적용하게 됩니다.</p>\\n<p>그렇다면 e2e테스트와 단위 테스트 사이에 있는 계층은 어떨까요? 일반적으로 이런 테스트를 통합 테스트(integration test)라고 부릅니다. 애플리케이션의 모듈이 어떻게 상호작용하는지 테스트하지요. 통합 테스트의 범위는 넓습니다. 예를 들자면 액션을 보내기 위해(dispatch) 액션 생성자를 사용하는 리듀서를 테스트한다면 이미 단위 테스트의 범위를 넘어간 겁니다. 다른 측면에서 보면 e2e 테스트는 아주 극단적인 형태의 통합 테스트라고 볼 수 있습니다.</p>\\n<p>우리는 리덕스에서 통합 테스트 하기에 아주 적절한 지점(sweet-spot)을 찾아보려 합니다. 개발 과정에서 충분히 빨리 돌려볼 수 있어야 하고, 단위 테스트와 같은 테스트 환경을 사용해야 하면서 리덕스로 관리되는 애플리케이션이 제대로 동작하고 있다는 충분한 확신을 줄 수 있어야 합니다.</p>\\n<h2 id=\\\"범위를-찾기\\\"><a href=\\\"#%EB%B2%94%EC%9C%84%EB%A5%BC-%EC%B0%BE%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>범위를 찾기</h2>\\n<p>우선 테스트 하고자 하는 범위를 설정하는 게 좋은 출발점이 됩니다. 일반적인 웹 앱은 이런 방식으로 구성되어있는데요.</p>\\n<p><img src=\\\"https://cl.ly/271c282D101g/typical-webapp-structure.png\\\" alt=\\\"일반적으로 고도화된 웹앱의 구조\\\"></p>\\n<p>시스템의 일부는 올바른 테스트 결과를 얻기 위해 모킹되어야 합니다. 제일 제약이 심한 부분이 저 맨 꼭대기 위에 있는 ‘브라우저’입니다. (비록 헤드리스-Headless 라도) 브라우저 인스턴스를 띄워서 테스트를 돌리는 일은 Node.js(이하 노드)에서 테스트 코드를 실행하는 것보다 훨씬 오래 걸립니다. 시작부터 끝까지 진짜 요청이 끝나길 기다릴 필요는 없습니다. 네트워크 계층(역주: 프론트엔드와 백엔드 사이에 통신하는 부분을 지칭하는 것으로 보입니다)은 명확히 정의된 인터페이스라서 적절히 모킹하기 쉽습니다.</p>\\n<h2 id=\\\"범위를-모킹하기\\\"><a href=\\\"#%EB%B2%94%EC%9C%84%EB%A5%BC-%EB%AA%A8%ED%82%B9%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>범위를 모킹하기</h2>\\n<p>리액트와 리덕스를 쓰는 앱이 있다고 가정하면, 노드 환경에서 부드럽게 돌아가는 테스트를 작성하는게 꽤 쉽습니다(심지어 서버 사이드 랜더링을 한다면 프로덕션 환경에서도 가능합니다). <a href=\\\"https://facebook.github.io/jest/\\\">Jest</a>라는 걸출한 테스팅 프레임워크로 테스트를 돌릴 수 있는데다, 마찬가지로 대단한 <a href=\\\"https://github.com/airbnb/enzyme\\\">Enzyme</a>은 브라우저 환경 없이 애플리케이션의 일부 혹은 전체를 랜더링해주고 동작을 확인해볼 수 있게 만들어주기 때문입니다.</p>\\n<p>Enzyme은 <code>mount</code> 라는 함수를 제공하는데, 이 함수로 어떠한 리액트 컴포넌트라도 그려내고 동작을 확인해볼 수 있습니다. 리덕스를 쓰는 앱도 마찬가지로 테스트 가능합니다. 매번 테스트할 때 같은 코드를 반복하지 않기 위해 간단한 유틸리티 함수를 작성해두면 도움이 됩니다. 이 함수는 주어진 상태(Redux 스토어)와 Enzyme의 래퍼 객체(역주: Enzyme을 통해 그려진 컴포넌트를 객체화 한 것. 이후 다양한 메서드를 통해 하위 DOM 탐색 및 다양한 동작을 확인해볼 수 있습니다)를 리턴합니다. 이렇게 만들어둔 함수는 나중에 단언 작성을 꽤 편하게 해줍니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Provider <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-redux'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> mount <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'enzyme'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> MyApp <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./containers/MyApp'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> createStore <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./createStore'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">renderAppWithState</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> store <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">createStore</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> wrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">mount</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>Provider store<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>store<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>MyApp <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Provider<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span>store<span class=\\\"token punctuation\\\">,</span> wrapper<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">,</span> wrapper<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">renderAppWithState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'bar'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nwrapper\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'input'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">simulate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'change'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> target<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'hello'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>노드 환경에서 테스트를 실행할 때 네트워크 계층을 깔끔하게 모킹하는 방법이 있습니다. 예를 들어 <a href=\\\"https://github.com/node-nock/nock\\\">nock</a> 같은 라이브러리가 있지요. nock은 테스트를 실행하기 전에 네트워크 요청에 따른 응답 데이터나 에러를 쉽게 선언할 수 있도록 만들어줍니다. 성공적인 GET 요청을 모킹하는 예는 다음과 같습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">import</span> nock <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'nock'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">nock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'https://example.com/api'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/12345'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reply</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">200</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'bar'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 이후 코드 어디에서나 https://example.com/api/1234 로 요청을 하면</span>\\n<span class=\\\"token comment\\\">// 성공했다는 응답과 함께 { foo: 'bar' } 를 응답값으로 리턴하게 됩니다.</span>\\n</code></pre>\\n      </div>\\n<p>이렇게 설정하면 통합 테스트를 단위 테스트와 비슷한 수준으로 빠르고 편하게 실행할 수 있습니다. 이제 테스트를 구현하기만 하면 됩니다...</p>\\n<p><img src=\\\"https://cl.ly/3j3q0t3Q0b2G/mock-boundaries.png\\\" alt=\\\"리덕스 통합 테스트를 위해 테스트 범위 모킹\\\"></p>\\n<h2 id=\\\"무엇을-테스트하나\\\"><a href=\\\"#%EB%AC%B4%EC%97%87%EC%9D%84-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EB%82%98\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>무엇을 테스트하나?</h2>\\n<p>여러분이 만든 앱이 정상적으로 동작한다는 자신감을 가장 크게 얻으려면 사용자의 시점에서 통합 테스트를 작성해야 합니다. 버튼 클릭, 폼 채우기 등의 사용자가 조작하는 행위에 따라 앱이 기대한대로 반응하는지 확인하는게 목표입니다.</p>\\n<p>간단한 폼을 제출한다는 시나리오를 생각해 보겠습니다. 데이터가 폼에 들어있는 상태로 랜더링 한 뒤에 사용자가 ‘제출’ 버튼을 누르는 행위를 흉내를 내 보겠습니다(simulate). 그리고 지정된 API 엔드포인트로 요청을 제대로 보내는지 확인해보겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Submitting the form'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">,</span> wrapper<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">renderAppWithState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'John Doe'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> submitButton <span class=\\\"token operator\\\">=</span> wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'[type=\\\"submit\\\"]'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'sends the data and shows the confirmation page'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">nock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'https://myapp.com/api'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">post</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/12345'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reply</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">200</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    submitButton<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">simulate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// 이제 무슨 일이 일어나는지 확인합니다</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"언제-테스트하나\\\"><a href=\\\"#%EC%96%B8%EC%A0%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EB%82%98\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>언제 테스트하나?</h2>\\n<p>본격적으로 단언을 작성하기 전에, 또 하나의 문제가 있습니다. “테스트를 언제 실행하냐” 인데요(역주: 테스트 코드를 실행하는 행위가 아니라 모든 작업이 다 끝나고 기대값과 결과값을 비교하는 ‘단언’ 을 의미하나봅니다). 모든 변화가 순차적으로 일어나는 단순한 상황에서는 사용자 동작을 흉내를 낸 뒤에 바로 단언을 실행하면 됩니다. 하지만 여러분의 앱은 보통 네트워크 요청 같은 비동기 코드를 다루기 위해 프로미스(Promise) 등을 사용할 겁니다. 네트워크 요청을 순차적으로 실행되게 모킹해놓았다 하더라도, 성공한 프로미스는 <code>submitButton.simulate('click')</code> 부분 다음의 코드를 바로 실행할겁니다. 우리는 단언이 실행되기 전에 앞선 작업이 “제대로 끝나기를” 기다리게 해야합니다.</p>\\n<p>Jest는 여러가지로 비동기 코드를 다루는 방법을 제공하지만, Promise 체인을 직접 다루는 방식으로 동작하거나(이번 예시에는 없지요) , 타이머를 모킹해야 합니다(Promise 기반 코드에는 동작하지 않습니다). <code>setTimeout(() => {}, 0)</code> 같은 코드를 사용할 수 있지만 <a href=\\\"https://facebook.github.io/jest/docs/en/asynchronous.html\\\">Jest의 비동기 콜백 기능</a>을 사용해야 해서 코드의 가독성이 떨어지게 됩니다.</p>\\n<p>하지만 이 문제를 멋지게 해결하기 위해 한 줄짜리 보조 함수를 사용하면 됩니다. 이 함수는 성공한 Promise를 이벤트 루프의 바로 다음 차례로 넘기는 일을 합니다. Jest에서 기본적으로 지원하는 Promise 리턴과 같이 사용하면 됩니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">flushAllPromises</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span>resolve <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">setImmediate</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'runs some promise based code'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">triggerSomethingPromiseBased</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Promise 기반의 동작 실행</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">flushAllPromises</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n     <span class=\\\"token comment\\\">// 무슨 일이 일어나는지 확인하기</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"어떻게-테스트하나\\\"><a href=\\\"#%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EB%82%98\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>어떻게 테스트하나?</h2>\\n<p>사용자와 앱의 상호작용이 제대로 이루어지고 있나 확인하려면 어떤 방법이 있을까요?</p>\\n<p><strong>마크업(Markup)</strong> - UI가 제대로 변경되었는지 확인하기 위해 페이지의 마크업을 들여다볼 수 있습니다. 예를 들어 <a href=\\\"https://facebook.github.io/jest/docs/snapshot-testing.html\\\">Jest의 스냅샷 기능으로요.</a> (유의할 점: 아래의 테스트 코드를 실행하기 위해 <a href=\\\"https://github.com/adriantoine/enzyme-to-json#serializer\\\">enzyme-to-json</a>같은 Jest 스냅샷 직렬화 모듈(serializer)을 설치해야 합니다)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>wrapper<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toMatchSnapshot</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nsubmitButton<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">simulate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">flushAllPromises</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>wrapper<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toMatchSnapshot</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p>이런 방식의 단언은 작성하기 아주 쉽지만, 어디에 문제가 있는지 살펴보기 어려워지는 경향이 있습니다. 스냅샷은 가끔 겉으로 보기에 상관없어 보이는 테스트가 실패할 때도 변할 수 있습니다. 게다가 변화가 있었는지 확인만 할 뿐 무슨 행동을 했는지 기록을 남기진 않습니다.</p>\\n<p><strong>상태(State)</strong> - 애플리케이션의 상태 변경을 확인하는 방법입니다. 한 곳에 집중된 스토어를 가지고 있는 리덕스 애플리케이션은 테스트하기 쉽지만, 상태가 나뉘어있다면 조금 복잡해질 수 있습니다. 이 때도 스냅샷 테스트를 할 수 있지만 저는 객체를 직접 비교하는 방식을 선호하는 편입니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>store<span class=\\\"token punctuation\\\">,</span> wrapper<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">renderAppWithState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'John Doe'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>store<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toEqual</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'John Doe'</span><span class=\\\"token punctuation\\\">,</span>\\n  confirmationVisible<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nsubmitButton<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">simulate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">flushAllPromises</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>store<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toEqual</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'John Doe'</span><span class=\\\"token punctuation\\\">,</span>\\n    confirmationVisible<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p>상태 스토어는 사용자가 보지 못하는 곳에 감추어져 있기 때문에 사용자 중심적인 테스트와는 약간 거리가 있습니다. 하지만 디자인 변경에 따른 마크업 수정이 일어나는 경우 영향을 덜 받습니다.</p>\\n<p><strong>부수 기능(Side effects)</strong> - 여러분의 애플리케이션에 따라 확인해야 하는 부수 기능도 있습니다(네트워크 요청, <code>localStorage</code> 변화 등). 이럴 때 nock의 <code>isDone</code> 메서드를 활용하여 모킹한 요청이 실제로 사용되었는지 확인할 수도 있습니다. </p>\\n<p><strong>액션 보내기(Dispatched actions)</strong> - 리덕스의 기능을 십분 활용하여 어떤 액션이 발생했는지 쉽게 로그를 정리하고 나열할 수 있습니다. 이를 이용해서 스토어에 액션을 보내는 흐름을 확인해볼 수 있습니다. <a href=\\\"https://github.com/arnaudbenard/redux-mock-store\\\">redux-mock-store</a> 같은 유용한 라이브러리의 도움을 받을 수도 있습니다. 먼저 위에서 정의한 <code>renderAppWithState</code> 메서드를 조금 수정해서 가상의 리덕스 스토어를 적용하면, 그 다음 스토어에 어떤 액션들이 호출되었는지 확인하기 위해 <code>getActions</code> 메서드를 사용할 수 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token comment\\\">// 이제 renderAppWithState는 redux-mock-state를 사용해서 스토어를 생성합니다.</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>store<span class=\\\"token punctuation\\\">,</span> wrapper<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">renderAppWithState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'John Doe'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>store<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toEqual</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'John Doe'</span><span class=\\\"token punctuation\\\">,</span>\\n  confirmationVisible<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nsubmitButton<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">simulate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">flushAllPromises</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>store<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getActions</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toEqual</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'SUBMIT_FORM_START'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> \\n    <span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'SUBMIT_FORM_SUCCESS'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p>이런 유형의 단언은 특히 코드가 비동기로 흘러갈 때 테스트 하고자 할 때 유용합니다. 또한 테스트 시나리오가 어떤 흐름으로 구성되는지 보여주면서 일종의 문서 역할을 합니다.</p>\\n<h2 id=\\\"중심-잡기\\\"><a href=\\\"#%EC%A4%91%EC%8B%AC-%EC%9E%A1%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>중심 잡기</h2>\\n<p>앞서 소개한 통합 테스트가 단위 테스트를 완전히 대체한다는 뜻은 아닙니다. 특히 애플리케이션에 무거운 로직이 있는 부분(리듀서나 셀렉터)은 여전히 철저하게 단위 테스트가 적용되어야 합니다. 테스팅 피라미드의 계층은 여전히 유효합니다! 하지만 통합 테스트는 테스트 방법 중 하나로서 충분히 유효하며, 가능한 한 고통을 덜고 더 자신있게 소프트웨어를 배포할 수 있도록 좋은 테스트를 구축하는데 도움이 됩니다.</p>\\n<p>소프트웨어 테스트라는 주제는 업계에서 가장 많이 오가는 주제 중 하나입니다. 제 동료는 제 글을 검수해주면서 “<a href=\\\"http://blog.thecodewhisperer.com/permalink/integrated-tests-are-a-scam\\\">통합 테스트는 사기다</a>” 라는 글을 알려주기도 했습니다. 어떤 사람들은 저 글을 쓴 사람이 맞다고도 하지만, 제가 생각하기에 흑백 논리로 따질 수 없는 주제라고 생각합니다. 여러분은 어떻게 생각하시나요?</p>\",\"id\":\"/Users/rinae/Dev/blog/src/pages/posts/2018-01-19-intergration-tests-in-redux-apps/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-01-19\",\"path\":\"/posts/integration-tests-in-redux-apps\",\"title\":\"[번역] 리덕스 앱을 저비용 고효율로 통합 테스트 하기\",\"tags\":[\"Testing\",\"React\",\"Javascript\"],\"category\":\"Testing\"}},{\"excerpt\":\"다음 프로젝트에서 본격적으로 타입스크립트를 사용한 리액트 애플리케이션을 도입하고자 하는데, CSS를 입히기 위한 도구로  TypeStyle 을 활용하는 방안을 검토중이다. 그래서  egghead의 강좌 를 가볍게 따라가며 내용을 정리해보았다. 이 정도면 충분히 도입할 만한 가치가 있어 보인다. 적어도 스타일 속성 이름으로 오타가 날 일은 없어 보이며 JS…\",\"html\":\"<p>다음 프로젝트에서 본격적으로 타입스크립트를 사용한 리액트 애플리케이션을 도입하고자 하는데, CSS를 입히기 위한 도구로 <a href=\\\"https://typestyle.github.io\\\">TypeStyle</a>을 활용하는 방안을 검토중이다.</p>\\n<p>그래서 <a href=\\\"https://egghead.io/courses/maintainable-css-using-typestyle\\\">egghead의 강좌</a>를 가볍게 따라가며 내용을 정리해보았다. 이 정도면 충분히 도입할 만한 가치가 있어 보인다.</p>\\n<p>적어도 스타일 속성 이름으로 오타가 날 일은 없어 보이며 JS를 적극적으로 활용하여 동적인 스타일을 입힐 수 있으리라 기대한다.</p>\\n<p>참고로 아래의 예제 코드는 모두 리액트 애플리케이션을 개발한다는 전제하에 소개하고 있다. 하지만 TypeStyle 자체는 어느 환경에서나 사용 가능하다.</p>\\n<h2 id=\\\"기본-사용법\\\"><a href=\\\"#%EA%B8%B0%EB%B3%B8-%EC%82%AC%EC%9A%A9%EB%B2%95\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>기본 사용법</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> ReactDOM <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span><span class=\\\"token punctuation\\\">,</span>\\n  position<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'relative'</span> \\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>className<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n    Hello TypeStyle<span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p><code>style</code> 함수로 생성된 내용이 스타일이 적용된 임의의 클래스 이름을 만들게 되고 DOM은 바로 클래스 이름을 사용하면 되도록 구성되어 있다.</p>\\n<p>이 과정에서 객체 형식으로 되어있는 key-value 값은 이미 라이브러리에 CSS 스펙에 맞게 정의되어 있기 때문에 오타가 날 시 컴파일러가 친절하게 에러를 잡아준다.</p>\\n<h2 id=\\\"스타일-믹스인\\\"><a href=\\\"#%EC%8A%A4%ED%83%80%EC%9D%BC-%EB%AF%B9%EC%8A%A4%EC%9D%B8\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>스타일 믹스인</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token comment\\\">// 위 코드와 동일한 DOM 랜더링</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fontSize</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">number</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> valueStr <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">typeof</span> value <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'string'</span>\\n    <span class=\\\"token operator\\\">?</span> value\\n    <span class=\\\"token punctuation\\\">:</span> value <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'px'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    fontSize<span class=\\\"token punctuation\\\">:</span> valueStr\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> fontColor <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">fontSize</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'3em'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  fontColor\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p>위의 코드 처럼 <code>style</code> 함수는 객체를 믹스인 할 수 있다. 프로퍼티가 맞는 순수 객체가 들어가면 아무 없이 작동하기 때문에 위의 <code>fontSize</code> 함수처럼 상황에 맞게 적절한 객체를 리턴하는 함수를 만들어서 다양한 상황에 맞게 사용할 수 있다.</p>\\n<h2 id=\\\"미디어-쿼리\\\"><a href=\\\"#%EB%AF%B8%EB%94%94%EC%96%B4-%EC%BF%BC%EB%A6%AC\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>미디어 쿼리</h2>\\n<p><code>media</code> 함수로 간단히 미디어 쿼리를 생성할 수 있다. 생성된 쿼리를 <code>style</code> 함수 안에 넣으면 자동으로 Nested 쿼리 형식으로 생성된다. 수동으로 Nested 쿼리를 입력하고자 할 때는 <code>style</code> 함수 안에 넣는 객체에 <code>$nest</code> 속성을 사용하면 된다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style<span class=\\\"token punctuation\\\">,</span> media <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span> \\n    color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span><span class=\\\"token punctuation\\\">,</span>\\n    transition<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'font-size .2s'</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">media</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> minWidth<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">500</span><span class=\\\"token punctuation\\\">,</span> maxWidth<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">700</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'30px'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">media</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> minWidth<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">701</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'50px'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"수도-클래스pseudo-class-작성\\\"><a href=\\\"#%EC%88%98%EB%8F%84-%ED%81%B4%EB%9E%98%EC%8A%A4pseudo-class-%EC%9E%91%EC%84%B1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>수도 클래스(pseudo class) 작성</h2>\\n<p>Sass, Less와 유사한 형태로 계층 화된 쿼리를 작성할 수 있다. 위에서 언급한 <code>$nest</code> 속성을 선택하면 해당 클래스의 계층 쿼리를 작성할 수 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span> \\n    color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span><span class=\\\"token punctuation\\\">,</span>\\n    transition<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'font-size .2s'</span><span class=\\\"token punctuation\\\">,</span>\\n    $nest<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token string\\\">'&amp;:focus'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// .class:focus</span>\\n        fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'30px'</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token string\\\">'&amp;&amp;:hover'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// .class.class:focus</span>\\n        fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'50px'</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"css-클래스-조합하기\\\"><a href=\\\"#css-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%A1%B0%ED%95%A9%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>CSS 클래스 조합하기</h2>\\n<p>클래스를 조합하는건 <code>style</code> 함수로 만들어진 클래스들을 분기에 따라 추가하고 제거하도록 만들면 된다. 다만 이 과정에서 있는 경우와 없는 경우에 따라 문자열을 조합하는게 번거로울 수 있는데, <code>classes</code> 함수가 귀찮은 부분을 쉽게 해결하도록 도와준다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">const</span> baseClassName <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span> color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'#333'</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> errorClassName <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span> backgroundColor<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">AppProps</span> <span class=\\\"token punctuation\\\">{</span>\\n  className<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n  hasError<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">boolean</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">App</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> className<span class=\\\"token punctuation\\\">,</span> hasError <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">:</span> AppProps<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">classes</span><span class=\\\"token punctuation\\\">(</span>\\n      baseClassName<span class=\\\"token punctuation\\\">,</span>\\n      className<span class=\\\"token punctuation\\\">,</span>\\n      hasError <span class=\\\"token operator\\\">&amp;&amp;</span> errorClassName\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n    Hello world\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"keyframes-함수로-애니메이션-만들기\\\"><a href=\\\"#keyframes-%ED%95%A8%EC%88%98%EB%A1%9C-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98-%EB%A7%8C%EB%93%A4%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Keyframes 함수로 애니메이션 만들기</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style<span class=\\\"token punctuation\\\">,</span> keyframes <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> colorAnimationName <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">keyframes</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token string\\\">'0%'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'black'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token string\\\">'50%'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'blue'</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'20px'</span><span class=\\\"token punctuation\\\">,</span>\\n    animationName<span class=\\\"token punctuation\\\">:</span> colorAnimationName<span class=\\\"token punctuation\\\">,</span>\\n    animationDuration<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'1s'</span><span class=\\\"token punctuation\\\">,</span>\\n    animationIterationCount<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'infinite'</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p><code>colorAnimationName</code> 을 일일이 변수로 분리 할 필요는 없다. 한번만 사용할거면 <code>animationName</code> 속성에 바로 <code>keyframes</code> 를 사용한 객체를 리턴하도록 만들면 된다.</p>\\n<h2 id=\\\"일반-css를-사용하기\\\"><a href=\\\"#%EC%9D%BC%EB%B0%98-css%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>일반 CSS를 사용하기</h2>\\n<p><code>cssRaw</code> 함수를 사용하고 그 안에 일반 CSS를 문자열로 집어넣으면 그대로 글로벌 스타일로 변환된다. 그리고 그 파일안에 있는 컴포넌트에 전부 영향을 준다. 특정 이름을 가진 클래스를 만들고, 간단하게 기존 스타일을 마이그레이션 하거나 NormalizeCSS 등을 바로 가져올 때도 유용하게 사용할 수 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style<span class=\\\"token punctuation\\\">,</span> cssRaw <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">cssRaw</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n.red {\\n  color: red;\\n}\\n`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">cssRaw</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n.bold {\\n  font-weight: bold;\\n}\\n`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span> fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'30px'</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>className <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">' red bold'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span> <span class=\\\"token comment\\\">// red, bold 클래스 사용 가능</span>\\n    Hello world\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"구형-브라우저용-속성-사용하기\\\"><a href=\\\"#%EA%B5%AC%ED%98%95-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%9A%A9-%EC%86%8D%EC%84%B1-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>구형 브라우저용 속성 사용하기</h2>\\n<p><code>rgba</code> 같은 구형 브라우저에서 지원되지 않는 속성을 사용하면서 구형 브라우저를 지원하는 용도로 <code>rgb</code> 를 사용하는 경우, CSS 파일에서는 보통 같은 속성을 두번 작성해서 문제를 해결할 수 있다. 하지만 TypeStyle은 객체를 파싱하기 때문에 같은 속성 값을 두번 선언할 수는 없다.</p>\\n<p>하지만 배열을 사용하면 한 속성에 배열의 요소를 순차적으로 따라 스타일을 적용하도록 만들 수 있으며, 비슷한 원리를 vendor prefix에도 적용할 수 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style<span class=\\\"token punctuation\\\">,</span> types <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> scroll<span class=\\\"token punctuation\\\">:</span> types<span class=\\\"token punctuation\\\">.</span>NestedCSSProperties <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token string\\\">'-webkit-overflow-scrolling'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'touch'</span><span class=\\\"token punctuation\\\">,</span>\\n  overflow<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'auto'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  scroll<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'30px'</span><span class=\\\"token punctuation\\\">,</span>\\n    backgroundColor<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token string\\\">'rgb(200, 54, 54)'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 구형 브라우저용</span>\\n      <span class=\\\"token string\\\">'rgba(200, 54, 54, 0.5)'</span> <span class=\\\"token comment\\\">// 요즘 브라우저용</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"정적-페이지-만들어보기\\\"><a href=\\\"#%EC%A0%95%EC%A0%81-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>정적 페이지 만들어보기</h2>\\n<p><code>getStyles</code> 함수는 현재 작성된 파일 안에 정의된 TypeStyle 스타일을 문자열로 변환하는 기능을 한다. 이를 이용해서 간단한 HTML 페이지를 만들 수 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token comment\\\">// app.tsx</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> fs <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> ReactDOMServer <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-dom/server'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style<span class=\\\"token punctuation\\\">,</span> getStyles <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span><span class=\\\"token punctuation\\\">,</span>\\n  fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'30px'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">App</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>className<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n    Hello World\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> html <span class=\\\"token operator\\\">=</span> ReactDOMServer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">renderToStaticMarkup</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&lt;</span>App <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> css <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getStyles</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">renderPage</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> html<span class=\\\"token punctuation\\\">,</span> css <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> html<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">;</span> css<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n&lt;html>\\n  &lt;head>\\n    &lt;style></span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>css<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">&lt;/style>\\n  &lt;/head>\\n  &lt;body>\\n    </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>html<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\n  &lt;/body>\\n&lt;/html>\\n`</span></span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> renderedPage <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">renderPage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> html<span class=\\\"token punctuation\\\">,</span> css <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nfs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeFileSync</span><span class=\\\"token punctuation\\\">(</span>__dirname <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'/index.html'</span><span class=\\\"token punctuation\\\">,</span> renderedPage<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code><span class=\\\"token comment\\\">&lt;!-- 결과물 --></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>html</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>style</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token style language-css\\\"><span class=\\\"token selector\\\">.fyuerk</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span>red<span class=\\\"token punctuation\\\">;</span><span class=\\\"token property\\\">font-size</span><span class=\\\"token punctuation\\\">:</span>30px<span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>style</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>fyuerk<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>Hello World<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>html</span><span class=\\\"token punctuation\\\">></span></span>\\n</code></pre>\\n      </div>\\n<p>위 방식을 응용하여 서버 사이드 랜더링에서도 스타일을 적용할 수 있다. <a href=\\\"https://egghead.io/lessons/css-render-html-css-server-side-using-typestyle\\\">영상 참고.</a></p>\",\"id\":\"/Users/rinae/Dev/blog/src/pages/posts/2018-01-16-typestyle-basic/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-01-16\",\"path\":\"/posts/typestyle-basic\",\"title\":\"TypeStyle 사용하기\",\"tags\":[\"TypeScript\",\"React\",\"CSS\"],\"category\":\"TypeStyle\"}},{\"excerpt\":\"MobX를 리액트에 쓰기 위해 필요한 기본 구성은  mobx ,  mobx-react  패키지이다. 그리고 각각  observable ,  observer  데코레이터(이자 그냥 함수)를 가져다 쓸 수 있다. Observer 생성한 스토어가  observable  로 구성되어 있고, 컴포넌트가  observer  데코레이터로 감싸져 있다면 스토어를 사용할 조건은 충족된다. 그래서 다음의 코드로 간단한 카운터를 만들 수 있다. MobX…\",\"html\":\"<p>MobX를 리액트에 쓰기 위해 필요한 기본 구성은 <code>mobx</code>, <code>mobx-react</code> 패키지이다. 그리고 각각 <code>observable</code>, <code>observer</code> 데코레이터(이자 그냥 함수)를 가져다 쓸 수 있다.</p>\\n<h2 id=\\\"observer\\\"><a href=\\\"#observer\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Observer</h2>\\n<p>생성한 스토어가 <code>observable</code> 로 구성되어 있고, 컴포넌트가 <code>observer</code> 데코레이터로 감싸져 있다면 스토어를 사용할 조건은 충족된다. 그래서 다음의 코드로 간단한 카운터를 만들 수 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> appState <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">observable</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  count<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nappState<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">increment</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>count<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nappState<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">decrement</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>count<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n@observer\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Counter</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function-variable function\\\">handleInc</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>store<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">increment</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function-variable function\\\">handleDec</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>store<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">decrement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n        Counter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>store<span class=\\\"token punctuation\\\">.</span>count<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">&lt;</span>br<span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleInc<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleDec<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>MobX의 리액트 개발자 도구는 크롬 같은 브라우저의 확장으로 설치하는 것이 아니라 일종의 리액트 컴포넌트로 되어있다. 따라서 프로젝트에 <code>mobx-react-devtools</code> 를 설치하고 <code>&#x3C;Devtools /></code> 같은 컴포넌트를 컴포넌트 트리에 삽입하면 된다.\\nObservable 스토어를 다룰 때 DOM을 그리는 등의 동작은 Side Effects(부가 동작)으로 처리된다. 이 때 스토어의 상태를 효율적으로 다루기 위해 <code>computed</code> 속성을 쓰면 필요한 부분만 스토어의 변경을 감지하여 효과적인 컴포넌트 랜더링이 가능하다.</p>\\n<h2 id=\\\"action\\\"><a href=\\\"#action\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Action</h2>\\n<p><code>@action</code> 데코레이터는 리듀서의 액션 디스패치와 같은 역할을 한다. 데코레이터와 함께 메서드를 작성하고, 이에 따라 Observable 값이 변경되도록 하면 MobX가 알아서 처리 해줄 것이다. Observable한 값을 직접 변경해주는 것도 일종의 액션이다. 상태 변경의 방법을 밖으로 드러내어 실수를 미연에 방지하는 것이 액션의 역할 뿐 아니라, 상태 변경을 하나의 단위로 묶어 트랜잭션을 수행하는 역할도 가지고 있다. 또한 비동기 작업 수행을 효과적으로 제어할 때도 사용된다. 예를 들어 작업 시행 -> 작업 종료가 명료하게 동기화되어야 할 때 액션을 사용하면 의도치 않은 동작을 방지할 수 있다.</p>\\n<p><code>@action(name: string)</code> 같은 형식으로 이름을 넣어서 개발 도구에서 손쉽게 액션을 파악할 수 있다. 그리고 액션을 쓰지 않고 직접 상태를 변경하는 일을 막기 위해 <code>useStrict</code> 함수로 strict mode를 설정할 수 있다. 이 때는 액션 데코레이터 없이는 상태 변경을 수행할 수 없다.</p>\\n<h2 id=\\\"observable-data-structure\\\"><a href=\\\"#observable-data-structure\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Observable Data Structure</h2>\\n<p><code>observable</code> 함수로 배열, 객체, Map 등을 감싸서 활용할 수 있다. 이 세 가지는 MobX에서 가장 중요하게 여기는 자료구조이다. 여기서 객체나 배열에 들어갈 값은 기존 자바스크립트에서 쓰는 단순한 객체나 원시 타입의 값일 수도 있지만, 개발자가 MobX의 기능을 활용하여 만든 상태 모델의 인스턴스를 넣어서 조작할 수도 있다. 가령 위에서 이야기한 <code>computed</code>, <code>action</code> 등을 활용한 임의의 클래스를 만들고, 그 클래스의 인스턴스들을 배열에다 넣어서 다룰 수 있다는 이야기다.</p>\\n<p><code>observable([])</code> 같은 명령어로 만들어진 배열은 유사 배열이기 때문에 실제 배열처럼 다루려면 <code>toJS</code> 같은 별도의 가공이 필요하다.</p>\\n<h2 id=\\\"컴포넌트를-나누어-관리하기\\\"><a href=\\\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A5%BC-%EB%82%98%EB%88%84%EC%96%B4-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>컴포넌트를 나누어 관리하기</h2>\\n<p>Observable 상태를 <code>map</code> 함수로 순회하며 하위 컴포넌트를 생성할 때 고려해야 할 점이 있다. 아무 처리도 없이 <code>map</code> 함수로 생성한 하위 컴포넌트에서 <code>onClick</code> 등으로 상태를 바꾸면, 겉으로 보기에는 상태가 변한 부분만 다시 랜더링 되는 것으로 보이지만 실제로 모든 하위 컴포넌트가 다시 랜더링된다. 이런 구조가 누적되면 결과적으로 큰 자원 낭비를 초래하기 때문에 최적화헤야 한다.\\n가장 간단한 방법은 <code>map</code> 함수 안에서 생성되는 하위 컴포넌트가 <code>@observer</code> 임을 명시해주고, 상태 변화 액션도 <code>@action</code> 으로 관리해주면 된다. 최적화는 MobX가 알아서 해 준다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> App <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">observer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> temperatures <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>ul<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">{</span>temperatures<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>t <span class=\\\"token operator\\\">=></span>\\n      <span class=\\\"token operator\\\">&lt;</span>TView Key<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>t<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">}</span> temperature<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>t<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">&lt;</span>DevTools <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>ul<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n@observer\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">TView</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> t <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>temperature<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>li onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onTempClick<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">{</span>t<span class=\\\"token punctuation\\\">.</span>temperature<span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>li<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  @action <span class=\\\"token function-variable function\\\">onTempClick</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>temperature<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">inc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"provider-컴포넌트-사용하기\\\"><a href=\\\"#provider-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Provider 컴포넌트 사용하기</h2>\\n<p><code>mobx-react</code> 는 <code>react-redux</code> 처럼 <code>Provider</code> 컴포넌트를 제공한다. 사실 MobX의 스토어는 한번 선언되어있으면 어디서 어떻게 가져다쓰던 <code>observer</code>, <code>observable</code> 선언만 제대로 되어있으면 동적으로 연결된다. 하지만 기존에 리덕스를 사용할 때 처럼 최상단 컴포넌트를 Provider 컴포넌트로 감싸기만 하면 <code>connect</code>, <code>mapStateToProps</code> 같은 함수를 사용하지 않아도 바로 자유자재로 사용할 수 있다. 단지 <code>@observer</code> 데코레이터 선언 시 어떤 스토어를 사용할지만 명시하면 된다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 스토어 선언 및 Provider 감싸기</span>\\n<span class=\\\"token keyword\\\">const</span> temps <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">observable</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>Provider temperatures<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>temps<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span>App <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Provider<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"app\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// App 컴포넌트</span>\\n<span class=\\\"token keyword\\\">const</span> App <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">observer</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"temperatures\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> temperatures <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>ul<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>TemperatureInput <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token punctuation\\\">{</span>temperatures<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>t <span class=\\\"token operator\\\">=></span>\\n        <span class=\\\"token operator\\\">&lt;</span>TView key<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>t<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">}</span> temperature<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>t<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">&lt;</span>DevTools <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>ul<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// temperatures를 사용하는 컴포넌트</span>\\n<span class=\\\"token comment\\\">// 위의 App 컴포넌트를 보면 알겠지만 따로 props 선언이 없었음에도 바로 사용 가능하다.</span>\\n@<span class=\\\"token function\\\">observer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"temperatures\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">TemperatureInput</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  @observable input <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>li<span class=\\\"token operator\\\">></span>\\n        Destination\\n        <span class=\\\"token operator\\\">&lt;</span>input onChange<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onChange<span class=\\\"token punctuation\\\">}</span>\\n        value<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>input<span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onSubmit<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>Add<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>li<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"특정-상황에서-반응하는-액션-작성하기\\\"><a href=\\\"#%ED%8A%B9%EC%A0%95-%EC%83%81%ED%99%A9%EC%97%90%EC%84%9C-%EB%B0%98%EC%9D%91%ED%95%98%EB%8A%94-%EC%95%A1%EC%85%98-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>특정 상황에서 반응하는 액션 작성하기</h2>\\n<p>작성해놓은 스토어를 사용할 때 특정 조건에 맞추어 원하는 동작이 발생하도록 훅을 걸거나(<code>when</code>), 모든 상태 변화마다 실행되는 함수를 지정할 수도 있다(<code>autorun</code>).</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// when의 사용 예</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">isNice</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> t<span class=\\\"token punctuation\\\">.</span>temperatureCelsius <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">25</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">when</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> temps<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">some</span><span class=\\\"token punctuation\\\">(</span>isNice<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> t <span class=\\\"token operator\\\">=</span> temps<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span>isNice<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Book now! \\\"</span> <span class=\\\"token operator\\\">+</span> t<span class=\\\"token punctuation\\\">.</span>location<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// autorun의 사용 예</span>\\n<span class=\\\"token keyword\\\">const</span> numbers <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">observable</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> sum <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">computed</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> numbers<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> a <span class=\\\"token operator\\\">+</span> b<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">autorun</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>sum<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// prints '6'</span>\\nnumbers<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// prints '10'</span>\\n</code></pre>\\n      </div>\\n<p><a href=\\\"https://mobx.js.org/refguide/computed-decorator.html\\\">공식 문서</a>에 따르면 <code>autorun</code> 함수는 상태 값을 변화시키지 않으면서 항상 실행되어야 하는 상황(로깅, UI 업데이트)에서 사용되며 그 이외의 경우는 전부 <code>computed</code> 사용을 권장하고 있다.</p>\\n<blockquote>\\n<p>Don't confuse computed with autorun. They are both reactively invoked expressions, but use @computed if you want to reactively produce a value that can be used by other observers and autorun if you don't want to produce a new value but rather want to achieve an effect. For example imperative side effects like logging, making network requests etc.</p>\\n</blockquote>\\n<h2 id=\\\"참고-자료\\\"><a href=\\\"#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>참고 자료</h2>\\n<ul>\\n<li><a href=\\\"https://egghead.io/courses/manage-complex-state-in-react-apps-with-mobx\\\">Manage Complex State in React Apps with MobX from @mweststrate on @eggheadio</a></li>\\n<li><a href=\\\"https://egghead.io/courses/manage-application-state-with-mobx-state-tree\\\">Manage Application State with Mobx-state-tree from @mweststrate on @eggheadio</a></li>\\n<li><a href=\\\"https://mobx.js.org/\\\">Mobx Documentation</a></li>\\n</ul>\",\"id\":\"/Users/rinae/Dev/blog/src/pages/posts/2017-12-31-mobx-basic-concepts/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-12-31\",\"path\":\"/posts/mobx-basic-concepts\",\"title\":\"MobX로 상태 관리하기\",\"tags\":[\"Javascript\",\"MobX\",\"React\"],\"category\":\"MobX\"}},{\"excerpt\":\"Advanced React Component Patterns 강좌 강좌에 수록된 코드 Kent C. Dodds 의 강좌가 egghead에 한정된 기간동안 무료로 올라왔다. 때문에 다른 강의들을 제쳐두고 일단 이 강의부터 끝내기로 했다. HOC, Render props…\",\"html\":\"<ul>\\n<li><a href=\\\"https://egghead.io/courses/advanced-react-component-patterns\\\">Advanced React Component Patterns 강좌</a></li>\\n<li><a href=\\\"https://github.com/kentcdodds/advanced-react-patterns\\\">강좌에 수록된 코드</a></li>\\n</ul>\\n<p><a href=\\\"https://kentcdodds.com/\\\">Kent C. Dodds</a>의 강좌가 egghead에 한정된 기간동안 무료로 올라왔다. 때문에 다른 강의들을 제쳐두고 일단 이 강의부터 끝내기로 했다. HOC, Render props같은 고급 리액트 개발 방법론에 관심은 있었으나 대강 글만 봐서는 이해가 되지 않았기 때문이다.</p>\\n<p>강의에 들어가는 코드는 복잡한 개발환경을 설정하는데 시간을 낭비하지 않기 위해 html페이지 하나로 모든 작업을 다 할 수 있도록 만들어져있다. React, ReactDOM, Babel을 unpkg로 불러온 뒤 수업을 따라가면 된다. 처음에는 강의 코드를 제공하지 않는 줄 알고 토글 버튼의 스타일은 <a href=\\\"https://codepen.io/designcouch/pen/qdBErE\\\">구글링해서 넣었었다</a>.</p>\\n<p>이후에 작성된 코드는 강의에서 나온 코드 중 핵심 부분을 발췌해서 넣어둔 것이며, 맥락을 파악하기 위해서 강의 자료를 보거나 코드 저장소에 있는 완결된 코드를 살펴보기 바란다.</p>\\n<hr>\\n<h2 id=\\\"compound-components\\\"><a href=\\\"#compound-components\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Compound Components</h2>\\n<p>만약 <code>Toggle</code> 컴포넌트를 랜더할 때 현재 켜졌는지 꺼졌는지 텍스트를 표시하면서도 그 위치를 때에 따라 조절하고자 한다면 단순히 <code>render</code> 메서드 안에 삼항연산자 등을 쓸 수 있을 것이다. 하지만 이 경우 텍스트를 표시하지 않으면서 컴포넌트를 재사용하기 어려워진다. 이 때 <code>React.Children.map</code> 함수를 이용해서 자손 컴포넌트를 생성함과 동시에 컴포넌트의 state, prop을 전달할 수 있고, 자손 컴포넌트는 이를 받아 상태에 따라 랜더할 수 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">ToggleOn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> on<span class=\\\"token punctuation\\\">,</span> children <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> on <span class=\\\"token operator\\\">?</span> children <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">ToggleOff</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> on<span class=\\\"token punctuation\\\">,</span> children <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> on <span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token punctuation\\\">:</span> children<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">ToggleButton</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> on<span class=\\\"token punctuation\\\">,</span> toggle<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>props <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Switch</span> <span class=\\\"token attr-name\\\">on</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>on<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token attr-name\\\">onClick</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>toggle<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">props</span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Toggle</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">static</span> On <span class=\\\"token operator\\\">=</span> ToggleOn<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">static</span> Off <span class=\\\"token operator\\\">=</span> ToggleOff<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">static</span> Button <span class=\\\"token operator\\\">=</span> ToggleButton<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">static</span> defaultProps <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> onToggle<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> on<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  \\n  <span class=\\\"token function-variable function\\\">toggle</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> \\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> on <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> on<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">!</span>on <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">onToggle</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>on<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  \\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> children <span class=\\\"token operator\\\">=</span> React<span class=\\\"token punctuation\\\">.</span>Children<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>children<span class=\\\"token punctuation\\\">,</span>\\n      child <span class=\\\"token operator\\\">=></span>\\n        React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">cloneElement</span><span class=\\\"token punctuation\\\">(</span>child<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n          on<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>on<span class=\\\"token punctuation\\\">,</span>\\n          toggle<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>toggle<span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">{</span>children<span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">App</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Toggle</span> <span class=\\\"token attr-name\\\">onToggle</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>on <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'toggle'</span><span class=\\\"token punctuation\\\">,</span> on<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Toggle.On</span><span class=\\\"token punctuation\\\">></span></span>The Button is on<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Toggle.On</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Toggle.Button</span> <span class=\\\"token punctuation\\\">/></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Toggle.Off</span><span class=\\\"token punctuation\\\">></span></span>The Button is off<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Toggle.Off</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Toggle</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"context로-확장성을-더하기\\\"><a href=\\\"#context%EB%A1%9C-%ED%99%95%EC%9E%A5%EC%84%B1%EC%9D%84-%EB%8D%94%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Context로 확장성을 더하기</h2>\\n<p><a href=\\\"https://reactjs.org/docs/context.html#how-to-use-context\\\">Context란?</a></p>\\n<p>위의 코드에는 약간의 문제가 있는데, children은 바로 하위 컴포넌트만 처리하기 때문에 계층을 조금 더 복잡하게 만드는 순간 전혀 작동하지 않는다. 예를 들자면</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">App</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Toggle</span> <span class=\\\"token attr-name\\\">onToggle</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>on <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'toggle'</span><span class=\\\"token punctuation\\\">,</span> on<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Toggle.On</span><span class=\\\"token punctuation\\\">></span></span>The Button is on<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Toggle.On</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Toggle.Button</span> <span class=\\\"token punctuation\\\">/></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Toggle.Off</span><span class=\\\"token punctuation\\\">></span></span>The Button is off<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Toggle.Off</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Toggle</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>이렇게 <code>div</code>로 감싸진 <code>child</code>는 작동하지 않는다. 이 때 Context 속성을 사용하는데, 예전에 <a href=\\\"https://egghead.io/courses/getting-started-with-redux\\\">Dan의 Redux 직강</a>에서 리덕스를 직접 구현하는 방법을 보여줄 때 사용했던 요소이다. 사실 Context API는 실제로 사용자가 이를 직접 쓰기보단 라이브러리 등에서 유용하게 쓰기 위한 목적으로 만들어진 것으로 보인다.</p>\\n<p>혹시나 Context가 중복되지 않도록 고유의 context key를 선언한 다음, 부모 컴포넌트에는 <code>getChildContext</code> 메서드를 선언해서 key에 맞는 값을 돌려주는 객체를 리턴하도록 만든다. 그리고 <code>contextTypes</code>라는 PropTypes 검사를 항상 마련해두어야 하는 것으로 보인다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">ToggleOn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> children <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> context<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> on <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">[</span>TOGGLE_CONTEXT<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> on <span class=\\\"token operator\\\">?</span> children <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nToggleOn<span class=\\\"token punctuation\\\">.</span>contextTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token punctuation\\\">[</span>TOGGLE_CONTEXT<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>object<span class=\\\"token punctuation\\\">.</span>isRequired\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token comment\\\">// 부모 컴포넌트의 메서드 정의</span>\\n<span class=\\\"token function\\\">getChildContext</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">[</span>TOGGLE_CONTEXT<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      on<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>on<span class=\\\"token punctuation\\\">,</span>\\n      toggle<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>toggle\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p>이러면 얼마나 깊이 해당 컴포넌트가 묻혀있는지 상관없이 자손 컴포넌트이기만 하고, 알맞은 context key를 가져올 수 있다면 원하는 상태를 추출할 수 있다.</p>\\n<hr>\\n<h2 id=\\\"higher-order-components\\\"><a href=\\\"#higher-order-components\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Higher Order Components</h2>\\n<h3 id=\\\"hoc-만들기\\\"><a href=\\\"#hoc-%EB%A7%8C%EB%93%A4%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>HOC 만들기</h3>\\n<p>이번에는 더 작은 규모의 <code>MyToggle</code> 이라는 버튼으로만 이루어진 컴포넌트를 만들면서 시작한다. 버튼 자체는 <code>on</code> 속성에 따라 다른 텍스트를 보여주는 정도인데, 이 버튼이 손쉽게 Context의 속성을 받기 위해 새로운 함수를 만든다. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token comment\\\">// Higher order component</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">withToggle</span><span class=\\\"token punctuation\\\">(</span>Component<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Wrapper</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">,</span> context<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> toggleContext <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">[</span>TOGGLE_CONTEXT<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Component</span> <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">toggleContext</span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">props</span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  Wrapper<span class=\\\"token punctuation\\\">.</span>contextTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">[</span>TOGGLE_CONTEXT<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>object<span class=\\\"token punctuation\\\">.</span>isRequired\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> Wrapper<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> MyToggle <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">withToggle</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> on<span class=\\\"token punctuation\\\">,</span> toggle <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span> <span class=\\\"token attr-name\\\">onClick</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>toggle<span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">{</span>on <span class=\\\"token operator\\\">?</span> <span class=\\\"token string\\\">'on'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'off'</span><span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p><code>withToggle</code> 함수가 컴포넌트를 인자로 받은 뒤 이를 <code>toggleContext</code> 속성이 추가된 컴포넌트로 돌려주고 있다. 결과적으로 toggleContext가 필요한 컴포넌트는 모두 <code>withToggle</code> 함수로 감싸면 되도록 만들었다.</p>\\n<h3 id=\\\"네임스페이스-충돌을-방지하기\\\"><a href=\\\"#%EB%84%A4%EC%9E%84%EC%8A%A4%ED%8E%98%EC%9D%B4%EC%8A%A4-%EC%B6%A9%EB%8F%8C%EC%9D%84-%EB%B0%A9%EC%A7%80%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>네임스페이스 충돌을 방지하기</h3>\\n<p>하지만 나중에 이 HOC를 이용하는 사용자가 우리가 미리 정의해놓은 속성과 같은 이름의 속성을 사용하는 경우 충돌이 날 수 있다. 지금의 경우는 <code>on</code>  속성이 문제가 될 수 있을 것이다. 따라서 HOC를 위한 네임스페이스를 별도로 지정해주어 문제를 해결한다. 다만 이 때는 객체 분해 시 별도의 이름을 지정해주어야하는 번거로움이 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token comment\\\">// Higher order component with their own namespace</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">withToggle</span><span class=\\\"token punctuation\\\">(</span>Component<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Wrapper</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">,</span> context<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> toggleContext <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">[</span>TOGGLE_CONTEXT<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Component</span>\\n      <span class=\\\"token attr-name\\\">toggle</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>toggleContext<span class=\\\"token punctuation\\\">}</span></span>\\n      <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">props</span><span class=\\\"token punctuation\\\">}</span></span>\\n    <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  Wrapper<span class=\\\"token punctuation\\\">.</span>contextTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">[</span>TOGGLE_CONTEXT<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>object<span class=\\\"token punctuation\\\">.</span>isRequired\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> Wrapper<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// extract toggle context from HOC</span>\\n<span class=\\\"token keyword\\\">const</span> MyToggle <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">withToggle</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> toggle<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> on<span class=\\\"token punctuation\\\">,</span> toggle <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span> <span class=\\\"token attr-name\\\">onClick</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>toggle<span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">{</span>on <span class=\\\"token operator\\\">?</span> <span class=\\\"token string\\\">'on'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'off'</span><span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"개발자-도구의-사용성-높이기\\\"><a href=\\\"#%EA%B0%9C%EB%B0%9C%EC%9E%90-%EB%8F%84%EA%B5%AC%EC%9D%98-%EC%82%AC%EC%9A%A9%EC%84%B1-%EB%86%92%EC%9D%B4%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>개발자 도구의 사용성 높이기</h3>\\n<p>HOC를 쓰게 되는 경우 브라우저의 리액트 개발자 도구로 디버깅을 할 때 예기치 못한 문제가 발생하는데, 개발자 도구에 표시되는 컴포넌트 이름은 함수 이름 기반이기 때문에 <code>Wrapper</code> 라는 이름으로 감싸는 컴포넌트가 표시되고, 감싸지는 컴포넌트는 익명함수를 전달했기 때문에 <code>Unknown</code> 이라는 이름으로 표시된다. 이러면 아주 복잡한 컴포넌트 트리에서 원하는 이름의 컴포넌트를 찾고자 검색을 이용하고자 해도 원하는 결과를 찾을 수 없다.</p>\\n<p>그러면 두 가지 문제를 해결해야 하는데 먼저 <code>withToggle(something)</code> 이라고 HOC의 명확한 이름을 지정해주는 것과, 감싸지는 컴포넌트에도 명확한 이름을 지정해주는 것이다.</p>\\n<p>첫 번째 문제는 HOC에 <code>displayName</code> 속성을 지정해주어 해결할 수 있다. 두 번째 문제는 익명함수들을 명확한 이름을 가진 함수로 분리하고, <code>withToggle</code> 로 따로 감싸서 해결하면 된다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token comment\\\">// displayName 속성 추가</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">withToggle</span><span class=\\\"token punctuation\\\">(</span>Component<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Wrapper</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">,</span> context<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> toggleContext <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">[</span>TOGGLE_CONTEXT<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Component</span> <span class=\\\"token attr-name\\\">toggle</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>toggleContext<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">props</span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  Wrapper<span class=\\\"token punctuation\\\">.</span>contextTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">[</span>TOGGLE_CONTEXT<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>object<span class=\\\"token punctuation\\\">.</span>isRequired\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// displayName이 지정되지 않은 컴포넌트는 각자 함수의 이름을 name 속성으로 가진다</span>\\n  Wrapper<span class=\\\"token punctuation\\\">.</span>displayName <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`withToggle(</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>Component<span class=\\\"token punctuation\\\">.</span>displayName <span class=\\\"token operator\\\">||</span> Component<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">)`</span></span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> Wrapper<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">MyToggle</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> toggle<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> on<span class=\\\"token punctuation\\\">,</span> toggle <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span> <span class=\\\"token attr-name\\\">onClick</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>toggle<span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">{</span>on <span class=\\\"token operator\\\">?</span> <span class=\\\"token string\\\">'on'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'off'</span><span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> MyToggleWrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">withToggle</span><span class=\\\"token punctuation\\\">(</span>MyToggle<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"ref-속성-제어\\\"><a href=\\\"#ref-%EC%86%8D%EC%84%B1-%EC%A0%9C%EC%96%B4\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>ref 속성 제어</h3>\\n<p>만약 토글 상태에 따라 버튼의 포커스를 조절하고 싶을 때는 <code>ref</code> 를 이용해서 컴포넌트를 제어할 수 있을 것이다. 하지만 <code>ref</code> 속성은 SFC(Stateless Functional Component)에는 사용할 수 없다. 게다가 클래스 컴포넌트를 만들었다 하더라도 HOC로 감싸게 되면 <code>Wrapper</code> 함수가 SFC를 리턴하기 때문에 제대로 써 먹을 수가 없다. </p>\\n<p>간단한 해법은 <code>ref</code> 를 HOC로 전달하는건데, 유의할 점은 <code>ref</code> 는 그 이름 바로 전달할 수가 없다. 따라서 <code>innerRef</code> 같은 별도의 이름을 지정해서 전달하면 된다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token comment\\\">// handle innerRef</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">withToggle</span><span class=\\\"token punctuation\\\">(</span>Component<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Wrapper</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> innerRef<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>props <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> context<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> toggleContext <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">[</span>TOGGLE_CONTEXT<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Component</span>\\n        <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">props</span><span class=\\\"token punctuation\\\">}</span></span>\\n        <span class=\\\"token attr-name\\\">ref</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>innerRef<span class=\\\"token punctuation\\\">}</span></span>\\n        <span class=\\\"token attr-name\\\">toggle</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>toggleContext<span class=\\\"token punctuation\\\">}</span></span>\\n      <span class=\\\"token punctuation\\\">/></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  Wrapper<span class=\\\"token punctuation\\\">.</span>contextTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">[</span>TOGGLE_CONTEXT<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>object<span class=\\\"token punctuation\\\">.</span>isRequired\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  Wrapper<span class=\\\"token punctuation\\\">.</span>displayName <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`withToggle(</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>Component<span class=\\\"token punctuation\\\">.</span>displayName <span class=\\\"token operator\\\">||</span> Component<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">)`</span></span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> Wrapper<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyToggle</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function-variable function\\\">focus</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>button<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">focus</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> toggle <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> on<span class=\\\"token punctuation\\\">,</span> toggle <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span>\\n        <span class=\\\"token attr-name\\\">onClick</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>toggle<span class=\\\"token punctuation\\\">}</span></span>\\n        <span class=\\\"token attr-name\\\">ref</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>button <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>button <span class=\\\"token operator\\\">=</span> button<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span></span>\\n      <span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token punctuation\\\">{</span>on <span class=\\\"token operator\\\">?</span> <span class=\\\"token string\\\">'on'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'off'</span><span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> MyToggleWrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">withToggle</span><span class=\\\"token punctuation\\\">(</span>MyToggle<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">App</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Toggle</span> <span class=\\\"token attr-name\\\">onToggle</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>on <span class=\\\"token operator\\\">=></span> on <span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>myToggle<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">focus</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Toggle.On</span><span class=\\\"token punctuation\\\">></span></span>The Button is on<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Toggle.On</span><span class=\\\"token punctuation\\\">></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Toggle.Off</span><span class=\\\"token punctuation\\\">></span></span>The Button is off<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Toggle.Off</span><span class=\\\"token punctuation\\\">></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Toggle.Button</span> <span class=\\\"token punctuation\\\">/></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>hr</span> <span class=\\\"token punctuation\\\">/></span></span>\\n          <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/* inject ref */</span><span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>MyToggleWrapper</span>\\n            <span class=\\\"token attr-name\\\">innerRef</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>myToggle <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>myToggle <span class=\\\"token operator\\\">=</span> myToggle<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span></span>\\n          <span class=\\\"token punctuation\\\">/></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Toggle</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"테스트를-용이하게-만들기\\\"><a href=\\\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%9A%A9%EC%9D%B4%ED%95%98%EA%B2%8C-%EB%A7%8C%EB%93%A4%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>테스트를 용이하게 만들기</h3>\\n<p>컴포넌트가 제대로 랜더링 되는지 테스트를 한다고 할 때도 문제가 생길 수 있다. 왜냐면 실질적으로 랜더링되는 컴포넌트는 <strong>감싸진</strong> 컴포넌트이기 때문이다. 이 때는 <code>Wrapper</code> 에 <code>WrappedComponent</code> 라는 속성을 지정해주고, 테스트 시 컴포넌트 랜더링을 할 대는 <code>HOC.WrappedComponent</code> 같은 방식으로 불러오면 된다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">withToggle</span><span class=\\\"token punctuation\\\">(</span>Component<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Wrapper</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> innerRef<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>props <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> context<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> toggleContext <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">[</span>TOGGLE_CONTEXT<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Component</span>\\n        <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">props</span><span class=\\\"token punctuation\\\">}</span></span>\\n        <span class=\\\"token attr-name\\\">ref</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>innerRef<span class=\\\"token punctuation\\\">}</span></span>\\n        <span class=\\\"token attr-name\\\">toggle</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>toggleContext<span class=\\\"token punctuation\\\">}</span></span>\\n      <span class=\\\"token punctuation\\\">/></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  Wrapper<span class=\\\"token punctuation\\\">.</span>contextTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">[</span>TOGGLE_CONTEXT<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>object<span class=\\\"token punctuation\\\">.</span>isRequired\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  Wrapper<span class=\\\"token punctuation\\\">.</span>displayName <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`withToggle(</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>Component<span class=\\\"token punctuation\\\">.</span>displayName <span class=\\\"token operator\\\">||</span> Component<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">)`</span></span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// Set wrapped component so that can be easily tested.</span>\\n  Wrapper<span class=\\\"token punctuation\\\">.</span>WrappedComponnet <span class=\\\"token operator\\\">=</span> Component<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> Wrapper<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"static-속성과-함께-사용하기\\\"><a href=\\\"#static-%EC%86%8D%EC%84%B1%EA%B3%BC-%ED%95%A8%EA%BB%98-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Static 속성과 함께 사용하기</h3>\\n<p>마지막으로 누군가 HOC를 이용해서 또 다른 Compound component를 만들었을 때 그 컴포넌트는 제대로 표현되지 않을 것이다. HOC 안에서 일일이 Static 속성을 지정해주어야 할 텐데 현실적으로 불가능하다. 그래서 React에서 기본적으로 사용하고 있는 속성을 제외한 이름의 속성을 끌어올려주는 라이브러리(hoist-non-react-statics)를 사용한다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">withToggle</span><span class=\\\"token punctuation\\\">(</span>Component<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Wrapper</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> innerRef<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>props <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> context<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> toggleContext <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">[</span>TOGGLE_CONTEXT<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Component</span>\\n        <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">props</span><span class=\\\"token punctuation\\\">}</span></span>\\n        <span class=\\\"token attr-name\\\">ref</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>innerRef<span class=\\\"token punctuation\\\">}</span></span>\\n        <span class=\\\"token attr-name\\\">toggle</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>toggleContext<span class=\\\"token punctuation\\\">}</span></span>\\n      <span class=\\\"token punctuation\\\">/></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  Wrapper<span class=\\\"token punctuation\\\">.</span>contextTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">[</span>TOGGLE_CONTEXT<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>object<span class=\\\"token punctuation\\\">.</span>isRequired\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  Wrapper<span class=\\\"token punctuation\\\">.</span>displayName <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`withToggle(</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>Component<span class=\\\"token punctuation\\\">.</span>displayName <span class=\\\"token operator\\\">||</span> Component<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">)`</span></span><span class=\\\"token punctuation\\\">;</span>\\n  Wrapper<span class=\\\"token punctuation\\\">.</span>WrappedComponnet <span class=\\\"token operator\\\">=</span> Component<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// use host-non-react-static library</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">hoistNonReactStatics</span><span class=\\\"token punctuation\\\">(</span>Wrapper<span class=\\\"token punctuation\\\">,</span> Component<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyToggle</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">static</span> ToggleMessage <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">withToggle</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> toggle<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> on <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n      on\\n        <span class=\\\"token operator\\\">?</span> <span class=\\\"token string\\\">'Warning: The button is toggled on'</span>\\n        <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> toggle<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> on<span class=\\\"token punctuation\\\">,</span> toggle <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span> <span class=\\\"token attr-name\\\">onClick</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>toggle<span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token punctuation\\\">{</span>on <span class=\\\"token operator\\\">?</span> <span class=\\\"token string\\\">'on'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'off'</span><span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<hr>\\n<h2 id=\\\"render-props\\\"><a href=\\\"#render-props\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Render props</h2>\\n<p>앞서 해결한 많은 양의 HOC 문제를 Render props를 사용하면 별 문제 없이 해결할 수 있다. 물론 만능은 아니지만, 확연한 차이점은 앞에서 해결한 Compound 컴포넌트의 Context 문제, Wrapper의 속성 지정 같은 문제들로부터 자유로워진다는 점이다.</p>\\n<ul>\\n<li>\\n<p>HOC</p>\\n<ul>\\n<li>필요한 컴포넌트를 일일이 다 HOC로 감싸주어야 한다</li>\\n<li>Static 속성의 문제</li>\\n<li>HOC가 중첩될 경우 문제가 생길 때 디버깅이 어렵다</li>\\n<li>중간에 추가적인 속성이 들어갈 경우 일일이 HOC의 구현을 살펴보아야 한다</li>\\n<li>Typescript, Flow 등의 도움을 받기 힘들다</li>\\n<li>컴포넌트의 조합이 <code>render</code> 메서드 전에 발생한다 -> 때문에 동적인 상태를 활용할 때 Context 같은 부가적인 작업이 필요하다</li>\\n</ul>\\n</li>\\n<li>\\n<p>Render Props</p>\\n<ul>\\n<li>위에 제기된 문제로부터 자유롭다</li>\\n<li>컴포넌트의 조합이 일반적인 <code>render</code> 메서드 시점에서 발생하기 때문에 동적인 조합을 만들어내기 쉽다</li>\\n</ul>\\n</li>\\n</ul>\\n<h3 id=\\\"prop-collections-만들어서-재사용성-높이기\\\"><a href=\\\"#prop-collections-%EB%A7%8C%EB%93%A4%EC%96%B4%EC%84%9C-%EC%9E%AC%EC%82%AC%EC%9A%A9%EC%84%B1-%EB%86%92%EC%9D%B4%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Prop Collections 만들어서 재사용성 높이기</h3>\\n<p>Render props 안의 여러 컴포넌트에게 같은 속성을 주입해주고자 할 때는 감싸는 컴포넌트에서 컬렉션을 만들어서 전달해주면 된다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Toggle</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> on<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function-variable function\\\">toggle</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> \\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> on <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> on<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">!</span>on <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">onToggle</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>on<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      on<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>on<span class=\\\"token punctuation\\\">,</span>\\n      toggle<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>toggle<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token comment\\\">// 여러 하위 컴포넌트에 공통되는 속성을 한꺼번에 넘겨주기 위해 사용</span>\\n      togglerProps<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token string\\\">'aria-expanded'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>on<span class=\\\"token punctuation\\\">,</span>\\n        onClick<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>toggle\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">App</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>Toggle\\n      onToggle<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>on <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'toggle'</span><span class=\\\"token punctuation\\\">,</span> on<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n      render<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> on<span class=\\\"token punctuation\\\">,</span> toggle<span class=\\\"token punctuation\\\">,</span> togglerProps <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Switch</span> <span class=\\\"token attr-name\\\">on</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>on<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">togglerProps</span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>hr</span> <span class=\\\"token punctuation\\\">/></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span> <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">togglerProps</span><span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token punctuation\\\">{</span>on <span class=\\\"token operator\\\">?</span> <span class=\\\"token string\\\">'on'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'off'</span><span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"prop-getters-만들기\\\"><a href=\\\"#prop-getters-%EB%A7%8C%EB%93%A4%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Prop Getters 만들기</h3>\\n<p><code>togglerProps</code> 에 이미 정의된 속성(함수)에 별도의 추가 동작과 속성을 얹으려면 별도의 함수를 만들어야 한다. Props Getter 패턴으로 불리는 것 같다. 먼저 <code>getTogglerProps</code> 함수를 만들어보고 거기에 기존 toggle 동작 이전에 alert을 띄우도록 만들어본다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token comment\\\">// ... Toggle Class</span>\\n  <span class=\\\"token function-variable function\\\">getTogglerProps</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> onClick<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>props <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">'aria-expanded'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>on<span class=\\\"token punctuation\\\">,</span>\\n    onClick<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>args<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">onClick</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>args<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toggle</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>args<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token operator\\\">...</span>props\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      on<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>on<span class=\\\"token punctuation\\\">,</span>\\n      toggle<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>toggle<span class=\\\"token punctuation\\\">,</span>\\n      getTogglerProps<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>getTogglerProps\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">App</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>Toggle\\n      onToggle<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>on <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'toggle'</span><span class=\\\"token punctuation\\\">,</span> on<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n      render<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> on<span class=\\\"token punctuation\\\">,</span> toggle<span class=\\\"token punctuation\\\">,</span> getTogglerProps <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n          <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/* 이 Switch 버튼은 클릭 시 동작하지 않는다. onClick이 정의되어있지 않으니까. */</span><span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token operator\\\">&lt;</span>Switch on<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>on<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span><span class=\\\"token function\\\">getTogglerProps</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>hr</span> <span class=\\\"token punctuation\\\">/></span></span>\\n          <span class=\\\"token operator\\\">&lt;</span>button <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span><span class=\\\"token function\\\">getTogglerProps</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n            onClick<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'HI'</span><span class=\\\"token punctuation\\\">)</span>\\n          <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token punctuation\\\">{</span>on <span class=\\\"token operator\\\">?</span> <span class=\\\"token string\\\">'on'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'off'</span><span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p><code>Switch</code> 컴포넌트는 <code>onClick</code> 에 새 함수를 조합할 필요가 없었기 때문에 아무 값도 넣지 않았는데, 문제가 발생했다. <code>getTogglerProps</code>  함수가 실행시킬 <code>onClick</code> 이 없어서 에러가 나는 것이다. 간단히 문제를 해결하려면 <code>onClick &#x26;&#x26; onClick()</code> 같은 방식으로 해결할 수 있지만 매번 이런 식의 코드를 넣어줄 수는 없다. 그래서 별도로  <code>compose</code> 함수를 만들어 적용하면 된다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">compose</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>fns<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>args<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> fns<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span>fn <span class=\\\"token operator\\\">=></span> fn <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>args<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token function-variable function\\\">getTogglerProps</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> onClick<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>props <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// ...</span>\\n    onClick<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">compose</span><span class=\\\"token punctuation\\\">(</span>onClick<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>toggle<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"초기-상태-설정하기\\\"><a href=\\\"#%EC%B4%88%EA%B8%B0-%EC%83%81%ED%83%9C-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>초기 상태 설정하기</h3>\\n<p>이번에는 토글 하고 나서 리셋 버튼을 만들고자 한다. 리셋을 하려면 기본이 되는 상태를 가지고 있어야 할텐데 컴포넌트 내부에 기본 상태를 지정해두는 것 보다 속성으로 내려받도록 해야 더 유연한 구현을 할 수 있다. 또한 그 속성을 <code>initialState</code> 같은 맴버 변수로 보관하고 있으면 컴포넌트에 메서드를 정의할 때 ‘초기 상태로 되돌릴 필요가 있다면’ 언제든지 이 변수를 가져다 쓰면 된다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Toggle</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">static</span> defaultProps <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    defaultOn<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n    onToggle<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    onReset<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  initialState <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> on<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>defaultOn <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  state <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>initialState<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function-variable function\\\">reset</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>initialState<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">onReset</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>on<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"controlled-props-설정하기\\\"><a href=\\\"#controlled-props-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Controlled Props 설정하기</h3>\\n<p>특정 상태를 컴포넌트 외부에서 다룰지 내부에서 다룰지 조절할 수도 있다. 외부에서 다루어질 경우 Controlled props라고 한다.</p>\\n<p>같은 컴포넌트를 재사용하는데 어떤 컴포넌트는 사용자가 4번 클릭하면 동작하지 않도록 막고, 어떤 컴포넌트는 경고만 띄운 채로 계속 동작할 수 있도록  만든다고 가정해보자. 그러면 부모 컴포넌트에 별도의 상태를 정의한 뒤 자손 컴포넌트에 상태를 주입할 경우에는 동작을 제어하고, 그렇지 않은 경우 자손 컴포넌트의 자체 상태를 이용하게 만들 수 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token comment\\\">// Toogle 컴포넌트</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token function-variable function\\\">isOnControlled</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>on <span class=\\\"token operator\\\">!==</span> undefined<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// 부모 컴포넌트로부터 상태를 받았는지 아닌지에 따라 다른 행동 정의</span>\\n  <span class=\\\"token function-variable function\\\">reset</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isOnControlled</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">onReset</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>on<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>initialState<span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">onReset</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>on<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n\\n<span class=\\\"token comment\\\">// App 컴포넌트</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">App</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  initialState <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> timesClicked<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> on<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  state <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>initialState<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function-variable function\\\">handleToggle</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> timesClicked<span class=\\\"token punctuation\\\">,</span> on <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      timesClicked<span class=\\\"token punctuation\\\">:</span> timesClicked <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n      on<span class=\\\"token punctuation\\\">:</span> timesClicked <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">4</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">!</span>on\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function-variable function\\\">handleReset</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>initialState<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> timesClicked<span class=\\\"token punctuation\\\">,</span> on <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>Toggle\\n        <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/* on이 있으면 부모가 통제, 없으면 자손이 통제 */</span><span class=\\\"token punctuation\\\">}</span>\\n        on<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>on<span class=\\\"token punctuation\\\">}</span> \\n        onToggle<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleToggle<span class=\\\"token punctuation\\\">}</span>\\n        onReset<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleReset<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"provider-컴포넌트-만들기\\\"><a href=\\\"#provider-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Provider 컴포넌트 만들기</h3>\\n<p>애플리케이션의 규모가 더 커져서 컴포넌트는 여러개로 나누었는데, <code>toggle</code> 속성을 일일이 주입해주는 구현을 해 버렸다고 할 때, 리팩터링을 하기 위해서 다시 한번 Context가 등장한다. 이번에는 HOC로 감싸는게 아니라 Render props를 이용해서 Provider를 만든다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token comment\\\">// Provider 정의</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ToggleProvider</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">static</span> contextName <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'__toggle__'</span>\\n  <span class=\\\"token keyword\\\">static</span> Renderer <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">extends</span> React<span class=\\\"token punctuation\\\">.</span>Component <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">static</span> childContextTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token punctuation\\\">[</span>ToggleProvider<span class=\\\"token punctuation\\\">.</span>contextName<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span>\\n        PropTypes<span class=\\\"token punctuation\\\">.</span>object<span class=\\\"token punctuation\\\">.</span>isRequired<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">getChildContext</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token punctuation\\\">[</span>ToggleProvider<span class=\\\"token punctuation\\\">.</span>contextName<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props\\n          <span class=\\\"token punctuation\\\">.</span>toggle<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>children\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span>\\n      children<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token operator\\\">...</span>remainingProps\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Toggle</span>\\n        <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">remainingProps</span><span class=\\\"token punctuation\\\">}</span></span>\\n        <span class=\\\"token attr-name\\\">render</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>toggle <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n          <span class=\\\"token operator\\\">&lt;</span>ToggleProvider<span class=\\\"token punctuation\\\">.</span>Renderer\\n            toggle<span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>toggle<span class=\\\"token punctuation\\\">}</span>\\n            children<span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>children<span class=\\\"token punctuation\\\">}</span></span>\\n          <span class=\\\"token punctuation\\\">/></span></span>\\n        <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// Toggle 속성과 연결  </span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">ConnectedToggle</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">,</span> context<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n    context<span class=\\\"token punctuation\\\">[</span>ToggleProvider<span class=\\\"token punctuation\\\">.</span>contextName<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nConnectedToggle<span class=\\\"token punctuation\\\">.</span>contextTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token punctuation\\\">[</span>ToggleProvider<span class=\\\"token punctuation\\\">.</span>contextName<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span>\\n    PropTypes<span class=\\\"token punctuation\\\">.</span>object<span class=\\\"token punctuation\\\">.</span>isRequired<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token comment\\\">// 컴포넌트와 연결하는 방법</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Title</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token operator\\\">&lt;</span>ConnectedToggle\\n          render<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>toggle <span class=\\\"token operator\\\">=></span>\\n            <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`Who is </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>toggle<span class=\\\"token punctuation\\\">.</span>on\\n              <span class=\\\"token operator\\\">?</span> <span class=\\\"token string\\\">'🕶❓'</span>\\n              <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'awesome?'</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Subtitle</span> <span class=\\\"token punctuation\\\">/></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>실제 구현에서는 컴포넌트 최상단에서 <code>ToggleProvider</code> 로 감싸두었기 때문에 <code>ConnectedToggle</code> 컴포넌트를 사용할 시 자연스럽게 Context에 접근할 수 있다.</p>\\n<h3 id=\\\"자손-컴포넌트의-리랜더링rerendering과-shouldcomponentupdate\\\"><a href=\\\"#%EC%9E%90%EC%86%90-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%EB%A6%AC%EB%9E%9C%EB%8D%94%EB%A7%81rerendering%EA%B3%BC-shouldcomponentupdate\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>자손 컴포넌트의 리랜더링(Rerendering)과 shouldComponentUpdate</h3>\\n<p>리액트의 퍼포먼스에서 제일 신경써야 할 점은 컴포넌트가 업데이트되면서 화면을 다시 그리는 일을 최소화하는 것이다. <code>shouldComponentUpdate</code> 라이프사이클 훅을 사용하는 방법이 가장 일반적이겠지만 Provider로 감싸진 컴포넌트에 사용하면 예기치 못한 결과를 초래할 수 있다. <a href=\\\"https://github.com/ReactTraining/react-broadcast\\\">react-broadcast</a> 라이브러리를 사용하여 채널을 설정하고, 값을 설정하면 새로 내려지는 값이 변화했는지 아닌지에 따라 랜더링을 제어해준다.</p>\\n<hr>\\n<p>강좌 마지막에는 Redux와 Redner props를 함께 활용하는 방법 등이 있었지만 바로 이해가 되지 않아서 나중에 활용 가능할 때 업데이트 할 예정이다. 또한 Provider 패턴에 들어서면서도 내용이 조금 복잡해져서 잘못 정리된 정보를 전달할 수 있는 여지가 있으니 글 내용이 확실해보이지 않을 경우 강좌를 참고하기 바란다.</p>\",\"id\":\"/Users/rinae/Dev/blog/src/pages/posts/2017-12-10-advanced-react-component-patterns-summary/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-12-10\",\"path\":\"/posts/advanced-react-component-patterns-summary\",\"title\":\"Advanced React Component Patterns 내용 정리\",\"tags\":[\"React\"],\"category\":\"React\"}},{\"excerpt\":\"새로운 도전의 시작 올 여름 이런저런 일을 겪고 나서, 많은 고민 끝에 한동안 프론트엔드 개발자로 커리어를 쌓아가기로 결정하였습니다. 이전에는 루비 백엔드를 기반으로 한 그냥저냥한 웹 개발자였습니다만.. 오랫동안 업무에서 루비를 쓸 일이 없겠네요. (물론 여전히 루비라는 언어 자체는 사랑하고 관심은 계속 가지고 있습니다) 기존에도 프론트엔드 라이브러리로 React와 Vue.js…\",\"html\":\"<h2 id=\\\"새로운-도전의-시작\\\"><a href=\\\"#%EC%83%88%EB%A1%9C%EC%9A%B4-%EB%8F%84%EC%A0%84%EC%9D%98-%EC%8B%9C%EC%9E%91\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>새로운 도전의 시작</h2>\\n<p>올 여름 이런저런 일을 겪고 나서, 많은 고민 끝에 한동안 프론트엔드 개발자로 커리어를 쌓아가기로 결정하였습니다. 이전에는 루비 백엔드를 기반으로 한 그냥저냥한 웹 개발자였습니다만.. 오랫동안 업무에서 루비를 쓸 일이 없겠네요. (물론 여전히 루비라는 언어 자체는 사랑하고 관심은 계속 가지고 있습니다)</p>\\n<p>기존에도 프론트엔드 라이브러리로 React와 Vue.js에 많은 관심을 가지고 있었는데, 이제 본격적으로 리액트를 업무에 사용하게 되었기 때문에 <strong>리액트로 뭘 만들어볼까?</strong> 하다가 가장 만만한 블로그부터 다시 만들어 보기로 결심했습니다. 블로그를 만들고자 했던 이유는 몇 가지 더 있었습니다.</p>\\n<ol>\\n<li>기왕 하는거 간단한 디자인 및 프로토타이핑까지 하여 하나의 사이트 개발을 처음부터 끝까지 직접 해 보고 싶다.</li>\\n<li>기존 블로그는 테마를 바로 가져다 썼는데, 충분히 좋지만 불필요한 요소나 레이아웃을 걷어내고 최대한 간소하게 만들어보고 싶다.</li>\\n<li>간소하게 만들면서 관리 및 유지보수가 더 원활한 형태로 재구성하고 싶다.</li>\\n</ol>\\n<p>결론부터 말씀드리자면 1번은 절반의 성공만 거두고 나머지는 성공했습니다. 종이에다 어떤 모양이 나와야하는지 그려본 뒤에, 그 모습을 실제 코드로 옮기는데 성공했지만 CSS를 밑바닥부터 그려낼 실력은 되지 않아 <a href=\\\"https://bulma.io\\\">Bulma</a>를 활용하여 만들었습니다.</p>\\n<p>그러면 2, 3번은 어떻게 달성했을까요?</p>\\n<h2 id=\\\"gatsby를-만나다\\\"><a href=\\\"#gatsby%EB%A5%BC-%EB%A7%8C%EB%82%98%EB%8B%A4\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Gatsby를 만나다</h2>\\n<p>이전에 ‘리액트를 학습하는 과정’ 을 안내하는 포스팅을 읽은 적이 있는데 <em>기본을 익혔다면 <a href=\\\"https://www.gatsbyjs.org\\\">Gatsby</a>같은 리액트 기반의 정적 페이지 생성기를 사용하여 리액트를 연습해보라</em> 라는 내용이 적혀있더군요. <strong>어떻게 리액트로 정적 페이지를 만들 수 있을까?</strong> 하며 궁금해하면서 이름을 기억해두고 있었습니다.</p>\\n<p>보통 정적 페이지 생성기를 사용하여 블로그를 만든다고 하면 루비를 이용한 <a href=\\\"https://jekyllrb.com\\\">Jekyll</a>과 Node.js를 이용한 <a href=\\\"https://hexo.io\\\">Hexo</a> 등을 사용하게 됩니다. 각각의 포스팅을 마크다운으로 작성하고 생성기가 이를 html 파일로 변환해주며, 특정 정보가 삽입되어야 할 때(날짜, 사용자가 직접 입력한 정보 등)는 템플릿 엔진이 페이지 생성을 도와주는 형식으로 되어 있습니다.</p>\\n<p>그런데 당시 제가 아는 수준에서 리액트로 블로그를 만드는 것은 굉장히 기술을 과하게 사용하는 일이었습니다. 먼저 블로그를 정말 메모장 대신으로 쓸 것이 아니면 검색 엔진에 노출 되는 것이 좋다고 생각하는데, 리액트로 SPA(Single Page Application)을 제작하게되면 검색엔진 봇이 내용을 수집하기 힘듭니다. 아니면 별도로 라우팅과 SSR(Server Side Rendering)을 구성해야 합니다.</p>\\n<p>하지만 Gatsby의 도움을 받으면 비교적 간단하게 리액트를 활용하여 빠르고 유연한 정적 페이지를 생성할 수 있습니다. Gatsby를 활용할 때 생기는 장점 소개는 공식 사이트의 소개와 <a href=\\\"https://blog.scottnonnenberg.com/static-site-generation-with-gatsby-js/\\\">이 포스팅</a>으로 가볍게 미루겠습니다.</p>\\n<p><strong>여담이지만 이번에 Facebook에서 React 16 발매와 함께 <a href=\\\"https://reactjs.org\\\">웹사이트</a>를 개편할 때 Gatsby를 사용했습니다</strong> 😏</p>\\n<p>제가 블로그를 다시 만들면서 했던 일들은 기본적인 프로젝트 설정을 한 뒤에, 일반적인 리액트 애플리케이션 만들듯이 컴포넌트를 작성하고 배포 커맨드를 입력한 정도밖에 되지 않았습니다. (실제로는 자잘한 작업들이 더 있긴 했지만 큰 틀은 이렇습니다) 이제부터 실제로 이 블로그를 제작한 과정 일부와 문제 해결 과정을 코드와 함께 소개해 드리겠습니다.</p>\\n<p><strong>아래 내용을 보시기에 앞서 <a href=\\\"https://www.gatsbyjs.org/tutorial/\\\">Gatsby 공식 튜토리얼</a>을 참고하시기 바랍니다. 대부분은 공식 튜토리얼에서 사용한 코드 및 Gatsby로 만들어진 블로그의 코드 일부를 참고하였습니다.</strong></p>\\n<p><strong>또한 아래에 정리하는 내용은 기초 수준 이상의 리액트 라이브러리의 이해를 전제로 작성하였습니다.</strong></p>\\n<h2 id=\\\"프로젝트-설정\\\"><a href=\\\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%84%A4%EC%A0%95\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>프로젝트 설정</h2>\\n<p>먼저 이 블로그를 만들기 시작한 시점의 로컬 개발환경은 다음과 같습니다</p>\\n<ul>\\n<li><strong>Yarn</strong>: <code>1.1.0</code> (npm은 사용하지 않았습니다)</li>\\n<li><strong>Node.js</strong>: <code>8.6.0</code></li>\\n</ul>\\n<p>핵심은 이 둘이고 나머지는 필요한 패키지만 설치하면 가능한 한 최신 버전으로 유지하시면서 개발하시면 됩니다.</p>\\n<h3 id=\\\"gatsby-프로젝트-생성\\\"><a href=\\\"#gatsby-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Gatsby 프로젝트 생성</h3>\\n<p>먼저 Gatsby의 CLI를 설치합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>yarn global add gatsby-cli</code></pre>\\n      </div>\\n<p>그리고 레일즈 등의 프로젝트를 생성하듯이 터미널에 명령어를 <code>gatsby new blog</code> 명령어를 입력하시면 되는데, 만약 마음에 드는 Gatsby 스타터(보일러플레이트)를 발견하시면 Git 주소를 인자로 입력하실 수 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code># 빈 프로젝트 생성\\ngatsby new blog\\n\\n# 보일러플레이트 이용 예\\ngatsby new blog https://github.com/dschau/gatsby-blog-starter-kit</code></pre>\\n      </div>\\n<p>그리고 <code>blog</code> 폴더를 에디터로 열어 작업하시면 됩니다. 저는 Visual Studio Code를 사용했습니다.</p>\\n<h3 id=\\\"prettier-설정\\\"><a href=\\\"#prettier-%EC%84%A4%EC%A0%95\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Prettier 설정</h3>\\n<p>기존에는 프로젝트에 ESLint를 활용해서 코드 스타일을 유지했는데, <a href=\\\"https://github.com/prettier/prettier\\\">Prettier</a>를 활용하기 시작하면서 굳이 필요가 없게 되었습니다. 특히 이 트윗을 보고 나서 <code>prettier-eslint</code> 플러그인마저 필요 없다는 사실을 뒤늦게 깨달았습니다.</p>\\n<blockquote class=\\\"twitter-tweet\\\" data-lang=\\\"en\\\"><p lang=\\\"en\\\" dir=\\\"ltr\\\">PSA: I&#39;m no longer using prettier-eslint. I use raw prettier and disable all eslint style rules.<br><br>My life has been better ever since...</p>&mdash; Kent C. Dodds (@kentcdodds) <a href=\\\"https://twitter.com/kentcdodds/status/913760103118991361?ref_src=twsrc%5Etfw\\\">September 29, 2017</a></blockquote>\\n<script async src=\\\"//platform.twitter.com/widgets.js\\\" charset=\\\"utf-8\\\"></script>\\n<p>여러분들도 가독성있는 코드 스타일을 유지하는데 관심이 있으시다면 다음 설정을 참고해 보시기 바랍니다.\\n먼저 프로젝트에 Prettier를 추가합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>yarn add prettier --dev</code></pre>\\n      </div>\\n<p>VS Code 사용자 기준으로 다음 플러그인도 설치하셔야 합니다.</p>\\n<p><a href=\\\"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\\\">Prettier - JavaScript formatter - Visual Studio Marketplace</a></p>\\n<p>그리고 커맨드 팔레트(macOS기준 Cmd+Shift+P)를 열어 <code>Preferences: Open Workspace Settings</code> 를 선택하신 뒤에 Prettier 스타일 세팅 및 저장시 자동 적용을 활성화 하시면 됩니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code>// .vscode/settings.json\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"editor.formatOnSave\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"prettier.printWidth\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">100</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>저는 스타일 기본값을 사용하고 한 줄당 길이만 100이 되도록 설정하였습니다. 앞으로는 저장 시 자동으로 파일마다 Prettier가 작동하여 코드의 스타일을 다듬어줍니다.</p>\\n<h3 id=\\\"플러그인-설치\\\"><a href=\\\"#%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EC%84%A4%EC%B9%98\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>플러그인 설치</h3>\\n<p>Gatsby의 다양한 플러그인을 활용하여 사용자가 더 편하게 웹페이지를 제작할 수 있습니다. 특히 보통 리액트를 사용할 때 많이 활용하는 패키지와 Gatsby가 잘 결합되도록 따로 플러그인을 만들어 배포하고 있습니다. 예를 들어 <code>react-helmet</code> 을 사용하시려면 <code>gatsby-plugin-react-helmet</code> 플러그인을 설치하여 설정 파일에서 불러오도록 만들어야 합니다. 사용 가능한 플러그인 리스트는 <a href=\\\"https://www.gatsbyjs.org/docs/plugins/\\\">공식 문서</a>를 참고해주세요.</p>\\n<p>저는 제 블로그를 구현하기 위한 기능을 먼저 정의한 뒤에 필요한 부분만 플러그인을 추가 &#x26; 설정하였습니다.</p>\\n<ul>\\n<li>유동적으로 HTML <code>head</code> 태그가 바뀌어야 한다(제목 등) -> <code>gatsby-react-helmet</code></li>\\n<li>Sass(SCSS)를 사용한다 -> <code>gatsby-plugin-sass</code></li>\\n<li>\\n<p>(당연하지만) 본문에 마크다운을 사용한다 -> <code>gatsby-transformer-remark</code></p>\\n<ul>\\n<li>마크다운에 트위터 임베딩이 필요하다 -> <code>gatsby-plugin-twitter</code></li>\\n<li>마크다운에 Syntax highlighting이 필요하다 -> <code>gatsby-remark-prismjs</code></li>\\n<li>…</li>\\n</ul>\\n</li>\\n<li>…</li>\\n</ul>\\n<p>실제 적용된 플러그인의 전체 목록은 소스코드를 참고해 주시기 바랍니다.</p>\\n<p>플러그인은 프로젝트 폴더에 <code>gatsby-config.js</code> 파일을 만들어서 자바스크립트 객체로 내보내시면 됩니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// gatsby-config.js</span>\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  siteMetadata<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    siteUrl<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"https://emaren84.github.io\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    title<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"rinae's blog\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    description<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"about Translation, Ruby, Javascript, Practical Dev etc.\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  plugins<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token string\\\">\\\"gatsby-plugin-react-helmet\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"gatsby-plugin-catch-links\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"gatsby-plugin-sass\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"gatsby-plugin-styled-components\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"gatsby-plugin-twitter\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token comment\\\">// ...</span>\\n    <span class=\\\"token string\\\">\\\"gatsby-remark-responsive-iframe\\\"</span>\\n  <span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"실제-블로그-포스트를-가져오기\\\"><a href=\\\"#%EC%8B%A4%EC%A0%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%8F%AC%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>실제 블로그 포스트를 가져오기</h2>\\n<h3 id=\\\"프로젝트-폴더-구성\\\"><a href=\\\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%8F%B4%EB%8D%94-%EA%B5%AC%EC%84%B1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>프로젝트 폴더 구성</h3>\\n<p>Gatsby로 페이지를 작성하는데 필요한 폴더는 세 가지 입니다.</p>\\n<ul>\\n<li><code>src/layouts</code> - 페이지의 전반적인 레이아웃을 담당. 모든 개별 페이지가 이 폴더의 <code>index.js</code> 파일의 하위 컴포넌트로 동작함.</li>\\n<li><code>src/pages</code> - 개별 페이지를 담아두는 폴더. 블로그 포스트(마크다운)나 404, index 페이지를 작성</li>\\n<li><code>src/templates</code> - 반복되는 페이지의 템플릿을 저장 (예: 블로그 포스트의 템플릿)</li>\\n</ul>\\n<p>위 폴더의 구조는 얼마든지 사용자화 할 수 있습니다. 다만 저는 제시된 구조로 충분했기 때문에 특별히 변형하진 않았습니다. 추가적으로 재사용이 잦은 컴포넌트를 <code>src/components</code> 폴더에 정의하여 사용했습니다.</p>\\n<p>참고로 <code>src/pages</code> 폴더에 저장해 둔 마크다운 파일을 불러오기 위해서 약간의 설정이 필요합니다. 위에서 언급한 <code>gatsby-config.js</code> 파일에 다음 플러그인을 추가해야 합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// gatsby-config.js</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n\\tplugins<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n\\t\\t<span class=\\\"token comment\\\">// ...</span>\\n\\t\\t<span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\tresolve<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"gatsby-source-filesystem\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\t\\toptions<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t\\tpath<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>__dirname<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">/src/pages`</span></span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\t\\t\\tname<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"pages\\\"</span>\\n\\t\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\t<span class=\\\"token comment\\\">// ...</span>\\n\\t<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"기본-레이아웃-작성\\\"><a href=\\\"#%EA%B8%B0%EB%B3%B8-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83-%EC%9E%91%EC%84%B1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>기본 레이아웃 작성</h3>\\n<p><code>src/layout/index.js</code> 파일은 대부분의 리액트 프로젝트의 <code>index.html</code> 같은 파일입니다. 보통 <code>index.html</code> 파일에서 favicon, head 태그 등의 공통적인 내용을 정의한 뒤에 ReactDOM이 랜더링될 위치를 지정해 주지요.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token keyword\\\">import</span> React<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> Component <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"react\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> PropTypes <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"prop-types\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> Link <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"gatsby-link\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> Helmet <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"react-helmet\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// import styles</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token string\\\">\\\"typeface-noto-sans\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token string\\\">\\\"bulma\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token string\\\">\\\"mdi/scss/materialdesignicons.scss\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token string\\\">\\\"prismjs/themes/prism-solarizedlight.css\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token string\\\">\\\"./layout-style.scss\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> favicon <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"../assets/favicon.ico\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// ...</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">TemplateWrapper</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> children <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Helmet</span><span class=\\\"token punctuation\\\">></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>meta</span> <span class=\\\"token attr-name\\\">charSet</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>utf-8<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>title</span><span class=\\\"token punctuation\\\">></span></span>Rinae's playground<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>title</span><span class=\\\"token punctuation\\\">></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>link</span> <span class=\\\"token attr-name\\\">rel</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>shortcut icon<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>favicon<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Helmet</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Header</span> <span class=\\\"token attr-name\\\">toggled</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>toggled<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token attr-name\\\">handleToggled</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleToggled<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token function\\\">children</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Footer</span> <span class=\\\"token punctuation\\\">/></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p><code>Helmet</code> 컴포넌트는 html의 <code>head</code> 태그를 생성해주는 역할을 합니다. 그리고 <code>Link</code> 컴포넌트는 react-router의 <code>Link</code> 컴포넌트와 거의 동일하게 작동합니다. 주로 특정 DOM 엘리먼트를 클릭하면 페이지 어디로 이동할지 지정해줄 때 사용합니다. 개발자 도구를 열어보면 <code>a</code>  태그가 랜더링되지만 페이지를 다시 불러오지 않고 미리 준비된 다른 컴포넌트와 바꿔치기 하는 방식으로 동작하나 봅니다.</p>\\n<p><code>props</code> 로 내려온 <code>children</code> 이 일반 페이지 컴포넌트들이 됩니다. 말 그대로 <code>src/layout/index.js</code> 는 모든 페이지들의 부모 컴포넌트가 된다고 이해하시면 되겠습니다.</p>\\n<h3 id=\\\"포스트-리스트-보여주기\\\"><a href=\\\"#%ED%8F%AC%EC%8A%A4%ED%8A%B8-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EB%B3%B4%EC%97%AC%EC%A3%BC%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>포스트 리스트 보여주기</h3>\\n<p>이번에는 <code>src/pages/index.js</code> 파일을 살펴보겠습니다. 이 페이지는 블로그에 접속하면 가장 처음 접하게 되는 페이지로, 모든 포스트를 리스트로 가져와서 최신 순서대로 나열해주는 역할을 합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token keyword\\\">import</span> React<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> Component <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"react\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> Link <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"gatsby-link\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> Hero <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"../components/Hero\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> PostList <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"../components/PostList\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">IndexPage</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> edges <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">.</span>allMarkdownRemark<span class=\\\"token punctuation\\\">.</span>edges<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> postsData <span class=\\\"token operator\\\">=</span> edges<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>edge <span class=\\\"token operator\\\">=></span> edge<span class=\\\"token punctuation\\\">.</span>node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Hero</span>\\n          <span class=\\\"token attr-name\\\">title</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>Welcome to my writing playground<span class=\\\"token punctuation\\\">\\\"</span></span>\\n          <span class=\\\"token attr-name\\\">subtitle</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>about Translation, Ruby, Javascript, Practical Dev etc.<span class=\\\"token punctuation\\\">\\\"</span></span>\\n        <span class=\\\"token punctuation\\\">/></span></span>\\n\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>container<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>columns<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>column is-10-mobile is-offset-1-mobile is-10-tablet is-offset-1-tablet<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n              <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>PostList</span> <span class=\\\"token attr-name\\\">postsData</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>postsData<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> IndexPage<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> pageQuery <span class=\\\"token operator\\\">=</span> graphql<span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n  query IndexQuery {\\n    allMarkdownRemark(limit: 1000, sort: { order: DESC, fields: [frontmatter___date] }) {\\n      edges {\\n        node {\\n          excerpt(pruneLength: 250)\\n          id\\n          frontmatter {\\n            title\\n            category\\n            date(formatString: \\\"YYYY/MM/DD\\\")\\n            path\\n          }\\n        }\\n      }\\n    }\\n  }\\n`</span></span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>파일 아래 부분에 <code>pageQuery</code>를 주목해주세요. <code>graphql</code>? 무슨 정적 사이트 생성기에 GraphQL을 쓰지? 라는 생각을 했는데, Gatsby에서 나름 효율적으로 사용자가 원하는 자료를 가져올 수 있도록 제공된 인터페이스를 사용하는 느낌이었습니다.</p>\\n<p>저도 GraphQL을 이름만 들어보고 실제로 사용해본 적은 한 번도 없었지만 공식 사이트의 튜토리얼을 참고해보고, Gatsby에서 제공하는 GraphQL IDE(개발 모드에서 <code>localhost:8000/___graphql</code>)로 여러가지 실험을 해 보니 필요한 만큼은 이해할 수 있었습니다. 당장 GraphQL에 익숙하지 않으시더라도 저 쿼리가 대강 어떤 자료를 가져오려고 하는 지 눈에 잘 들어올겁니다. 실제 리턴받는 데이터도 저 구조대로 자바스크립트 객체 형태를 가지고 있습니다.</p>\\n<hr>\\n<p>미처 설명드리지 못했지만 <code>frontmatter</code> 는 각각의 마크다운 파일 맨 처음에 작성하는 일종의 헤더로 다음과 같이 작성합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>---\\ntitle: \\\"Some title\\\"\\ncategory: \\\"Example\\\"\\ndate: \\\"2017/10/04\\\"\\npath: \\\"/posts/some-title\\\"\\n...\\n---</code></pre>\\n      </div>\\n<hr>\\n<p>쿼리하고 받은 데이터는 같은 파일에 작성된 리액트 컴포넌트에 <code>props</code>로 자동 설정됩니다. 그래서 <code>this.props.data.allMarkdownRemark</code> 처럼 사용할 수 있는 겁니다.</p>\\n<p>그런데 마크다운으로 작성된 블로그 포스트는 어떻게 리액트 컴포넌트로 표현해주어야 할까요? <code>http://blog.com/post/1</code> 같이 포스트마다 고유의 경로를 가져야 할 테고, 그러려면 <code>src/pages</code> 안에 각각의 포스트마다 컴포넌트를 작성해주어야 할까요? 다행히도 그렇게 복잡한 방식을 사용할 필요는 없습니다.</p>\\n<h3 id=\\\"블로그-포스트-생성하기\\\"><a href=\\\"#%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%8F%AC%EC%8A%A4%ED%8A%B8-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>블로그 포스트 생성하기</h3>\\n<p>Gatsby는 자체 Node API를 제공하여 페이지를 생성하거나 수정하는 작업을 처리할 수 있습니다. 리액트의  Lifecycle methods 처럼 페이지 생성부터 종료까지 다양한 시점에 걸쳐 설정을 할 수 있지만, 저는 <code>createPages</code> 메서드만 사용했습니다.</p>\\n<p>자세한 내용은 <a href=\\\"https://www.gatsbyjs.org/docs/creating-and-modifying-pages/\\\">공식 문서</a>를 참고해주세요. 또한 대부분 공식 튜토리얼 파트4에 소개되어있는 내용을 참고했습니다.</p>\\n<p>먼저 프로젝트 루트에 <code>gatsby-node.js</code> 파일을 생성합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// gatsby-node.js</span>\\n<span class=\\\"token keyword\\\">const</span> path <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"path\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nexports<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">createPages</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> boundActionCreators<span class=\\\"token punctuation\\\">,</span> graphql <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p><code>boundActionCreators</code> 는 Redux로 구현된 다양한 행동 모음집(액션 디스패처들)입니다. 우리는 여기서 <code>createPage</code> 액션 하나만 사용할 예정입니다. <code>graphql</code> 은 GraphQL 쿼리를 실행하고 그 결과를 프로미스로 리턴하는 함수입니다. <code>createPages</code> 함수 내부를 조금 더 자세히 살펴보겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// ...</span>\\nexports<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">createPages</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> boundActionCreators<span class=\\\"token punctuation\\\">,</span> graphql <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> createPage <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> boundActionCreators<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">const</span> blogPostTemplate <span class=\\\"token operator\\\">=</span> path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`src/templates/blog-post.js`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">graphql</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n    {\\n      allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }, limit: 1000) {\\n        edges {\\n          node {\\n            excerpt(pruneLength: 250)\\n            html\\n            id\\n            frontmatter {\\n              date\\n              path\\n              title\\n              tags\\n              category\\n            }\\n          }\\n        }\\n      }\\n    }\\n  `</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>result <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span>errors<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span>errors<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">return</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span>errors<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">const</span> posts <span class=\\\"token operator\\\">=</span> result<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">.</span>allMarkdownRemark<span class=\\\"token punctuation\\\">.</span>edges<span class=\\\"token punctuation\\\">;</span>\\n\\n    posts<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> node <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">createPage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n        path<span class=\\\"token punctuation\\\">:</span> node<span class=\\\"token punctuation\\\">.</span>frontmatter<span class=\\\"token punctuation\\\">.</span>path<span class=\\\"token punctuation\\\">,</span>\\n        component<span class=\\\"token punctuation\\\">:</span> blogPostTemplate<span class=\\\"token punctuation\\\">,</span>\\n        context<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p><code>blogPostTemplate</code> 는 블로그 포스트를 표현하기 위한 리액트 컴포넌트입니다. 조금 뒤에 살펴보겠습니다.</p>\\n<p><code>graphql</code> 함수가 쿼리를 하고 나온 결과는 <code>result.data</code> 에 담기게 되며 아까 <code>src/pages/index.js</code> 파일 안에서 GraphQL 쿼리 결과를 가져올 때랑 똑같이 다룰 수 있습니다.</p>\\n<p>그리고 <code>createPage</code> 라는 함수에 각각의 포스트를 인자로 넘기면 됩니다. <code>path</code> 속성은 어떤 URL로 생성될지, <code>component</code> 는 어떤 컴포넌트를 사용하여 페이지를 만들지 지정합니다. <code>context</code> 는 상황에 따라 사용자 임의의 속성을 지정해줄 수 있는 기능인데, 저는 굳이 사용하지 않았습니다.</p>\\n<p>중요한 점은 저 <code>path</code> 속성이 템플릿 컴포넌트로 넘어갈때 GraphQL의 인자로 사용된다는 것입니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token comment\\\">// src/templates/blog-post.js</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Template</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> data <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> markdownRemark<span class=\\\"token punctuation\\\">:</span> post <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> data<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> tags <span class=\\\"token operator\\\">=</span> post<span class=\\\"token punctuation\\\">.</span>frontmatter<span class=\\\"token punctuation\\\">.</span>tags<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>container<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>columns is-mobile<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>column is-10-mobile is-offset-1-mobile is-8-tablet is-offset-2-tablet is-8-desktop is-offset-2-desktop<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>content<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token operator\\\">&lt;</span>Helmet title<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>post<span class=\\\"token punctuation\\\">.</span>frontmatter<span class=\\\"token punctuation\\\">.</span>title<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> - Rinae's playground`</span></span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>post-title<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n              <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">{</span>post<span class=\\\"token punctuation\\\">.</span>frontmatter<span class=\\\"token punctuation\\\">.</span>title<span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span>\\n              <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>span</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>has-text-grey-light is-size-6<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">{</span>post<span class=\\\"token punctuation\\\">.</span>frontmatter<span class=\\\"token punctuation\\\">.</span>date<span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>span</span><span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">dangerouslySetInnerHTML</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span> __html<span class=\\\"token punctuation\\\">:</span> post<span class=\\\"token punctuation\\\">.</span>html <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>hr</span> <span class=\\\"token punctuation\\\">/></span></span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>TagList</span> <span class=\\\"token attr-name\\\">tags</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>tags<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>About</span> <span class=\\\"token punctuation\\\">/></span></span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>ButtonWrapper</span><span class=\\\"token punctuation\\\">></span></span>\\n              <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Link</span> <span class=\\\"token attr-name\\\">to</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>/<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>button is-info is-large<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n                <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>span</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>icon is-medium<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n                  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>i</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>mdi mdi-36px mdi-format-list-bulleted<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n                <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>span</span><span class=\\\"token punctuation\\\">></span></span>\\n                <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>span</span><span class=\\\"token punctuation\\\">></span></span>Back to All posts<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>span</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\" \\\"</span><span class=\\\"token punctuation\\\">}</span>\\n              <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Link</span><span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>ButtonWrapper</span><span class=\\\"token punctuation\\\">></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> pageQuery <span class=\\\"token operator\\\">=</span> graphql<span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n  query BlogPostByPath($path: String!) {\\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\\n      html\\n      frontmatter {\\n        date(formatString: \\\"YYYY/MM/DD\\\")\\n        path\\n        title\\n        tags\\n      }\\n    }\\n  }\\n`</span></span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p><code>pageQuery</code> 의 <code>graphql</code> 이 인자로 <code>$path</code> 를 받는데 아까 <code>createPage</code> 함수에서 가져온 <code>path</code> 속성을 의미합니다. 그리고 <code>$path</code> 를 이용하여 <strong>마크다운 파일 중에  frontmatter의 path가 <code>$path</code> 와 같은 노드를 검색하라</strong> 라는 쿼리를 전달할 수 있는 것입니다. 나머지는 그 데이터를 그대로 컴포넌트에 넘겨주기만 하면 됩니다.</p>\\n<p>그리고 마크다운 파일은 플러그인에 의해 자동으로 html로 변환되는데, 이 html을 <a href=\\\"https://reactjs.org/docs/dom-elements.html#dangerouslysetinnerhtml\\\"><code>dangerouslySetInnerHTML</code> 속성</a>을 사용해서 주입했습니다.</p>\\n<p>설명을 보시면서 생략된 부분이 많다고 느끼실 수 있지만, 앞서 언급한 공식 튜토리얼을 가볍게 진행해보시면 생각보다 쉽게 간단한 블로그정도는 만들 수 있다는 생각이 드실 겁니다.</p>\\n<h2 id=\\\"자잘한-문제-해결\\\"><a href=\\\"#%EC%9E%90%EC%9E%98%ED%95%9C-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>자잘한 문제 해결</h2>\\n<p>하지만 공식 문서에서는 미처 언급되지 않아 제가 약간 삽질을 하면서 해결했던 문제들이 있습니다. 기록 겸 이 글을 읽으시는 분들이 만약 같은 문제를 겪으실 때 쉽게 해결하실 수 있었으면 좋겠습니다.</p>\\n<h3 id=\\\"rss-feed-설정\\\"><a href=\\\"#rss-feed-%EC%84%A4%EC%A0%95\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>RSS Feed 설정</h3>\\n<p>Gatsby는 RSS Feed를 생성하는 플러그인을 제공합니다. 제 블로그가 아무리 대단한 내용이 없다 하더라도 RSS Feed를 제공하는 것은 기본 중의 기본이라 생각하여 설정하고 있었는데, 아무리 해도 <code>head</code> 태그에 <code>rss.xml</code> 파일이 제대로 된 경로로 설정되지 않았습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token comment\\\">&lt;!-- rss.xml의 경로가 절대경로로만 표시된다 --></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>link</span> <span class=\\\"token attr-name\\\">rel</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>alternate<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>application/rss+xml<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>/rss.xml<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n</code></pre>\\n      </div>\\n<p>이렇게 되면 제가 기존에 쓰던 블로그 주소인 <code>https://emaren84.github.io/blog</code> 를 사용할 경우 RSS Feed를 제공할 수 없게 됩니다. 왜냐면 <code>rss.xml</code> 의 위치는 <code>https://emaren84.github.io/rss.xml</code> 이 되어버리기 때문입니다.</p>\\n<p>플러그인 소스를 보니  <code>pathPrefix</code> 설정을 받아들이는 부분도 없고 무조건 절대경로로 파일을 생성하도록 되어있나봅니다.</p>\\n<p>결국 블로그 주소를 바꿔서 해결했지만.. 기존에 사용하던 지킬 테마에서는 피드 생성이 잘 되었다는 것을 생각해보면 나중에 수정되었으면 좋겠습니다.</p>\\n<h3 id=\\\"gif-파일-표시\\\"><a href=\\\"#gif-%ED%8C%8C%EC%9D%BC-%ED%91%9C%EC%8B%9C\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>GIF 파일 표시</h3>\\n<p>Gatsby의 remark-images 플러그인은 jpg, png 파일은 아주 잘 처리합니다. 다만 gif파일은 처리하지 않습니다. 보통 gif 파일을 쓸 일이 없긴 하지만, 몇몇 포스트에 gif파일을 사용하기 때문에 문제를 해결해야 했습니다.</p>\\n<p><code>gatsby-remark-copy-linked-files</code> 을 추가하면 문제는 해결됩니다. 이 플러그인은 PDF 파일 등의 링크를 제공할 때 사용하는 플러그인으로 생각하고 간과하고 있었는데, 이 플러그인을 설치한 채로 gif파일의 링크를 설정하니 잘 작동합니다.</p>\\n<h3 id=\\\"코드-블락의-css-오류\\\"><a href=\\\"#%EC%BD%94%EB%93%9C-%EB%B8%94%EB%9D%BD%EC%9D%98-css-%EC%98%A4%EB%A5%98\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>코드 블락의 CSS 오류</h3>\\n<p>개발 블로그를 작성하면서 가장 중요한게 코드의 표현인데, Gatsby로 블로그를 만들고 나니 일부 코드 블락이 이상하게 표현되었습니다. 처음에는 PrismJS 플러그인의 문제라고 생각했는데, 제가 이 블로그를 만들기 위해 사용한 CSS 프레임워크인 Bulma의 CSS와 일부 충돌하는 부분이 있었기 때문에 코드가 이상하게 나온 것이었습니다.</p>\\n<p>블로그 포스트 템플릿에 CSS를 추가하여 문제를 해결했습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token comment\\\">// resolve conflicts between bulma css preset and prismjs</span>\\n<span class=\\\"token selector\\\">pre[class*=\\\"language-\\\"] .tag,\\npre[class*=\\\"language-\\\"] .number </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">align-items</span><span class=\\\"token punctuation\\\">:</span> stretch<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> transparent<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-radius</span><span class=\\\"token punctuation\\\">:</span> 0<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">display</span><span class=\\\"token punctuation\\\">:</span> inline<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">font-size</span><span class=\\\"token punctuation\\\">:</span> 1em<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">justify-content</span><span class=\\\"token punctuation\\\">:</span> flex-start<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">line-height</span><span class=\\\"token punctuation\\\">:</span> normal<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">padding</span><span class=\\\"token punctuation\\\">:</span> 0<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">white-space</span><span class=\\\"token punctuation\\\">:</span> pre<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">margin-right</span><span class=\\\"token punctuation\\\">:</span> 0<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">min-width</span><span class=\\\"token punctuation\\\">:</span> auto<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">text-align</span><span class=\\\"token punctuation\\\">:</span> left<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">vertical-align</span><span class=\\\"token punctuation\\\">:</span> baseline<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<hr>\\n<p>제가 만든 블로그는 <a href=\\\"https://github.com/emaren84/gatsby-blog\\\">Github에 공개 되어 있습니다</a>. 커밋 로그를 조금 살펴보시면 블로그에서 미처 언급하지 못했던 제작과정을 참고하실 수 있습니다.</p>\\n<p><strong>참고자료</strong></p>\\n<ul>\\n<li><a href=\\\"https://www.gatsbyjs.org/tutorial/\\\">Gatsby Tutorial</a></li>\\n<li><a href=\\\"https://github.com/alxshelepenok/gatsby-starter-lumen\\\">GitHub - alxshelepenok/gatsby-starter-lumen: Lumen is a minimal, lightweight and mobile-first starter for creating blogs uses Gatsby</a></li>\\n<li><a href=\\\"https://dustinschau.com/blog/getting-started-with-gatsby\\\">Dustin Schau - Creating a Blog with Gatsby</a></li>\\n</ul>\",\"id\":\"/Users/rinae/Dev/blog/src/pages/posts/2017-10-05-creating-new-blog-with-gatsby/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-10-05\",\"path\":\"/posts/creating-new-blog-with-gatsby\",\"title\":\"Gatsby를 활용한 블로그 재구성\",\"tags\":[\"Markdown\",\"React\",\"GraphQL\"],\"category\":\"Gatsby\"}}],\"tagName\":\"React\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tags-react.json\n// module id = 441\n// module chunks = 84586273293571"],"sourceRoot":""}