{"pageContext":{"postsByTag":[{"excerpt":"3월은 별다른 글을 하나도 작성하지 않았다. 1…","html":"<p>3월은 별다른 글을 하나도 작성하지 않았다. 10년만에 피아노를 다시 쳐본다던가, 일본 여행을 다녀온다던가, 평소보다 더 열심히 게임에 몰두한다던가 개발 외적으로 신경쓸 것들이 조금씩 있었다.<br>\n앞으로도 개발 공부/수련과 개인적인 흥미를 어떤 수준까지 함께 끌고가느냐를 계속 고민하게 될 것이다. 나에게 주어진 시간은 한정되어 있고, 하루는 너무 짧다.</p>\n<h2 id=\"읽을거리---일반\"><a href=\"#%EC%9D%BD%EC%9D%84%EA%B1%B0%EB%A6%AC---%EC%9D%BC%EB%B0%98\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>읽을거리 - 일반</h2>\n<ul>\n<li><a href=\"https://brunch.co.kr/@windydog/213\">한국 이커머스에는 빌런이 산다</a> - 왜 우리나라 이커머스를 이용할 때 자잘하게 불편함이 있다고 느꼈는지 이 글을 통해 다시 한번 되짚어볼 수 있었다. 과연 더 나은 이커머스 서비스가 어떻게 나오게 될지 기대된다. 내가 만들고 싶은 기분은 들지 않는다만.</li>\n<li><a href=\"http://dbr.donga.com/article/view/1203/article_no/9045\">8시간 자리만 지키면 무슨 소용? 리모트 워크 핵심은 효율적 업무 진행</a> - 또 김태곤님의 글이다. 오토매틱 이전 회사와 지금 일하고 있는 오토매틱을 포함하여 8년이나 리모트 워크만 하고 계시고, 개인의 경험과 오토매틱이라는 조직이 어떻게 일하는지 상세한 컬럼을 작성해주셨다. 우리 회사는 여기서 서술하는 리모트 워크의 단계 중 3단계와 4단게 사이 쯤 위치해 있는 것 같은데, 아직 더 적극적으로 개선할 포인트가 많이 존재한다고 생각한다. 나의 경우는 더 적극적이고 효율적인 커뮤니케이션을 위해 고민하게 된다. 그와 더불어 문서화를 더 빠르고 철저히 하는 방법에는 어떤게 있을까 고민하고 있다.</li>\n<li><a href=\"https://muchtrans.com/translations/how-to-go-fast.ko.html\">어떻게 빨리 갈 수 있을까</a> - 작은 팀에서 어떻게 해야 번아웃 되지 않고 성공적으로 제품을 출시할 수 있을지 중요한 포인트를 짚어주는 글 번역</li>\n</ul>\n<h2 id=\"읽을거리---개발자\"><a href=\"#%EC%9D%BD%EC%9D%84%EA%B1%B0%EB%A6%AC---%EA%B0%9C%EB%B0%9C%EC%9E%90\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>읽을거리 - 개발자</h2>\n<ul>\n<li><a href=\"https://drive.google.com/file/d/1ELeCi_1UzCEkj-UDSLM44h9HcgGiDQrb/view?usp=sharing\">개발자의 글쓰기 - 김철수 님</a> - 페이스북에 공유되길래 한번 살펴보니까 원래 출판사에 출간하려고 제의헀던 책이 '시장성이 없다' 고 반려된 원고라고 한다.  처음에는 단순히 변수 명이나 주석 쓰는법에 대한 이야기를 하다가 점점 본격적으로 고객과 다른 개발자, 비지니스를 대상으로 한 개발자의 글쓰기를 다루고 있다. 한번 쯤 읽어볼 가치가 충분히 있는 원고라고 생각한다.</li>\n<li><a href=\"https://wikidocs.net/book/2184\">IT 기술 노트  - WikiDocs</a> - IT업계에서 오랫동안 몸담고 프로젝트 매니저 역할을 하고 계신 분이 IT 업계에서 필요한 기술 전반을 정리한 기술 노트. 0번째 장의 <em>아주 성차별적인 표현</em> 을 거르고 본다면 한번 복습하기 좋은 내용으로 채워져 있는 것 같다. </li>\n<li><a href=\"https://twitter.com/TBrianKight/status/1101849801640030209\">Brian Kight on Twitter: \"If you don’t know, go study.If you don’t understand, go ask.If you don’t have experience, go do.If you don’t have confidence, go practice.Don’t make simple things complex.#DoTheWork\"</a> - 트윗 내용이 인상깊어서 스크랩. 결국 고민만 하지 말고 직접 행동하라는 것이다.</li>\n<li><a href=\"https://m.blog.naver.com/jukrang/221479816946\">나는 그동안 무엇으로 성장했을까? : 네이버 블로그</a> - 단순히 기술을 좇던 시절에서 벗어나, 개발자로서 동료와 협업하고 고객을 위한 제품을 만들어야 한다는 것을 깨닫게 되기까지의 과정을 담담하게 풀어낸 글. 성장을 <strong>~\"다양한 사람의 의지가 뒤섞이는 개발이라는 큰 운동장에서, 본인의 역할을 질문하고 찾아가는 과정\"~</strong> 이라고 표현한 것이 아주 와닿았다.</li>\n<li>\n<p><a href=\"https://ariya.io/2013/09/fast-forward-git-merge\">Fast-Forward Git Merge · ariya.io</a> - 팀 동료가 우리 작업할 때 Fast-forward 머지가 아니라서 신경쓰인다는 말씀을 듣고 '그러고보니 FF라는 용어를 터미널에서 나오는 메세지 정도로만 보고 정확히 뭔지 모르고 쓰고있었네?' 라는 생각이 들어서 좀 더 자세히 찾아보다 발견한 글.</p>\n<ul>\n<li>\"In short, non fast-forward merge keeps the notion of <strong>explicit branches</strong> . It may complicate the commit history with its non-linear outcome at the price of preserving the <em>source</em> of the branches (pull requests, when using GitHub). On the other hand, fast-forward merge keeps the changesets in a <strong>linear history</strong>, making it easier to use other tools (log, blame, bisect). The source of each branch will not be obvious, although this is not a big deal if the project mandates the strict  <a href=\"https://ariya.io/2013/06/cross-reference-commit-message-and-issue-tracker\">cross-reference</a>  between the commit message and its issue tracker.\"</li>\n<li>FF 머지는 선형적으로 커밋이 이어지게 만들지만, 그렇지 않은 경우 외부 브랜치에 대한 내용을 추적하는 것으로 보인다. 특별히 외부 브랜치에 대한 크로스 체킹이 필요하지 않은 경우 FF 머지가 유리한 것으로 보인다.</li>\n</ul>\n</li>\n<li><a href=\"https://blog.fupfin.com/?p=188\">(번역) 기술자의 히포크라테스 선서 | 생각하고 나누고 공감하기...</a> - \"나는 개발자(기술자)로서 어떤 마음가짐으로 제품을 개발하고, 앞으로 나아가야 하는가?\" 라는 근본적인 질문에 다시 한번 생각할 거리를 주는 글.</li>\n<li><a href=\"https://brightparagon.wordpress.com/2019/03/31/thoughts-on-role-of-community/\">커뮤니티의 역할에 대한 단상 – brightparagon</a> - 작성자인 노경모님은 GDG Korea의 운영진으로 알고 있다. 커뮤니티를 운영하면서 다른 개발자들에게 길라잡이가 되어줄 만한 내용을 안내하는 이벤트가 부족했다는 내용을 성토하고 있다. 앞으로 GDG를 통해 어떤 이벤트가 더 열리게 될지 기대하게 된다. 나는 커뮤니티에 참여/혹은 기여를 어떻게 할 수 있고, 하고 있는지는 고민이 좀 더 필요하다.</li>\n<li><a href=\"https://medium.com/happyprogrammer-in-jeju/%ED%95%9C-%EB%8B%AC%EC%A7%9C%EB%A6%AC-%EA%B0%9C%EC%9D%B8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%9B%84%EA%B8%B0-dd440ad2cf9a\">한 달짜리 개인 프로젝트 후기 – HappyProgrammer – Medium</a> - 김대현님이 예전에 여유가 있을떄 한달 내내 몰입하여 사이드 프로젝트를 해보고자 했으나 생각보다 잘 되지 않았음을 반성하고, 대신 어떠어떠한 부분은 괜찮았으니 앞으로 나아가자는 내용. 자잘한 작업을 하더라도 각 작업을 되돌아보는 시간을 가지는 것은 중요하다는 것을 다시금 느꼈다.</li>\n</ul>\n<h2 id=\"프론트엔드\"><a href=\"#%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프론트엔드</h2>\n<ul>\n<li><a href=\"https://wit.nts-corp.com/2017/06/05/4571\">CSS 애니메이션 성능 개선 방법(reflow 최소화, will-change 사용) | WIT - NTS UIT Blog</a> - 요즘 애니메이션 구현에 대해 관심을 가지고 있어서 그런지 눈에 띄었다. 부드러운 애니메이션을 적용하려면 reflow, repaint를 최대한 줄여야 하며 어떤 속성이 연관되어있는지 알려주고 있다. <code class=\"language-text\">wll-change</code> 라는 속성으로 브라우저가 어떤 속성이 변화하고 이에 따라 애니메이션을 최적화해야하는지 미리 알려주는 속성도 있다고 한다. 하지만 결국 대응 브라우저의 한계와 마크업 구조의 한계로 더 좋은 방법을 사용하지 못하고 fade-in/out 형식의 애니메이션으로 바꾸었다는 슬픈 이야기로 마무리</li>\n<li><a href=\"https://overreacted.io/making-setinterval-declarative-with-react-hooks/\">Making setInterval Declarative with React Hooks — Overreacted</a> - <code class=\"language-text\">setInterval</code> 과 <code class=\"language-text\">useState</code> 를 같이 쓸 때 의도적으로 동작하지 않는데, 이를 해결하기 위해 <code class=\"language-text\">useInterval</code> 을 어떤 방식으로 구현했고 왜 이렇게 되었는지 친절하게 설명해주는 글. 임피던스 미스매치라는 용어를 굉장히 오랜만에 봐서 친숙한데 기본적으론 리액트의 프로그래밍 모델과 <code class=\"language-text\">setInterval</code> 이라는 명령형 API와는 커다란 간극이 있어 제대로 맞지 않는 것을 뜻한다. <code class=\"language-text\">useEffect</code> 의 처리 특성상 불필요한 리랜더가 계속 일어나거나, 적절히 제어를 시도하려 하면 오히려 인터벌이 실행되지 않는 것이다. 그래서 <code class=\"language-text\">useRef</code> 를 사용하는 방안을 보여주었고 깔끔하게 커스텀 훅으로 빼내는 과정까지 보여주면서 마무리한다.</li>\n<li><a href=\"https://taegon.kim/archives/9807\">스크롤과 관련된 CSS 속성 3가지 - 코드쓰는사람</a> - 김태곤님이 정리해주신 CSS의 스크롤 관련 속성. 지금은 데스크탑 파이어폭스와 크롬에서만 지원되거나 크롬과 사파리에서만 지원되는 속성이라 조금 아쉽긴 하지만 점진적 지원 측면에서 충분히 쓸만한 속성이다.</li>\n<li><a href=\"https://dev.to/ryands17/using-mobx-with-react-hooks-52h5\">Using MobX with React Hooks - DEV Community 👩‍💻👨‍💻</a> - 리액트 Hook API를 MobX와 어떻게 사용해야할지 짚어주는 글. 이번에 'MobX Quick Start Guide' 를 읽으면서 요즘 API 에 맞게 재구현해보고 있는데 이 글에서 짚어주는 포인트를 참고하여 좀 쉽게 접근할 수 있었다. 중요한 것 중에 하나가 <code class=\"language-text\">Provider</code>, <code class=\"language-text\">inject</code> 를 이용하지 않고 <code class=\"language-text\">createContext(storeInstance)</code> , <code class=\"language-text\">useContext</code> 를 활용하게 되었다는 것이다.</li>\n<li><a href=\"https://hackernoon.com/architecting-single-page-applications-b842ea633c2e\">The 4 Layers of Single Page Applications You Need to Know</a> - SPA를 만들 때 (혹은 프론트엔드 애플리케이션을 만들 때) 사용했던 4가지 레이어 구분에 대한 이야기. 약간 용어나 개념이 살짝 다르긴 하지만 이미 이런 방식대로 하고있지 않았나 싶다.</li>\n<li><a href=\"https://marksheet.io/html-semantics.html#dont-overthink-semantics\">HTML Semantics - Free tutorial to learn HTML and CSS</a> - 마지막 결론 부분 직링크. 우리가 시맨틱 태그를 사용한다고 할 때 너무 깊게 생각하지 말고 딱 이정도만으로도 어지간한 시맨틱 태그 구조화는 이루어낼 수 있다. 더 필요하면 그에 맞추어 생각하면 된다.</li>\n<li><a href=\"https://spectrum.chat/mobx-state-tree/general/reset-all-stores~17735a32-834c-4455-8b8e-cab20dbe00ba\">Reset All Stores? · mobx-state-tree community</a> - MST를 쓰면서 특정 조건에 스토어 리셋을 하고 싶은데 어떤 방식이 더 좋을까? 하고 이야기를 나누면서 찾아보다 나온 스레드. <code class=\"language-text\">afterCreate</code> 훅에다 스냅샷을 저장해놓고 그 스냅샷을 적용하는 방법 등 괜찮은 방법들이 여럿 있다.</li>\n<li>\n<p><a href=\"https://github.com/nareshbhatia/mobx-state-router\">GitHub - nareshbhatia/mobx-state-router: MobX-powered router for React apps</a> - Mobx + React-router 를 쓸 때 따로 관리해주어야 하는 불편함이 있는데다, 기존에 있는 mobx-react-router 라이브러리가 썩 만족스럽게 작동하지 않는 부분이 있어서 대체제를 찾다 보니 제일 괜찮아보이는 녀석. </p>\n<ul>\n<li><a href=\"https://github.com/nareshbhatia/mobx-shop\">GitHub - nareshbhatia/mobx-shop: Demo app for mobx-state-router and material-ui</a> - 위의 라이브러리를 활용한 예제 코드인데, 폴더 구조나 아키텍처가 나름 참고할만하게 되어있다. 페이지 단위(혹은 feature 단위)로 폴더를 구분해서 넣어놓고 <code class=\"language-text\">shared</code> 라는 폴더로 스토어나 공유 가능한 컴포넌트를 가져다가 조합해서 쓰고 있다.</li>\n</ul>\n</li>\n<li><a href=\"https://velog.io/@wickedev/%EB%B2%88%EC%97%AD-Didact-%EC%9E%90%EC%8B%A0%EB%A7%8C%EC%9D%98-%EB%A6%AC%EC%95%A1%ED%8A%B8%EB%A5%BC-%EB%A7%8C%EB%93%9C%EB%8A%94-DIY-%EA%B0%80%EC%9D%B4%EB%93%9C\">(번역) Didact: 자신만의 리액트를 만드는 DIY 가이드</a> - 리액트 아키텍처를 씹고 뜯고 맛보고 즐기고, 파이버까지 직접 구성해보는 DIY 가이드. 이전에 연재되었을 때 본 적이 있었고, 후속 업데이트를 기다리고 있었는데 딱히 별다른 소식은 없었나보다. 하지만 다행히도 다른 분이 번역을 해주셨고, 지금까지 연재된 분량이라도 차근차근 다시 살펴봐야겠다.</li>\n</ul>\n<h2 id=\"오픈-소스-프로젝트\"><a href=\"#%EC%98%A4%ED%94%88-%EC%86%8C%EC%8A%A4-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오픈 소스 프로젝트</h2>\n<ul>\n<li><a href=\"https://github.com/pikapkg/web\">GitHub - pikapkg/web: Install npm dependencies that run directly in the browser. No Browserify, Webpack or import maps required.</a> - NPM 패키지를 브라우저에서 바로 서빙할 수 있도록 만들어주는 플러그인. 단순히 unpkg 같은 서비스랑은 다른 것 같다. ES Module 시스템에 최적화되어있고, HTTP/2 에도 최적화되어있다. 앞으로 이런 식으로 패키지를 서빙할 수 있도록 생태계가 발전할 수록 우리의 웹 개발은 더욱 쉬워질 것이다. 하지만 <a href=\"https://www.pikapkg.com/about\">설명 페이지를 보면</a> 아직 많은 노드 모듈들이 CommonJS 기반으로 되어있어서 최적화된 에셋 제공이 어렵다고 한다.</li>\n<li><a href=\"https://github.com/cometkim/use-pulled-grid\">GitHub - cometkim/use-pulled-grid: A React hook provides responsive grid container style</a> - 혜성님이 만든 custom hook 인데 이미 적극적으로 hook을 사용하고 계셔서 그런지 어떻게 활용해야할지 좋은 참고가 되는 소스코드였다. 그리고 내가 반응형 그리드를 만든다고 할 때 어떻게 문제를 해결해야할지 조금 가이드가 되기도 했다. 여전히 모르는게 많다. 특히 CSS만의 영역이라고 생각하는 것을 JS로 함께 해결하는 것 등에 대해서 말이다.</li>\n<li><a href=\"https://github.com/RIP21/ts-get\">GitHub - RIP21/ts-get: Alternative to lodash.get that makes it typed and cool as if optional typing proposal is there</a> - <code class=\"language-text\">lodash.get</code> 을 타입세이프하게 사용할 수 있게 구현된 작은 라이브러리. TS 환경에서 굉장히 유용하게 사용할 수 있겠다.</li>\n</ul>\n<h2 id=\"도구\"><a href=\"#%EB%8F%84%EA%B5%AC\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도구</h2>\n<ul>\n<li><a href=\"https://www.gitpod.io\">Gitpod - Code Now!</a> - Github 저장소나 PR을 바로 웹 IDE로 열어보고 편집할 수 있게 만들어주는 서비스. 지금 베타 서비스라 오픈 소스 프로젝트에 한해서 1개월에 100시간 이용 가능한데, Gitlab도 사용가능하게 되면 한번 트라이얼로 써 보고 싶다.</li>\n<li><a href=\"https://github.com/lra/mackup\">GitHub - lra/mackup: Keep your applicatiodln settings in sync (OS X/Linux)</a> - 애플리케이션 설정까지 백업해주는 도구</li>\n<li><a href=\"https://github.com/Raathigesh/majestic/\">GitHub - Raathigesh/majestic: ⚡ Zero config GUI for Jest</a> - 예전에 별을 찍어두었던 라이브러리인데? 깔끔하게 만들어진 Jest GUI 클라이언트다. CRA 프로젝트 뿐 아니라 타입스크립트 프로젝트와도 잘 동작한다고 한다.</li>\n</ul>","id":"918d0d64-1f71-5ce1-937c-65e9e096fe1d","frontmatter":{"date":"2019-03-31","path":"/posts/this-month-i-learned-1903","title":"This Month I Learned - 2019년 2월","tags":["TIL","Learning","Reading","Programming","React"],"category":"This Month I Learned"}},{"excerpt":"읽을거리 - 일반 여행을 준비하는 처음부터 끝까지의 기록 | 생각노트  - 개발과 관련 없는 뉴스레터 중 유일하게 구독하는 생각노트. 글을 정말 잘 쓰시고, 글 곳곳에서 생각 정리를 위해 어떻게 도구를 활용하고 생산성을 끌어올리는지도 배울 수 있다. 마침 3월 말에 교토 방문 예정이라 더 관심있게 읽어봤는데 여행을 위해 얼마나 디테일하게 계획을 짤 수 있을지 좋은 참고가 되었다. 이번에는 Things…","html":"<h2 id=\"읽을거리---일반\"><a href=\"#%EC%9D%BD%EC%9D%84%EA%B1%B0%EB%A6%AC---%EC%9D%BC%EB%B0%98\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>읽을거리 - 일반</h2>\n<ul>\n<li><a href=\"https://insidestory.kr/21532\">여행을 준비하는 처음부터 끝까지의 기록 | 생각노트</a> - 개발과 관련 없는 뉴스레터 중 유일하게 구독하는 생각노트. 글을 정말 잘 쓰시고, 글 곳곳에서 생각 정리를 위해 어떻게 도구를 활용하고 생산성을 끌어올리는지도 배울 수 있다. 마침 3월 말에 교토 방문 예정이라 더 관심있게 읽어봤는데 여행을 위해 얼마나 디테일하게 계획을 짤 수 있을지 좋은 참고가 되었다. 이번에는 Things와 노션 사용에 대한 내용이 들어있었는데 Things 구입도 좀 땡기긴 한다.</li>\n</ul>\n<h2 id=\"읽을거리---개발자\"><a href=\"#%EC%9D%BD%EC%9D%84%EA%B1%B0%EB%A6%AC---%EA%B0%9C%EB%B0%9C%EC%9E%90\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>읽을거리 - 개발자</h2>\n<ul>\n<li>\n<p><a href=\"https://github.com/nhnent/fe.javascript/issues/43\">nhn엔터의 위키 폐쇄 이슈</a>와 <a href=\"https://github.com/nhnent/fe.javascript/issues/44\">재오픈 계획에 관한 문의</a></p>\n<ul>\n<li>특정 단체와 인물을 직접적으로 비방할 의도는 없지만, 한 가지는 확실히 하고 넘어가야겠다. nhn엔터측에서 지적 재산권에 대해 인지를 못하던 것을 원저작자의 이슈 제기 덕분에 전면적인 재검토를 위해 임시로 위키를 폐쇄한 것으로 보인다.</li>\n<li>그런데 재오픈 계획에 대한 문의라고 올라온 질문에서 <strong>\"라이센스를 하나하나 따져가며 공개여부를 정하실 일은 없을거라 추측하고 있으니\"</strong> 라는 말에 소름이 돋았다.</li>\n<li>나는 어디까지나 내 지적 만족을 위해 번역을 한다 해도, 원작자에게 라이센스 문의 및 번역에 관해 진중하게 질문했던 사람으로서 도저히 이해가 되지 않았기 때문이다. 오히려 허락을 구하는게 비정상일 지경이다.</li>\n<li>다른 사람이 공유하는 지식이나 소스 코드는 하늘에서 뚝 떨어지는게 아니라는 점을 인지하고 있지 않는 한 우리나라에서 지적 저작물(글, 소프트웨어 등)이 제 가치를 인정받고 올바르게 구입되는 문화가 더 잘 정착되기 어려울 것이라 생각한다. 소프트웨어를 만들고 판매하는 회사에 소속된 사람으로서 아주 무거운 기분이 들었다.</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://zeniuus.github.io/2019/02/06/difference-between-junior-and-senior/\">3개월 차 주니어가 느끼는 나와 시니어의 차이</a> - 3개월 차 주니어라 해도 카이스트 출신에 개발 이력도 꽤 있는 분이다. 회사 생활이 3개월 차일 뿐. 소제목만 봐도 전반적인 내용을 얻을 수 있도록 글도 잘 정리되어 있어서 보기 좋다. 특히 '코드가 돌아가는 환경의 아키텍처를 고려한다' 는 부분이 크게 와닿았다. 단순히 코드의 동작을 보장하는게 아니라 특정 환경에서 연결이 끊어지는 상황 같은 것도 고려한 로직을 작성할 필요에 대해서 역설한다. 도메인 지식에 대한 이야기도 그렇다. 결국 \"코드 너머를 보라\" 라는 말로 정리될 수 있겠다.</p>\n</li>\n<li>\n<p><a href=\"https://jbee.io/etc/intro-new-blog/\">블로그를 만들며 고려한 것들 (JBEE.io) | JBEE.io</a> - 한재엽님이 새 블로그를 만들면서 고려했던 점들 정리. 다음달에 블로그를 개편할 때 이 블로그에 사용된 테마를 기반으로 개편할 예정이다.</p>\n</li>\n<li>\n<p>김창준님의 ‘함께 자라기’ 책은 정말 좋은 책이다. 초급 개발자에게 ‘프로그래머의 길 멘토에게 묻다’, ‘소프트웨어 장인’ 과 함께 마인드셋 분야로 반드시 추천하고 싶은 책이다. 자세한 내용은 따로 포스팅 예정.</p>\n</li>\n<li>\n<p><a href=\"https://www.slipp.net/questions/433\">최근 구직, 구인 글을 보면서 느끼는 단상 :: SLiPP</a> / <a href=\"https://gyuwon.github.io/blog/2016/05/19/getting-hired-by-a-startup.html\">스타트업에 취업하기 | 프로그래머 이규원의 웹사이트</a> - 비슷한 주제이고 뒷 글에 앞 글 링크를 연결했기에 처음으로 두 개를 한 아이템으로 작성해본다. 겉을 핥지 말고 깊이 들어가서 기초를 다져야 개발자로서 커리어 수명을 연장할 수 있을 것이다. 단순히 오래 먹고 사는 문제 뿐 아니라 진정으로 어떤 개발자가 되고싶은지 고찰도 들어가게 될 테고.</p>\n</li>\n</ul>\n<h2 id=\"프론트엔드\"><a href=\"#%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프론트엔드</h2>\n<ul>\n<li>\n<p><a href=\"https://bitsofco.de/web-workers-vs-service-workers-vs-worklets/\">Web workers vs Service workers vs Worklets</a> - 아주 오랫동안 탭만 열어놓고 보지 않던 글(어딘가에 이미 TIL 아이템으로 등록되어 있을지도). 보통 서비스 워커라는 단어만 익숙했는데, 브라우저에서 별도의 스레드를 활용하는 워커들이 각각 어떤게 있고, 어떤 역할을 하는지 간단히 요약해준다. 이 블로그 자체도 꽤 좋은 설명을 많이 담아놓고 있어서 눈여겨 봐야겠다. </p>\n<ul>\n<li>Worklet - 브라우저의 랜더링 파이프라인 안에서 동작하기 때문에 개발자가 직접 스타일링이나 레이아웃 등의 과정에 손을 댈 수 있다. 대표적인 예가 후디니 API로 보이긴 하는데 확실하진 않다. JS로 그라디언트를 만들고, CSS에서 <code class=\"language-text\">background-image: paint(myGradient)</code> 같은 방식으로 호출하는게 가능하다.</li>\n<li>Service worker - 브라우저와 네트워크 사이의 프록시 역할을 담당한다. 도큐먼트에서 만들어진 요청을 가로채어 캐시를 제공하는 등 오프라인 활용이 가능하게 만들어준다. 이를 활용하여 PWA가 가능한 것이겠지.</li>\n<li>Web worker - 일반적인 용도의 스크립트로 활용된다. 메인 스레드에서 연산하기에 많이 오래 걸리는 연산을 여기서 대신 처리할 수 있다.</li>\n</ul>\n</li>\n<li><a href=\"https://developers.google.com/web/updates/2019/02/rendering-on-the-web\">Rendering on the Web  | Google Developers</a> - 현재 웹앱이 랜더링(실행)되는 방법 총망라. 각 방법에 대한 장단을 구분해 두었으며 페이지 마지막에 있는 표를 꼭 읽어보길 권장.</li>\n<li><a href=\"https://michel.codes/blogs/ui-as-an-afterthought\">UI as an afterthought</a> - MobX의 제작자가 프론트엔드 개발에 있어 데이터 중심의 사고가 필요하다는 것을 역설하는 글. 나도 전적으로 동감하고, 이렇게 개발을 하고 싶지만 지금 상태로는 데이터 설계가 잘못되어 UI 구현이 마냥 어려운 것 아닐까 하는 생각이 든다. UI 생각은 잠시 미뤄두고 비지니스 로직을 완전히 분리하고 특정 플랫폼에서만 동작하지 않도록 설계하는 것이다. - <a href=\"https://rinae.dev/posts/ui-as-an-afterthought-kr\">번역문</a></li>\n<li><a href=\"https://codepen.io/marvinhagemeister/pen/GqVKmw\">IE11 Pseudo Selector Bug</a> - IE 버그 수정하다가 버튼의 <code class=\"language-text\">::after</code> 엘리먼트가 잘려 나오는 현상이 있어서 살펴보니 다행히도 손쉽게 해결책을 찾을 수 있었다. IE에서 버튼의 <code class=\"language-text\">overflow</code> 기본값은 <code class=\"language-text\">hidden</code> 이어서 생긴 문제라고 한다.</li>\n<li><a href=\"https://twitter.com/siddharthkp/status/1094821277452234752?s=20\">Sid on Twitter: \"CSS tip!If you are adding border-radius on a container, don't forget to add overflow: hidden, otherwise content (especially images) can bleed out of the container… https://t.co/3n8j6UvIp8\"</a> - 어쩐지 약간 테두리를 둥글게 한 요소의 귀퉁이가 잘리는 것 처럼 보이더니만..</li>\n<li><a href=\"https://github.com/aholachek/react-animation-comparison\">GitHub - aholachek/react-animation-comparison: A tour of React animation libraries with a focus on developer experience</a> - 사이드 프로젝트에 애니메이션을 본격적으로 넣어볼까 하면서 몇 가지 리액트 애니메이션 라이브러리를 검색해 봤는데, 이 저장소에서 라이브러리를 비교하고 장단점을 분석해 두었다. 사용 예도 있어서 좋은 참고가 되었다. 작성자는 기본 API인 <code class=\"language-text\">react-transition-group</code> 과 <code class=\"language-text\">animejs</code> 를 조합해 쓰는 것을 가장 좋게 평가했다. <code class=\"language-text\">react-spring</code> 이란게 있다는 것도 이번에 알았는데, 사이드 프로젝트에는 <code class=\"language-text\">react-spring</code> 을 써볼까 한다.</li>\n<li><a href=\"https://theblog.adobe.com/ui-ux-animation-principles-tips-tricks-best-practices/\">UI/UX Animation Principles: Tips, Tricks &#x26; Best Practices</a> - 어도비에서 발행한 애니메이션 관련 팁. 애니메이션을 구현할 때 유의해야 할 점을 짚어주고 있다. 소제목만 하나씩 읽어봐도 맥을 짚을 수 있었다.</li>\n<li><a href=\"https://levelup.gitconnected.com/formik-with-react-hooks-and-mobx-1493b5fd607e\">Create your own Formik with React Hooks and MobX – gitconnected.com | Level Up Your Coding</a> - React Hooks API와 MobX를 이용하여 직접 Formik을 만들어보는 튜토리얼. 재밌어보인다.</li>\n<li><a href=\"https://spectrum.chat/figma/feature-requests/sf-pro-tracking~4c4d2693-456e-4d76-a4cd-2f75cb8ca08e\">SF Pro Tracking · Figma</a> - Figma로 나온 디자인 산출물대로 CSS를 적용했음에도 브라우저에서 다른 결과가 나오는 문제가 있어서 조사를 해 봤는데 전혀 상상하지 못한 문제를 발견했다. iOS/macOS에서 어떻게 SF(San Fransisco) 폰트를 다루는지 조금은 실마리를 잡을 수 있었다. 당장 해결될 문제로 보이진 않는다만..</li>\n<li><a href=\"https://jbee.io/web/optimize-scroll-event/\">스크롤 이벤트 최적화 | JBEE.io</a> - 한재엽님이 설명해주신 스크롤 이벤트 최적화에 관한 글. 보통 <code class=\"language-text\">throttle</code> 같은 함수를 사용하는 1차원적인 설명이 있지만, 궁극적으로 <code class=\"language-text\">requestAnimationFrame</code>  함수를 소개하고 이를 어떻게 활용해야 하는지 알려준다. 나도 이런게 있다고 알고만 있고 제대로 쓰진 않았는데, 이번 기회에 <code class=\"language-text\">onScroll</code> 이벤트를 바인딩해놓은 로직을 가능하면 rAF로 교체할 수 있나 살펴봐야겠다.</li>\n</ul>\n<h2 id=\"프로그래밍-기본\"><a href=\"#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EA%B8%B0%EB%B3%B8\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로그래밍 기본</h2>\n<ul>\n<li><a href=\"https://github.com/labs42io/clean-code-typescript\">GitHub - labs42io/clean-code-typescript: Clean Code concepts adapted for TypeScript</a> - 클린 코드 책에 나왔던 개념을 타입스크립트로 표현한 글</li>\n<li><a href=\"https://imcts.github.io/MVC-PATTERN/\">MVC PATTERN | Dolen’s blog</a> - 코드스피츠 강의의 내용을 따라 정리하면서 예제 코드까지 구현해본 MVC 패턴 정리글인데 코드스피츠 강의 내용 답게 바로 곱씹기엔 좀 심오하다.</li>\n</ul>\n<h2 id=\"오픈-소스-프로젝트\"><a href=\"#%EC%98%A4%ED%94%88-%EC%86%8C%EC%8A%A4-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오픈 소스 프로젝트</h2>\n<ul>\n<li><a href=\"https://github.com/SonarSource/SonarTS\">GitHub - SonarSource/SonarTS: Static code analyzer for TypeScript</a> - 정적 코드 분석기. 코어는 자바로 되어있다. TSLint에 플러그인 형식으로 얹어서 쓸 수 있으며, 굉장히 다양한 룰을 제공하는데 이 룰은 단순히 린트로는 잡아낼 수 없는 수준의 버그 탐지 규칙으로 보인다. 도입해볼 만한 가치가 있을지도?</li>\n<li><a href=\"https://fuse-box.org\">FuseBox · A bundler that does it right</a> - 타입스크로 작성된 번들러. API도 괜찮게 제공되어 있고, 타입스크립트로 작성된 만큼 First Class Typescript support를 지원한다. 그래서 이번에 사이드 프로젝트를 할 때 번들러로 한번 써보기로 했다.</li>\n</ul>","id":"9b8a49e5-8097-5799-864c-074caba89229","frontmatter":{"date":"2019-02-28","path":"/posts/this-month-i-learned-1902","title":"This Month I Learned - 2019년 2월","tags":["TIL","Learning","Reading","Programming","React","CSS"],"category":"This Month I Learned"}},{"excerpt":"한동안 바쁜 나날을 보내고 있기에…","html":"<p>한동안 바쁜 나날을 보내고 있기에 2월까지는 뭔가 제대로된 정보 수집이나 공부를 못하고 있습니다. 하지만 지금 진행하는 프로젝트 자체가 공부라는 생각도 들어서 크게 아쉽진 않습니다.</p>\n<p><a href=\"https://rinae.dev/posts/today-i-learned-best-2018\">지난번에 올렸던 글</a> 처럼 나름의 태그를 매기던 방식으로 정리를 하려 하는데, 이번엔 글의 양이 훨씬 적으니 카테고리를 먼저 나누어서 보기 편하게 정리해보려 합니다. 본문은 개인 노트를 옮겨서 정리하다보니 평어체로 되어있습니다.</p>\n<h2 id=\"읽을거리---일반\"><a href=\"#%EC%9D%BD%EC%9D%84%EA%B1%B0%EB%A6%AC---%EC%9D%BC%EB%B0%98\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>읽을거리 - 일반</h2>\n<ul>\n<li>\n<p><a href=\"http://newspeppermint.com/2018/11/05/m-envy/\">부러움의 시대를 이기는 방법</a> - 이전에 한번 공유된 글을 탭만 열어 두었다가 드디어 읽었다. 처음에는 소셜 미디어 사용의 부정적인 영향 위주로만 이야기 하는 것으로 보였으나, 뒷부분에 핵심 내용이 서술되어 있었다. 근본적으로 소셜미디어를 활용하는 것은 정보 공유 이외엔 그닥 좋은 효과가 없다는데 공감한다. 그리고 부러움이라는 감정을 단순히 부정적으로 생각하지 말고 내 다음 목표를 설정하기 위한 이정표로 삼아야 한다는 말도 공감한다. 나는 많은 사람들을 보며 부러움을 느낀다. 조금이라도 그 사람들과 가까운 모습이 되고 싶다는 생각을 한다. 하루아침에 이루어지지 않을 일이라는 것을 인지해야 한다.</p>\n<ul>\n<li>\"그렇다고 나는 우리가 항상 자신의 삶을 더 솔직하게 밝혀야 한다고 생각하지는 않습니다. 어쩌면 그저 입을 닫는 것이 답일 수도 있습니다. 물론 사회적으로 부당한 일을 널리 알리는 것은 사회를 변화시키는 데 일조할 수도 있습니다. 하지만 대부분의 자아 성찰이나 자신의 슬픔을 알리는 글, 무보정 셀카는 결국 자신을 포장하기 위한 것입니다.\"</li>\n<li>\"당신이 부러움을 느끼는 대상이 성취가능한 것이라면, 적절한 단계를 밟아 이를 이루면 됩니다. 하지만 동시에 스스로에게, 내가 어느 선에서 만족할 것인지를 물어야겠지요.\"</li>\n</ul>\n</li>\n<li><a href=\"http://harpersbazaar.co.kr/life/%EC%9A%B0%EC%95%84%ED%95%9C-%EA%B0%80%EB%82%9C%EC%9D%98-%EC%8B%9C%EB%8C%80\">우아한 가난의 시대 | Harper's BAZAAR Korea</a> - 위의 글과 직접적인 관련은 없다 하더라도 약간 연관은 있다. 이것저것 지른게 있어서 그런 것도 있지만, 고정 지출 때문에 답이 없는 통장을 보며 괜시레 마음이 답답해지던 와중에 발견한 글이다. 이 시대에 살아가는 놀라울 정도로 가난하면서 놀라울 정도로 소비하는 사람 중 하나로서, 이 가난을 어떻게 받아들이고 풀어나갈지 조금 더 고민해볼 필요가 있겠다. 적어도 본문에서 자동차에 대한 부정적인 이야기는 공감한다.</li>\n</ul>\n<h2 id=\"읽을거리---개발자\"><a href=\"#%EC%9D%BD%EC%9D%84%EA%B1%B0%EB%A6%AC---%EA%B0%9C%EB%B0%9C%EC%9E%90\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>읽을거리 - 개발자</h2>\n<ul>\n<li><a href=\"https://ko.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi\">하노이의 탑 (개념 이해하기) | 알고리즘 |칸아카데미</a> - 어쩌다 술자리에서 하노이의 탑 알고리즘을 풀어보라는 이야기를 듣고 도전해 보았는데 머리에 확 와닿는데 까지 시간이 걸리고 최적화를 시도해보는데도 또 시간이 걸리는 등 쉽게 접근한 것 치곤 꽤 어려웠다. 그 와중에 칸아카데미의 강좌가 맥은 잘 짚어주었다.</li>\n<li>\n<p><a href=\"https://overreacted.io/ko/things-i-dont-know-as-of-2018/\">2018년, 내가 모르는 기술들 - Overreacted</a> - Dan의 Overreacted 블로그가 오픈되어 번역 기여를 받고 있다. 그래서 번역된 글 중 하나인데, 잘 번역된데다 내용도 명료하다. 실제로 이 글의 의도는 마지막에 이렇게 정리되어 있다.</p>\n<ul>\n<li><strong>당신이 좋아하는 개발자조차도 당신이 아는 많은 것을 알지 못할 수 있습니다.</strong></li>\n<li><strong>당신의 지식 수준에 관계없이, 당신의 자신감은 크게 다를 수 있습니다.</strong></li>\n<li><strong>훌륭하고 경험있는 개발자는 지식격차에도 불구하고 가치있는 전문지식을 보유하고 있습니다.</strong></li>\n</ul>\n</li>\n<li><a href=\"https://overreacted.io/ko/the-elements-of-ui-engineering/\">UI 엔지니어링의 요소들 - Overreacted</a> - 윗 글의 링크에 이런 것도 있길래 줍줍. 유행 그 자체보다는 UI 문제를 해결하기 위해 고민하다보니 자연스레 무언가 나왔다는 이야기가 인상깊게 들린다. 또한 글 전반적으로 강조하는 '이와 같은 UI 고민을 라이브러리나 프레임워크 없이 작게라도 직접 만들어보는 노력을 해 보라' 는 말이 굉장히 중요하게 느껴진다.</li>\n<li><a href=\"https://www.slideshare.net/cybaek/201403\">안정적인 서비스 운영 - Slideshare</a> - 야금야금 읽고 있던 책의 이번 챕터는 <a href=\"http://aosabook.org/en/distsys.html\">‘확장성있는 웹 아키텍처와 분산 시스템’</a> 이었다. 그러다가 이 슬라이드를 참고하라는 조언을 들었는데 슬라이드가 책의 내용을 많이 보완해주었다. 내용은 조금 길지만 정말 웹 개발을 한다면 두고두고 곱씹어야 할 내용이다.</li>\n</ul>\n<h2 id=\"프론트엔드주로-리액트\"><a href=\"#%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%EC%A3%BC%EB%A1%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프론트엔드(주로 리액트)</h2>\n<ul>\n<li><a href=\"https://github.com/pfgray/chainable-components\">GitHub - pfgray/chainable-components: A composable API for reusable React code.</a> - 리액트 컴포넌트에 함수헝 체인 개념이 들어간 라이브러리. 살짝 보아하니 API가 꽤 잘 되어있고, 조합의 방법이 다양해서 여러모로 쓸만해보인다. 다만 기존에 컴포넌트를 작성해서 랜더링 할때랑 개념이 살짝 다르기 때문에 사람에 따라서 거부감이 일어날 수도 있겠다.</li>\n<li><a href=\"https://github.com/frontarm/create-react-blog\">GitHub - frontarm/create-react-blog: Start and deploy your own statically rendered blog with create-react-app</a> - <code class=\"language-text\">create-react-app</code> + MDX 기반의 블로그 생성기. 모듈 사용, 타입스크립트 지원, 기본 테마(Dan Abramov의 overracted.io 테마 기반) 등 깔끔하게 잘 되어있어서 JS 생태계를 조금만 알면 이거로 금새 블로그 만드는것도 그리 어렵지 않아보인다.</li>\n<li><a href=\"https://twitter.com/dan_abramov/status/1084089632562823168\">Dan Abramov의 CSS-in-JS에 대한 의견 트윗</a> - 전반적으로 DX(Developer eXperience 라고 추측)에는 도움이 될지 모르나 실제 사용자에게 이득되는 측면이 없고, 개발자마자 CSS-in-JS의 정의가 다른 것을 문제라고 제기하고 있다. 의미있는 의견이라고 생각한다.</li>\n<li><a href=\"https://github.com/callstack/linaria\">GitHub - callstack/linaria: Zero-runtime CSS in JS library</a> - 위의 트윗에 이어, 이전에 별을 찍어놨는데 이런 라이브러리가 있는지 잊고 있었다. Zero Runtime CSS-in-JS 를 표방하고 있다는게 상당히 흥미롭다. 바벨 플러그인으로 CSS 정적 파일을 생성하는 것으로 보이고 <code class=\"language-text\">props</code> 로 인한 동적인 스타일링은 CSS Variable 로 자동 대체하는 것 같다. 그렇다면 CSS Variable이 지원되지 않는 환경에서는 못쓰는건가?</li>\n<li><a href=\"https://github.com/piotrwitek/typesafe-actions\">GitHub - piotrwitek/typesafe-actions: Typesafe Action Creators for Redux / Flux Architectures (in TypeScript)</a> - 깔끔한 코드에 설명도 정말 잘 되어있는 타입스크립트 기반의 리덕스 액션과 관련된 라이브러리. 예제 코드를 보아하니 TS+Redux는 정말 힘든 길이라는 생각이 든다. 타이핑하는데 시간 다 보낼 기세.</li>\n<li><a href=\"https://medium.com/@mandy.michael/understanding-why-semantic-html-is-important-as-told-by-typescript-bd71ad41e6c4\">Understanding why Semantic HTML is important, as told by TypeScript.</a> - 타입스크립트의 인터페이스에 비유하여 시맨틱 마크업이 왜 중요한지 보여주는 글. 정말 간단한 두 개의 스니펫만으로도 전달하고자 하는 정보가 아주 명확하게 들어왔다. <code class=\"language-text\">div</code> 등으로 퉁치는 것은 마크업에 <code class=\"language-text\">any</code> 타입을 지정하는 것이나 마찬가지라는 거다.</li>\n<li><a href=\"https://react-testing-examples.com\">react-testing-library — React Testing Examples</a> - <code class=\"language-text\">react-testing-library</code>  를 활용한 컴포넌트의 통합 테스트를 다시 시도해보려던 차에 생각보다 많은 어려움에 부딪혔다. 그럴 때 일반적으로 쓰이는 테스팅 기법과 예제가 이 사이트에 많이 수록되어있어서 많은 참고가 되었다. 물론 이것만으로 커버하기엔 지금 프로젝트의 설계 상 아쉬위움이나 엣지 케이스가 많긴 하다.</li>\n</ul>\n<h2 id=\"도커\"><a href=\"#%EB%8F%84%EC%BB%A4\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도커</h2>\n<ul>\n<li><a href=\"https://rinae.dev/posts/docker-101\">Dockerfile 작성부터 이미지 배포까지 간단 요약</a> - 도커를 간단히 손댈 일이 있어서 직접 도전해보고 필요한 내용을 요약해보았다.</li>\n<li><a href=\"https://www.44bits.io/ko/post/why-should-i-use-docker-container\">왜 굳이 도커(컨테이너)를 써야 하나요? - 컨테이너를 사용해야 하는 이유 | 44bits.io</a> - 도커를 써야 하는 이유를 잘 정리해주셨다. 나도 도커 기반의 배포 방식이 너무 마음에 들어서 더 잘 알아보고 싶다.</li>\n</ul>\n<h2 id=\"도구-및-활용\"><a href=\"#%EB%8F%84%EA%B5%AC-%EB%B0%8F-%ED%99%9C%EC%9A%A9\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도구 및 활용</h2>\n<ul>\n<li><a href=\"https://www.producthunt.com/posts/minimo\">Minimo - An elegant, simplified new tab page | Product Hunt</a> - 크롬용 새 탭 화면 테마인데 심플하고 시커먼게 너무 마음에 든다.</li>\n<li><a href=\"https://www.lifewire.com/how-to-set-up-apple-mail-rules-2260876\">How to Set Up Apple Mail Rules</a> - 생각보다 맥 기본 메일 클라이언트가 나쁘지 않은 것 같은데 알림 설정이 제한적인 것 같아 조금 검색을 해보니 이런게 나왔다. 설정의 <strong>Rules</strong> 를 활용하여 다양한 조건을 만족하면 알림을 울리거나 메일 클라이언트가 독에서 방방 뛰도록 만들 수 있다. Gmail의 필터와 결합해서 쓰니 어느 정도 중요한 메일은 잘 확인하게 되었다.</li>\n<li>\n<p><a href=\"https://figma.com\">Figma</a>를 사용하면서 불편했던 점이 확대 축소와 가로 스크롤이었다. 이 모든 것들은 트랙패드를 사용하면 제스처로 아주 간단히 사용할 수 있지만 작업실에서 M570 트랙볼을 쓸 때는 일반 스크롤밖에 안달려있기 때문에 꽤나 고통스럽다. 하지만 모르고 있던 기본 단축키 조합을 슬랙 채널에서 공유받으면서 눈이 뜨였다.</p>\n<ul>\n<li>Cmd(Ctrl)+스크롤 - Zoom In/Out</li>\n<li><strong>Space+Drag - Panning</strong></li>\n<li>위의 패닝이 굉장히 중요한데 대부분의 툴에서는 아이콘이 손 모양으로 바뀌면서 화면을 잡아 끄는 기능이다. 사진 편집이나 디자인 툴에 익숙한 사람들은 대부분 알고 있다고 한다. 패닝 덕에 앞으로는 Figma를 편하게 이용할 수 있겠다.</li>\n</ul>\n</li>\n<li><a href=\"https://multiplestates.wordpress.com/2015/02/05/rename-a-local-and-remote-branch-in-git/\">Rename a local and remote branch in git – Multiple States Knowledge Base</a> - 브랜치 전략 중 하나로 <code class=\"language-text\">wip</code> 브랜치를 이용하기로 했는데, 작업이 다 끝난 브랜치를 <code class=\"language-text\">feature</code> 로 바꾸어 올리는게 귀찮기도 하고, 신경 안쓰면 계속 <code class=\"language-text\">origin</code> 에 남는 문제가 있었다. 하지만 검색해보니 이렇게 쉽게 푸시하면서 원격 브랜치도 정리할 수 있었다.</li>\n</ul>\n<h2 id=\"오픈-소스-프로젝트\"><a href=\"#%EC%98%A4%ED%94%88-%EC%86%8C%EC%8A%A4-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오픈 소스 프로젝트</h2>\n<ul>\n<li><a href=\"https://github.com/streamich/modern-pick\">GitHub - streamich/modern-pick: Template string accessors to the selector rescue</a> - 템플릿 리터럴 문법을 활용한 JS Object picker. <code class=\"language-text\">styled-components</code> 의 문법을 보고 실제로 이런게 적용될 수도 있겠다고 생각했는데 가능하다는데서 놀랐다.</li>\n<li><a href=\"https://github.com/cats-oss/scaffdog\">GitHub - cats-oss/scaffdog: scaffdog is Markdown driven scaffolding tool.</a> - Hygen 은 자체 포맷으로 파일을 생성해주는 템플릿 엔진이었는데, 이 녀석은 마크다운 기반으로 파일을 생성해주는 템플릿 엔진이라서 훨씬 쉽게 접근할 수 있어보인다. CLI 도 더 친절하게 보인다.</li>\n</ul>","id":"e6c39e64-73b5-5109-9abe-872fae86e1ba","frontmatter":{"date":"2019-01-27","path":"/posts/this-month-i-learned-1901","title":"This Month I Learned - 2019년 1월","tags":["TIL","Learning","Reading","Programming","React"],"category":"This Month I Learned"}},{"excerpt":"저는 2017년 10월부터 주력 노트 앱을  Bear 로 결정하고 꾸준히 사용해오면서 Today I Learned(TIL)을 작성하기 시작했습니다. 그 전에는 따로 적기보다는 읽고 나서 잊거나, 가끔 트위터에 좋은 글이나 Github에 공개된 오픈 소스 소프트웨어(OSS…","html":"<p>저는 2017년 10월부터 주력 노트 앱을 <a href=\"https://bear.app\">Bear</a>로 결정하고 꾸준히 사용해오면서 Today I Learned(TIL)을 작성하기 시작했습니다. 그 전에는 따로 적기보다는 읽고 나서 잊거나, 가끔 트위터에 좋은 글이나 Github에 공개된 오픈 소스 소프트웨어(OSS)를 간단히 요약하여 공유하는 정도만 하고 있었습니다. 한번 살펴 본 지식의 내재화를 위해 직접 노트에 작성하기 시작하면서 크고 작은 도움이 되었다고 생각합니다.</p>\n<p>이 글은 제가 어떻게 작성을 해 왔는지 간단히 경험을 공유하면서 올해 살펴봤던 글이나 트윗 OSS 중에 인상깊었던 것을 선별하여 공개하고자 합니다.</p>\n<h2 id=\"어떻게-작성하고-있었나\"><a href=\"#%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%9E%91%EC%84%B1%ED%95%98%EA%B3%A0-%EC%9E%88%EC%97%88%EB%82%98\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어떻게 작성하고 있었나?</h2>\n<p>Bear라는 앱은 태그 기반으로 노트의 카테고리를 구분할 수 있습니다. 태그는 노트 어디에나 넣을 수 있습니다. 매월 해당하는 Today I Learned 노트를 생성하고, 주 단위로 쪼갠 다음 그 주에 알게 된 지식을 리스트 아이템으로 정리하였습니다. 보통은 단순히 <code class=\"language-text\">포스트 링크 - 정리 혹은 느낀 점</code> 방식으로 정리했으나 제가 직접 작성한 글을 내부 노트 링크로 연결하거나 짧은 일기 형식의 글을 작성하기도 했습니다.</p>\n<p><img src=\"https://cl.ly/58cd92e5458a/til-post-1.png\" alt=\"TIL 작성 예\"></p>\n<p>노트 작성은 이런 식으로 하였고, 제가 특정 분야의 태그가 매겨져있는 노트를 찾을 때면 사이드바에서 태그를 선택하거나 그 태그 이름으로 검색을 하면 됩니다. 최대한 태그가 적게 생성되도록 노력했지만 대략 이정도의 태그가 나왔습니다.</p>\n<p><img src=\"https://cl.ly/40bdeca3ce0b/til-post-2.png\" alt=\"TIL 태그들\"></p>\n<p>체감상 제가 일하고 있는 분야가 분야다보니 <code class=\"language-text\">javascript</code>, <code class=\"language-text\">css</code> 태그를 많이 보았던 것 같습니다. 태그를 하는 방식은 여러분들이 편하신 대로 앱이나 정리 방식에 맞추어서 하시면 되겠습니다.</p>\n<h2 id=\"2018년-인상적이었던-배움\"><a href=\"#2018%EB%85%84-%EC%9D%B8%EC%83%81%EC%A0%81%EC%9D%B4%EC%97%88%EB%8D%98-%EB%B0%B0%EC%9B%80\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2018년 인상적이었던 배움</h2>\n<p>저 많은 목록 중 올해 제게 가장 인상깊었던 글의 링크나 트윗 등을 뽑아봤습니다. 어디까지나 개인적인 취향에 불과하기 때문에 참고삼아 보셨으면 좋겠습니다.\n각 아이템에 어울리는 주제를 <code class=\"language-text\">@</code> 기호와 함께 태그를 매겼습니다. 필요한 내용 검색하실 때 유용하게 사용될 수 있기를 바랍니다.</p>\n<ul>\n<li><a href=\"https://rinae.dev/posts/write-mostly-integration-test-kr\"><strong>(번역) 테스트를 작성하라. 너무 많이는 말고. 통합 테스트를 많이 써라</strong></a> - 테스트를 할 가치가 있냐 없냐는 더 이상 논의 할 가치가 없는 주제라고 봅니다. 그렇다면 어떻게 애플리케이션을 효과적으로 테스트 할 것인가? 라는 고민거리를 가지고 있는 분들에게 실용적인 관점을 제공해주는 글입니다. <code class=\"language-text\">@Testing</code></li>\n<li><a href=\"https://twitter.com/minjang_kim/status/959849128053231619\"><strong>'개발자의 기본기' 를 생각하게 하는 트윗</strong></a> - 트위터 <a href=\"https://twitter.com/minjang_kim\">redacted (@minjang_kim)</a>님의 트윗 발췌. 작년 초에도 故 제럴드 와인버그와 이메일로 대화를 주고 받을 때 비슷한 조언을 들은 적이 있습니다. 그 시기 제럴드는 <a href=\"http://secretsofconsulting.blogspot.com/2017/02/how-long-can-i-remain-ruby-java-c.html\">이런 글</a>을 남겼습니다. 요약하자면 <strong>\"특정 언어의 프로그래머로 몇년 먹고살 수 있을지 전전긍긍하지 말고 ‘Programmer’ or ‘Problem-solver’ 같은 사람이 되어 살아남을 생각을 하라''</strong> 라는 내용입니다. <code class=\"language-text\">@Developer</code></li>\n<li><a href=\"https://rinae.dev/posts/functional-js-tutorial\"><strong>자바스크립트로 함수형 프로그래밍 아주 살짝 맛보기</strong></a> - 올해 초 함수형 프로그래밍이란걸 실제로 어떻게 적용해봐야할지 긴가민가하다 작은 시도를 해 보았고, 그 과정을 글로 남겼습니다. 최대한 쉽게 기초적인 개념을 설명하려고 했고, 좋은 글 링크도 달았으니 관심 있으시다면 읽어보세요. <code class=\"language-text\">@FP</code></li>\n<li><a href=\"https://rinae.dev/posts/fear-trust-and-javascript-kr\"><strong>(번역) 두려움, 믿음, 그리고 자바스크립트 - 언제 타입 시스템과 함수형 프로그래밍이 먹히지 않는가</strong></a> - 자바스크립트 환경에서 함수형 프로그래밍과 타입 시스템을 적용하려 할 때 고려할 수 있는 어려움을 짚어주는 글입니다. <code class=\"language-text\">@FP</code></li>\n<li><a href=\"https://github.com/Functional-JavaScript/FunctionalES\"><strong>GitHub - Functional-JavaScript/FunctionalES: ES6+, 함수형 프로그래밍, 비동기, 동시성 프로그래밍</strong></a> - <a href=\"http://aladin.kr/p/tntNr\">'함수형 자바스크립트 프로그래밍'</a>의 저자 유인동님이 ES6+ 기반으로 설명해주시는 함수형 프로그래밍 강좌 저장소입니다. 최근에 이 내용에서 더욱 발전한 내용으로 <a href=\"https://programmers.co.kr/learn/courses/7637\">유료 강좌</a>를 내놓으셨습니다. <code class=\"language-text\">@FP</code></li>\n<li><a href=\"http://hamait.tistory.com/m/712\"><strong>예외 처리에 대한 6가지 화두</strong></a> - Go 언어를 살짝 살펴보면서 예외 처리하는 방식이 독특하다고 생각했는데, 이 글을 읽으면서 조금 더 예외 처리에 대해 깊게 살펴볼 수 있었습니다. <code class=\"language-text\">@Fundamental</code></li>\n<li><a href=\"https://reactive.how\"><strong>RxJS and Reactive Programming - Animations and visual lessons</strong></a> - RxJS의 오퍼레이터가 어떤 방식으로 동작하는지 애니메이션과 함께 쉽게 익힐 수 있도록 알려주는 교재입니다. <code class=\"language-text\">@Rx</code></li>\n<li><a href=\"https://dev.to/lpasqualis/the-5-problem-solving-skills-of-great-software-developers-4e6\"><strong>The 5 Problem-Solving Skills of Great Software Developers - DEV Community 👩‍💻👨‍💻</strong></a> - 번역하려고 원작자에게 두번이나 연락을 시도했지만 답장이 없어 포기한 글입니다. 초보 개발자분들이라면 반드시 읽어보길 권합니다. 앞서 줄창 이야기한 '문제 해결 능력' 이라는게 대체 무엇인지 감을 잡을 수 있으실 테고, 일선 학교에서 의무적으로 진행하려고 하는 '소프트웨어 교육' 이라는 것을 이 글에서 보여주는 생각을 기본으로 가르쳐야 한다고 생각합니다. 하지만 현실은.. 🤦🏻‍♂️ <code class=\"language-text\">@Developer</code></li>\n<li><a href=\"https://medium.freecodecamp.org/yep-javascript-moves-fast-build-your-component-library-anyway-a50576ab3031\"><strong>Yep, JavaScript Moves Fast. Build Your Component Library Anyway.</strong></a> - 팀 단위로 재사용 가능한 컴포넌트 라이브러리를 구축할 필요성을 역설하는 글 <code class=\"language-text\">@React</code></li>\n<li><a href=\"https://github.com/30-seconds/30-seconds-of-code#take\"><strong>GitHub - 30-seconds/30-seconds-of-code: Curated collection of useful JavaScript snippets that you can understand in 30 seconds or less.</strong></a> - 한 개당 30초 이내로 살펴볼 수 있는 간단하고 실용적인 자바스크립트 스니펫 모음. CSS, 리액트 편 등도 있습니다. <code class=\"language-text\">@OSS</code> <code class=\"language-text\">@Javascript</code></li>\n<li><a href=\"https://dev.to/hzoo/i-was-not-ready-to-become-the-maintainer-of-babel-2j6\"><strong>I was not ready to become the maintainer of Babel - DEV Community 👩‍💻👨‍💻</strong></a> - 현재 <a href=\"http://babeljs.io\">바벨</a>을 풀타임으로 관리하고 있는 <a href=\"https://twitter.com/left_pad\">Henry Zhu</a>가 풀타임 메인테이너로 전업하고 얼마 되지 않아 남긴 글입니다. 흔히 가면 증후군(Imposter syndrome)이라고 여겨지는 증세를 우리가 어떻게 받아들이고 앞으로 나아갈 수 있을 지 영감을 줍니다. <code class=\"language-text\">@Developer</code></li>\n<li><a href=\"https://github.com/JaeYeopHan/Interview_Question_for_Beginner\"><strong>GitHub - JaeYeopHan/Interview<em>Question</em>for_Beginner: Technical-Interview guidelines written for those who started studying programming. I wish you all the best.</strong></a> - <a href=\"https://jbee-resume.now.sh\">한재엽</a>님이 만드신 개발자를 위한 기술 면접 문제가 정리된 저장소입니다. <code class=\"language-text\">@OSS</code> <code class=\"language-text\">@Developer</code></li>\n<li><a href=\"https://hackernoon.com/two-years-of-functional-programming-in-javascript-lessons-learned-1851667c726\"><strong>Two Years of Functional Programming in JavaScript: Lessons Learned</strong></a> - 실무에 자바스크립트로 함수형 프로그래밍을 2년이나 도입하셨던 분이 남긴 회고. 방법론에 대해 아쉬웠던 점, 하지 말아야 했을 점 등을 잘 정리했기 때문에 앞으로도 관심 있으신 분들이라면 자바스크립트 함수형 프로그램이을 도입하시기 전에 읽어보시면 좋습니다. <code class=\"language-text\">@FP</code> <code class=\"language-text\">@Javascript</code></li>\n<li><a href=\"https://ahnheejong.name/articles/becoming-better-programmer/\"><strong>프로그래머로서의 성장을 도왔던 태도들</strong></a> - <a href=\"https://ahnheejong.name/about\">안희종</a>님이 남긴 글입니다. 더 나은 프로그래머가 되기 위해 어떤 생각을 하고 노력을 했는지 정리되어 있습니다. <code class=\"language-text\">@Developer</code></li>\n<li><a href=\"https://brunch.co.kr/@springboot/35\"><strong>소프트웨어 개발의 지혜</strong></a> - 개발자로서 어떤 가치를 중요시하면서 소프트웨어를 개발하십니까? 개발자로서 본질적으로 중요하게 여겨야 하는 가치 뿐 아니라 소프트웨어 개발의 본질에 대해 정리한 내용도 아주 중요하다고 생각하는 글입니다. <code class=\"language-text\">@Developer</code></li>\n<li><a href=\"https://cs-playground-react.surge.sh\"><strong>Algorithms &#x26; Data Structures</strong></a> - 리액트 기반으로 만들어진 자료구조&#x26;알고리즘 학습용 웹앱입니다. <code class=\"language-text\">@OSS</code> <code class=\"language-text\">@Fundamental</code></li>\n<li><a href=\"https://medium.com/@khwsc1/%EB%B2%88%EC%97%AD-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0%EC%99%80-%EC%84%A4%EA%B3%84-%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC-b25792a0aa86\"><strong>(번역)  데이터 구조와 설계 — 튜토리얼 – Hyeokwoo Alex Kwon – Medium</strong></a> - 흔히 개발을 할 때 '설계' 라는 단어에는 여러가지 뜻이 있습니다. 프로젝트의 구조를 잡는 걸 수도 있고, 프로젝트 전체를 아우르는 데이터의 구조를 잡는 일일 수도 있지요. 이 글은 데이터 구조를 어떻게 설계하는지 잘 짚어주는 튜토리얼입니다. <code class=\"language-text\">@Database</code> <code class=\"language-text\">@Fundamental</code></li>\n<li><a href=\"https://github.com/sw-yx/react-typescript-cheatsheet\"><strong>GitHub - sw-yx/react-typescript-cheatsheet: a cheatsheet for react users using typescript with react for the first (or nth!) time</strong></a> - 리액트 + 타입스크립트를 도입할 때 설정부터 타이핑까지 막막한 분들이 많으실텐데 이 README 한번 살펴보시면 대부분 커버됩니다. 저도 실무에서 개발할 때 쓰는 타이핑 등은 이 글을 크게 벗어나지 않습니다. <code class=\"language-text\">@React</code> <code class=\"language-text\">@Typescript</code> <code class=\"language-text\">@OSS</code></li>\n<li><a href=\"https://medium.com/steady-study/%EB%B2%88%EC%97%AD-%EC%95%84%EC%A3%BC-%EA%B1%B0%EB%8C%80%ED%95%9C-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%84-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0-3aa37fc45122\"><strong>(번역) 아주 거대한 (자바스크립트) 어플리케이션을 구축하기 – Steady Study – Medium</strong></a> - 자바스크립트 생태계가 발전하면서 자바스크립트만으로도 아주 거대한 규모의 애플리케이션을 만들 수 있게 되었습니다. 하지만 그에 따라 프로젝트를 관리 해야하는데 여러 어려움에 부딪히게 됩니다. 이 글을 통해 어떤 부분을 유의하면서 프로젝트를 확장시킬지 도움되는 팁을 얻을 수 있습니다. <code class=\"language-text\">@Javascript</code></li>\n<li><a href=\"https://github.com/jamiebuilds/the-super-tiny-compiler\"><strong>GitHub - jamiebuilds/the-super-tiny-compiler: Possibly the smallest compiler ever</strong></a> - '컴파일러' 라는게 어떻게 동작하는지 기본 원리를 파악할 수 있게 도움을 주는 예제 코드입니다. 자바스크립트로 작성되어 있습니다. <code class=\"language-text\">@OSS</code> <code class=\"language-text\">@Fundamental</code></li>\n<li><a href=\"https://kyu.io/ko/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EC%8B%9C%EB%B8%8C-%EC%9B%B9%EC%95%B1-%EC%84%B1%EB%8A%A5%EC%97%90-%EB%8C%80%ED%95%9C-%EC%BC%80%EC%9D%B4%EC%8A%A4-%EC%8A%A4%ED%84%B0%EB%94%94-treebo/\"><strong>(번역) 프로그래시브 웹앱 성능에 대한 리엑트, 프리엑트 케이스 스터디 : Treebo - KYU.IO 🌾</strong></a> - 리액트 애플리케이션에 PWA(Progressive Web App)을 도입하면서 성능이 향상된 사례 번역. <a href=\"https://medium.com/dev-channel/a-pinterest-progressive-web-app-performance-case-study-3bd6ed2e6154\">핀터레스트 사례</a>도 있긴 하지만 번역되지 않은 것 같아 이 글을 먼저 소개합니다. <code class=\"language-text\">@PWA</code> <code class=\"language-text\">@React</code></li>\n<li><a href=\"https://medium.com/panaseer-labs-engineering-data-science/clean-house-with-typescript-ba3f43de05a2?WT.mc_id=link-twitter-jeliknes\"><strong>Keeping a Clean House with Typescript at Scale – Panaseer Labs Engineering &#x26; Data Science – Medium</strong></a> - 타입스크립트 프로젝트의 규모가 커지면서 확장성을 강화하기 위해 취한 조치가 정리된 글입니다. 초기에 타입스크립트를 도입할 때 실수하기 쉬운 부분을 짚어주는 것 부터 시작하여 더 세부적인 케이스까지 안내하고 있습니다. <code class=\"language-text\">@Typescript</code></li>\n<li><a href=\"https://rinae.dev/posts/how-i-became-a-better-programmer-kr\"><strong>(번역) 나는 어떻게 더 나은 프로그래머가 되었는가</strong></a> - <a href=\"https://prettier.io\">Prettier</a>를 만든 <a href=\"https://twitter.com/jlongster\">James Long</a>이 자신이 프로그래머로서 어떻게 발전했는지 짚어본 글을 번역했습니다. \"익숙하지 않은 일에 뛰어드는 것\" 을 강조했던게 기억납니다. <code class=\"language-text\">@Developer</code></li>\n<li><a href=\"https://medium.com/@pitzcarraldo/%EC%A2%8B%EC%9D%80-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%9C%A0%EB%AA%85%ED%95%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90-19b20a7d6ace\"><strong>좋은 개발자 / 유명한 개발자 – Cho Minkyu – Medium</strong></a> - 이 글을 읽고 제가 원하는 서비스를 개발자/사용자가 만족할 수 있는 퀄리티로 만드는 좋은 개발자가 되고 싶다는 목표를 세웠습니다. <code class=\"language-text\">@Developer</code></li>\n<li><a href=\"https://blog.trello.com/working-from-home-is-not-remote-work\"><strong>Working From Home Is Not Remote Work</strong></a> - 원격근무를 운용할 거면 제대로 하자는 글입니다. 집에서 일을 하더라도 업무 시간에는 절대 방해받지 않는 환경을 조성하고, 사무실에 있는 사람들도 원격근무자와 커뮤니케이션을 할 때 절대 어려움이 없어야 한다는 것을 강조합니다.  <code class=\"language-text\">@Reading</code></li>\n<li><a href=\"https://medium.com/@kpak/%ED%9B%8C%EB%A5%AD%ED%95%9C-%ED%8C%80%EC%9B%90%EC%9D%98-%EC%A1%B0%EA%B1%B4-strong-views-weakly-held-17880611d962\"><strong>훌륭한 팀원의 조건 - Strong Views, Weakly Held – Kisang Pak – Medium</strong></a> - 같이 일을 하다 보면 어떤 사람을 '훌륭한 팀원' 이라고 생각하게 되시나요? 각자 생각하시는 기준과 비교해보시면서 읽어보면 좋은 글이라고 생각합니다. <code class=\"language-text\">@Reading</code></li>\n<li><a href=\"http://newspeppermint.com/2018/07/04/howtoaskforhelp/\"><strong>도움을 요청할 때 해서는 안 되는 말들</strong></a> - 위의 글과 바로 엮어서 보셔도 좋은 글입니다. 어렵사리 도움을 요청하는데 도움을 받는 쪽에서도 최대한의 효과를 얻고, 도움을 주는 쪽에서도 효율적인 도움을 줄 수 있는게 좋겠죠. <code class=\"language-text\">@Reading</code></li>\n<li><a href=\"https://rinae.dev/posts/fix-circular-dependency-kr\"><strong>(번역) 자바스크립트 &#x26; 타입스크립트의 순환 참조를 한방에 해결하는 방법</strong></a> - 노드 모듈을 불러올 때 순환 참조로 고통을 받으신 적 있다면 권해드리는 글입니다. 이 글 말고도 해결 방법은 다양합니다만, 이 주제에 익숙하지 않으신 분들이라면 모듈이 어떻게 로딩되는지 그림을 통해 간단히 살펴보실 수 있습니다. <code class=\"language-text\">@Javascript</code></li>\n<li><a href=\"https://hyunseob.github.io/2018/08/12/do-you-need-to-use-ts/\"><strong>타입스크립트, 써야할까? | DailyEngineering</strong></a> - 타입스크립트를 도입하지 않는 이유는 여러가지가 있을 겁니다. 부정적인 선입견이 있을 수도 있고, 필요성을 느끼지 못할 수도 있고요. 이 글에서는 타입스크립트를 오래 사용하면서 얻은 경험을 기반으로 좋은 의견을 제시하고 있습니다. <code class=\"language-text\">@Typescript</code></li>\n<li><a href=\"https://mathiasbynens.be/notes/prototypes\"><strong>JavaScript engine fundamentals: optimizing prototypes · Mathias Bynens</strong></a> - 자바스크립트 엔진이란게 어떻게 돌아가고, 프로토타입은 어떻게 동작하는지 굳이 알지 않아도 애플리케이션을 작성하는데 큰 지장은 없을 수 있습니다. 적어도 이 글은 제가 여태까지 살펴본 자바스크립트 엔진 &#x26; 프로토타입 관련 글 중 가장 자세한 글이라고 생각합니다. <code class=\"language-text\">@Javascript</code> <code class=\"language-text\">@Fundamental</code></li>\n<li><a href=\"https://zellwk.com/blog/good-frontend-developer/\"><strong>What makes a good frontend developer? | Zell Liew</strong></a> - 먼저 초보 프론트엔드 개발자분들은 이 분의 메일링 리스트에 가입하는걸 권해드립니다. 기본적인 개념을 아주 쉽게 설명하는 글을 많이 올려줍니다. 저도 많이 배우고 있고요. <a href=\"https://brunch.co.kr/@chiyodad/9\"><strong>좋은 자바스크립트 개발자가 되기 위한 글이 이전에도 번역되어 공유되다가 최근에 다시 재조명된 것을 본 적이 있는데</strong></a>, 그 글보다는 이 글이 현실적으로 더 도움이 된다고 생각합니다. <code class=\"language-text\">@Developer</code></li>\n<li><a href=\"https://github.com/guardian\"><strong>The Guardian · GitHub</strong></a> - 영국 가디언 지의 깃헙 저장소입니다. <code class=\"language-text\">frontend</code> 저장소를 살펴보시면 접근성을 고려하여 얼마나 미려하게 설계가 되어있는지 알 수 있습니다. <code class=\"language-text\">@OSS</code></li>\n<li><a href=\"https://github.com/BetterThanTomorrow/calva/issues/44\"><strong>Ideal Beginner Editor+REPL Setup · Issue #44 · BetterThanTomorrow/calva · GitHub</strong></a> - 클로저스크립트를 공부하기 시작하면서 다양한 자료를 찾다가 보니 발견한 이슈입니다. 클로저(스크립트)에 처음 접근하는 사람들이 어떤 설정으로 어떻게 학습을 할 지 질문과 답변이 오가는 이슈입니다. <code class=\"language-text\">@Clojure</code></li>\n<li><a href=\"https://blog.usejournal.com/thinking-about-react-atomically-608c865d2262\"><strong>Thinking About React, Atomically ⚛ – Noteworthy - The Journal Blog</strong></a> - 현재 회사 프로젝트도 Atomic Design 기반으로 컴포넌트를 나누어 두었습니다. 그 기준을 어떻게 설정할지 고민을 했었는데 이 글이 아주 잘 설명해주고 있습니다. <code class=\"language-text\">@React</code></li>\n<li><a href=\"https://github.com/streamich/libreact\"><strong>GitHub - streamich/libreact: Collection of useful React components</strong></a> - 리액트 애플리케이션을 개발하면서 유용하게 사용될 수 있는 컴포넌트들의 모음집입니다. 사용하지 않으시더라도 소스 코드를 조금 살펴보시면 Render Props, HOC를 이해하시는데 큰 도움이 됩니다. <code class=\"language-text\">@React</code></li>\n<li><a href=\"https://github.com/nikitavoloboev/my-mac-os\"><strong>GitHub - nikitavoloboev/my-mac-os: List of applications and tools that make my macOS experience even more amazing</strong></a> - macOS 기반으로 개발을 할 때 생산성을 극대화할 수 있는 도구와 사용법을 잘 정리해준 저장소입니다. 저도 여기 소개 된 많은 앱을 사용하고 있고, 배운 것도 많아서 macOS를 사용하는 개발자분들에게 꼭 한번 살펴보시길 권하고 싶습니다. <code class=\"language-text\">@macOS</code> <code class=\"language-text\">@Tool</code></li>\n<li><a href=\"https://medium.freecodecamp.org/summer-is-over-you-should-be-coding-heres-yet-another-list-of-exciting-ideas-to-build-a95d7704d36d\"><strong>Here’s yet another list of exciting projects to build</strong></a> - '연습을 위해 사이드 프로젝트를 해보라' 는 조언은 많이 받아보셨겠지만 구체적으로 뭘 만들어야 할지 막막할 때가 많습니다. 이 글을 만들어볼만한 클론/사이드 프로젝트 주제들을 한 뭉치 던져줍니다. <code class=\"language-text\">@Developer</code></li>\n<li><a href=\"https://medium.com/chequer/theme-in-react-js-dbf5377d0890\"><strong>Theme in React JS – CHEQUER – Medium</strong></a> - <a href=\"https://axisj.com\">AXISJ</a>를 만드신 장기영님의 글입니다. 리액트 애플리케이션을 만들면서 컴포넌트의 스타일 설정, 나아가 전반적인 테마를 어떻게 지정할 수 있을지 <code class=\"language-text\">styled-components</code> 의 예를 들어 설명하고 있습니다. <code class=\"language-text\">@React</code></li>\n<li><a href=\"https://github.com/leonardomso/33-js-concepts\"><strong>GitHub - leonardomso/33-js-concepts: 📜 33 concepts every JavaScript developer should know.</strong></a> - 자바스크립트를 학습 할 때 꼭 알아두어야 할 33가지의 중요한 개념을 설명하는 글과 영상 모음집입니다. <code class=\"language-text\">@Javascript</code></li>\n<li><a href=\"https://www.youtube.com/watch?v=RP_f5dMoHFc\"><strong>그런 REST API로 괜찮은가</strong></a> - 작년 DEVIEW에 나온 발표라고 합니다. REST API 설계시 간과하기 쉬운 요소들, 더 나은 설계를 위해 고려해야 할 부분들에 대해 잘 정리해주셨습니다. <a href=\"https://slides.com/eungjun/rest\">슬라이드도 있습니다.</a> <code class=\"language-text\">@Fundamental</code></li>\n<li><a href=\"https://github.com/hg-pyun/iterize\"><strong>GitHub - hg-pyun/iterize: Use JavaScript Iterator, Easily</strong></a> - 타입스크립트 기반으로 만들어진 이터레이터 유틸리티입니다. 이터레이터 개념에 대해 궁금하셨던 분들은 이 코드와 함께 핵심 개념을 잘 파악하실 수 있습니다. <code class=\"language-text\">@OSS</code> <code class=\"language-text\">@Typescript</code></li>\n<li><a href=\"https://gyandeeps.com/react-getderivedstatefromprops-key/\"><strong>React - How to use keys to avoid using getDerivedStateFromProps - Gyandeep Singh</strong></a> - 이전 상태와 현재 상태를 비교하여 리액트 컴포넌트의 리랜더링을 일으킬 때 <code class=\"language-text\">getDerivedStateFromProps</code> 메서드를 <a href=\"https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html\">별 고민없이 사용하는 실수를 하기 쉽습니다.</a> 하지만 <code class=\"language-text\">key</code> 만 잘 활용하면 손쉽게 리랜더링을 제어할 수 있습니다. <code class=\"language-text\">@React</code></li>\n<li><a href=\"https://terminalsare.sexy\"><strong>We all &#x3C;3 Terminals. - Terminals Are Sexy</strong></a> - 터미널로 활용할 수 있는 다양한 도구와 방법들 모음입니다. <code class=\"language-text\">@Terminal</code> <code class=\"language-text\">@Tool</code></li>\n<li><a href=\"https://web.dev\"><strong>web.dev</strong></a> - 미래지향적 웹 개발을 위해 구글이 제안하는 방법론, 활용할 수 있는 도구를 안내하는 사이트입니다. <code class=\"language-text\">@Web</code></li>\n<li><a href=\"https://github.com/GoogleChromeLabs\"><strong>GoogleChromeLabs · GitHub</strong></a> - 여기 있는 프로젝트들 중 작은 프로젝트의 소스코드부터 살펴보시면 배울 점이 많습니다. 주석으로 기능 설명도 잘 되어있고, 타입스크립트 기반 프로젝트도 좀 있고 웹 컴포넌트도 활용하고 있어서 해당 기술에 관심이 있으시다면 큰 도움이 되리라 생각합니다. <code class=\"language-text\">@OSS</code> <code class=\"language-text\">@Typescript</code> <code class=\"language-text\">@Web</code></li>\n<li><a href=\"https://ziwon.github.io/post/modern-network-load-balancing-and-proxying/\"><strong>(번역) 최신 네트워크 로드 밸런싱 및 프록시 소개</strong></a> - 애플리케이션 배포 인프라 구축하시면서 로드 밸런서 이야기는 당연히 들어보셨으리라 생각합니다. 꽤 긴 글이지만 기본 네트워크 지식을 가지고 쭉 읽어보시면 유용한 정보들이 많습니다. <code class=\"language-text\">@Infrastructure</code></li>\n<li><a href=\"https://github.com/cssanimation/css-animation-101\"><strong>GitHub - cssanimation/css-animation-101: Learn how to bring animation to your web projects</strong></a> - CSS 애니메이션 구현의 기초를 알려주는 eBook이 공유되는 저장소입니다. <code class=\"language-text\">@CSS</code></li>\n<li><a href=\"https://cssguidelin.es\"><strong>CSS Guidelines (2.2.5) – High-level advice and guidelines for writing sane, manageable, scalable CSS</strong></a> - CSS를 작성할 때 적용하기 좋은 조언들이 한가득 담긴 글입니다. 단순히 BEM같은 클래스 네이밍 컨벤션에 대한 이야기가 아니라는데 주목해주세요. <code class=\"language-text\">@CSS</code></li>\n<li><a href=\"https://overreacted.io\"><strong>Overreacted</strong></a> - Redux의 제작자이자, 지금은 리액트 코어 개발자로 일하고 있는 <a href=\"https://mobile.twitter.com/dan_abramov\">Dan Abramov</a>의 블로그입니다. 개인 블로그를 최근에 열었다는게 오히려 신기할 정도인데요. 리액트의 내부 동작을 알기 쉽게 설명해주는 글이 많습니다. <code class=\"language-text\">@Developer</code> <code class=\"language-text\">@React</code> <code class=\"language-text\">@OSS</code></li>\n<li><a href=\"https://johngrib.github.io/wiki/git-alias/\"><strong>편리한 git alias 설정하기 - 기계인간 John Grib</strong></a> - Git을 GUI로만 쓰시는 분들에게는 별로 공감이 되지 않는 주제일 수 있으나, Git CLI를 더 유용하게 이용할 수 있도록 만들어주는 다양한 팁이 공유된 글입니다. <code class=\"language-text\">@Git</code> <code class=\"language-text\">@Terminal</code></li>\n<li><a href=\"https://metatags.io\"><strong>Meta Tags — Preview, Edit and Generate</strong></a> - 주요 사이트 및 애플리케이션에 사용되는 OpenGraph가 어떤 모양으로 나타날지 직접 메타 태그를 입력해보고 눈으로 견본을 확인할 수 있는 웹 애플리케이션입니다. <code class=\"language-text\">@Tool</code></li>\n<li><a href=\"https://edykim.com/ko/post/tech-has-a-toxic-tone-problem-lets-fix-it/\"><strong>(번역) 기술 업계의 독성 말투 문제, 고칩시다! - Here, Edward 👨🏻‍💻</strong></a> - \bIT 업계에서 일하면서 언제나 커뮤니케이션의 중요성을 실감하고 있습니다. 커뮤니케이션에 문제가 발생하는 상황은 여럿 있지만, 이 글은 독성 말투에 초점을 맞추어 좋지 않은 예와 현실적인 대안을 제시하고 있습니다. <code class=\"language-text\">@Developer</code></li>\n<li><a href=\"https://www.24a11y.com/2018/web-components-still-need-to-be-accessible/\"><strong>Web components still need to be accessible - 24 Accessibility</strong></a> - 웹 컴포넌트를 만들 때도 당연히 접근성을 신경써야 한다는 글입니다. 그게 다는 아닙니다. SPA(Single Page Application)을 만들면서 우리는 컴포넌트의 구조를 어떻게 잘 작성하는지만 신경 쓸 때가 많은데, 결국 그렇게 작성한 코드의 결과물은 브라우저에 그려지는 DOM입니다. 그 DOM의 접근성을 신경써야 하는 것은 프론트엔드 개발자의 의무입니다. <code class=\"language-text\">@Web</code></li>\n<li><a href=\"https://cimfalab.github.io/deepscan/2016/08/code-review-1\"><strong>JavaScript 코드 리뷰 - 코드 리뷰 문화 – 좋은 JavaScript 코드 작성을 위한 블로그</strong></a> - 제목은 자바스크립트 코드 리뷰라고 이야기하고 있지만, 어떤 언어 기반이라 하더라도 팀에 코드 리뷰를 적용하는 방법을 잘 안내하고 있는 훌륭한 글입니다. <code class=\"language-text\">@Developer</code></li>\n</ul>\n<h2 id=\"마치며\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h2>\n<p>원래는 10개정도만 추려보려 했는데 목록이 산으로 가버렸네요. 다음 달부터는 매달치 TIL 의 정리본을 월말에 공유할 예정입니다. 글을 발행하기 위한 정리를 하면서 저도 복습할 기회를 얻을 수 있어서 좋네요.</p>\n<p>여기서 몇 개라도 유용한 정보를 얻어가셨으면 좋겠습니다. 새해 복 많이 받으세요.</p>","id":"5edcdb86-32ef-52c4-92e6-1ba08a7e1a11","frontmatter":{"date":"2018-12-30","path":"/posts/today-i-learned-best-2018","title":"Today I Learned - 2018년 Best of Best","tags":["TIL","Learning","Reading","Programming"],"category":"Today I Learned"}},{"excerpt":"지난 해 회고는 개인 노트에 작성해놓고 외부에 발행하지 않았지만, 올해는 적당히 정리하여 블로그에 발행을 해보기로 했다. 시간 흐름대로 모든 것을 작성하기엔 내용이 쓸데없이 장황해질 것 같아 중요한 파트별로 나누어 작성을 했다. 1. Work(무슨 일을 했나) 2. Study(무엇을 익혔나) 3. Good(뭘 잘했나) 4. Bad(뭘 못했나) 5. Goal(내년엔 무엇을 해볼까) Work(무슨 일을 했나) 상반기 야놀자 CX…","html":"<p>지난 해 회고는 개인 노트에 작성해놓고 외부에 발행하지 않았지만, 올해는 적당히 정리하여 블로그에 발행을 해보기로 했다.<br>\n시간 흐름대로 모든 것을 작성하기엔 내용이 쓸데없이 장황해질 것 같아 중요한 파트별로 나누어 작성을 했다.</p>\n<p><strong>1. Work(무슨 일을 했나)</strong><br>\n<strong>2. Study(무엇을 익혔나)</strong><br>\n<strong>3. Good(뭘 잘했나)</strong><br>\n<strong>4. Bad(뭘 못했나)</strong><br>\n<strong>5. Goal(내년엔 무엇을 해볼까)</strong></p>\n<h2 id=\"work무슨-일을-했나\"><a href=\"#work%EB%AC%B4%EC%8A%A8-%EC%9D%BC%EC%9D%84-%ED%96%88%EB%82%98\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Work(무슨 일을 했나)</h2>\n<h3 id=\"상반기\"><a href=\"#%EC%83%81%EB%B0%98%EA%B8%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상반기</h3>\n<p>야놀자 CX서비스실로 이동하자마자 받은 미션은 상반기까지 <a href=\"https://m.yanolja.com\">야놀자 iOS/안드로이드 앱과 유사한 경험을 줄 수 있는 모바일 웹 애플리케이션</a>을 제작하는 것이었다. 어쩌다보니 하나의 제품을 시작부터 런칭까지 마무리하는 것이 나에게 처음 있는 일이었는데, 리소스(일정, 인력 등)는 부족하고 모르는 것은 많았다. 그런데 어쩌다 보니 자연스럽게 프로젝트의 기술적 방향을 이끄는 역할까지 맡고 있었다. 툴링, 설정, 트러블슈팅은 대부분 도맡아 하고 다른 팀원들이 비지니스 로직과 컴포넌트 개발에 집중할 수 있도록 도왔다.</p>\n<p>거기다 특정 도메인에 맞추어 처리해야하는 데이터가 복잡했는데, 이를 최대한 안정적으로 처리하기 위해 이미 팀 빌딩이 되어있는 iOS/안드로이드 팀원분들을 열심히 쫓아가며 설계에 대한 조언을 얻기도 했다.</p>\n<p>거기서 힌트를 얻은 것이 함수형 프로그래밍, <code class=\"language-text\">Either</code> 모나드 등이었다. 이미 타입스크립트와 Next.js 기반 커스텀 설계 등 알아야 할 것이 많은 상황에서, 무작정 나 혼자 공부해서 코드에 반영하고 전파하는것 보다 다 함께 스터디를 하는게 좋겠다는 생각이 들어 <a href=\"https://rinae.dev/posts/functional-javascript-review\">함수형 프로그래밍 책</a>으로 아침 스터디를 진행했다.</p>\n<p><strong>다만 의욕이 너무 앞서서 업무 하느라 피곤한 와중에 2시간 일찍 출근해서 스터디를 진행하다 보니</strong> 그때나 회고를 작성하는 지금이나 죄송스러운 마음이 든다. 강제성이 없었는데도 함께 참여해주신 분들께 고마울 따름이다.</p>\n<p>하지만 점점 내가 가진 능력 대비 해야 하는 업무가 부담스러워지고, 발전하고자 하는 욕구에 제동이 걸리기 시작하던 중 좋은 기회가 생겨서 <a href=\"https://protopie.io_\">프로토파이</a>를 만드는 Studio XID(스튜디오씨드, 이하 씨드)에 프론트엔드 개발자로 이직하게 되었다.</p>\n<h3 id=\"하반기\"><a href=\"#%ED%95%98%EB%B0%98%EA%B8%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>하반기</h3>\n<p>회사 규모는 더 작을지라도 훌륭한 개발자분들이 많이 계신 곳에 오게 되어 전반적으로 만족스럽게 씨드에서 하반기를 보낼 수 있었다. 지난번 회사 프로젝트에서 처리해야 하는 데이터에 신경을 많이 썼다면 이번에 담당하게 된 프로젝트는 UI를 어떻게 미려하게 구현하고, 리액트+타입스크립트+MST(<code class=\"language-text\">mobx-state-tree</code>)를 어떻게 잘 활용할 수 있을지 알아나갔다. 이 모든 것을 혼자 해두셨던 <a href=\"https://hyunseob.github.io/resume/\">이현섭</a>님 덕에 많은 것을 배울 수 있었다.</p>\n<p>다른 파트 동료분들과의 교류를 하고 싶어서 매주 한번 씩 있는 Dev Weekly 과정을 개선하여 배운 점 / 이야기하고 싶은 점을 돌아가며 이야기할 수 있는 자리를 마련했다. <a href=\"http://softwaretherapist.blogspot.com/2009/11/blog-post_7.html\">자신이 속한 밴드에서 가장 못하는 연주자가 되라는 말 처럼</a> 못난 연주자 자리를 지키며 많은 것을 배우고 있다.</p>\n<p>팀원들과 적극적인 의사소통을 하고 자기주도적인 환경에서 개발을 진행하다 보니 <strong>'개발자는 단순히 기능 구현만 잘 한다고 다가 아니다'</strong> 라고 막연히 알고만 있던 말이 무척 실감났다. 내 자신의 개발 능력 뿐 아니라 업무 능력도 조금씩 진화해가고 있다는 느낌이 든다.</p>\n<h2 id=\"study무엇을-익혔나\"><a href=\"#study%EB%AC%B4%EC%97%87%EC%9D%84-%EC%9D%B5%ED%98%94%EB%82%98\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Study(무엇을 익혔나)</h2>\n<ul>\n<li>\n<p>프로젝트에 TDD까진 아니더라도 최대한 테스트를 빠르게 도입할 수 있도록 노력을 기울여봤다.</p>\n<ul>\n<li>각종 리액트 테스팅 관련 글 번역</li>\n<li><a href=\"https://testingjavascript.com\">Kent C. Dodds의 Testing Javascript 코스</a> 수강</li>\n<li>데이터 처리 함수에 스냅샷 테스트라도 도입</li>\n<li><a href=\"https://github.com/storybooks/storybook/tree/next/addons/storyshots/storyshots-core\">Storyshots</a>, <a href=\"https://github.com/kentcdodds/react-testing-library\"><code class=\"language-text\">react-testing-library</code></a> 작게나마 도입 등</li>\n</ul>\n</li>\n<li>타입스크립트를 그럭저럭 익혀 리액트 프로젝트에 활용할 수 있을 정도는 익혔다. 많은 글과 영상을 탐독했다.</li>\n<li>함수형 프로그래밍, JS 디자인 패턴 그룹 스터디를 진행했다. <a href=\"http://aladin.kr/p/ObDTM\">디자인 패턴 스터디에 사용 된 책</a>은 어지간하면 추천하고 싶지 않다.</li>\n<li><a href=\"http://aladin.kr/p/76MFl\">프로그램 디자인, 어떻게 할 것인가</a> 등 프로그래밍의 기초 자체에 소홀히 하지 않기 위한 책을 읽었다.</li>\n<li>\n<p>다른 프로그래밍 언어의 기초라도 익혀보려 시도했다.</p>\n<ul>\n<li><strong>Scala:</strong> <a href=\"http://aladin.kr/p/JoKvW\">프로그래밍 스칼라</a> 책을 한번 쓱 보고 <a href=\"http://aladin.kr/p/j6kUs\">스칼라로 배우는 함수형 프로그래밍</a> 책을 봤는데 둘 다 영문판으로 봐서 그런지 제대로 머리에 들어오지 않은데다, 함수형 프로그래밍 책은 어려워서 중간에 포기했다. 나중에 내공이 더 쌓인 다음 다시 도전하고 싶다.</li>\n<li><strong>Go:</strong> <a href=\"http://aladin.kr/p/Jngxn\">Discovery Go</a> 책을 가지고 스터디를 시도해봤으나 언어의 활용을 어떻게 할지 잘 와닿지 않은데다 동기부여가 잘 되지 않아 <a href=\"https://tour.golang.org/\">A Tour of Go</a> 정도만 마친 수준으로 끝냈다.</li>\n<li><strong>ClojureScript:</strong> 씨드의 백엔드가 클로저로 되어 있어서 관심이 생겼다. 근데 당장 JVM 클로저는 쓸 일이 없으니 JS로 변환되는 클로저스크립트라도 한번 익혀서 사이드 프로젝트를 해볼 마음으로 기초를 익혀봤다. 이걸 활용해서 JS로 된 웹 게임을 클로저스크립트로 포팅해보려 했으나 중간에 손 놓고있다 잊어버렸다.</li>\n</ul>\n</li>\n<li>블로그에 16개의 글을 발행했다. 번역문이 대다수였지만, 한 달에 한 편이라도 발행해보고자 노력했다. 글을 쓰지 못한 달도 있었다.</li>\n<li>\n<p>외부에서 기술 발표를 두 번이나 하게 되었다. 개발자로서 다른 사람들 앞에서 발표를 한 것은 처음이다.</p>\n<ul>\n<li><a href=\"https://festa.io/events/49\">Seoul.js Lightning Talk</a>에서 Maybe / Either 모나드에 대해 간단히 활용하는 이야기를 했다. 모나드의 개념까지 갈 시간도 없어서(나도 잘 설명 못하고) 어떤 예를 들어 활용하는 정도만 보여주었다.</li>\n<li>이상한모임 원데이이모콘에서 <a href=\"https://youtu.be/qfp6AGcVnDQ\">웹 컴포넌트를 소개하는 발표를 했다.</a> 우연히 흥미가 생겨서 회사 Dev Weekly 에서 발표했던 내용을 더 다듬어서 이야기한 것이다.</li>\n</ul>\n</li>\n<li>모 기업의 소프트웨어 교육 과정 첫 시간에 강연 초청을 받아 부족하게나마 학생들에게 어떤 커리어를 밟아나갈 수 있을지, 어떤 노력을 기울이면 좋을지 내 경험을 바탕으로 궁금증을 조금이라도 풀어주는 자리를 가졌다. 참가자분들의 열의 가득한 눈빛과 질문을 받고 나도 노력 에너지를 재충전한 기분이 들었다.</li>\n</ul>\n<h2 id=\"good뭘-잘했나\"><a href=\"#good%EB%AD%98-%EC%9E%98%ED%96%88%EB%82%98\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Good(뭘 잘했나)</h2>\n<ul>\n<li><strong>이직하길 잘했다.</strong> 당시에는 이직하기 애매한 시기라고도 생각했고, 자신감도 부족했으나 모든 일에는 운과 타이밍이 적절히 맞아들어가고 좋은 기회가 왔을 때 그걸 거머쥐는 것도 능력 중 하나라고 느끼게 되었다.</li>\n<li>연초에 타입스크립트 도입을 하길 잘했다. 또한 함수형 프로그래밍 개념을 조금이라도 이해한 뒤 적용을 한 것도 당시 데이터 처리를 효율적으로 하는데 많은 도움이 되었다.</li>\n<li>외부 발표를 하길 잘했다. 사실 만약에 한다고 해도 내년에 도전해봐야겠다고 막연하게 생각하고 있었으나 기회가 더 빨리 찾아왔다. 불안하고 걱정되기도 했지만 만약 앞으로도 다른 분들에게 유용한 내용을 발표할 자리가 있으면 기꺼이 참여할 생각이다.</li>\n<li>노트 앱으로 <a href=\"https://notion.so\">노션</a>이 떠오르고, 나도 많이 추천을 하는 편이지만 내 메인 노트 앱은 <a href=\"https://bear.app\">베어</a>로 유지하고 있길 잘했다. 노션도 훌륭한 앱이지만 내 글쓰기 패턴 상 베어가 더 적절한 도구였다. 올 10월에 프로 1년 구독이 갱신되었다.</li>\n<li>\n<p>몇 가지 장비를 구입하길 잘했다.</p>\n<ul>\n<li><strong>맥북 12인치 중고:</strong> 회사에서 지급받은 맥북 프로 15인치를 보조하고, 가볍게 가지고 다니기 편하니까 구입했다. 약간 느리지만 회사 프로젝트 개발도 충분히 가능하다. 다만 당시 중고장터에서 가장 저렴하고 적당한 사양의 물건을 구입하다보니 로즈골드 컬러를 쓰고 있는게 아쉽다. 스페이스 그레이가 좋은데..</li>\n<li><strong>플스4 프로:</strong> 틈틈이 재밌는 게임을 잘 즐길 수 있었다. 물론 바빠서 못할 때도 있었지만 날이 추워지면서 슬금슬금 플레이시간이 늘고 있다</li>\n<li><strong>델 U2718Q:</strong> 27인치 4K 모니터. 가격은 좀 비쌌지만 기존에 쓰던 싸구려 중소기업 4K 모니터와 비교하니 돈 값 한다고 느꼈다.</li>\n<li><strong>소니 WH-1000XM3:</strong> 노이즈 캔슬링 헤드폰. 사실 M2를 이베이 리퍼로 사서 잘 쓰다가 '굳이 업글 할 필요가 있어보이진 않는데?' 라고 생각했으나 손에는 이미 M3가 들려있었다. 더 나은 노이즈 캔슬링, 음질, 착용감 등 좋은 업그레이드이긴 하지만 지출이 조금 뼈아프긴 했다. 지금도 M2 리퍼가 가격만 좋으면 충분히 권할만 하다고 생각한다.</li>\n<li><strong>아이폰 XS:</strong> 솔직히 이건 충동구매 맞지만, 화면이 커지면서 글 보기가 한결 편해지니 만족스럽다. 카메라는 아직 제대로 활용할 일이 없어서 모르겠다.</li>\n</ul>\n</li>\n<li>\n<p>여행을 다녀오길 잘했다.</p>\n<ul>\n<li>4월 일본, 6월 제주도, 12월 다시 일본</li>\n<li>작년까지는 여기저기 돌아다니는데 신경을 썼지만 이제 여행을 간다고 하면 누군가를 만나기 위해 가거나 가볍게 현지인처럼 돌아다니는 느낌으로 가게 되었다. 특히 내가 평발이라 오래 걷기 힘들다는 것을 다시금 깨달은 이후 여행할 때 최대한 무리하지 않게 되었다. 만난 분들과 이런저런 이야기를 하며 좋은 영감을 얻기도 했다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"bad뭘-못했나\"><a href=\"#bad%EB%AD%98-%EB%AA%BB%ED%96%88%EB%82%98\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bad(뭘 못했나)</h2>\n<ul>\n<li>겨울이 다가오자마자 의욕과 컨디션이 확 떨어졌다. 겨울 이전에도 컨디션 관리를 제대로 못해서 고생한 순간이 여럿 있었다. 특히 이 일을 오래 하고 싶으면 건강 관리는 알아서 꾸준히 해 주어야 하는데, 원체 몸을 움직이는데는 게을러서 그런지 쉽지 않다.</li>\n<li>위의 장비 지름 이외에도 자잘하게 쓸데없는 지름들이 있었다. 괜히 시간낭비 돈낭비를 한 적도 있었지만 호기심 때문에라도 써보고 싶었던 것들이긴 했다.</li>\n<li>진정 빡세게 집중해서 일한 순간이 그리 많지 않았다. 결과물은 내지만 자꾸 집중력이 딴데로 샐 때가 많았다. 뽀모도로 도입 등 개선의 여지는 있다.</li>\n<li>UI 개발 능력을 키우기 위한 시간 투지를 많이 하지 않았다. CSS를 잘 다루는 능력이나, 애니메이션을 잘 구현하는 능력 등은 아직 갈 길이 멀다. 있는 디자인 보고 페이지 구현하는 것은 그럭저럭 할 수 있다 하더라도 그 이상을 해 내는 능력을 갖추어야겠다. 특히 UI/UX 에 대해 기본 지식을 쌓아두려다 미처 손대지 못했다.</li>\n<li>사이드 프로젝트를 하나도 못했다. 못 할 수도 있는거지만 원래 진행해보려던 클로저스크립트로 간단한 웹 게임 만들기도 손 놓고 있다가 잊어버린게 아쉽다. 6월즈음 사이드프로젝트로 <a href=\"https://festa.io\">Festa</a>팀에 합류해보았으나 이직한 직후에 정신없어서 제대로 참여 하지 못했다. 얼렁뚱땅 발을 빼게 되어 죄송하다.</li>\n<li>책을 더 많이 읽지 못했다. 올해 주로 자료를 얻었던 곳은 트위터였다. 하지만 마냥 트랜디한 정보를 흡수하고 전달하는 것 보다 본질적인 내용에 집중하고 싶을 때, 내가 원하는 호흡으로 지식을 습득하고자 할 때는 책이 더 맞는다고 생각한다. 읽으려고 모셔놓고 책갈피만 꽂혀있는 책들이 몇 권 된다.</li>\n<li>UI 테스트를 더 적극적으로 작성하지 못했다. UI 테스팅은 단순히 단위 테스트를 하는 것 보다 훨씬 어렵게 느껴졌다. 어디부터 시작해야할지 아직도 막막하긴 하지만 최근에 조금씩 실마리가 보이고 있어서 다시 천천히 접근해보려 한다.</li>\n</ul>\n<h2 id=\"goal내년에는-무엇을-해볼까\"><a href=\"#goal%EB%82%B4%EB%85%84%EC%97%90%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%84-%ED%95%B4%EB%B3%BC%EA%B9%8C\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Goal(내년에는 무엇을 해볼까)</h2>\n<ul>\n<li><strong>더 미려한 UI, 편리한 UX 개발을 위해 노력한다.</strong>  </li>\n<li><strong>견고한 테스트를 기반으로 더 안정적인 애플리케이션을 개발하기 위해 노력한다.</strong>  </li>\n<li><strong>책을 통해 기반 지식을 견고히 다지는데 더 많은 시간을 써본다.</strong>  </li>\n<li><strong>영어 학습을 별도로 진행한다.</strong>  </li>\n<li><strong>더 좋은 글이나 번역문을 발행할 수 있도록 노력한다.</strong>  </li>\n<li><strong>오픈 소스 커뮤니티에 코드로 기여할 기회를 더 만들어본다.</strong>  </li>\n</ul>\n<p>더 적어볼까 했지만 이미 너무 많은 욕심을 부린 것 같아 이 정도로 멈추고, 내년 6월에 다시 돌아보는 시간을 가져야겠다.<br>\n개발자로서 제 2의 인생을 시작한지 3년 3개월이 넘어가고 있다. 지금까지의 시간을 돌아보고 나서 앞을 바라보니 2019년은 내 삶에서 최고의 한 해가 될 수 있으리라 기대한다.<br>\n이 글을 읽는 분을 비롯해서 다른 분들에게도 좋은 일이 가득했으면 좋겠다.</p>","id":"94380757-e9c4-5495-8a11-d99dae223819","frontmatter":{"date":"2018-12-28","path":"/posts/retrospective-2018","title":"2018년 회고","tags":["Learning","Reading","Programming"],"category":"Retrospective"}},{"excerpt":"제가 처음 신입 웹 개발자로 모 회사에 들어갔을 때는 정말 아는게 전혀 없다시피 했습니다. 국비지원 교육과정에서 보낸…","html":"<p><img src=\"https://cl.ly/7aa4bdfc2d2f/node-js-textbook-cover.jpg\" alt=\"Node.js 교과서 표지\"></p>\n<p>제가 처음 신입 웹 개발자로 모 회사에 들어갔을 때는 정말 아는게 전혀 없다시피 했습니다. 국비지원 교육과정에서 보낸 6 개월의 시간을 제대로 활용하지 못했기 때문에(일부는 교육과정 탓을 하고 싶지만 본질적으론 저의 문제였지요) 루비 온 레일즈(이하 레일즈)로 웹 개발을 하기 위해 무엇을 알아야 할지 전혀 감이 잡히지 않았습니다. 루비는 책으로 기본적인 문법을 꾸역꾸역 익혔지만, 이후에 무언가 본격적으로 만들어보려고 문서를 들여다보면 온갖 어려운 용어들이 튀어나왔습니다. 당장은 HTTP 부터 막혔고 RESTful 은 무엇이며, 라우트를 어떻게 구성하는지, XSRF 등등 모르는게 너무 많았습니다. 아마 레일즈가 아닌 다른 웹 프레임워크 기반의 개발을 한다고 해도 똑같이 막혔을겁니다. 개발 뿐 아니라 Git 으로 버전 관리는 어떻게 해야할지도 모르겠고 터미널의 명령어들은 어렵기만 했습니다. 국내에 출간된 레일즈 관련 도서는 너무 오래되어 별로 도움이 되지 않았기 때문에 저는 직접 학습할 자료를 찾을 수 밖에 없었습니다. 그 때 발견한 것이 <a href=\"https://www.railstutorial.org/\">M.Hartl 의 Rails Tutorial(이하 레일즈 튜토리얼)</a> 이었습니다. 지금도 ‘레일즈를 배울 때 가장 좋은 책/튜토리얼이 무엇이냐’ 라는 질문이 올라오면 가장 많은 추천을 받는 책 중에 하나입니다. 레일즈 뿐 아니라 웹 개발 자체를 처음 접하는 사람들을 대상으로 삼은 것으로 보이며 트위터 클론 앱을 만들면서 루비 개발 환경 설정 및 루비의 기초를 익힌 뒤 레일즈로 웹 개발을 할 때 필요한 요소를 차근차근 익혀나갈 수 있는 아주 좋은 책입니다. 왜 노드 책 리뷰를 하는데 전혀 엉뚱한 책을 소개하는지 궁금하실겁니다. 이번에 감상평을 남길 조현영님의 ‘Node.js 교과서’가 이와 견줄만큼 충분히 좋은 내용을 담고 있기 때문입니다.</p>\n<p>제가 리액트 기반 프론트엔드 개발에 역량을 집중해보기로 하고 백엔드 개발과 담을 쌓고 지낸지 1 년이 넘는 시간이 흘렀고, 제 자신도 자바스크립트에는 어느정도 익숙해졌지만 Node.js 를 활용하여 백엔드 개발을 할 일은 거의 없었습니다. 지난번에 Express 를 잠깐 만질 때 기본적인 부분도 파악하지 못한 상태로 코드에 손을 댔다가 문제 해결을 위해 꽤나 고생했었던 기억이 납니다. <a href=\"https://www.zerocho.com/\">Zerocho</a> 라는 닉네임으로 자바스크립트 &#x26; 개발 전반에 걸쳐 유용한 글을 공유하고 계신 조현영님의 Node.js 책이 나온다고 했을 때 제가 아쉽게 느꼈던 노드 사용법에 대한 많은 부분을 익힐 수 있으리라 기대했습니다. 그리고 그 기대는 잘 들어맞았습니다.</p>\n<p>이 책은 제목답게 Node.js 의 기본적인 설명부터 시작하여 개발환경 설정 부터 Express 와 Pug 를 활용한 웹 서비스를 구축하는 과정을 거쳐 마지막에는 배포 및 서버리스에 대한 개념까지 다루고 있는 하나의 ‘교과서’ 입니다. 특히 마음에 들었던 부분은 기초 내용을 다루고 있는 책의 앞부분이었습니다. Node.js 란 무엇인지, 그리고 어떠한 특성을 가지고 있는지 초보 개발자들에게 이벤트 루프와 싱글 스레드 기반 비동기 I/O 를 몇 페이지만에 명쾌하게 설명하는 내용을 보고 감탄했습니다. 시작부터 감탄했지만 이렇게 짧으면서 핵심을 잘 짚은 설명들이 책 전반에 걸쳐 나옵니다. 그래서 핵심을 파악하기에 아주 좋습니다. 초보 개발자들이 어렵사리 여러 책과 웹페이지를 뒤져서 간신히 익혀 정리할 수 있는 내용을 미리니름(스포일러) 하는 느낌이 들 정도입니다. Express 를 본격적으로 다루기 이전까지의 내용이 전반적으로 괜찮았습니다. Node.js API 에 대해서 보통 자세히 살펴보지 않은 채 Express 다루는 것만 찾아보게 되는데 그러다 보면 반드시 막히는 구간이 생기게 됩니다. 하지만 책의 앞부분에서 설명한 API 를 숙지해두면 문제의 지엽적인 부분보다 핵심에 다가가기 훨씬 쉬워지고, 각종 오픈소스 코드도 훨씬 이해하기 수월해집니다. 다만 자바스크립트의 기초를 습득하고 있어야 이 책의 내용을 수월하게 따라갈 수 있습니다. 저는 <a href=\"http://www.hanbit.co.kr/store/books/look.php?p_code=B2328850940\">러닝 자바스크립트</a> 라는 책을 먼저 보시길 추천합니다.</p>\n<p>초반을 넘어가면 모든 백엔드 개발은 Express 를 활용하는데, Express 가 Node.js 진영에서 압도적으로 높은 점유율을 차지하고 있는 프레임워크이기 때문에 별 문제는 없습니다. SQL, NoSQL 을 각각 다루면서 템플릿 엔진으로 Pug 까지 활용하고 있다보니 일반적인 웹 애플리케이션을 다루는데 필요한 내용은 다 다루고 있습니다. 챕터마다 구현에 필요하거나 반드시 알고 있어야 하는 개념들을 간단하고 핵심적인 내용만 잘 추려 설명하고 있기 때문에, 초보 Node.js 개발자라면 이 책에서 익힌 내용을 기반으로 삼아 지식을 점진적으로 확장한다면 별로 무리없이 개발을 할 수 있으리라 생각합니다. 대부분의 예제 코드를 직접 따라 쳐보면서 별로 지루한 내용은 없었습니다. 프론트엔드쪽 코드는 일부러 호환성을 고려해서 조금 옛날 방식으로 작성하긴 했지만 오히려 초심자들에게 기본적인 개념을 잘 심어주기 위한 저자의 고민이 엿보였습니다.</p>\n<p>보통 Node.js 를 다루면서 빠지기 힘든 기술이 웹소켓입니다. 저도 직접 웹소켓으로 뭘 구현해본적은 없었기 때문에 특히 재밌게 해당 챕터의 내용을 따라갈 수 있었습니다. 마냥 다른 서비스를 보면서 신기해하던 채팅 기능은 이런식으로 이루어질 수 있다는데 감탄했고, 의외로 구현하기 어렵지도 않아서 한번 더 놀랐습니다. 프론트엔드 부분에서 최적화 할 요소들은 더 많겠지만 어디까지나 백엔드 위주로 다루는 책이기 때문에 별로 신경쓰이진 않았습니다. 만약에 어딘가 아쉬워서 더 개량을 하는 방식으로 자율학습을 하고 싶으시다면 대부분의 챕터 마지막에 있는 ‘스스로 해보기’ 단락을 살펴보고 도전해보시면 더 큰 학습 효과를 얻으실 수 있습니다.</p>\n<p>약간 아쉬웠던 점은 트위터 클론을 만드는 챕터에서 카카오톡 OAuth 를 적용하였는데, OAuth 를 설명한 부분을 찾지 못했습니다. OAuth 가 무엇이고 왜 이걸 쓰는지 다른 챕터에서 개념을 설명했던 것처럼 충분히 설명할 수 있었으리라 생각합니다. 그리고 노드 버전 관리자(nvm, n)와 Git 설정을 책의 맨 뒷부분에 배포 설정을 하는 챕터에서 다루고 있는 것도 아쉬웠습니다. 앞서 말씀드린 레일즈 튜토리얼과 비교하면서 특히 아쉬웠던 점인데요. 레일즈 튜토리얼은 루비 개발환경 설정을 하면서 자연스럽게 터미널 명령어와 Git 명령어를 익히고, 각 챕터마다 커밋과 푸시를 하는 방법까지 잘 설명이 되어있습니다. 이 책을 보는사람 입장에서 로컬에서 예제 코드만 따라서 쳐 보는 정도를 넘어 실무에 근접한 경험을 습득하고 싶을 수 있는데 이에 대한 고려가 조금 부족했다고 생각합니다. 또한 책에는 Node.js 10 입문서 라고 써있음에도 딱히 이전버전과 비교하여 버전 10 의 어느 부분이 다른지 그 차이를 실감할 수 없었습니다. 아예 새로 접근하는 사람이었다면 별로 신경쓰지 않을 내용이지만, 이미 노드 개발환경을 접한 사람이 개념 다지기를 위해 이 책을 봤을때 혼란스러울 수 있습니다.</p>\n<p>결과적으로 이 책은 웹 개발자로 입문하고자 하는데 막 JS 기초에 익숙해진 사람들에게 한 번쯤은 반드시 읽어볼만한 책이라고 권하고 싶으며, 프론트엔드 개발에만 신경쓰다가 API 서버쪽에서는 무슨 일이 일어나고 있고, 앞으로 자신이 개발을 할 때 어떤 부분을 더 신경써야할지 알고 싶은 주니어 프론트엔드 개발자들에게도 추천합니다. 이외에 Node.js 웹 개발이 익숙한 개발자들이 개념 복습을 하거나, 다른 언어를 오래 했는데 Node.js 를 해야한다고 하면 이 책을 집어서 빠르게 핵심만 살펴보면 바로 감을 잡을 수 있으리라 생각합니다. 오랜만에 정말 즐겁게 본 교과서였습니다.</p>","id":"d295283f-ec40-5381-887b-207b4d6ff7c7","frontmatter":{"date":"2018-08-28","path":"/posts/nodejs-textbook-review","title":"'Node.js 교과서' 감상평","tags":["Reading","Javascript","Node.js"],"category":"Review"}},{"excerpt":"감상평을 적기에 앞서 몇 가지 가벼운 질문이 있다. 혹시 아래의 문제를 보았을 때 모르는 내용이 2가지 이상 있거나, 알더라도 바로 명확한 답변이 떠오르지 않는지 생각해보라. (ES…","html":"<p><img src=\"https://cl.ly/2c1k0h132v3U/%E1%84%89%E1%85%A9%E1%86%A8%E1%84%80%E1%85%B5%E1%87%81%E1%84%8B%E1%85%B3%E1%86%AB_%E1%84%8C%E1%85%A1%E1%84%87%E1%85%A1%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%B8%E1%84%90%E1%85%B3_cover.jpg\" alt=\"속깊은 자바스크립트 표지\"></p>\n<p>감상평을 적기에 앞서 몇 가지 가벼운 질문이 있다. 혹시 아래의 문제를 보았을 때 모르는 내용이 2가지 이상 있거나, 알더라도 바로 명확한 답변이 떠오르지 않는지 생각해보라. (ES5 기준)</p>\n<ul>\n<li>아래의 코드는 무엇이 잘못되었는가? 문제가 있다면 어떻게 해결할 수 있는가?</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> len <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tdocument<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You clicked div #\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>자바스크립트의  <code class=\"language-text\">this</code> 가 어떤 상황에 따라 다르게 묶이는지 이해하고 있는가?</li>\n<li>자바스크립트의 변수 범위(스코프)는 어떻게 정해지는가?</li>\n<li>자바스크립트의 이벤트 루프는 무엇이며 어떤 방식으로 동작하는가?</li>\n<li>DOM을 다루는 자바스크립트 코드를 작성시 성능을 최적화하기 위한 고려 방안을 3가지 이상 알고 있는가?</li>\n<li>사용자가 브라우저로 웹 사이트 접속 시 초기 로딩의 불편함을 최소화하기 위한 자바스크립트 코드를 구상할 수 있는가?</li>\n</ul>\n<p>답을 떠올리기 힘들었다면 자신이 자바스크립트의 제대로 알고 사용하고 있는지 다시 한번 깊이 고민해 볼 필요가 있다. 다행히도 이 책의 많은 부분은 그 '기본' 을 충실하게 짚어주는 편이다.</p>\n<p>그래도 코뿔소 책(자바스크립트 완벽 가이드 - 데이비드 플래너건 저)처럼 방대한 내용으로 독자를 허우적거리게 만들거나, 나비 책(자바스크립트 핵심 가이드 - 더글라스 크락포드 저)처럼 겉으로 보기에 너무나 축약된 내용이라 여러번 곱씹어야 내용을 알 법한 어려운 수준의 책도 아니다.\n그렇기에 나는 방금 소개한 두 책보다 자바스크립트 기본을 익힌 다음에 이 책을 먼저 탐독하길 권하고 싶다.</p>\n<p>2017년을 보내고 2018년을 맞이하는 현재 시점에서 이 책을 읽는 독자들이 가져야 할 마음가짐은 <strong>온고지신</strong> 이다.\n아마 이 책에 적힌 유용한 예제 코드를 직접 개발을 하며 사용할 일은 거의 없으리라 생각한다.\n하지만 Babel, Typescript같은 트랜스파일러를 통해(Typescript는 약간 성격이 다르지만 결과물이 일반 자바스크립트임을 감안하여 이 글에서는 트랜스파일러라 명명한다) 변환된 코드들은 이 책의 예제 코드와 유사한 형태를 가지고 있다.\n그리고 <strong>왜</strong> 이런 형태를 가지고 있는지, 문제에 부딪힐 때 어떤 방식으로 개량할 수 있는지 생각할 수 있는 지식을 얻을 수 있다.</p>\n<p>대충 프레임워크 가져다 쓰고, 대충 ES6+ 로 코드 작성하고, 대충 Webpack + Babel 등의 문서를 참고하여 코드 변환되도록 빌드하고 배포하면 (프론트엔드) 웹 애플리케이션이 뚝딱 나온다고 생각하기 쉬운 현재 프론트엔드 생태계 속에서\n자신이 작성하는 자바스크립트 코드의 무게를 다시 생각하는 계기가 될 것이다. <a href=\"https://medium.com/dev-channel/the-cost-of-javascript-84009f51e99e\">우리는 언제나 이 무게를 신경써야 한다.</a></p>\n<p>조금 특이하지만 나는 책의 첫 번째 챕터인 <strong>웹과 자바스크립트</strong>에서 그 옛날 자바스크립트가 어떻게 여기까지 오게 되었는지 간단히 짚어보고,\n후반부 챕터인 <strong>자바스크립트 성능과 사용자 경험 개선</strong>에서 캐싱, 미니피케이션, gzip 등의 HTTP 요청 관련 최적화로 성능을 개선하는 부분까지 웹 개발의 큰 그림을 짚어보는 구성이 마음에 들었다.\n초보 프론트엔드 개발자들이 소홀히하기 쉽고, 아무도 바로 알려주지 않는 ‘최적화’ 에 대해 고민할 수 있는 요소를 알려주기 때문에 기초 수준이나 기초를 벗어나는 수준 즈음에 이 책을 읽어보는 것을 권한다.</p>\n<p>나머지 주요 내용(클로저, 프로토타입과 프로토타입 상속, 자바스크립트만의 독특한 패턴 - 특히 이벤트 델리게이션 등)은 사실 요즘에는 키워드만 알고 검색하면 얼마든지 잘 설명된 자료를 찾아볼 수 있을 것이다.\n다만 내가 보았을 때 그 자료들은 다 영어로 쓰여있었다. 영문으로 된 글을 읽는데 익숙지 않다면 이 책의 내용이 더 유용하리라 기대한다.</p>","id":"19f4e327-1a2d-5c33-b8a6-1ac11e57335c","frontmatter":{"date":"2017-12-21","path":"/posts/javascript-in-depth-review","title":"'속깊은 Javascript' 감상평 및 추천사","tags":["Reading","Javascript"],"category":"Review"}},{"excerpt":"자바를 맛만 보고, 실질적으로 루비를 첫 프로그래밍 언어로 접하여 지금까지 사용해오고 있습니다. 어느 덧 2년이 다 되어가네요. 루비는 비교적 간단하면서도 강력한 언어이지만, 현재는 루비 온 레일즈(이하 레일즈) 라는 걸출한 웹 프레임워크의 기반이 되는 언어라는 인식 이외에는 그다지 유명세를 얻지 못하고 있습니다. 반면 비슷하게 간단하면서 강력한데다 전 세계적인 인지도를 가지고 있는 프로그래밍 언어가 있습니다. 파이썬(Python…","html":"<p>자바를 맛만 보고, 실질적으로 루비를 첫 프로그래밍 언어로 접하여 지금까지 사용해오고 있습니다. 어느 덧 2년이 다 되어가네요.<br>\n루비는 비교적 간단하면서도 강력한 언어이지만, 현재는 루비 온 레일즈(이하 레일즈) 라는 걸출한 웹 프레임워크의 기반이 되는 언어라는 인식 이외에는 그다지 유명세를 얻지 못하고 있습니다.</p>\n<p>반면 비슷하게 간단하면서 강력한데다 전 세계적인 인지도를 가지고 있는 프로그래밍 언어가 있습니다. 파이썬(Python) 입니다.<br>\n사실 언제라도 필요에 따라 마음만 먹으면 파이썬을 금방 사용할 수 있으리라 생각해 왔는데 좀처럼 그럴 기회가 없었습니다.<br>\n그래서 이번에 길벗 출판사에서 진행하는 이벤트를 통해 가볍게 파이썬을 접해보는 계기를 만들고자 '파이썬 코딩의 기술(Effective Python) 책을 리뷰하기로 했습니다.</p>\n<p>이 책을 한 마디로 표현한다면 파이썬의 <strong>'요람부터 무덤까지'</strong> 를 알려주는 책이라고 할 수 있습니다.<br>\n저자는 파이썬다운 생각을 하는 방법부터 시작하여 함수, 클래스, 병렬성, 내장 모듈, 협력, 제품화까지 파이썬으로 프로그래밍을 하는데 있어 필요한 모든 요소를 관통하며 묵직한 조언을 던져줍니다. </p>\n<p>파이썬이라는 언어는 그 자유로움 때문에 프로그래머가 각자 편한 방식으로 코딩을 하다가 성능이나 가독성, 원인을 알 수 없는 버그 등 많은 문제에 직면하기 쉽습니다. 그렇기 때문에 저는 프로그래밍 언어를 익힐 때 해당 언어의 사고방식을 체득하려는 노력을 합니다.<br>\n이 책은 그 사고방식을 익히는데 최적화되어 있으며, 평소에 잊고 있다가도 필요한 부분에 바로 적용할 수 있도록 예제 코드가 단계별로 잘 제공되어 있습니다. 특히 바로 잘 정돈된 코드만 나열하는 게 아니라 좋지 않은 예를 어떤 과정과 사고방식을 통해 개선해가는지 보여주는 점이 가장 마음에 들었습니다.</p>\n<p><strong>다만 이 책을 제대로 활용하기 위해서는 기초적인 파이썬 문법을 알고 있어야 합니다.</strong><br>\n초보자 혹은 다른 언어 기반지식을 가지고 파이썬을 가볍게 익히신 분들이라면 <strong>바로 읽어보셔야 할 책이라고 생각하며</strong>, '어떻게 하면 더 효율적인 코드를 작성할 수 있을까?' 라는 고민을 안고 있는 중급 파이썬 개발자들에게도 조심스레 추천드리고 싶습니다.</p>","id":"0d332587-f91d-5216-a7a3-be5b41b6d4fa","frontmatter":{"date":"2017-06-28","path":"/posts/effective-python-review","title":"파이썬 코딩의 기술(Effective Python) 리뷰","tags":["Reading","Python"],"category":"Review"}},{"excerpt":"Ruby on Rails(이하 레일즈) 를 쓰는 사람이라면 DHH(데이비드 하이네마이어 한슨)의 이름을 모르는 사람은 거의 없을 것이다. 레일즈 프레임워크의 창시자일 뿐 아니라 거침 없는 입담과 자신만의 확고한 방식으로 레일즈라는 거대한 프로젝트를 이끌고 있는 개발자이기 때문이다. 사실 나도 그냥 DHH의 이름을 들으면 떠오르는 점은 ‘레일즈의 창시자’ 정도밖에 없었다. 덧붙이면 그 전에는 PHP…","html":"<p>Ruby on Rails(이하 레일즈) 를 쓰는 사람이라면 DHH(데이비드 하이네마이어 한슨)의 이름을 모르는 사람은 거의 없을 것이다. 레일즈 프레임워크의 창시자일 뿐 아니라 거침 없는 입담과 자신만의 확고한 방식으로 레일즈라는 거대한 프로젝트를 이끌고 있는 개발자이기 때문이다.</p>\n<p>사실 나도 그냥 DHH의 이름을 들으면 떠오르는 점은 ‘레일즈의 창시자’ 정도밖에 없었다. 덧붙이면 그 전에는 PHP로 개발을 하다가 너무 답답해하던 중 루비라는 언어를 접하고, 사랑에 빠져(말 그대로이다. 이는 DHH가 <a href=\"https://harfangk.github.io/2017/01/27/quora-qna-session-with-david-heinemeier-hansson-jan-25-2017-ko.html\">2017년 1월에 Quora에서 진행한 AMA</a>에서 사용한 표현이다.) 레일즈를 개발하게 되었다는 것 정도를 알고 있었다.</p>\n<p>그러다 위에 링크한 DHH의 AMA를 읽게 되었고, 글을 다 읽고 나니 ‘이 사람은 대체 어떤 사람이고, 무슨 생각을 하고 있을까? 배울 점이 있다면 배우고 싶다’ 라는 생각이 들었다. 그렇게 접하게 된 대표적인 저서가 이 <strong>Remote</strong>이다.</p>\n<p>이 책은 ‘원격근무’ 라는 것이 어떤 것인지 소개하면서 흔히 알려진 오해들을 바로잡고, 어떤 방식으로 원격근무를 적용하면 좋을 지 안내하는 가이드 역할을 하는 책이다. 실제로 DHH가 설립한 회사 37signals(현 Basecamp, 이들이 운영하고 있는 원격 근무 서비스의 이름과 같다)는 전면적인 원격 근무 체제를 도입하고 있고, 아주 성공적으로 운영하고 있는 회사 중 하나이다.</p>\n<p>‘원격 근무는 회사에 가지 않고 집에서 작업하기 때문에 관리자의 통제가 힘들다’라는 게 일반적으로 원격 근무를 바라보는 사람들의 생각일 것이다. 하지만 오히려 관리자의 통제가 정말로 필요한 경우는 어떤 것인지 다시 한번 생각해보아야 한다. 근태 관리인가? 아니면 생산성인가? ‘관리자가 직접 직원을 볼 수 없기 때문에 통제가 힘들다’ 는 것은 근태 위주의 생각이고, 근로자가 자신이 가능한한 최적의 환경에서 최고의 생산성을 낼 수 있는 작업방식으로 회사 일에 기여를 하면 자연스레 회사와 근로자 모두에게 이득이 될 것이다.</p>\n<p>더불어 출퇴근 시간으로 하루에 일정 시간을 소비하고, 시간 뿐 아니라 출퇴근 지옥 속에서 정신력까지 소모하는 생활을 살아가는 시대에 ‘출퇴근 문제’를 도려내면 삶이 얼마나 편하게 바뀔 지 상상해보라. 저절로 편안한 기분이 든다.</p>\n<p>요즘은 다양한 도구가 많이 개발되어 있어서(Basecamp, 각종 메신저, 구글 닥스 등) 세계 각지에 떨어진 사람들도 <strong>언어만 통하면</strong> 서로 협력하여 업무를 진행하는데 전혀 무리가 없다. 물론 다시 한번 강조하지만 언어가 통하는게 중요하다. 해외의 회사에 원격근무자로 취직을 한다 하더라도 주로 <strong>영어 쓰기</strong>가 큰 장벽이 될 것이다.</p>\n<p>원격근무자를 고용하는 회사에서 고려할 사항 뿐 아니라 원격근무로 일하는 사람도 고려해야 할 사항들이 여러가지 있다. 보통 집에서 혹은 근처 카페에서 작업을 한다고 하면 딴 짓을 하거나 게으르게 행동하여 생산성이 떨어질까 걱정하는 경우가 많은데, 오히려 이 책은 ‘과도하게 일에 몰입하지 않도록 주의하라’고 경고한다. 나 자신도 비슷한 일을 경험한 적이 있어서 크게 공감되었다. 간단한 작업을 돕고 마무리 지으려고 했는데, 카페에서 화장실 한번 가지 못하고 5시간을 앉아있던 뒤에야 간신히 일어날 수 있었다. 회사에서 있었다면 어떤 식으로든 몸을 일으켜 움직이는게 쉬웠을 것이다.</p>\n<p>마지막으로 이 책은 원격근무를 하는데 필요한 중요한 요소 중 하나는 '동기’임을 강조한다. 관리자 입장에서도 원격근무자의 업무 성과가 제대로 나오지 않는 경우에 주어진 업무가 제대로 구성되어있고 동기를 부여하는 업무인지 확인하라고 말하고 있고, 원격근무자에게도 스스로를 탓하기 보다 근무환경을 다시 한 번 살펴보라고 권한다.</p>\n<p>겉으로 보기엔 형태가 달라 보이지만 거대한 오픈소스 프로젝트도 원격근무의 좋은 예가 될 수 있다. 얼굴도 마주한 적 없는 다양한 사람들이 거대한 프로젝트를 완성시켜나가는 모습은 경이롭다.</p>\n<blockquote>\n<p>우리가 개발한 웹프레임워크인 루비온레일스는 십여 년이 넘는 기간 동안 새로운 기능을 넣고 코드 품질을 개선하면서 진화시켜왔다. 이는 전 세계 십여 개 국가, 수백 개 도시에서 3천 명이 넘는 개발자들(이들은 서로 만난 적도 없는 사람들이다)이 오랜 기간 코드를 발전시킨 결과다.</p>\n<p>원격근무를 도입하는 과정에 의심이 들거나 장애물을 만날 때는 이렇게 생각하면 도움이 된다. “전 세계의 3천 명이 넘는 개발자들을 관리하고 조율하는 프로젝트도 있는데, 이 정도쯤이야!” 아마 골치 아픈 문제가 곧 해결될 수 있으리라는 안도감을 느낄 것이다.</p>\n<p>--- p183, p184</p>\n</blockquote>\n<p>모든 직종이 원격근무를 적극적으로 도입할 수는 없다. 하지만 개발자라는 직업은 지금 시대에 원격근무를 하기에 가장 탁월한 직업이라고 생각한다. 출근하러 집을 나서는 순간부터 '아 집에 돌아가고 싶다’ 라는 생각이 들게 되는 삶 보다 자신이 하는 일을 진정 즐기면서 회사와 함께 상생할 수 있도록 원격근무를 적절히 도입하는 사례가 점점 늘어나는 모습이 기대된다. 나 또한 원격근무라는걸 제대로 해보고 싶다.</p>\n<hr>\n<ul>\n<li>책 링크: <a href=\"http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=50265443\">알라딘</a></li>\n</ul>","id":"34ae41e1-2c1f-5060-b9b1-e84c0f9f5395","frontmatter":{"date":"2017-02-26","path":"/posts/remote-the-book-review","title":"‘Remote - 사무실 따윈 필요 없어!’ 를 읽고","tags":["Reading","Remote Job"],"category":"Review"}}],"tagName":"Reading"}}