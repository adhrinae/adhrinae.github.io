{"pageContext":{"postsByTag":[{"excerpt":"Dockerfile 작성까지 지금까지 회사에서 CI 빌드 및 배포용 도커 이미지로  이런 것을  쓰고 있었는데, 만들어진지 1년이 넘은 설정인데다 타겟 노드 버전에 문제가 있어 이번에 새로 이미지를 만들어보기로 했다. 주된 원인은   v2.1 기반으로 프로젝트를 변경하다 보니 주요 의존성 중 하나인   가 해당 노드 버전을 지원하지 않는다는 에러가 나면서 CI…","html":"<h2 id=\"dockerfile-작성까지\"><a href=\"#dockerfile-%EC%9E%91%EC%84%B1%EA%B9%8C%EC%A7%80\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dockerfile 작성까지</h2>\n<p>지금까지 회사에서 CI 빌드 및 배포용 도커 이미지로 <a href=\"https://github.com/kriasoft/docker-node-ci\">이런 것을</a> 쓰고 있었는데, 만들어진지 1년이 넘은 설정인데다 타겟 노드 버전에 문제가 있어 이번에 새로 이미지를 만들어보기로 했다. 주된 원인은 <code class=\"language-text\">create-react-app</code> v2.1 기반으로 프로젝트를 변경하다 보니 주요 의존성 중 하나인 <code class=\"language-text\">eslint</code> 가 해당 노드 버전을 지원하지 않는다는 에러가 나면서 CI가 실패했기 때문이다.</p>\n<p>그래서 <strong>답답하니 내가 뛴다</strong> 정신을 발휘하여 <code class=\"language-text\">Dockerfile</code> 을 새로 작성하고 <a href=\"https://hub.docker.com\">Docker Hub</a>에 배포하는 작업까지 도전해보았다. 너무 당연한거지만 최소한 로컬 머신에 Docker CLI(보통은 Docker Desktop과 함께 설치)는 설치되어 있어야 한다.</p>\n<p>이번 이미지를 사용하면서 베이스가 된 이미지는 Node.js 공식 도커 이미지이다. 그 중에 <code class=\"language-text\">node:dubnium-alpine</code> 을 사용했다. <code class=\"language-text\">dubnium</code> 은 v10 의 코드 이름이며, v10이 현재 LTS니까 일일이 버전을 지정해주는 것 보다 낫다고 판단했다. <code class=\"language-text\">lts-alpine</code> 이라고 하면 메이저 lts가 바뀌었을 때 큰 문제가 발생할 수도 있다고(김칫국을 마시고) 지양했다. <code class=\"language-text\">alpine</code> 은 알파인 리눅스 기반 이미지를 이야기하는데, 컨테이너 환경에 특화된 가볍고 안정적인 리눅스라는 것 같다.</p>\n<p>그래서 기존에 사용하던 이미지의 코드 및, <a href=\"https://circleci.com/docs/2.0/custom-images/\">Circle CI의 문서</a> 등을 참고하여 처음으로 <code class=\"language-text\">Dockerfile</code> 을 만들어봤다.</p>\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token keyword\">FROM</span> node<span class=\"token punctuation\">:</span>dubnium<span class=\"token punctuation\">-</span>alpine\n\n<span class=\"token keyword\">ENV</span> AWS_CLI_VERSION 1.16.83\n<span class=\"token keyword\">ENV</span> DOCKER_COMPOSE_VERSION 1.23.2\n<span class=\"token keyword\">ENV</span> WATCHMAN_VERSION 4.9.0\n\n<span class=\"token keyword\">RUN</span> set <span class=\"token punctuation\">-</span>ex \\\n    &amp;&amp; apk add <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>no<span class=\"token punctuation\">-</span>cache bash git openssl<span class=\"token punctuation\">-</span>dev openssh<span class=\"token punctuation\">-</span>client ca<span class=\"token punctuation\">-</span>certificates curl g++ libc6<span class=\"token punctuation\">-</span>compat \\\n      linux<span class=\"token punctuation\">-</span>headers make autoconf automake libtool python3 python3<span class=\"token punctuation\">-</span>dev libc6<span class=\"token punctuation\">-</span>compat \\\n    <span class=\"token comment\"># Upgrade pip</span>\n    &amp;&amp; python3 <span class=\"token punctuation\">-</span>m ensurepip \\\n    &amp;&amp; rm <span class=\"token punctuation\">-</span>r /usr/lib/python*/ensurepip \\\n    &amp;&amp; pip3 install <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>no<span class=\"token punctuation\">-</span>cache<span class=\"token punctuation\">-</span>dir <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>upgrade pip setuptools \\\n    <span class=\"token comment\"># Install AWS CLI</span>\n    &amp;&amp; pip3 install awscli==$<span class=\"token punctuation\">{</span>AWS_CLI_VERSION<span class=\"token punctuation\">}</span> \\\n    &amp;&amp; aws <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>version \\\n    <span class=\"token comment\"># Install Docker</span>\n    &amp;&amp; apk add <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>no<span class=\"token punctuation\">-</span>cache docker \\\n    <span class=\"token comment\"># Install Docker Compose</span>\n    &amp;&amp; pip3 install docker<span class=\"token punctuation\">-</span>compose==$<span class=\"token punctuation\">{</span>DOCKER_COMPOSE_VERSION<span class=\"token punctuation\">}</span> \\\n    <span class=\"token comment\"># Install Watchman</span>\n    &amp;&amp; cd /tmp; curl <span class=\"token punctuation\">-</span>LO https<span class=\"token punctuation\">:</span>//github.com/facebook/watchman/archive/v$<span class=\"token punctuation\">{</span>WATCHMAN_VERSION<span class=\"token punctuation\">}</span>.tar.gz \\\n    &amp;&amp; tar xzf v$<span class=\"token punctuation\">{</span>WATCHMAN_VERSION<span class=\"token punctuation\">}</span>.tar.gz; rm v$<span class=\"token punctuation\">{</span>WATCHMAN_VERSION<span class=\"token punctuation\">}</span>.tar.gz \\\n    &amp;&amp; cd watchman<span class=\"token punctuation\">-</span>$<span class=\"token punctuation\">{</span>WATCHMAN_VERSION<span class=\"token punctuation\">}</span> \\\n    &amp;&amp; ./autogen.sh; ./configure; make &amp;&amp; make install \\\n    &amp;&amp; cd /tmp; rm <span class=\"token punctuation\">-</span>rf watchman<span class=\"token punctuation\">-</span>$<span class=\"token punctuation\">{</span>WATCHMAN_VERSION<span class=\"token punctuation\">}</span> \\\n    <span class=\"token comment\"># Fix Yarn configuration</span>\n    &amp;&amp; npm config set scripts<span class=\"token punctuation\">-</span>prepend<span class=\"token punctuation\">-</span>node<span class=\"token punctuation\">-</span>path true \\\n    &amp;&amp; yarn <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>version</code></pre></div>\n<h2 id=\"이미지-생성\"><a href=\"#%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%83%9D%EC%84%B1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이미지 생성</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># Dockerfile 이 있는 폴더에서 실행\n# -t 옵션은 생성된 이미지에 이름을 매기는 것 {저장소 이름}:{태그} 로 입력한다\ndocker build -t rinae/node-ci-alpine:1.0.0 .</code></pre></div>\n<p>처음에는 설치한 주요 패키지의 버전 확인하는 커맨드를 안넣었더니, 커맨드 오류로 제대로 설치가 되지 않더라도 스무스하게 넘어가는 문제가 있었다. 그래서 버전 확인하는 커맨드를 추가해주었다. 그리고 이번에 알게 된건데 <code class=\"language-text\">pip</code> 로 패키지를 설치할 때 특정 버전을 지정하고자 한다면 <code class=\"language-text\">{PACKAGE_NAME}=={VERSION}</code> 입력 시 등호가 한 개가 아니라 <strong>두 개</strong> 라는 것이다. 처음에 한개 넣어놓고 이미지 배포했다가 CI에서 터져서 이미지를 다시 생성했다.</p>\n<h2 id=\"만들어진-이미지-삭제\"><a href=\"#%EB%A7%8C%EB%93%A4%EC%96%B4%EC%A7%84-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%82%AD%EC%A0%9C\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>만들어진 이미지 삭제</h2>\n<p>처음에는 위의 방법처럼 해서 <code class=\"language-text\">1.0.1</code> 버전을 만들었는데 애초에 잘못된 이미지이니 <code class=\"language-text\">1.0.0</code> 으로 다시 만들어야겠다는 생각이 들었다. 그래서 기존에 만들었던 이미지를 지우는 명령어를 입력했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># 빌드 된 이미지 확인\ndocker images\n\n# -f(--force) 옵션 없인 실행이 안되었다.\ndocker rmi -f {이미지 해시}</code></pre></div>\n<h2 id=\"이미지-이름태그-바꾸기\"><a href=\"#%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%9D%B4%EB%A6%84%ED%83%9C%EA%B7%B8-%EB%B0%94%EA%BE%B8%EA%B8%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이미지 이름(태그) 바꾸기</h2>\n<p>기존의 <code class=\"language-text\">1.0.0</code> 이미지를 지워버렸고, 아까 만들었던 <code class=\"language-text\">1.0.1</code> 의 이름을 돌려놓고 싶어서 검색을 해 보니 <code class=\"language-text\">docker tag</code> 명령어를 사용하면 간단히 해결되었다. 다만 이름이 바로 바뀌는게 아니라 기존의 이미지 이름은 남아있기 때문에 지우는 명령어는 따로 실행해주어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker tag {옛날 이름} {새 이름}\ndocker rmi {옛날 이름}</code></pre></div>\n<h2 id=\"이미지-docker-hub에-배포하기\"><a href=\"#%EC%9D%B4%EB%AF%B8%EC%A7%80-docker-hub%EC%97%90-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이미지 Docker Hub에 배포하기</h2>\n<p>CLI에서 로그인을 해 준다음에 간단한 명령어만 입력하면 손쉽게 Docker Hub로 이미지가 올라간다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker login # 아이디와 비밀번호 입력\ndocker push {이미지명}:{태그명}</code></pre></div>\n<p>그럼 <a href=\"https://hub.docker.com/r/rinae/node-ci-alpine\">이렇게</a> 이미지 배포 완료.</p>\n<p><a href=\"https://github.com/adhrinae/node-ci-alpine\">Dockerfile도 Github 저장소에 올려두었다.</a> 더 잘 아는 분들의 조언 부탁합니다.</p>\n<h2 id=\"참고-자료\"><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고 자료</h2>\n<ul>\n<li><a href=\"https://github.com/nodejs/docker-node\">GitHub - nodejs/docker-node: Official Docker Image for Node.js</a></li>\n<li><a href=\"https://circleci.com/docs/2.0/custom-images/\">Using Custom-Built Docker Images - CircleCI</a></li>\n<li><a href=\"https://subicura.com/2017/01/19/docker-guide-for-beginners-2.html\">초보를 위한 도커 안내서 - 설치하고 컨테이너 실행하기</a></li>\n</ul>","id":"fbb98aea-9732-5c26-b868-f88045be3380","frontmatter":{"date":"2019-01-09","path":"/posts/docker-101","title":"Dockerfile 작성부터 이미지 배포까지 간단 요약","tags":["Docker"],"category":"Docker"}}],"tagName":"Docker"}}