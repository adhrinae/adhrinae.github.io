{"pageContext":{"postsByTag":[{"excerpt":"한동안 바쁜 나날을 보내고 있기에…","html":"<p>한동안 바쁜 나날을 보내고 있기에 2월까지는 뭔가 제대로된 정보 수집이나 공부를 못하고 있습니다. 하지만 지금 진행하는 프로젝트 자체가 공부라는 생각도 들어서 크게 아쉽진 않습니다.</p>\n<p><a href=\"https://adhrinae.github.io/posts/today-i-learned-best-2018\">지난번에 올렸던 글</a> 처럼 나름의 태그를 매기던 방식으로 정리를 하려 하는데, 이번엔 글의 양이 훨씬 적으니 카테고리를 먼저 나누어서 보기 편하게 정리해보려 합니다. 본문은 개인 노트를 옮겨서 정리하다보니 평어체로 되어있습니다.</p>\n<h2 id=\"읽을거리---일반\"><a href=\"#%EC%9D%BD%EC%9D%84%EA%B1%B0%EB%A6%AC---%EC%9D%BC%EB%B0%98\" aria-label=\"읽을거리   일반 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>읽을거리 - 일반</h2>\n<ul>\n<li>\n<p><a href=\"http://newspeppermint.com/2018/11/05/m-envy/\">부러움의 시대를 이기는 방법</a> - 이전에 한번 공유된 글을 탭만 열어 두었다가 드디어 읽었다. 처음에는 소셜 미디어 사용의 부정적인 영향 위주로만 이야기 하는 것으로 보였으나, 뒷부분에 핵심 내용이 서술되어 있었다. 근본적으로 소셜미디어를 활용하는 것은 정보 공유 이외엔 그닥 좋은 효과가 없다는데 공감한다. 그리고 부러움이라는 감정을 단순히 부정적으로 생각하지 말고 내 다음 목표를 설정하기 위한 이정표로 삼아야 한다는 말도 공감한다. 나는 많은 사람들을 보며 부러움을 느낀다. 조금이라도 그 사람들과 가까운 모습이 되고 싶다는 생각을 한다. 하루아침에 이루어지지 않을 일이라는 것을 인지해야 한다.</p>\n<ul>\n<li>\"그렇다고 나는 우리가 항상 자신의 삶을 더 솔직하게 밝혀야 한다고 생각하지는 않습니다. 어쩌면 그저 입을 닫는 것이 답일 수도 있습니다. 물론 사회적으로 부당한 일을 널리 알리는 것은 사회를 변화시키는 데 일조할 수도 있습니다. 하지만 대부분의 자아 성찰이나 자신의 슬픔을 알리는 글, 무보정 셀카는 결국 자신을 포장하기 위한 것입니다.\"</li>\n<li>\"당신이 부러움을 느끼는 대상이 성취가능한 것이라면, 적절한 단계를 밟아 이를 이루면 됩니다. 하지만 동시에 스스로에게, 내가 어느 선에서 만족할 것인지를 물어야겠지요.\"</li>\n</ul>\n</li>\n<li><a href=\"http://harpersbazaar.co.kr/life/%EC%9A%B0%EC%95%84%ED%95%9C-%EA%B0%80%EB%82%9C%EC%9D%98-%EC%8B%9C%EB%8C%80\">우아한 가난의 시대 | Harper's BAZAAR Korea</a> - 위의 글과 직접적인 관련은 없다 하더라도 약간 연관은 있다. 이것저것 지른게 있어서 그런 것도 있지만, 고정 지출 때문에 답이 없는 통장을 보며 괜시레 마음이 답답해지던 와중에 발견한 글이다. 이 시대에 살아가는 놀라울 정도로 가난하면서 놀라울 정도로 소비하는 사람 중 하나로서, 이 가난을 어떻게 받아들이고 풀어나갈지 조금 더 고민해볼 필요가 있겠다. 적어도 본문에서 자동차에 대한 부정적인 이야기는 공감한다.</li>\n</ul>\n<h2 id=\"읽을거리---개발자\"><a href=\"#%EC%9D%BD%EC%9D%84%EA%B1%B0%EB%A6%AC---%EA%B0%9C%EB%B0%9C%EC%9E%90\" aria-label=\"읽을거리   개발자 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>읽을거리 - 개발자</h2>\n<ul>\n<li><a href=\"https://ko.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi\">하노이의 탑 (개념 이해하기) | 알고리즘 |칸아카데미</a> - 어쩌다 술자리에서 하노이의 탑 알고리즘을 풀어보라는 이야기를 듣고 도전해 보았는데 머리에 확 와닿는데 까지 시간이 걸리고 최적화를 시도해보는데도 또 시간이 걸리는 등 쉽게 접근한 것 치곤 꽤 어려웠다. 그 와중에 칸아카데미의 강좌가 맥은 잘 짚어주었다.</li>\n<li>\n<p><a href=\"https://overreacted.io/ko/things-i-dont-know-as-of-2018/\">2018년, 내가 모르는 기술들 - Overreacted</a> - Dan의 Overreacted 블로그가 오픈되어 번역 기여를 받고 있다. 그래서 번역된 글 중 하나인데, 잘 번역된데다 내용도 명료하다. 실제로 이 글의 의도는 마지막에 이렇게 정리되어 있다.</p>\n<ul>\n<li><strong>당신이 좋아하는 개발자조차도 당신이 아는 많은 것을 알지 못할 수 있습니다.</strong></li>\n<li><strong>당신의 지식 수준에 관계없이, 당신의 자신감은 크게 다를 수 있습니다.</strong></li>\n<li><strong>훌륭하고 경험있는 개발자는 지식격차에도 불구하고 가치있는 전문지식을 보유하고 있습니다.</strong></li>\n</ul>\n</li>\n<li><a href=\"https://overreacted.io/ko/the-elements-of-ui-engineering/\">UI 엔지니어링의 요소들 - Overreacted</a> - 윗 글의 링크에 이런 것도 있길래 줍줍. 유행 그 자체보다는 UI 문제를 해결하기 위해 고민하다보니 자연스레 무언가 나왔다는 이야기가 인상깊게 들린다. 또한 글 전반적으로 강조하는 '이와 같은 UI 고민을 라이브러리나 프레임워크 없이 작게라도 직접 만들어보는 노력을 해 보라' 는 말이 굉장히 중요하게 느껴진다.</li>\n<li><a href=\"https://www.slideshare.net/cybaek/201403\">안정적인 서비스 운영 - Slideshare</a> - 야금야금 읽고 있던 책의 이번 챕터는 <a href=\"http://aosabook.org/en/distsys.html\">‘확장성있는 웹 아키텍처와 분산 시스템’</a> 이었다. 그러다가 이 슬라이드를 참고하라는 조언을 들었는데 슬라이드가 책의 내용을 많이 보완해주었다. 내용은 조금 길지만 정말 웹 개발을 한다면 두고두고 곱씹어야 할 내용이다.</li>\n</ul>\n<h2 id=\"프론트엔드주로-리액트\"><a href=\"#%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%EC%A3%BC%EB%A1%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8\" aria-label=\"프론트엔드주로 리액트 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프론트엔드(주로 리액트)</h2>\n<ul>\n<li><a href=\"https://github.com/pfgray/chainable-components\">GitHub - pfgray/chainable-components: A composable API for reusable React code.</a> - 리액트 컴포넌트에 함수헝 체인 개념이 들어간 라이브러리. 살짝 보아하니 API가 꽤 잘 되어있고, 조합의 방법이 다양해서 여러모로 쓸만해보인다. 다만 기존에 컴포넌트를 작성해서 랜더링 할때랑 개념이 살짝 다르기 때문에 사람에 따라서 거부감이 일어날 수도 있겠다.</li>\n<li><a href=\"https://github.com/frontarm/create-react-blog\">GitHub - frontarm/create-react-blog: Start and deploy your own statically rendered blog with create-react-app</a> - <code class=\"language-text\">create-react-app</code> + MDX 기반의 블로그 생성기. 모듈 사용, 타입스크립트 지원, 기본 테마(Dan Abramov의 overracted.io 테마 기반) 등 깔끔하게 잘 되어있어서 JS 생태계를 조금만 알면 이거로 금새 블로그 만드는것도 그리 어렵지 않아보인다.</li>\n<li><a href=\"https://twitter.com/dan_abramov/status/1084089632562823168\">Dan Abramov의 CSS-in-JS에 대한 의견 트윗</a> - 전반적으로 DX(Developer eXperience 라고 추측)에는 도움이 될지 모르나 실제 사용자에게 이득되는 측면이 없고, 개발자마자 CSS-in-JS의 정의가 다른 것을 문제라고 제기하고 있다. 의미있는 의견이라고 생각한다.</li>\n<li><a href=\"https://github.com/callstack/linaria\">GitHub - callstack/linaria: Zero-runtime CSS in JS library</a> - 위의 트윗에 이어, 이전에 별을 찍어놨는데 이런 라이브러리가 있는지 잊고 있었다. Zero Runtime CSS-in-JS 를 표방하고 있다는게 상당히 흥미롭다. 바벨 플러그인으로 CSS 정적 파일을 생성하는 것으로 보이고 <code class=\"language-text\">props</code> 로 인한 동적인 스타일링은 CSS Variable 로 자동 대체하는 것 같다. 그렇다면 CSS Variable이 지원되지 않는 환경에서는 못쓰는건가?</li>\n<li><a href=\"https://github.com/piotrwitek/typesafe-actions\">GitHub - piotrwitek/typesafe-actions: Typesafe Action Creators for Redux / Flux Architectures (in TypeScript)</a> - 깔끔한 코드에 설명도 정말 잘 되어있는 타입스크립트 기반의 리덕스 액션과 관련된 라이브러리. 예제 코드를 보아하니 TS+Redux는 정말 힘든 길이라는 생각이 든다. 타이핑하는데 시간 다 보낼 기세.</li>\n<li><a href=\"https://medium.com/@mandy.michael/understanding-why-semantic-html-is-important-as-told-by-typescript-bd71ad41e6c4\">Understanding why Semantic HTML is important, as told by TypeScript.</a> - 타입스크립트의 인터페이스에 비유하여 시맨틱 마크업이 왜 중요한지 보여주는 글. 정말 간단한 두 개의 스니펫만으로도 전달하고자 하는 정보가 아주 명확하게 들어왔다. <code class=\"language-text\">div</code> 등으로 퉁치는 것은 마크업에 <code class=\"language-text\">any</code> 타입을 지정하는 것이나 마찬가지라는 거다.</li>\n<li><a href=\"https://react-testing-examples.com\">react-testing-library — React Testing Examples</a> - <code class=\"language-text\">react-testing-library</code>  를 활용한 컴포넌트의 통합 테스트를 다시 시도해보려던 차에 생각보다 많은 어려움에 부딪혔다. 그럴 때 일반적으로 쓰이는 테스팅 기법과 예제가 이 사이트에 많이 수록되어있어서 많은 참고가 되었다. 물론 이것만으로 커버하기엔 지금 프로젝트의 설계 상 아쉬위움이나 엣지 케이스가 많긴 하다.</li>\n</ul>\n<h2 id=\"도커\"><a href=\"#%EB%8F%84%EC%BB%A4\" aria-label=\"도커 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도커</h2>\n<ul>\n<li><a href=\"https://adhrinae.github.io/posts/docker-101\">Dockerfile 작성부터 이미지 배포까지 간단 요약</a> - 도커를 간단히 손댈 일이 있어서 직접 도전해보고 필요한 내용을 요약해보았다.</li>\n<li><a href=\"https://www.44bits.io/ko/post/why-should-i-use-docker-container\">왜 굳이 도커(컨테이너)를 써야 하나요? - 컨테이너를 사용해야 하는 이유 | 44bits.io</a> - 도커를 써야 하는 이유를 잘 정리해주셨다. 나도 도커 기반의 배포 방식이 너무 마음에 들어서 더 잘 알아보고 싶다.</li>\n</ul>\n<h2 id=\"도구-및-활용\"><a href=\"#%EB%8F%84%EA%B5%AC-%EB%B0%8F-%ED%99%9C%EC%9A%A9\" aria-label=\"도구 및 활용 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도구 및 활용</h2>\n<ul>\n<li><a href=\"https://www.producthunt.com/posts/minimo\">Minimo - An elegant, simplified new tab page | Product Hunt</a> - 크롬용 새 탭 화면 테마인데 심플하고 시커먼게 너무 마음에 든다.</li>\n<li><a href=\"https://www.lifewire.com/how-to-set-up-apple-mail-rules-2260876\">How to Set Up Apple Mail Rules</a> - 생각보다 맥 기본 메일 클라이언트가 나쁘지 않은 것 같은데 알림 설정이 제한적인 것 같아 조금 검색을 해보니 이런게 나왔다. 설정의 <strong>Rules</strong> 를 활용하여 다양한 조건을 만족하면 알림을 울리거나 메일 클라이언트가 독에서 방방 뛰도록 만들 수 있다. Gmail의 필터와 결합해서 쓰니 어느 정도 중요한 메일은 잘 확인하게 되었다.</li>\n<li>\n<p><a href=\"https://figma.com\">Figma</a>를 사용하면서 불편했던 점이 확대 축소와 가로 스크롤이었다. 이 모든 것들은 트랙패드를 사용하면 제스처로 아주 간단히 사용할 수 있지만 작업실에서 M570 트랙볼을 쓸 때는 일반 스크롤밖에 안달려있기 때문에 꽤나 고통스럽다. 하지만 모르고 있던 기본 단축키 조합을 슬랙 채널에서 공유받으면서 눈이 뜨였다.</p>\n<ul>\n<li>Cmd(Ctrl)+스크롤 - Zoom In/Out</li>\n<li><strong>Space+Drag - Panning</strong></li>\n<li>위의 패닝이 굉장히 중요한데 대부분의 툴에서는 아이콘이 손 모양으로 바뀌면서 화면을 잡아 끄는 기능이다. 사진 편집이나 디자인 툴에 익숙한 사람들은 대부분 알고 있다고 한다. 패닝 덕에 앞으로는 Figma를 편하게 이용할 수 있겠다.</li>\n</ul>\n</li>\n<li><a href=\"https://multiplestates.wordpress.com/2015/02/05/rename-a-local-and-remote-branch-in-git/\">Rename a local and remote branch in git – Multiple States Knowledge Base</a> - 브랜치 전략 중 하나로 <code class=\"language-text\">wip</code> 브랜치를 이용하기로 했는데, 작업이 다 끝난 브랜치를 <code class=\"language-text\">feature</code> 로 바꾸어 올리는게 귀찮기도 하고, 신경 안쓰면 계속 <code class=\"language-text\">origin</code> 에 남는 문제가 있었다. 하지만 검색해보니 이렇게 쉽게 푸시하면서 원격 브랜치도 정리할 수 있었다.</li>\n</ul>\n<h2 id=\"오픈-소스-프로젝트\"><a href=\"#%EC%98%A4%ED%94%88-%EC%86%8C%EC%8A%A4-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\" aria-label=\"오픈 소스 프로젝트 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오픈 소스 프로젝트</h2>\n<ul>\n<li><a href=\"https://github.com/streamich/modern-pick\">GitHub - streamich/modern-pick: Template string accessors to the selector rescue</a> - 템플릿 리터럴 문법을 활용한 JS Object picker. <code class=\"language-text\">styled-components</code> 의 문법을 보고 실제로 이런게 적용될 수도 있겠다고 생각했는데 가능하다는데서 놀랐다.</li>\n<li><a href=\"https://github.com/cats-oss/scaffdog\">GitHub - cats-oss/scaffdog: scaffdog is Markdown driven scaffolding tool.</a> - Hygen 은 자체 포맷으로 파일을 생성해주는 템플릿 엔진이었는데, 이 녀석은 마크다운 기반으로 파일을 생성해주는 템플릿 엔진이라서 훨씬 쉽게 접근할 수 있어보인다. CLI 도 더 친절하게 보인다.</li>\n</ul>","id":"5a66b831-4275-526c-9d3d-fd6a7ac8f3c0","frontmatter":{"date":"2019-01-27","path":"/posts/this-month-i-learned-1901","title":"This Month I Learned - 2019년 1월","tags":["TIL","Learning","Reading","Programming","React"],"category":"This Month I Learned"}},{"excerpt":"저는 2017년 10월부터 주력 노트 앱을  Bear 로 결정하고 꾸준히 사용해오면서 Today I Learned(TIL)을 작성하기 시작했습니다. 그 전에는 따로 적기보다는 읽고 나서 잊거나, 가끔 트위터에 좋은 글이나 Github에 공개된 오픈 소스 소프트웨어(OSS…","html":"<p>저는 2017년 10월부터 주력 노트 앱을 <a href=\"https://bear.app\">Bear</a>로 결정하고 꾸준히 사용해오면서 Today I Learned(TIL)을 작성하기 시작했습니다. 그 전에는 따로 적기보다는 읽고 나서 잊거나, 가끔 트위터에 좋은 글이나 Github에 공개된 오픈 소스 소프트웨어(OSS)를 간단히 요약하여 공유하는 정도만 하고 있었습니다. 한번 살펴 본 지식의 내재화를 위해 직접 노트에 작성하기 시작하면서 크고 작은 도움이 되었다고 생각합니다.</p>\n<p>이 글은 제가 어떻게 작성을 해 왔는지 간단히 경험을 공유하면서 올해 살펴봤던 글이나 트윗 OSS 중에 인상깊었던 것을 선별하여 공개하고자 합니다.</p>\n<h2 id=\"어떻게-작성하고-있었나\"><a href=\"#%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%9E%91%EC%84%B1%ED%95%98%EA%B3%A0-%EC%9E%88%EC%97%88%EB%82%98\" aria-label=\"어떻게 작성하고 있었나 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어떻게 작성하고 있었나?</h2>\n<p>Bear라는 앱은 태그 기반으로 노트의 카테고리를 구분할 수 있습니다. 태그는 노트 어디에나 넣을 수 있습니다. 매월 해당하는 Today I Learned 노트를 생성하고, 주 단위로 쪼갠 다음 그 주에 알게 된 지식을 리스트 아이템으로 정리하였습니다. 보통은 단순히 <code class=\"language-text\">포스트 링크 - 정리 혹은 느낀 점</code> 방식으로 정리했으나 제가 직접 작성한 글을 내부 노트 링크로 연결하거나 짧은 일기 형식의 글을 작성하기도 했습니다.</p>\n<p><img src=\"https://cl.ly/58cd92e5458a/til-post-1.png\" alt=\"TIL 작성 예\"></p>\n<p>노트 작성은 이런 식으로 하였고, 제가 특정 분야의 태그가 매겨져있는 노트를 찾을 때면 사이드바에서 태그를 선택하거나 그 태그 이름으로 검색을 하면 됩니다. 최대한 태그가 적게 생성되도록 노력했지만 대략 이정도의 태그가 나왔습니다.</p>\n<p><img src=\"https://cl.ly/40bdeca3ce0b/til-post-2.png\" alt=\"TIL 태그들\"></p>\n<p>체감상 제가 일하고 있는 분야가 분야다보니 <code class=\"language-text\">javascript</code>, <code class=\"language-text\">css</code> 태그를 많이 보았던 것 같습니다. 태그를 하는 방식은 여러분들이 편하신 대로 앱이나 정리 방식에 맞추어서 하시면 되겠습니다.</p>\n<h2 id=\"2018년-인상적이었던-배움\"><a href=\"#2018%EB%85%84-%EC%9D%B8%EC%83%81%EC%A0%81%EC%9D%B4%EC%97%88%EB%8D%98-%EB%B0%B0%EC%9B%80\" aria-label=\"2018년 인상적이었던 배움 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2018년 인상적이었던 배움</h2>\n<p>저 많은 목록 중 올해 제게 가장 인상깊었던 글의 링크나 트윗 등을 뽑아봤습니다. 어디까지나 개인적인 취향에 불과하기 때문에 참고삼아 보셨으면 좋겠습니다.\n각 아이템에 어울리는 주제를 <code class=\"language-text\">@</code> 기호와 함께 태그를 매겼습니다. 필요한 내용 검색하실 때 유용하게 사용될 수 있기를 바랍니다.</p>\n<ul>\n<li><a href=\"https://adhrinae.github.io/posts/write-mostly-integration-test-kr\"><strong>(번역) 테스트를 작성하라. 너무 많이는 말고. 통합 테스트를 많이 써라</strong></a> - 테스트를 할 가치가 있냐 없냐는 더 이상 논의 할 가치가 없는 주제라고 봅니다. 그렇다면 어떻게 애플리케이션을 효과적으로 테스트 할 것인가? 라는 고민거리를 가지고 있는 분들에게 실용적인 관점을 제공해주는 글입니다. <code class=\"language-text\">@Testing</code></li>\n<li><a href=\"https://twitter.com/minjang_kim/status/959849128053231619\"><strong>'개발자의 기본기' 를 생각하게 하는 트윗</strong></a> - 트위터 <a href=\"https://twitter.com/minjang_kim\">redacted (@minjang_kim)</a>님의 트윗 발췌. 작년 초에도 故 제럴드 와인버그와 이메일로 대화를 주고 받을 때 비슷한 조언을 들은 적이 있습니다. 그 시기 제럴드는 <a href=\"http://secretsofconsulting.blogspot.com/2017/02/how-long-can-i-remain-ruby-java-c.html\">이런 글</a>을 남겼습니다. 요약하자면 <strong>\"특정 언어의 프로그래머로 몇년 먹고살 수 있을지 전전긍긍하지 말고 ‘Programmer’ or ‘Problem-solver’ 같은 사람이 되어 살아남을 생각을 하라''</strong> 라는 내용입니다. <code class=\"language-text\">@Developer</code></li>\n<li><a href=\"https://adhrinae.github.io/posts/functional-js-tutorial\"><strong>자바스크립트로 함수형 프로그래밍 아주 살짝 맛보기</strong></a> - 올해 초 함수형 프로그래밍이란걸 실제로 어떻게 적용해봐야할지 긴가민가하다 작은 시도를 해 보았고, 그 과정을 글로 남겼습니다. 최대한 쉽게 기초적인 개념을 설명하려고 했고, 좋은 글 링크도 달았으니 관심 있으시다면 읽어보세요. <code class=\"language-text\">@FP</code></li>\n<li><a href=\"https://adhrinae.github.io/posts/fear-trust-and-javascript-kr\"><strong>(번역) 두려움, 믿음, 그리고 자바스크립트 - 언제 타입 시스템과 함수형 프로그래밍이 먹히지 않는가</strong></a> - 자바스크립트 환경에서 함수형 프로그래밍과 타입 시스템을 적용하려 할 때 고려할 수 있는 어려움을 짚어주는 글입니다. <code class=\"language-text\">@FP</code></li>\n<li><a href=\"https://github.com/Functional-JavaScript/FunctionalES\"><strong>GitHub - Functional-JavaScript/FunctionalES: ES6+, 함수형 프로그래밍, 비동기, 동시성 프로그래밍</strong></a> - <a href=\"http://aladin.kr/p/tntNr\">'함수형 자바스크립트 프로그래밍'</a>의 저자 유인동님이 ES6+ 기반으로 설명해주시는 함수형 프로그래밍 강좌 저장소입니다. 최근에 이 내용에서 더욱 발전한 내용으로 <a href=\"https://programmers.co.kr/learn/courses/7637\">유료 강좌</a>를 내놓으셨습니다. <code class=\"language-text\">@FP</code></li>\n<li><a href=\"http://hamait.tistory.com/m/712\"><strong>예외 처리에 대한 6가지 화두</strong></a> - Go 언어를 살짝 살펴보면서 예외 처리하는 방식이 독특하다고 생각했는데, 이 글을 읽으면서 조금 더 예외 처리에 대해 깊게 살펴볼 수 있었습니다. <code class=\"language-text\">@Fundamental</code></li>\n<li><a href=\"https://reactive.how\"><strong>RxJS and Reactive Programming - Animations and visual lessons</strong></a> - RxJS의 오퍼레이터가 어떤 방식으로 동작하는지 애니메이션과 함께 쉽게 익힐 수 있도록 알려주는 교재입니다. <code class=\"language-text\">@Rx</code></li>\n<li><a href=\"https://dev.to/lpasqualis/the-5-problem-solving-skills-of-great-software-developers-4e6\"><strong>The 5 Problem-Solving Skills of Great Software Developers - DEV Community 👩‍💻👨‍💻</strong></a> - 번역하려고 원작자에게 두번이나 연락을 시도했지만 답장이 없어 포기한 글입니다. 초보 개발자분들이라면 반드시 읽어보길 권합니다. 앞서 줄창 이야기한 '문제 해결 능력' 이라는게 대체 무엇인지 감을 잡을 수 있으실 테고, 일선 학교에서 의무적으로 진행하려고 하는 '소프트웨어 교육' 이라는 것을 이 글에서 보여주는 생각을 기본으로 가르쳐야 한다고 생각합니다. 하지만 현실은.. 🤦🏻‍♂️ <code class=\"language-text\">@Developer</code></li>\n<li><a href=\"https://medium.freecodecamp.org/yep-javascript-moves-fast-build-your-component-library-anyway-a50576ab3031\"><strong>Yep, JavaScript Moves Fast. Build Your Component Library Anyway.</strong></a> - 팀 단위로 재사용 가능한 컴포넌트 라이브러리를 구축할 필요성을 역설하는 글 <code class=\"language-text\">@React</code></li>\n<li><a href=\"https://github.com/30-seconds/30-seconds-of-code#take\"><strong>GitHub - 30-seconds/30-seconds-of-code: Curated collection of useful JavaScript snippets that you can understand in 30 seconds or less.</strong></a> - 한 개당 30초 이내로 살펴볼 수 있는 간단하고 실용적인 자바스크립트 스니펫 모음. CSS, 리액트 편 등도 있습니다. <code class=\"language-text\">@OSS</code> <code class=\"language-text\">@Javascript</code></li>\n<li><a href=\"https://dev.to/hzoo/i-was-not-ready-to-become-the-maintainer-of-babel-2j6\"><strong>I was not ready to become the maintainer of Babel - DEV Community 👩‍💻👨‍💻</strong></a> - 현재 <a href=\"http://babeljs.io\">바벨</a>을 풀타임으로 관리하고 있는 <a href=\"https://twitter.com/left_pad\">Henry Zhu</a>가 풀타임 메인테이너로 전업하고 얼마 되지 않아 남긴 글입니다. 흔히 가면 증후군(Imposter syndrome)이라고 여겨지는 증세를 우리가 어떻게 받아들이고 앞으로 나아갈 수 있을 지 영감을 줍니다. <code class=\"language-text\">@Developer</code></li>\n<li><a href=\"https://github.com/JaeYeopHan/Interview_Question_for_Beginner\"><strong>GitHub - JaeYeopHan/Interview<em>Question</em>for_Beginner: Technical-Interview guidelines written for those who started studying programming. I wish you all the best.</strong></a> - <a href=\"https://jbee-resume.now.sh\">한재엽</a>님이 만드신 개발자를 위한 기술 면접 문제가 정리된 저장소입니다. <code class=\"language-text\">@OSS</code> <code class=\"language-text\">@Developer</code></li>\n<li><a href=\"https://hackernoon.com/two-years-of-functional-programming-in-javascript-lessons-learned-1851667c726\"><strong>Two Years of Functional Programming in JavaScript: Lessons Learned</strong></a> - 실무에 자바스크립트로 함수형 프로그래밍을 2년이나 도입하셨던 분이 남긴 회고. 방법론에 대해 아쉬웠던 점, 하지 말아야 했을 점 등을 잘 정리했기 때문에 앞으로도 관심 있으신 분들이라면 자바스크립트 함수형 프로그램이을 도입하시기 전에 읽어보시면 좋습니다. <code class=\"language-text\">@FP</code> <code class=\"language-text\">@Javascript</code></li>\n<li><a href=\"https://ahnheejong.name/articles/becoming-better-programmer/\"><strong>프로그래머로서의 성장을 도왔던 태도들</strong></a> - <a href=\"https://ahnheejong.name/about\">안희종</a>님이 남긴 글입니다. 더 나은 프로그래머가 되기 위해 어떤 생각을 하고 노력을 했는지 정리되어 있습니다. <code class=\"language-text\">@Developer</code></li>\n<li><a href=\"https://brunch.co.kr/@springboot/35\"><strong>소프트웨어 개발의 지혜</strong></a> - 개발자로서 어떤 가치를 중요시하면서 소프트웨어를 개발하십니까? 개발자로서 본질적으로 중요하게 여겨야 하는 가치 뿐 아니라 소프트웨어 개발의 본질에 대해 정리한 내용도 아주 중요하다고 생각하는 글입니다. <code class=\"language-text\">@Developer</code></li>\n<li><a href=\"https://cs-playground-react.surge.sh\"><strong>Algorithms &#x26; Data Structures</strong></a> - 리액트 기반으로 만들어진 자료구조&#x26;알고리즘 학습용 웹앱입니다. <code class=\"language-text\">@OSS</code> <code class=\"language-text\">@Fundamental</code></li>\n<li><a href=\"https://medium.com/@khwsc1/%EB%B2%88%EC%97%AD-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0%EC%99%80-%EC%84%A4%EA%B3%84-%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC-b25792a0aa86\"><strong>(번역)  데이터 구조와 설계 — 튜토리얼 – Hyeokwoo Alex Kwon – Medium</strong></a> - 흔히 개발을 할 때 '설계' 라는 단어에는 여러가지 뜻이 있습니다. 프로젝트의 구조를 잡는 걸 수도 있고, 프로젝트 전체를 아우르는 데이터의 구조를 잡는 일일 수도 있지요. 이 글은 데이터 구조를 어떻게 설계하는지 잘 짚어주는 튜토리얼입니다. <code class=\"language-text\">@Database</code> <code class=\"language-text\">@Fundamental</code></li>\n<li><a href=\"https://github.com/sw-yx/react-typescript-cheatsheet\"><strong>GitHub - sw-yx/react-typescript-cheatsheet: a cheatsheet for react users using typescript with react for the first (or nth!) time</strong></a> - 리액트 + 타입스크립트를 도입할 때 설정부터 타이핑까지 막막한 분들이 많으실텐데 이 README 한번 살펴보시면 대부분 커버됩니다. 저도 실무에서 개발할 때 쓰는 타이핑 등은 이 글을 크게 벗어나지 않습니다. <code class=\"language-text\">@React</code> <code class=\"language-text\">@Typescript</code> <code class=\"language-text\">@OSS</code></li>\n<li><a href=\"https://medium.com/steady-study/%EB%B2%88%EC%97%AD-%EC%95%84%EC%A3%BC-%EA%B1%B0%EB%8C%80%ED%95%9C-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%84-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0-3aa37fc45122\"><strong>(번역) 아주 거대한 (자바스크립트) 어플리케이션을 구축하기 – Steady Study – Medium</strong></a> - 자바스크립트 생태계가 발전하면서 자바스크립트만으로도 아주 거대한 규모의 애플리케이션을 만들 수 있게 되었습니다. 하지만 그에 따라 프로젝트를 관리 해야하는데 여러 어려움에 부딪히게 됩니다. 이 글을 통해 어떤 부분을 유의하면서 프로젝트를 확장시킬지 도움되는 팁을 얻을 수 있습니다. <code class=\"language-text\">@Javascript</code></li>\n<li><a href=\"https://github.com/jamiebuilds/the-super-tiny-compiler\"><strong>GitHub - jamiebuilds/the-super-tiny-compiler: Possibly the smallest compiler ever</strong></a> - '컴파일러' 라는게 어떻게 동작하는지 기본 원리를 파악할 수 있게 도움을 주는 예제 코드입니다. 자바스크립트로 작성되어 있습니다. <code class=\"language-text\">@OSS</code> <code class=\"language-text\">@Fundamental</code></li>\n<li><a href=\"https://kyu.io/ko/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EC%8B%9C%EB%B8%8C-%EC%9B%B9%EC%95%B1-%EC%84%B1%EB%8A%A5%EC%97%90-%EB%8C%80%ED%95%9C-%EC%BC%80%EC%9D%B4%EC%8A%A4-%EC%8A%A4%ED%84%B0%EB%94%94-treebo/\"><strong>(번역) 프로그래시브 웹앱 성능에 대한 리엑트, 프리엑트 케이스 스터디 : Treebo - KYU.IO 🌾</strong></a> - 리액트 애플리케이션에 PWA(Progressive Web App)을 도입하면서 성능이 향상된 사례 번역. <a href=\"https://medium.com/dev-channel/a-pinterest-progressive-web-app-performance-case-study-3bd6ed2e6154\">핀터레스트 사례</a>도 있긴 하지만 번역되지 않은 것 같아 이 글을 먼저 소개합니다. <code class=\"language-text\">@PWA</code> <code class=\"language-text\">@React</code></li>\n<li><a href=\"https://medium.com/panaseer-labs-engineering-data-science/clean-house-with-typescript-ba3f43de05a2?WT.mc_id=link-twitter-jeliknes\"><strong>Keeping a Clean House with Typescript at Scale – Panaseer Labs Engineering &#x26; Data Science – Medium</strong></a> - 타입스크립트 프로젝트의 규모가 커지면서 확장성을 강화하기 위해 취한 조치가 정리된 글입니다. 초기에 타입스크립트를 도입할 때 실수하기 쉬운 부분을 짚어주는 것 부터 시작하여 더 세부적인 케이스까지 안내하고 있습니다. <code class=\"language-text\">@Typescript</code></li>\n<li><a href=\"https://adhrinae.github.io/posts/how-i-became-a-better-programmer-kr\"><strong>(번역) 나는 어떻게 더 나은 프로그래머가 되었는가</strong></a> - <a href=\"https://prettier.io\">Prettier</a>를 만든 <a href=\"https://twitter.com/jlongster\">James Long</a>이 자신이 프로그래머로서 어떻게 발전했는지 짚어본 글을 번역했습니다. \"익숙하지 않은 일에 뛰어드는 것\" 을 강조했던게 기억납니다. <code class=\"language-text\">@Developer</code></li>\n<li><a href=\"https://medium.com/@pitzcarraldo/%EC%A2%8B%EC%9D%80-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%9C%A0%EB%AA%85%ED%95%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90-19b20a7d6ace\"><strong>좋은 개발자 / 유명한 개발자 – Cho Minkyu – Medium</strong></a> - 이 글을 읽고 제가 원하는 서비스를 개발자/사용자가 만족할 수 있는 퀄리티로 만드는 좋은 개발자가 되고 싶다는 목표를 세웠습니다. <code class=\"language-text\">@Developer</code></li>\n<li><a href=\"https://blog.trello.com/working-from-home-is-not-remote-work\"><strong>Working From Home Is Not Remote Work</strong></a> - 원격근무를 운용할 거면 제대로 하자는 글입니다. 집에서 일을 하더라도 업무 시간에는 절대 방해받지 않는 환경을 조성하고, 사무실에 있는 사람들도 원격근무자와 커뮤니케이션을 할 때 절대 어려움이 없어야 한다는 것을 강조합니다.  <code class=\"language-text\">@Reading</code></li>\n<li><a href=\"https://medium.com/@kpak/%ED%9B%8C%EB%A5%AD%ED%95%9C-%ED%8C%80%EC%9B%90%EC%9D%98-%EC%A1%B0%EA%B1%B4-strong-views-weakly-held-17880611d962\"><strong>훌륭한 팀원의 조건 - Strong Views, Weakly Held – Kisang Pak – Medium</strong></a> - 같이 일을 하다 보면 어떤 사람을 '훌륭한 팀원' 이라고 생각하게 되시나요? 각자 생각하시는 기준과 비교해보시면서 읽어보면 좋은 글이라고 생각합니다. <code class=\"language-text\">@Reading</code></li>\n<li><a href=\"http://newspeppermint.com/2018/07/04/howtoaskforhelp/\"><strong>도움을 요청할 때 해서는 안 되는 말들</strong></a> - 위의 글과 바로 엮어서 보셔도 좋은 글입니다. 어렵사리 도움을 요청하는데 도움을 받는 쪽에서도 최대한의 효과를 얻고, 도움을 주는 쪽에서도 효율적인 도움을 줄 수 있는게 좋겠죠. <code class=\"language-text\">@Reading</code></li>\n<li><a href=\"https://adhrinae.github.io/posts/fix-circular-dependency-kr\"><strong>(번역) 자바스크립트 &#x26; 타입스크립트의 순환 참조를 한방에 해결하는 방법</strong></a> - 노드 모듈을 불러올 때 순환 참조로 고통을 받으신 적 있다면 권해드리는 글입니다. 이 글 말고도 해결 방법은 다양합니다만, 이 주제에 익숙하지 않으신 분들이라면 모듈이 어떻게 로딩되는지 그림을 통해 간단히 살펴보실 수 있습니다. <code class=\"language-text\">@Javascript</code></li>\n<li><a href=\"https://hyunseob.github.io/2018/08/12/do-you-need-to-use-ts/\"><strong>타입스크립트, 써야할까? | DailyEngineering</strong></a> - 타입스크립트를 도입하지 않는 이유는 여러가지가 있을 겁니다. 부정적인 선입견이 있을 수도 있고, 필요성을 느끼지 못할 수도 있고요. 이 글에서는 타입스크립트를 오래 사용하면서 얻은 경험을 기반으로 좋은 의견을 제시하고 있습니다. <code class=\"language-text\">@Typescript</code></li>\n<li><a href=\"https://mathiasbynens.be/notes/prototypes\"><strong>JavaScript engine fundamentals: optimizing prototypes · Mathias Bynens</strong></a> - 자바스크립트 엔진이란게 어떻게 돌아가고, 프로토타입은 어떻게 동작하는지 굳이 알지 않아도 애플리케이션을 작성하는데 큰 지장은 없을 수 있습니다. 적어도 이 글은 제가 여태까지 살펴본 자바스크립트 엔진 &#x26; 프로토타입 관련 글 중 가장 자세한 글이라고 생각합니다. <code class=\"language-text\">@Javascript</code> <code class=\"language-text\">@Fundamental</code></li>\n<li><a href=\"https://zellwk.com/blog/good-frontend-developer/\"><strong>What makes a good frontend developer? | Zell Liew</strong></a> - 먼저 초보 프론트엔드 개발자분들은 이 분의 메일링 리스트에 가입하는걸 권해드립니다. 기본적인 개념을 아주 쉽게 설명하는 글을 많이 올려줍니다. 저도 많이 배우고 있고요. <a href=\"https://brunch.co.kr/@chiyodad/9\"><strong>좋은 자바스크립트 개발자가 되기 위한 글이 이전에도 번역되어 공유되다가 최근에 다시 재조명된 것을 본 적이 있는데</strong></a>, 그 글보다는 이 글이 현실적으로 더 도움이 된다고 생각합니다. <code class=\"language-text\">@Developer</code></li>\n<li><a href=\"https://github.com/guardian\"><strong>The Guardian · GitHub</strong></a> - 영국 가디언 지의 깃헙 저장소입니다. <code class=\"language-text\">frontend</code> 저장소를 살펴보시면 접근성을 고려하여 얼마나 미려하게 설계가 되어있는지 알 수 있습니다. <code class=\"language-text\">@OSS</code></li>\n<li><a href=\"https://github.com/BetterThanTomorrow/calva/issues/44\"><strong>Ideal Beginner Editor+REPL Setup · Issue #44 · BetterThanTomorrow/calva · GitHub</strong></a> - 클로저스크립트를 공부하기 시작하면서 다양한 자료를 찾다가 보니 발견한 이슈입니다. 클로저(스크립트)에 처음 접근하는 사람들이 어떤 설정으로 어떻게 학습을 할 지 질문과 답변이 오가는 이슈입니다. <code class=\"language-text\">@Clojure</code></li>\n<li><a href=\"https://blog.usejournal.com/thinking-about-react-atomically-608c865d2262\"><strong>Thinking About React, Atomically ⚛ – Noteworthy - The Journal Blog</strong></a> - 현재 회사 프로젝트도 Atomic Design 기반으로 컴포넌트를 나누어 두었습니다. 그 기준을 어떻게 설정할지 고민을 했었는데 이 글이 아주 잘 설명해주고 있습니다. <code class=\"language-text\">@React</code></li>\n<li><a href=\"https://github.com/streamich/libreact\"><strong>GitHub - streamich/libreact: Collection of useful React components</strong></a> - 리액트 애플리케이션을 개발하면서 유용하게 사용될 수 있는 컴포넌트들의 모음집입니다. 사용하지 않으시더라도 소스 코드를 조금 살펴보시면 Render Props, HOC를 이해하시는데 큰 도움이 됩니다. <code class=\"language-text\">@React</code></li>\n<li><a href=\"https://github.com/nikitavoloboev/my-mac-os\"><strong>GitHub - nikitavoloboev/my-mac-os: List of applications and tools that make my macOS experience even more amazing</strong></a> - macOS 기반으로 개발을 할 때 생산성을 극대화할 수 있는 도구와 사용법을 잘 정리해준 저장소입니다. 저도 여기 소개 된 많은 앱을 사용하고 있고, 배운 것도 많아서 macOS를 사용하는 개발자분들에게 꼭 한번 살펴보시길 권하고 싶습니다. <code class=\"language-text\">@macOS</code> <code class=\"language-text\">@Tool</code></li>\n<li><a href=\"https://medium.freecodecamp.org/summer-is-over-you-should-be-coding-heres-yet-another-list-of-exciting-ideas-to-build-a95d7704d36d\"><strong>Here’s yet another list of exciting projects to build</strong></a> - '연습을 위해 사이드 프로젝트를 해보라' 는 조언은 많이 받아보셨겠지만 구체적으로 뭘 만들어야 할지 막막할 때가 많습니다. 이 글을 만들어볼만한 클론/사이드 프로젝트 주제들을 한 뭉치 던져줍니다. <code class=\"language-text\">@Developer</code></li>\n<li><a href=\"https://medium.com/chequer/theme-in-react-js-dbf5377d0890\"><strong>Theme in React JS – CHEQUER – Medium</strong></a> - <a href=\"https://axisj.com\">AXISJ</a>를 만드신 장기영님의 글입니다. 리액트 애플리케이션을 만들면서 컴포넌트의 스타일 설정, 나아가 전반적인 테마를 어떻게 지정할 수 있을지 <code class=\"language-text\">styled-components</code> 의 예를 들어 설명하고 있습니다. <code class=\"language-text\">@React</code></li>\n<li><a href=\"https://github.com/leonardomso/33-js-concepts\"><strong>GitHub - leonardomso/33-js-concepts: 📜 33 concepts every JavaScript developer should know.</strong></a> - 자바스크립트를 학습 할 때 꼭 알아두어야 할 33가지의 중요한 개념을 설명하는 글과 영상 모음집입니다. <code class=\"language-text\">@Javascript</code></li>\n<li><a href=\"https://www.youtube.com/watch?v=RP_f5dMoHFc\"><strong>그런 REST API로 괜찮은가</strong></a> - 작년 DEVIEW에 나온 발표라고 합니다. REST API 설계시 간과하기 쉬운 요소들, 더 나은 설계를 위해 고려해야 할 부분들에 대해 잘 정리해주셨습니다. <a href=\"https://slides.com/eungjun/rest\">슬라이드도 있습니다.</a> <code class=\"language-text\">@Fundamental</code></li>\n<li><a href=\"https://github.com/hg-pyun/iterize\"><strong>GitHub - hg-pyun/iterize: Use JavaScript Iterator, Easily</strong></a> - 타입스크립트 기반으로 만들어진 이터레이터 유틸리티입니다. 이터레이터 개념에 대해 궁금하셨던 분들은 이 코드와 함께 핵심 개념을 잘 파악하실 수 있습니다. <code class=\"language-text\">@OSS</code> <code class=\"language-text\">@Typescript</code></li>\n<li><a href=\"https://gyandeeps.com/react-getderivedstatefromprops-key/\"><strong>React - How to use keys to avoid using getDerivedStateFromProps - Gyandeep Singh</strong></a> - 이전 상태와 현재 상태를 비교하여 리액트 컴포넌트의 리랜더링을 일으킬 때 <code class=\"language-text\">getDerivedStateFromProps</code> 메서드를 <a href=\"https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html\">별 고민없이 사용하는 실수를 하기 쉽습니다.</a> 하지만 <code class=\"language-text\">key</code> 만 잘 활용하면 손쉽게 리랜더링을 제어할 수 있습니다. <code class=\"language-text\">@React</code></li>\n<li><a href=\"https://terminalsare.sexy\"><strong>We all &#x3C;3 Terminals. - Terminals Are Sexy</strong></a> - 터미널로 활용할 수 있는 다양한 도구와 방법들 모음입니다. <code class=\"language-text\">@Terminal</code> <code class=\"language-text\">@Tool</code></li>\n<li><a href=\"https://web.dev\"><strong>web.dev</strong></a> - 미래지향적 웹 개발을 위해 구글이 제안하는 방법론, 활용할 수 있는 도구를 안내하는 사이트입니다. <code class=\"language-text\">@Web</code></li>\n<li><a href=\"https://github.com/GoogleChromeLabs\"><strong>GoogleChromeLabs · GitHub</strong></a> - 여기 있는 프로젝트들 중 작은 프로젝트의 소스코드부터 살펴보시면 배울 점이 많습니다. 주석으로 기능 설명도 잘 되어있고, 타입스크립트 기반 프로젝트도 좀 있고 웹 컴포넌트도 활용하고 있어서 해당 기술에 관심이 있으시다면 큰 도움이 되리라 생각합니다. <code class=\"language-text\">@OSS</code> <code class=\"language-text\">@Typescript</code> <code class=\"language-text\">@Web</code></li>\n<li><a href=\"https://ziwon.github.io/post/modern-network-load-balancing-and-proxying/\"><strong>(번역) 최신 네트워크 로드 밸런싱 및 프록시 소개</strong></a> - 애플리케이션 배포 인프라 구축하시면서 로드 밸런서 이야기는 당연히 들어보셨으리라 생각합니다. 꽤 긴 글이지만 기본 네트워크 지식을 가지고 쭉 읽어보시면 유용한 정보들이 많습니다. <code class=\"language-text\">@Infrastructure</code></li>\n<li><a href=\"https://github.com/cssanimation/css-animation-101\"><strong>GitHub - cssanimation/css-animation-101: Learn how to bring animation to your web projects</strong></a> - CSS 애니메이션 구현의 기초를 알려주는 eBook이 공유되는 저장소입니다. <code class=\"language-text\">@CSS</code></li>\n<li><a href=\"https://cssguidelin.es\"><strong>CSS Guidelines (2.2.5) – High-level advice and guidelines for writing sane, manageable, scalable CSS</strong></a> - CSS를 작성할 때 적용하기 좋은 조언들이 한가득 담긴 글입니다. 단순히 BEM같은 클래스 네이밍 컨벤션에 대한 이야기가 아니라는데 주목해주세요. <code class=\"language-text\">@CSS</code></li>\n<li><a href=\"https://overreacted.io\"><strong>Overreacted</strong></a> - Redux의 제작자이자, 지금은 리액트 코어 개발자로 일하고 있는 <a href=\"https://mobile.twitter.com/dan_abramov\">Dan Abramov</a>의 블로그입니다. 개인 블로그를 최근에 열었다는게 오히려 신기할 정도인데요. 리액트의 내부 동작을 알기 쉽게 설명해주는 글이 많습니다. <code class=\"language-text\">@Developer</code> <code class=\"language-text\">@React</code> <code class=\"language-text\">@OSS</code></li>\n<li><a href=\"https://johngrib.github.io/wiki/git-alias/\"><strong>편리한 git alias 설정하기 - 기계인간 John Grib</strong></a> - Git을 GUI로만 쓰시는 분들에게는 별로 공감이 되지 않는 주제일 수 있으나, Git CLI를 더 유용하게 이용할 수 있도록 만들어주는 다양한 팁이 공유된 글입니다. <code class=\"language-text\">@Git</code> <code class=\"language-text\">@Terminal</code></li>\n<li><a href=\"https://metatags.io\"><strong>Meta Tags — Preview, Edit and Generate</strong></a> - 주요 사이트 및 애플리케이션에 사용되는 OpenGraph가 어떤 모양으로 나타날지 직접 메타 태그를 입력해보고 눈으로 견본을 확인할 수 있는 웹 애플리케이션입니다. <code class=\"language-text\">@Tool</code></li>\n<li><a href=\"https://edykim.com/ko/post/tech-has-a-toxic-tone-problem-lets-fix-it/\"><strong>(번역) 기술 업계의 독성 말투 문제, 고칩시다! - Here, Edward 👨🏻‍💻</strong></a> - \bIT 업계에서 일하면서 언제나 커뮤니케이션의 중요성을 실감하고 있습니다. 커뮤니케이션에 문제가 발생하는 상황은 여럿 있지만, 이 글은 독성 말투에 초점을 맞추어 좋지 않은 예와 현실적인 대안을 제시하고 있습니다. <code class=\"language-text\">@Developer</code></li>\n<li><a href=\"https://www.24a11y.com/2018/web-components-still-need-to-be-accessible/\"><strong>Web components still need to be accessible - 24 Accessibility</strong></a> - 웹 컴포넌트를 만들 때도 당연히 접근성을 신경써야 한다는 글입니다. 그게 다는 아닙니다. SPA(Single Page Application)을 만들면서 우리는 컴포넌트의 구조를 어떻게 잘 작성하는지만 신경 쓸 때가 많은데, 결국 그렇게 작성한 코드의 결과물은 브라우저에 그려지는 DOM입니다. 그 DOM의 접근성을 신경써야 하는 것은 프론트엔드 개발자의 의무입니다. <code class=\"language-text\">@Web</code></li>\n<li><a href=\"https://cimfalab.github.io/deepscan/2016/08/code-review-1\"><strong>JavaScript 코드 리뷰 - 코드 리뷰 문화 – 좋은 JavaScript 코드 작성을 위한 블로그</strong></a> - 제목은 자바스크립트 코드 리뷰라고 이야기하고 있지만, 어떤 언어 기반이라 하더라도 팀에 코드 리뷰를 적용하는 방법을 잘 안내하고 있는 훌륭한 글입니다. <code class=\"language-text\">@Developer</code></li>\n</ul>\n<h2 id=\"마치며\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h2>\n<p>원래는 10개정도만 추려보려 했는데 목록이 산으로 가버렸네요. 다음 달부터는 매달치 TIL 의 정리본을 월말에 공유할 예정입니다. 글을 발행하기 위한 정리를 하면서 저도 복습할 기회를 얻을 수 있어서 좋네요.</p>\n<p>여기서 몇 개라도 유용한 정보를 얻어가셨으면 좋겠습니다. 새해 복 많이 받으세요.</p>","id":"94c4accc-dc92-509e-863a-46320b0e1713","frontmatter":{"date":"2018-12-30","path":"/posts/today-i-learned-best-2018","title":"Today I Learned - 2018년 Best of Best","tags":["TIL","Learning","Reading","Programming"],"category":"Today I Learned"}}],"tagName":"TIL"}}