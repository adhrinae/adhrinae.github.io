{"pageContext":{"postsByTag":[{"excerpt":"읽을거리 - 일반 여행을 준비하는 처음부터 끝까지의 기록 | 생각노트  - 개발과 관련 없는 뉴스레터 중 유일하게 구독하는 생각노트. 글을 정말 잘 쓰시고, 글 곳곳에서 생각 정리를 위해 어떻게 도구를 활용하고 생산성을 끌어올리는지도 배울 수 있다. 마침 3월 말에 교토 방문 예정이라 더 관심있게 읽어봤는데 여행을 위해 얼마나 디테일하게 계획을 짤 수 있을지 좋은 참고가 되었다. 이번에는 Things…","html":"<h2 id=\"읽을거리---일반\"><a href=\"#%EC%9D%BD%EC%9D%84%EA%B1%B0%EB%A6%AC---%EC%9D%BC%EB%B0%98\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>읽을거리 - 일반</h2>\n<ul>\n<li><a href=\"https://insidestory.kr/21532\">여행을 준비하는 처음부터 끝까지의 기록 | 생각노트</a> - 개발과 관련 없는 뉴스레터 중 유일하게 구독하는 생각노트. 글을 정말 잘 쓰시고, 글 곳곳에서 생각 정리를 위해 어떻게 도구를 활용하고 생산성을 끌어올리는지도 배울 수 있다. 마침 3월 말에 교토 방문 예정이라 더 관심있게 읽어봤는데 여행을 위해 얼마나 디테일하게 계획을 짤 수 있을지 좋은 참고가 되었다. 이번에는 Things와 노션 사용에 대한 내용이 들어있었는데 Things 구입도 좀 땡기긴 한다.</li>\n</ul>\n<h2 id=\"읽을거리---개발자\"><a href=\"#%EC%9D%BD%EC%9D%84%EA%B1%B0%EB%A6%AC---%EA%B0%9C%EB%B0%9C%EC%9E%90\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>읽을거리 - 개발자</h2>\n<ul>\n<li>\n<p><a href=\"https://github.com/nhnent/fe.javascript/issues/43\">nhn엔터의 위키 폐쇄 이슈</a>와 <a href=\"https://github.com/nhnent/fe.javascript/issues/44\">재오픈 계획에 관한 문의</a></p>\n<ul>\n<li>특정 단체와 인물을 직접적으로 비방할 의도는 없지만, 한 가지는 확실히 하고 넘어가야겠다. nhn엔터측에서 지적 재산권에 대해 인지를 못하던 것을 원저작자의 이슈 제기 덕분에 전면적인 재검토를 위해 임시로 위키를 폐쇄한 것으로 보인다.</li>\n<li>그런데 재오픈 계획에 대한 문의라고 올라온 질문에서 <strong>\"라이센스를 하나하나 따져가며 공개여부를 정하실 일은 없을거라 추측하고 있으니\"</strong> 라는 말에 소름이 돋았다.</li>\n<li>나는 어디까지나 내 지적 만족을 위해 번역을 한다 해도, 원작자에게 라이센스 문의 및 번역에 관해 진중하게 질문했던 사람으로서 도저히 이해가 되지 않았기 때문이다. 오히려 허락을 구하는게 비정상일 지경이다.</li>\n<li>다른 사람이 공유하는 지식이나 소스 코드는 하늘에서 뚝 떨어지는게 아니라는 점을 인지하고 있지 않는 한 우리나라에서 지적 저작물(글, 소프트웨어 등)이 제 가치를 인정받고 올바르게 구입되는 문화가 더 잘 정착되기 어려울 것이라 생각한다. 소프트웨어를 만들고 판매하는 회사에 소속된 사람으로서 아주 무거운 기분이 들었다.</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://zeniuus.github.io/2019/02/06/difference-between-junior-and-senior/\">3개월 차 주니어가 느끼는 나와 시니어의 차이</a> - 3개월 차 주니어라 해도 카이스트 출신에 개발 이력도 꽤 있는 분이다. 회사 생활이 3개월 차일 뿐. 소제목만 봐도 전반적인 내용을 얻을 수 있도록 글도 잘 정리되어 있어서 보기 좋다. 특히 '코드가 돌아가는 환경의 아키텍처를 고려한다' 는 부분이 크게 와닿았다. 단순히 코드의 동작을 보장하는게 아니라 특정 환경에서 연결이 끊어지는 상황 같은 것도 고려한 로직을 작성할 필요에 대해서 역설한다. 도메인 지식에 대한 이야기도 그렇다. 결국 \"코드 너머를 보라\" 라는 말로 정리될 수 있겠다.</p>\n</li>\n<li>\n<p><a href=\"https://jbee.io/etc/intro-new-blog/\">블로그를 만들며 고려한 것들 (JBEE.io) | JBEE.io</a> - 한재엽님이 새 블로그를 만들면서 고려했던 점들 정리. 다음달에 블로그를 개편할 때 이 블로그에 사용된 테마를 기반으로 개편할 예정이다.</p>\n</li>\n<li>\n<p>김창준님의 ‘함께 자라기’ 책은 정말 좋은 책이다. 초급 개발자에게 ‘프로그래머의 길 멘토에게 묻다’, ‘소프트웨어 장인’ 과 함께 마인드셋 분야로 반드시 추천하고 싶은 책이다. 자세한 내용은 따로 포스팅 예정.</p>\n</li>\n<li>\n<p><a href=\"https://www.slipp.net/questions/433\">최근 구직, 구인 글을 보면서 느끼는 단상 :: SLiPP</a> / <a href=\"https://gyuwon.github.io/blog/2016/05/19/getting-hired-by-a-startup.html\">스타트업에 취업하기 | 프로그래머 이규원의 웹사이트</a> - 비슷한 주제이고 뒷 글에 앞 글 링크를 연결했기에 처음으로 두 개를 한 아이템으로 작성해본다. 겉을 핥지 말고 깊이 들어가서 기초를 다져야 개발자로서 커리어 수명을 연장할 수 있을 것이다. 단순히 오래 먹고 사는 문제 뿐 아니라 진정으로 어떤 개발자가 되고싶은지 고찰도 들어가게 될 테고.</p>\n</li>\n</ul>\n<h2 id=\"프론트엔드\"><a href=\"#%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프론트엔드</h2>\n<ul>\n<li>\n<p><a href=\"https://bitsofco.de/web-workers-vs-service-workers-vs-worklets/\">Web workers vs Service workers vs Worklets</a> - 아주 오랫동안 탭만 열어놓고 보지 않던 글(어딘가에 이미 TIL 아이템으로 등록되어 있을지도). 보통 서비스 워커라는 단어만 익숙했는데, 브라우저에서 별도의 스레드를 활용하는 워커들이 각각 어떤게 있고, 어떤 역할을 하는지 간단히 요약해준다. 이 블로그 자체도 꽤 좋은 설명을 많이 담아놓고 있어서 눈여겨 봐야겠다. </p>\n<ul>\n<li>Worklet - 브라우저의 랜더링 파이프라인 안에서 동작하기 때문에 개발자가 직접 스타일링이나 레이아웃 등의 과정에 손을 댈 수 있다. 대표적인 예가 후디니 API로 보이긴 하는데 확실하진 않다. JS로 그라디언트를 만들고, CSS에서 <code class=\"language-text\">background-image: paint(myGradient)</code> 같은 방식으로 호출하는게 가능하다.</li>\n<li>Service worker - 브라우저와 네트워크 사이의 프록시 역할을 담당한다. 도큐먼트에서 만들어진 요청을 가로채어 캐시를 제공하는 등 오프라인 활용이 가능하게 만들어준다. 이를 활용하여 PWA가 가능한 것이겠지.</li>\n<li>Web worker - 일반적인 용도의 스크립트로 활용된다. 메인 스레드에서 연산하기에 많이 오래 걸리는 연산을 여기서 대신 처리할 수 있다.</li>\n</ul>\n</li>\n<li><a href=\"https://developers.google.com/web/updates/2019/02/rendering-on-the-web\">Rendering on the Web  | Google Developers</a> - 현재 웹앱이 랜더링(실행)되는 방법 총망라. 각 방법에 대한 장단을 구분해 두었으며 페이지 마지막에 있는 표를 꼭 읽어보길 권장.</li>\n<li><a href=\"https://michel.codes/blogs/ui-as-an-afterthought\">UI as an afterthought</a> - MobX의 제작자가 프론트엔드 개발에 있어 데이터 중심의 사고가 필요하다는 것을 역설하는 글. 나도 전적으로 동감하고, 이렇게 개발을 하고 싶지만 지금 상태로는 데이터 설계가 잘못되어 UI 구현이 마냥 어려운 것 아닐까 하는 생각이 든다. UI 생각은 잠시 미뤄두고 비지니스 로직을 완전히 분리하고 특정 플랫폼에서만 동작하지 않도록 설계하는 것이다. - <a href=\"https://rinae.dev/posts/ui-as-an-afterthought-kr\">번역문</a></li>\n<li><a href=\"https://codepen.io/marvinhagemeister/pen/GqVKmw\">IE11 Pseudo Selector Bug</a> - IE 버그 수정하다가 버튼의 <code class=\"language-text\">::after</code> 엘리먼트가 잘려 나오는 현상이 있어서 살펴보니 다행히도 손쉽게 해결책을 찾을 수 있었다. IE에서 버튼의 <code class=\"language-text\">overflow</code> 기본값은 <code class=\"language-text\">hidden</code> 이어서 생긴 문제라고 한다.</li>\n<li><a href=\"https://twitter.com/siddharthkp/status/1094821277452234752?s=20\">Sid on Twitter: \"CSS tip!If you are adding border-radius on a container, don't forget to add overflow: hidden, otherwise content (especially images) can bleed out of the container… https://t.co/3n8j6UvIp8\"</a> - 어쩐지 약간 테두리를 둥글게 한 요소의 귀퉁이가 잘리는 것 처럼 보이더니만..</li>\n<li><a href=\"https://github.com/aholachek/react-animation-comparison\">GitHub - aholachek/react-animation-comparison: A tour of React animation libraries with a focus on developer experience</a> - 사이드 프로젝트에 애니메이션을 본격적으로 넣어볼까 하면서 몇 가지 리액트 애니메이션 라이브러리를 검색해 봤는데, 이 저장소에서 라이브러리를 비교하고 장단점을 분석해 두었다. 사용 예도 있어서 좋은 참고가 되었다. 작성자는 기본 API인 <code class=\"language-text\">react-transition-group</code> 과 <code class=\"language-text\">animejs</code> 를 조합해 쓰는 것을 가장 좋게 평가했다. <code class=\"language-text\">react-spring</code> 이란게 있다는 것도 이번에 알았는데, 사이드 프로젝트에는 <code class=\"language-text\">react-spring</code> 을 써볼까 한다.</li>\n<li><a href=\"https://theblog.adobe.com/ui-ux-animation-principles-tips-tricks-best-practices/\">UI/UX Animation Principles: Tips, Tricks &#x26; Best Practices</a> - 어도비에서 발행한 애니메이션 관련 팁. 애니메이션을 구현할 때 유의해야 할 점을 짚어주고 있다. 소제목만 하나씩 읽어봐도 맥을 짚을 수 있었다.</li>\n<li><a href=\"https://levelup.gitconnected.com/formik-with-react-hooks-and-mobx-1493b5fd607e\">Create your own Formik with React Hooks and MobX – gitconnected.com | Level Up Your Coding</a> - React Hooks API와 MobX를 이용하여 직접 Formik을 만들어보는 튜토리얼. 재밌어보인다.</li>\n<li><a href=\"https://spectrum.chat/figma/feature-requests/sf-pro-tracking~4c4d2693-456e-4d76-a4cd-2f75cb8ca08e\">SF Pro Tracking · Figma</a> - Figma로 나온 디자인 산출물대로 CSS를 적용했음에도 브라우저에서 다른 결과가 나오는 문제가 있어서 조사를 해 봤는데 전혀 상상하지 못한 문제를 발견했다. iOS/macOS에서 어떻게 SF(San Fransisco) 폰트를 다루는지 조금은 실마리를 잡을 수 있었다. 당장 해결될 문제로 보이진 않는다만..</li>\n<li><a href=\"https://jbee.io/web/optimize-scroll-event/\">스크롤 이벤트 최적화 | JBEE.io</a> - 한재엽님이 설명해주신 스크롤 이벤트 최적화에 관한 글. 보통 <code class=\"language-text\">throttle</code> 같은 함수를 사용하는 1차원적인 설명이 있지만, 궁극적으로 <code class=\"language-text\">requestAnimationFrame</code>  함수를 소개하고 이를 어떻게 활용해야 하는지 알려준다. 나도 이런게 있다고 알고만 있고 제대로 쓰진 않았는데, 이번 기회에 <code class=\"language-text\">onScroll</code> 이벤트를 바인딩해놓은 로직을 가능하면 rAF로 교체할 수 있나 살펴봐야겠다.</li>\n</ul>\n<h2 id=\"프로그래밍-기본\"><a href=\"#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EA%B8%B0%EB%B3%B8\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로그래밍 기본</h2>\n<ul>\n<li><a href=\"https://github.com/labs42io/clean-code-typescript\">GitHub - labs42io/clean-code-typescript: Clean Code concepts adapted for TypeScript</a> - 클린 코드 책에 나왔던 개념을 타입스크립트로 표현한 글</li>\n<li><a href=\"https://imcts.github.io/MVC-PATTERN/\">MVC PATTERN | Dolen’s blog</a> - 코드스피츠 강의의 내용을 따라 정리하면서 예제 코드까지 구현해본 MVC 패턴 정리글인데 코드스피츠 강의 내용 답게 바로 곱씹기엔 좀 심오하다.</li>\n</ul>\n<h2 id=\"오픈-소스-프로젝트\"><a href=\"#%EC%98%A4%ED%94%88-%EC%86%8C%EC%8A%A4-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오픈 소스 프로젝트</h2>\n<ul>\n<li><a href=\"https://github.com/SonarSource/SonarTS\">GitHub - SonarSource/SonarTS: Static code analyzer for TypeScript</a> - 정적 코드 분석기. 코어는 자바로 되어있다. TSLint에 플러그인 형식으로 얹어서 쓸 수 있으며, 굉장히 다양한 룰을 제공하는데 이 룰은 단순히 린트로는 잡아낼 수 없는 수준의 버그 탐지 규칙으로 보인다. 도입해볼 만한 가치가 있을지도?</li>\n<li><a href=\"https://fuse-box.org\">FuseBox · A bundler that does it right</a> - 타입스크로 작성된 번들러. API도 괜찮게 제공되어 있고, 타입스크립트로 작성된 만큼 First Class Typescript support를 지원한다. 그래서 이번에 사이드 프로젝트를 할 때 번들러로 한번 써보기로 했다.</li>\n</ul>","id":"81dbce6d-c240-5665-9e74-1444f1eba112","frontmatter":{"date":"2019-02-28","path":"/posts/this-month-i-learned-1902","title":"This Month I Learned - 2019년 2월","tags":["TIL","Learning","Reading","Programming","React","CSS"],"category":"This Month I Learned"}},{"excerpt":"다음 프로젝트에서 본격적으로 타입스크립트를 사용한 리액트 애플리케이션을 도입하고자 하는데, CSS를 입히기 위한 도구로  TypeStyle 을 활용하는 방안을 검토중이다. 그래서  egghead의 강좌 를 가볍게 따라가며 내용을 정리해보았다. 이 정도면 충분히 도입할 만한 가치가 있어 보인다. 적어도 스타일 속성 이름으로 오타가 날 일은 없어 보이며 JS…","html":"<p>다음 프로젝트에서 본격적으로 타입스크립트를 사용한 리액트 애플리케이션을 도입하고자 하는데, CSS를 입히기 위한 도구로 <a href=\"https://typestyle.github.io\">TypeStyle</a>을 활용하는 방안을 검토중이다.</p>\n<p>그래서 <a href=\"https://egghead.io/courses/maintainable-css-using-typestyle\">egghead의 강좌</a>를 가볍게 따라가며 내용을 정리해보았다. 이 정도면 충분히 도입할 만한 가치가 있어 보인다.</p>\n<p>적어도 스타일 속성 이름으로 오타가 날 일은 없어 보이며 JS를 적극적으로 활용하여 동적인 스타일을 입힐 수 있으리라 기대한다.</p>\n<p>참고로 아래의 예제 코드는 모두 리액트 애플리케이션을 개발한다는 전제하에 소개하고 있다. 하지만 TypeStyle 자체는 어느 환경에서나 사용 가능하다.</p>\n<h2 id=\"기본-사용법\"><a href=\"#%EA%B8%B0%EB%B3%B8-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 사용법</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> style <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'typestyle'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> className <span class=\"token operator\">=</span> <span class=\"token function\">style</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  color<span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span>\n  position<span class=\"token punctuation\">:</span> <span class=\"token string\">'relative'</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>className<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    Hello TypeStyle<span class=\"token operator\">!</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">style</code> 함수로 생성된 내용이 스타일이 적용된 임의의 클래스 이름을 만들게 되고 DOM은 바로 클래스 이름을 사용하면 되도록 구성되어 있다.</p>\n<p>이 과정에서 객체 형식으로 되어있는 key-value 값은 이미 라이브러리에 CSS 스펙에 맞게 정의되어 있기 때문에 오타가 날 시 컴파일러가 친절하게 에러를 잡아준다.</p>\n<h2 id=\"스타일-믹스인\"><a href=\"#%EC%8A%A4%ED%83%80%EC%9D%BC-%EB%AF%B9%EC%8A%A4%EC%9D%B8\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스타일 믹스인</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 위 코드와 동일한 DOM 랜더링</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fontSize</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> valueStr <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span>\n    <span class=\"token operator\">?</span> value\n    <span class=\"token punctuation\">:</span> value <span class=\"token operator\">+</span> <span class=\"token string\">'px'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    fontSize<span class=\"token punctuation\">:</span> valueStr\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> fontColor <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> color<span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> className <span class=\"token operator\">=</span> <span class=\"token function\">style</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">fontSize</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3em'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  fontColor\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>위의 코드 처럼 <code class=\"language-text\">style</code> 함수는 객체를 믹스인 할 수 있다. 프로퍼티가 맞는 순수 객체가 들어가면 아무 없이 작동하기 때문에 위의 <code class=\"language-text\">fontSize</code> 함수처럼 상황에 맞게 적절한 객체를 리턴하는 함수를 만들어서 다양한 상황에 맞게 사용할 수 있다.</p>\n<h2 id=\"미디어-쿼리\"><a href=\"#%EB%AF%B8%EB%94%94%EC%96%B4-%EC%BF%BC%EB%A6%AC\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>미디어 쿼리</h2>\n<p><code class=\"language-text\">media</code> 함수로 간단히 미디어 쿼리를 생성할 수 있다. 생성된 쿼리를 <code class=\"language-text\">style</code> 함수 안에 넣으면 자동으로 Nested 쿼리 형식으로 생성된다. 수동으로 Nested 쿼리를 입력하고자 할 때는 <code class=\"language-text\">style</code> 함수 안에 넣는 객체에 <code class=\"language-text\">$nest</code> 속성을 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> style<span class=\"token punctuation\">,</span> media <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'typestyle'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> className <span class=\"token operator\">=</span> <span class=\"token function\">style</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span> \n    color<span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span>\n    transition<span class=\"token punctuation\">:</span> <span class=\"token string\">'font-size .2s'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">media</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> minWidth<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> maxWidth<span class=\"token punctuation\">:</span> <span class=\"token number\">700</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> fontSize<span class=\"token punctuation\">:</span> <span class=\"token string\">'30px'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">media</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> minWidth<span class=\"token punctuation\">:</span> <span class=\"token number\">701</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> fontSize<span class=\"token punctuation\">:</span> <span class=\"token string\">'50px'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<h2 id=\"수도-클래스pseudo-class-작성\"><a href=\"#%EC%88%98%EB%8F%84-%ED%81%B4%EB%9E%98%EC%8A%A4pseudo-class-%EC%9E%91%EC%84%B1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>수도 클래스(pseudo class) 작성</h2>\n<p>Sass, Less와 유사한 형태로 계층 화된 쿼리를 작성할 수 있다. 위에서 언급한 <code class=\"language-text\">$nest</code> 속성을 선택하면 해당 클래스의 계층 쿼리를 작성할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> className <span class=\"token operator\">=</span> <span class=\"token function\">style</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span> \n    color<span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span>\n    transition<span class=\"token punctuation\">:</span> <span class=\"token string\">'font-size .2s'</span><span class=\"token punctuation\">,</span>\n    $nest<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'&amp;:focus'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// .class:focus</span>\n        fontSize<span class=\"token punctuation\">:</span> <span class=\"token string\">'30px'</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'&amp;&amp;:hover'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// .class.class:focus</span>\n        fontSize<span class=\"token punctuation\">:</span> <span class=\"token string\">'50px'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<h2 id=\"css-클래스-조합하기\"><a href=\"#css-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%A1%B0%ED%95%A9%ED%95%98%EA%B8%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS 클래스 조합하기</h2>\n<p>클래스를 조합하는건 <code class=\"language-text\">style</code> 함수로 만들어진 클래스들을 분기에 따라 추가하고 제거하도록 만들면 된다. 다만 이 과정에서 있는 경우와 없는 경우에 따라 문자열을 조합하는게 번거로울 수 있는데, <code class=\"language-text\">classes</code> 함수가 귀찮은 부분을 쉽게 해결하도록 도와준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> baseClassName <span class=\"token operator\">=</span> <span class=\"token function\">style</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span> color<span class=\"token punctuation\">:</span> <span class=\"token string\">'#333'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> errorClassName <span class=\"token operator\">=</span> <span class=\"token function\">style</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span> backgroundColor<span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">AppProps</span> <span class=\"token punctuation\">{</span>\n  className<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  hasError<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> className<span class=\"token punctuation\">,</span> hasError <span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span> AppProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">classes</span><span class=\"token punctuation\">(</span>\n      baseClassName<span class=\"token punctuation\">,</span>\n      className<span class=\"token punctuation\">,</span>\n      hasError <span class=\"token operator\">&amp;&amp;</span> errorClassName\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    Hello world\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...</span></code></pre></div>\n<h2 id=\"keyframes-함수로-애니메이션-만들기\"><a href=\"#keyframes-%ED%95%A8%EC%88%98%EB%A1%9C-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Keyframes 함수로 애니메이션 만들기</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> style<span class=\"token punctuation\">,</span> keyframes <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'typestyle'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> colorAnimationName <span class=\"token operator\">=</span> <span class=\"token function\">keyframes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'0%'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> color<span class=\"token punctuation\">:</span> <span class=\"token string\">'black'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'50%'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> color<span class=\"token punctuation\">:</span> <span class=\"token string\">'blue'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> className <span class=\"token operator\">=</span> <span class=\"token function\">style</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span>\n    fontSize<span class=\"token punctuation\">:</span> <span class=\"token string\">'20px'</span><span class=\"token punctuation\">,</span>\n    animationName<span class=\"token punctuation\">:</span> colorAnimationName<span class=\"token punctuation\">,</span>\n    animationDuration<span class=\"token punctuation\">:</span> <span class=\"token string\">'1s'</span><span class=\"token punctuation\">,</span>\n    animationIterationCount<span class=\"token punctuation\">:</span> <span class=\"token string\">'infinite'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p><code class=\"language-text\">colorAnimationName</code> 을 일일이 변수로 분리 할 필요는 없다. 한번만 사용할거면 <code class=\"language-text\">animationName</code> 속성에 바로 <code class=\"language-text\">keyframes</code> 를 사용한 객체를 리턴하도록 만들면 된다.</p>\n<h2 id=\"일반-css를-사용하기\"><a href=\"#%EC%9D%BC%EB%B0%98-css%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일반 CSS를 사용하기</h2>\n<p><code class=\"language-text\">cssRaw</code> 함수를 사용하고 그 안에 일반 CSS를 문자열로 집어넣으면 그대로 글로벌 스타일로 변환된다. 그리고 그 파일안에 있는 컴포넌트에 전부 영향을 준다. 특정 이름을 가진 클래스를 만들고, 간단하게 기존 스타일을 마이그레이션 하거나 NormalizeCSS 등을 바로 가져올 때도 유용하게 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> style<span class=\"token punctuation\">,</span> cssRaw <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'typestyle'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">cssRaw</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`\n.red {\n  color: red;\n}\n`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">cssRaw</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`\n.bold {\n  font-weight: bold;\n}\n`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> className <span class=\"token operator\">=</span> <span class=\"token function\">style</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span> fontSize<span class=\"token punctuation\">:</span> <span class=\"token string\">'30px'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>className <span class=\"token operator\">+</span> <span class=\"token string\">' red bold'</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span> <span class=\"token comment\">// red, bold 클래스 사용 가능</span>\n    Hello world\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"구형-브라우저용-속성-사용하기\"><a href=\"#%EA%B5%AC%ED%98%95-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%9A%A9-%EC%86%8D%EC%84%B1-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구형 브라우저용 속성 사용하기</h2>\n<p><code class=\"language-text\">rgba</code> 같은 구형 브라우저에서 지원되지 않는 속성을 사용하면서 구형 브라우저를 지원하는 용도로 <code class=\"language-text\">rgb</code> 를 사용하는 경우, CSS 파일에서는 보통 같은 속성을 두번 작성해서 문제를 해결할 수 있다. 하지만 TypeStyle은 객체를 파싱하기 때문에 같은 속성 값을 두번 선언할 수는 없다.</p>\n<p>하지만 배열을 사용하면 한 속성에 배열의 요소를 순차적으로 따라 스타일을 적용하도록 만들 수 있으며, 비슷한 원리를 vendor prefix에도 적용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> style<span class=\"token punctuation\">,</span> types <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'typestyle'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> scroll<span class=\"token punctuation\">:</span> types<span class=\"token punctuation\">.</span>NestedCSSProperties <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'-webkit-overflow-scrolling'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'touch'</span><span class=\"token punctuation\">,</span>\n  overflow<span class=\"token punctuation\">:</span> <span class=\"token string\">'auto'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> className <span class=\"token operator\">=</span> <span class=\"token function\">style</span><span class=\"token punctuation\">(</span>\n  scroll<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    fontSize<span class=\"token punctuation\">:</span> <span class=\"token string\">'30px'</span><span class=\"token punctuation\">,</span>\n    backgroundColor<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">'rgb(200, 54, 54)'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 구형 브라우저용</span>\n      <span class=\"token string\">'rgba(200, 54, 54, 0.5)'</span> <span class=\"token comment\">// 요즘 브라우저용</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<h2 id=\"정적-페이지-만들어보기\"><a href=\"#%EC%A0%95%EC%A0%81-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EA%B8%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정적 페이지 만들어보기</h2>\n<p><code class=\"language-text\">getStyles</code> 함수는 현재 작성된 파일 안에 정의된 TypeStyle 스타일을 문자열로 변환하는 기능을 한다. 이를 이용해서 간단한 HTML 페이지를 만들 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// app.tsx</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> fs <span class=\"token keyword\">from</span> <span class=\"token string\">'fs'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> ReactDOMServer <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/server'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> style<span class=\"token punctuation\">,</span> getStyles <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'typestyle'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> className <span class=\"token operator\">=</span> <span class=\"token function\">style</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  color<span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span>\n  fontSize<span class=\"token punctuation\">:</span> <span class=\"token string\">'30px'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>className<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    Hello World\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> ReactDOMServer<span class=\"token punctuation\">.</span><span class=\"token function\">renderToStaticMarkup</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> css <span class=\"token operator\">=</span> <span class=\"token function\">getStyles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">renderPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> html<span class=\"token punctuation\">,</span> css <span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> html<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> css<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token string\">`\n&lt;html>\n  &lt;head>\n    &lt;style></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>css<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/style>\n  &lt;/head>\n  &lt;body>\n    </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>html<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n  &lt;/body>\n&lt;/html>\n`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> renderedPage <span class=\"token operator\">=</span> <span class=\"token function\">renderPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> html<span class=\"token punctuation\">,</span> css <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token operator\">+</span> <span class=\"token string\">'/index.html'</span><span class=\"token punctuation\">,</span> renderedPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- 결과물 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style language-css\"><span class=\"token selector\">.fyuerk</span><span class=\"token punctuation\">{</span><span class=\"token property\">color</span><span class=\"token punctuation\">:</span>red<span class=\"token punctuation\">;</span><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span>30px<span class=\"token punctuation\">}</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fyuerk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Hello World<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>위 방식을 응용하여 서버 사이드 랜더링에서도 스타일을 적용할 수 있다. <a href=\"https://egghead.io/lessons/css-render-html-css-server-side-using-typestyle\">영상 참고.</a></p>","id":"65a98c51-f42f-5e54-b1ff-9bbcb33c42d5","frontmatter":{"date":"2018-01-16","path":"/posts/typestyle-basic","title":"TypeStyle 사용하기","tags":["Typescript","React","CSS"],"category":"TypeStyle"}}],"tagName":"CSS"}}