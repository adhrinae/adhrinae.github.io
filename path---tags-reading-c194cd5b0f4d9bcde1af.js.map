{"version":3,"sources":["webpack:///path---tags-reading-c194cd5b0f4d9bcde1af.js","webpack:///./.cache/json/tags-reading.json"],"names":["webpackJsonp","430","module","exports","pathContext","postsByTag","excerpt","html","id","frontmatter","date","path","title","tags","category","tagName"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,aAAeC,QAAA,wKAAAC,KAAA,ulIAA6/EC,GAAA,0HAAAC,aAAmgEC,KAAA,aAAAC,KAAA,oCAAAC,MAAA,6BAAAC,MAAA,wBAAAC,SAAA,YAA2JR,QAAA,sPAAAC,KAAA,orCAAAC,GAAA,uHAAAC,aAAskDC,KAAA,aAAAC,KAAA,iCAAAC,MAAA,kCAAAC,MAAA,oBAAAC,SAAA,YAAyJR,QAAA,mOAAAC,KAAA,s0FAAAC,GAAA,8GAAAC,aAA8rGC,KAAA,aAAAC,KAAA,gCAAAC,MAAA,gCAAAC,MAAA,wBAAAC,SAAA,YAAwJC,QAAA","file":"path---tags-reading-c194cd5b0f4d9bcde1af.js","sourcesContent":["webpackJsonp([139332572119730],{\n\n/***/ 430:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"postsByTag\":[{\"excerpt\":\"감상평을 적기에 앞서 몇 가지 가벼운 질문이 있다. 혹시 아래의 문제를 보았을 때 모르는 내용이 2가지 이상 있거나, 알더라도 바로 명확한 답변이 떠오르지 않는지 생각해보라. (ES5 기준) 아래의 코드는 무엇이 잘못되었는가? 문제가 있다면 어떻게 해결할 수 있는가? 자바스크립트의   this…\",\"html\":\"<p><img src=\\\"https://cl.ly/2c1k0h132v3U/%E1%84%89%E1%85%A9%E1%86%A8%E1%84%80%E1%85%B5%E1%87%81%E1%84%8B%E1%85%B3%E1%86%AB_%E1%84%8C%E1%85%A1%E1%84%87%E1%85%A1%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%B8%E1%84%90%E1%85%B3_cover.jpg\\\" alt=\\\"속깊은 자바스크립트 표지\\\"></p>\\n<p>감상평을 적기에 앞서 몇 가지 가벼운 질문이 있다. 혹시 아래의 문제를 보았을 때 모르는 내용이 2가지 이상 있거나, 알더라도 바로 명확한 답변이 떠오르지 않는지 생각해보라. (ES5 기준)</p>\\n<ul>\\n<li>아래의 코드는 무엇이 잘못되었는가? 문제가 있다면 어떻게 해결할 수 있는가?</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> len <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> len<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tdocument<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"div\\\"</span> <span class=\\\"token operator\\\">+</span> i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"click\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"You clicked div #\\\"</span> <span class=\\\"token operator\\\">+</span> i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>자바스크립트의  <code>this</code> 가 어떤 상황에 따라 다르게 묶이는지 이해하고 있는가?</li>\\n<li>자바스크립트의 변수 범위(스코프)는 어떻게 정해지는가?</li>\\n<li>자바스크립트의 이벤트 루프는 무엇이며 어떤 방식으로 동작하는가?</li>\\n<li>DOM을 다루는 자바스크립트 코드를 작성시 성능을 최적화하기 위한 고려 방안을 3가지 이상 알고 있는가?</li>\\n<li>사용자가 브라우저로 웹 사이트 접속 시 초기 로딩의 불편함을 최소화하기 위한 자바스크립트 코드를 구상할 수 있는가?</li>\\n</ul>\\n<p>답을 떠올리기 힘들었다면 자신이 자바스크립트의 제대로 알고 사용하고 있는지 다시 한번 깊이 고민해 볼 필요가 있다. 다행히도 이 책의 많은 부분은 그 '기본' 을 충실하게 짚어주는 편이다.</p>\\n<p>그래도 코뿔소 책(자바스크립트 완벽 가이드 - 데이비드 플래너건 저)처럼 방대한 내용으로 독자를 허우적거리게 만들거나, 나비 책(자바스크립트 핵심 가이드 - 더글라스 크락포드 저)처럼 겉으로 보기에 너무나 축약된 내용이라 여러번 곱씹어야 내용을 알 법한 어려운 수준의 책도 아니다.\\n그렇기에 나는 방금 소개한 두 책보다 자바스크립트 기본을 익힌 다음에 이 책을 먼저 탐독하길 권하고 싶다.</p>\\n<p>2017년을 보내고 2018년을 맞이하는 현재 시점에서 이 책을 읽는 독자들이 가져야 할 마음가짐은 <strong>온고지신</strong> 이다.\\n아마 이 책에 적힌 유용한 예제 코드를 직접 개발을 하며 사용할 일은 거의 없으리라 생각한다.\\n하지만 Babel, Typescript같은 트랜스파일러를 통해(Typescript는 약간 성격이 다르지만 결과물이 일반 자바스크립트임을 감안하여 이 글에서는 트랜스파일러라 명명한다) 변환된 코드들은 이 책의 예제 코드와 유사한 형태를 가지고 있다.\\n그리고 <strong>왜</strong> 이런 형태를 가지고 있는지, 문제에 부딪힐 때 어떤 방식으로 개량할 수 있는지 생각할 수 있는 지식을 얻을 수 있다.</p>\\n<p>대충 프레임워크 가져다 쓰고, 대충 ES6+ 로 코드 작성하고, 대충 Webpack + Babel 등의 문서를 참고하여 코드 변환되도록 빌드하고 배포하면 (프론트엔드) 웹 애플리케이션이 뚝딱 나온다고 생각하기 쉬운 현재 프론트엔드 생태계 속에서\\n자신이 작성하는 자바스크립트 코드의 무게를 다시 생각하는 계기가 될 것이다. <a href=\\\"https://medium.com/dev-channel/the-cost-of-javascript-84009f51e99e\\\">우리는 언제나 이 무게를 신경써야 한다.</a></p>\\n<p>조금 특이하지만 나는 책의 첫 번째 챕터인 <strong>웹과 자바스크립트</strong>에서 그 옛날 자바스크립트가 어떻게 여기까지 오게 되었는지 간단히 짚어보고,\\n후반부 챕터인 <strong>자바스크립트 성능과 사용자 경험 개선</strong>에서 캐싱, 미니피케이션, gzip 등의 HTTP 요청 관련 최적화로 성능을 개선하는 부분까지 웹 개발의 큰 그림을 짚어보는 구성이 마음에 들었다.\\n초보 프론트엔드 개발자들이 소홀히하기 쉽고, 아무도 바로 알려주지 않는 ‘최적화’ 에 대해 고민할 수 있는 요소를 알려주기 때문에 기초 수준이나 기초를 벗어나는 수준 즈음에 이 책을 읽어보는 것을 권한다.</p>\\n<p>나머지 주요 내용(클로저, 프로토타입과 프로토타입 상속, 자바스크립트만의 독특한 패턴 - 특히 이벤트 델리게이션 등)은 사실 요즘에는 키워드만 알고 검색하면 얼마든지 잘 설명된 자료를 찾아볼 수 있을 것이다.\\n다만 내가 보았을 때 그 자료들은 다 영어로 쓰여있었다. 영문으로 된 글을 읽는데 익숙지 않다면 이 책의 내용이 더 유용하리라 기대한다.</p>\",\"id\":\"/Users/rinae/Dev/blog/src/pages/posts/2017-12-21-javascript-in-depth-review/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-12-21\",\"path\":\"/posts/javascript-in-depth-review\",\"title\":\"'속깊은 Javascript' 감상평 및 추천사\",\"tags\":[\"Reading\",\"Javascript\"],\"category\":\"Review\"}},{\"excerpt\":\"자바를 맛만 보고, 실질적으로 루비를 첫 프로그래밍 언어로 접하여 지금까지 사용해오고 있습니다. 어느 덧 2년이 다 되어가네요. 루비는 비교적 간단하면서도 강력한 언어이지만, 현재는 루비 온 레일즈(이하 레일즈) 라는 걸출한 웹 프레임워크의 기반이 되는 언어라는 인식 이외에는 그다지 유명세를 얻지 못하고 있습니다. 반면 비슷하게 간단하면서 강력한데다 전 세계적인 인지도를 가지고 있는 프로그래밍 언어가 있습니다. 파이썬(Python…\",\"html\":\"<p>자바를 맛만 보고, 실질적으로 루비를 첫 프로그래밍 언어로 접하여 지금까지 사용해오고 있습니다. 어느 덧 2년이 다 되어가네요.<br>\\n루비는 비교적 간단하면서도 강력한 언어이지만, 현재는 루비 온 레일즈(이하 레일즈) 라는 걸출한 웹 프레임워크의 기반이 되는 언어라는 인식 이외에는 그다지 유명세를 얻지 못하고 있습니다.</p>\\n<p>반면 비슷하게 간단하면서 강력한데다 전 세계적인 인지도를 가지고 있는 프로그래밍 언어가 있습니다. 파이썬(Python) 입니다.<br>\\n사실 언제라도 필요에 따라 마음만 먹으면 파이썬을 금방 사용할 수 있으리라 생각해 왔는데 좀처럼 그럴 기회가 없었습니다.<br>\\n그래서 이번에 길벗 출판사에서 진행하는 이벤트를 통해 가볍게 파이썬을 접해보는 계기를 만들고자 '파이썬 코딩의 기술(Effective Python) 책을 리뷰하기로 했습니다.</p>\\n<p>이 책을 한 마디로 표현한다면 파이썬의 <strong>'요람부터 무덤까지'</strong> 를 알려주는 책이라고 할 수 있습니다.<br>\\n저자는 파이썬다운 생각을 하는 방법부터 시작하여 함수, 클래스, 병렬성, 내장 모듈, 협력, 제품화까지 파이썬으로 프로그래밍을 하는데 있어 필요한 모든 요소를 관통하며 묵직한 조언을 던져줍니다. </p>\\n<p>파이썬이라는 언어는 그 자유로움 때문에 프로그래머가 각자 편한 방식으로 코딩을 하다가 성능이나 가독성, 원인을 알 수 없는 버그 등 많은 문제에 직면하기 쉽습니다. 그렇기 때문에 저는 프로그래밍 언어를 익힐 때 해당 언어의 사고방식을 체득하려는 노력을 합니다.<br>\\n이 책은 그 사고방식을 익히는데 최적화되어 있으며, 평소에 잊고 있다가도 필요한 부분에 바로 적용할 수 있도록 예제 코드가 단계별로 잘 제공되어 있습니다. 특히 바로 잘 정돈된 코드만 나열하는 게 아니라 좋지 않은 예를 어떤 과정과 사고방식을 통해 개선해가는지 보여주는 점이 가장 마음에 들었습니다.</p>\\n<p><strong>다만 이 책을 제대로 활용하기 위해서는 기초적인 파이썬 문법을 알고 있어야 합니다.</strong><br>\\n초보자 혹은 다른 언어 기반지식을 가지고 파이썬을 가볍게 익히신 분들이라면 <strong>바로 읽어보셔야 할 책이라고 생각하며</strong>, '어떻게 하면 더 효율적인 코드를 작성할 수 있을까?' 라는 고민을 안고 있는 중급 파이썬 개발자들에게도 조심스레 추천드리고 싶습니다.</p>\",\"id\":\"/Users/rinae/Dev/blog/src/pages/posts/2017-06-28-effective-python-review/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-06-28\",\"path\":\"/posts/effective-python-review\",\"title\":\"파이썬 코딩의 기술(Effective Python) 리뷰\",\"tags\":[\"Reading\",\"Python\"],\"category\":\"Review\"}},{\"excerpt\":\"Ruby on Rails(이하 레일즈) 를 쓰는 사람이라면 DHH(데이비드 하이네마이어 한슨)의 이름을 모르는 사람은 거의 없을 것이다. 레일즈 프레임워크의 창시자일 뿐 아니라 거침 없는 입담과 자신만의 확고한 방식으로 레일즈라는 거대한 프로젝트를 이끌고 있는 개발자이기 때문이다. 사실 나도 그냥 DHH의 이름을 들으면 떠오르는 점은 ‘레일즈의 창시자’ 정도밖에 없었다. 덧붙이면 그 전에는 PHP…\",\"html\":\"<p>Ruby on Rails(이하 레일즈) 를 쓰는 사람이라면 DHH(데이비드 하이네마이어 한슨)의 이름을 모르는 사람은 거의 없을 것이다. 레일즈 프레임워크의 창시자일 뿐 아니라 거침 없는 입담과 자신만의 확고한 방식으로 레일즈라는 거대한 프로젝트를 이끌고 있는 개발자이기 때문이다.</p>\\n<p>사실 나도 그냥 DHH의 이름을 들으면 떠오르는 점은 ‘레일즈의 창시자’ 정도밖에 없었다. 덧붙이면 그 전에는 PHP로 개발을 하다가 너무 답답해하던 중 루비라는 언어를 접하고, 사랑에 빠져(말 그대로이다. 이는 DHH가 <a href=\\\"https://harfangk.github.io/2017/01/27/quora-qna-session-with-david-heinemeier-hansson-jan-25-2017-ko.html\\\">2017년 1월에 Quora에서 진행한 AMA</a>에서 사용한 표현이다.) 레일즈를 개발하게 되었다는 것 정도를 알고 있었다.</p>\\n<p>그러다 위에 링크한 DHH의 AMA를 읽게 되었고, 글을 다 읽고 나니 ‘이 사람은 대체 어떤 사람이고, 무슨 생각을 하고 있을까? 배울 점이 있다면 배우고 싶다’ 라는 생각이 들었다. 그렇게 접하게 된 대표적인 저서가 이 <strong>Remote</strong>이다.</p>\\n<p>이 책은 ‘원격근무’ 라는 것이 어떤 것인지 소개하면서 흔히 알려진 오해들을 바로잡고, 어떤 방식으로 원격근무를 적용하면 좋을 지 안내하는 가이드 역할을 하는 책이다. 실제로 DHH가 설립한 회사 37signals(현 Basecamp, 이들이 운영하고 있는 원격 근무 서비스의 이름과 같다)는 전면적인 원격 근무 체제를 도입하고 있고, 아주 성공적으로 운영하고 있는 회사 중 하나이다.</p>\\n<p>‘원격 근무는 회사에 가지 않고 집에서 작업하기 때문에 관리자의 통제가 힘들다’라는 게 일반적으로 원격 근무를 바라보는 사람들의 생각일 것이다. 하지만 오히려 관리자의 통제가 정말로 필요한 경우는 어떤 것인지 다시 한번 생각해보아야 한다. 근태 관리인가? 아니면 생산성인가? ‘관리자가 직접 직원을 볼 수 없기 때문에 통제가 힘들다’ 는 것은 근태 위주의 생각이고, 근로자가 자신이 가능한한 최적의 환경에서 최고의 생산성을 낼 수 있는 작업방식으로 회사 일에 기여를 하면 자연스레 회사와 근로자 모두에게 이득이 될 것이다.</p>\\n<p>더불어 출퇴근 시간으로 하루에 일정 시간을 소비하고, 시간 뿐 아니라 출퇴근 지옥 속에서 정신력까지 소모하는 생활을 살아가는 시대에 ‘출퇴근 문제’를 도려내면 삶이 얼마나 편하게 바뀔 지 상상해보라. 저절로 편안한 기분이 든다.</p>\\n<p>요즘은 다양한 도구가 많이 개발되어 있어서(Basecamp, 각종 메신저, 구글 닥스 등) 세계 각지에 떨어진 사람들도 <strong>언어만 통하면</strong> 서로 협력하여 업무를 진행하는데 전혀 무리가 없다. 물론 다시 한번 강조하지만 언어가 통하는게 중요하다. 해외의 회사에 원격근무자로 취직을 한다 하더라도 주로 <strong>영어 쓰기</strong>가 큰 장벽이 될 것이다.</p>\\n<p>원격근무자를 고용하는 회사에서 고려할 사항 뿐 아니라 원격근무로 일하는 사람도 고려해야 할 사항들이 여러가지 있다. 보통 집에서 혹은 근처 카페에서 작업을 한다고 하면 딴 짓을 하거나 게으르게 행동하여 생산성이 떨어질까 걱정하는 경우가 많은데, 오히려 이 책은 ‘과도하게 일에 몰입하지 않도록 주의하라’고 경고한다. 나 자신도 비슷한 일을 경험한 적이 있어서 크게 공감되었다. 간단한 작업을 돕고 마무리 지으려고 했는데, 카페에서 화장실 한번 가지 못하고 5시간을 앉아있던 뒤에야 간신히 일어날 수 있었다. 회사에서 있었다면 어떤 식으로든 몸을 일으켜 움직이는게 쉬웠을 것이다.</p>\\n<p>마지막으로 이 책은 원격근무를 하는데 필요한 중요한 요소 중 하나는 '동기’임을 강조한다. 관리자 입장에서도 원격근무자의 업무 성과가 제대로 나오지 않는 경우에 주어진 업무가 제대로 구성되어있고 동기를 부여하는 업무인지 확인하라고 말하고 있고, 원격근무자에게도 스스로를 탓하기 보다 근무환경을 다시 한 번 살펴보라고 권한다.</p>\\n<p>겉으로 보기엔 형태가 달라 보이지만 거대한 오픈소스 프로젝트도 원격근무의 좋은 예가 될 수 있다. 얼굴도 마주한 적 없는 다양한 사람들이 거대한 프로젝트를 완성시켜나가는 모습은 경이롭다.</p>\\n<blockquote>\\n<p>우리가 개발한 웹프레임워크인 루비온레일스는 십여 년이 넘는 기간 동안 새로운 기능을 넣고 코드 품질을 개선하면서 진화시켜왔다. 이는 전 세계 십여 개 국가, 수백 개 도시에서 3천 명이 넘는 개발자들(이들은 서로 만난 적도 없는 사람들이다)이 오랜 기간 코드를 발전시킨 결과다.</p>\\n<p>원격근무를 도입하는 과정에 의심이 들거나 장애물을 만날 때는 이렇게 생각하면 도움이 된다. “전 세계의 3천 명이 넘는 개발자들을 관리하고 조율하는 프로젝트도 있는데, 이 정도쯤이야!” 아마 골치 아픈 문제가 곧 해결될 수 있으리라는 안도감을 느낄 것이다.</p>\\n<p>--- p183, p184</p>\\n</blockquote>\\n<p>모든 직종이 원격근무를 적극적으로 도입할 수는 없다. 하지만 개발자라는 직업은 지금 시대에 원격근무를 하기에 가장 탁월한 직업이라고 생각한다. 출근하러 집을 나서는 순간부터 '아 집에 돌아가고 싶다’ 라는 생각이 들게 되는 삶 보다 자신이 하는 일을 진정 즐기면서 회사와 함께 상생할 수 있도록 원격근무를 적절히 도입하는 사례가 점점 늘어나는 모습이 기대된다. 나 또한 원격근무라는걸 제대로 해보고 싶다.</p>\\n<hr>\\n<ul>\\n<li>책 링크: <a href=\\\"http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=50265443\\\">알라딘</a></li>\\n</ul>\",\"id\":\"/Users/rinae/Dev/blog/src/pages/posts/2017-02-26-reading-remote/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-02-26\",\"path\":\"/posts/remote-the-book-review\",\"title\":\"‘Remote - 사무실 따윈 필요 없어!’ 를 읽고\",\"tags\":[\"Reading\",\"Remote Job\"],\"category\":\"Review\"}}],\"tagName\":\"Reading\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tags-reading-c194cd5b0f4d9bcde1af.js","module.exports = {\"pathContext\":{\"postsByTag\":[{\"excerpt\":\"감상평을 적기에 앞서 몇 가지 가벼운 질문이 있다. 혹시 아래의 문제를 보았을 때 모르는 내용이 2가지 이상 있거나, 알더라도 바로 명확한 답변이 떠오르지 않는지 생각해보라. (ES5 기준) 아래의 코드는 무엇이 잘못되었는가? 문제가 있다면 어떻게 해결할 수 있는가? 자바스크립트의   this…\",\"html\":\"<p><img src=\\\"https://cl.ly/2c1k0h132v3U/%E1%84%89%E1%85%A9%E1%86%A8%E1%84%80%E1%85%B5%E1%87%81%E1%84%8B%E1%85%B3%E1%86%AB_%E1%84%8C%E1%85%A1%E1%84%87%E1%85%A1%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%B8%E1%84%90%E1%85%B3_cover.jpg\\\" alt=\\\"속깊은 자바스크립트 표지\\\"></p>\\n<p>감상평을 적기에 앞서 몇 가지 가벼운 질문이 있다. 혹시 아래의 문제를 보았을 때 모르는 내용이 2가지 이상 있거나, 알더라도 바로 명확한 답변이 떠오르지 않는지 생각해보라. (ES5 기준)</p>\\n<ul>\\n<li>아래의 코드는 무엇이 잘못되었는가? 문제가 있다면 어떻게 해결할 수 있는가?</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> len <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> len<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tdocument<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"div\\\"</span> <span class=\\\"token operator\\\">+</span> i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"click\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"You clicked div #\\\"</span> <span class=\\\"token operator\\\">+</span> i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>자바스크립트의  <code>this</code> 가 어떤 상황에 따라 다르게 묶이는지 이해하고 있는가?</li>\\n<li>자바스크립트의 변수 범위(스코프)는 어떻게 정해지는가?</li>\\n<li>자바스크립트의 이벤트 루프는 무엇이며 어떤 방식으로 동작하는가?</li>\\n<li>DOM을 다루는 자바스크립트 코드를 작성시 성능을 최적화하기 위한 고려 방안을 3가지 이상 알고 있는가?</li>\\n<li>사용자가 브라우저로 웹 사이트 접속 시 초기 로딩의 불편함을 최소화하기 위한 자바스크립트 코드를 구상할 수 있는가?</li>\\n</ul>\\n<p>답을 떠올리기 힘들었다면 자신이 자바스크립트의 제대로 알고 사용하고 있는지 다시 한번 깊이 고민해 볼 필요가 있다. 다행히도 이 책의 많은 부분은 그 '기본' 을 충실하게 짚어주는 편이다.</p>\\n<p>그래도 코뿔소 책(자바스크립트 완벽 가이드 - 데이비드 플래너건 저)처럼 방대한 내용으로 독자를 허우적거리게 만들거나, 나비 책(자바스크립트 핵심 가이드 - 더글라스 크락포드 저)처럼 겉으로 보기에 너무나 축약된 내용이라 여러번 곱씹어야 내용을 알 법한 어려운 수준의 책도 아니다.\\n그렇기에 나는 방금 소개한 두 책보다 자바스크립트 기본을 익힌 다음에 이 책을 먼저 탐독하길 권하고 싶다.</p>\\n<p>2017년을 보내고 2018년을 맞이하는 현재 시점에서 이 책을 읽는 독자들이 가져야 할 마음가짐은 <strong>온고지신</strong> 이다.\\n아마 이 책에 적힌 유용한 예제 코드를 직접 개발을 하며 사용할 일은 거의 없으리라 생각한다.\\n하지만 Babel, Typescript같은 트랜스파일러를 통해(Typescript는 약간 성격이 다르지만 결과물이 일반 자바스크립트임을 감안하여 이 글에서는 트랜스파일러라 명명한다) 변환된 코드들은 이 책의 예제 코드와 유사한 형태를 가지고 있다.\\n그리고 <strong>왜</strong> 이런 형태를 가지고 있는지, 문제에 부딪힐 때 어떤 방식으로 개량할 수 있는지 생각할 수 있는 지식을 얻을 수 있다.</p>\\n<p>대충 프레임워크 가져다 쓰고, 대충 ES6+ 로 코드 작성하고, 대충 Webpack + Babel 등의 문서를 참고하여 코드 변환되도록 빌드하고 배포하면 (프론트엔드) 웹 애플리케이션이 뚝딱 나온다고 생각하기 쉬운 현재 프론트엔드 생태계 속에서\\n자신이 작성하는 자바스크립트 코드의 무게를 다시 생각하는 계기가 될 것이다. <a href=\\\"https://medium.com/dev-channel/the-cost-of-javascript-84009f51e99e\\\">우리는 언제나 이 무게를 신경써야 한다.</a></p>\\n<p>조금 특이하지만 나는 책의 첫 번째 챕터인 <strong>웹과 자바스크립트</strong>에서 그 옛날 자바스크립트가 어떻게 여기까지 오게 되었는지 간단히 짚어보고,\\n후반부 챕터인 <strong>자바스크립트 성능과 사용자 경험 개선</strong>에서 캐싱, 미니피케이션, gzip 등의 HTTP 요청 관련 최적화로 성능을 개선하는 부분까지 웹 개발의 큰 그림을 짚어보는 구성이 마음에 들었다.\\n초보 프론트엔드 개발자들이 소홀히하기 쉽고, 아무도 바로 알려주지 않는 ‘최적화’ 에 대해 고민할 수 있는 요소를 알려주기 때문에 기초 수준이나 기초를 벗어나는 수준 즈음에 이 책을 읽어보는 것을 권한다.</p>\\n<p>나머지 주요 내용(클로저, 프로토타입과 프로토타입 상속, 자바스크립트만의 독특한 패턴 - 특히 이벤트 델리게이션 등)은 사실 요즘에는 키워드만 알고 검색하면 얼마든지 잘 설명된 자료를 찾아볼 수 있을 것이다.\\n다만 내가 보았을 때 그 자료들은 다 영어로 쓰여있었다. 영문으로 된 글을 읽는데 익숙지 않다면 이 책의 내용이 더 유용하리라 기대한다.</p>\",\"id\":\"/Users/rinae/Dev/blog/src/pages/posts/2017-12-21-javascript-in-depth-review/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-12-21\",\"path\":\"/posts/javascript-in-depth-review\",\"title\":\"'속깊은 Javascript' 감상평 및 추천사\",\"tags\":[\"Reading\",\"Javascript\"],\"category\":\"Review\"}},{\"excerpt\":\"자바를 맛만 보고, 실질적으로 루비를 첫 프로그래밍 언어로 접하여 지금까지 사용해오고 있습니다. 어느 덧 2년이 다 되어가네요. 루비는 비교적 간단하면서도 강력한 언어이지만, 현재는 루비 온 레일즈(이하 레일즈) 라는 걸출한 웹 프레임워크의 기반이 되는 언어라는 인식 이외에는 그다지 유명세를 얻지 못하고 있습니다. 반면 비슷하게 간단하면서 강력한데다 전 세계적인 인지도를 가지고 있는 프로그래밍 언어가 있습니다. 파이썬(Python…\",\"html\":\"<p>자바를 맛만 보고, 실질적으로 루비를 첫 프로그래밍 언어로 접하여 지금까지 사용해오고 있습니다. 어느 덧 2년이 다 되어가네요.<br>\\n루비는 비교적 간단하면서도 강력한 언어이지만, 현재는 루비 온 레일즈(이하 레일즈) 라는 걸출한 웹 프레임워크의 기반이 되는 언어라는 인식 이외에는 그다지 유명세를 얻지 못하고 있습니다.</p>\\n<p>반면 비슷하게 간단하면서 강력한데다 전 세계적인 인지도를 가지고 있는 프로그래밍 언어가 있습니다. 파이썬(Python) 입니다.<br>\\n사실 언제라도 필요에 따라 마음만 먹으면 파이썬을 금방 사용할 수 있으리라 생각해 왔는데 좀처럼 그럴 기회가 없었습니다.<br>\\n그래서 이번에 길벗 출판사에서 진행하는 이벤트를 통해 가볍게 파이썬을 접해보는 계기를 만들고자 '파이썬 코딩의 기술(Effective Python) 책을 리뷰하기로 했습니다.</p>\\n<p>이 책을 한 마디로 표현한다면 파이썬의 <strong>'요람부터 무덤까지'</strong> 를 알려주는 책이라고 할 수 있습니다.<br>\\n저자는 파이썬다운 생각을 하는 방법부터 시작하여 함수, 클래스, 병렬성, 내장 모듈, 협력, 제품화까지 파이썬으로 프로그래밍을 하는데 있어 필요한 모든 요소를 관통하며 묵직한 조언을 던져줍니다. </p>\\n<p>파이썬이라는 언어는 그 자유로움 때문에 프로그래머가 각자 편한 방식으로 코딩을 하다가 성능이나 가독성, 원인을 알 수 없는 버그 등 많은 문제에 직면하기 쉽습니다. 그렇기 때문에 저는 프로그래밍 언어를 익힐 때 해당 언어의 사고방식을 체득하려는 노력을 합니다.<br>\\n이 책은 그 사고방식을 익히는데 최적화되어 있으며, 평소에 잊고 있다가도 필요한 부분에 바로 적용할 수 있도록 예제 코드가 단계별로 잘 제공되어 있습니다. 특히 바로 잘 정돈된 코드만 나열하는 게 아니라 좋지 않은 예를 어떤 과정과 사고방식을 통해 개선해가는지 보여주는 점이 가장 마음에 들었습니다.</p>\\n<p><strong>다만 이 책을 제대로 활용하기 위해서는 기초적인 파이썬 문법을 알고 있어야 합니다.</strong><br>\\n초보자 혹은 다른 언어 기반지식을 가지고 파이썬을 가볍게 익히신 분들이라면 <strong>바로 읽어보셔야 할 책이라고 생각하며</strong>, '어떻게 하면 더 효율적인 코드를 작성할 수 있을까?' 라는 고민을 안고 있는 중급 파이썬 개발자들에게도 조심스레 추천드리고 싶습니다.</p>\",\"id\":\"/Users/rinae/Dev/blog/src/pages/posts/2017-06-28-effective-python-review/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-06-28\",\"path\":\"/posts/effective-python-review\",\"title\":\"파이썬 코딩의 기술(Effective Python) 리뷰\",\"tags\":[\"Reading\",\"Python\"],\"category\":\"Review\"}},{\"excerpt\":\"Ruby on Rails(이하 레일즈) 를 쓰는 사람이라면 DHH(데이비드 하이네마이어 한슨)의 이름을 모르는 사람은 거의 없을 것이다. 레일즈 프레임워크의 창시자일 뿐 아니라 거침 없는 입담과 자신만의 확고한 방식으로 레일즈라는 거대한 프로젝트를 이끌고 있는 개발자이기 때문이다. 사실 나도 그냥 DHH의 이름을 들으면 떠오르는 점은 ‘레일즈의 창시자’ 정도밖에 없었다. 덧붙이면 그 전에는 PHP…\",\"html\":\"<p>Ruby on Rails(이하 레일즈) 를 쓰는 사람이라면 DHH(데이비드 하이네마이어 한슨)의 이름을 모르는 사람은 거의 없을 것이다. 레일즈 프레임워크의 창시자일 뿐 아니라 거침 없는 입담과 자신만의 확고한 방식으로 레일즈라는 거대한 프로젝트를 이끌고 있는 개발자이기 때문이다.</p>\\n<p>사실 나도 그냥 DHH의 이름을 들으면 떠오르는 점은 ‘레일즈의 창시자’ 정도밖에 없었다. 덧붙이면 그 전에는 PHP로 개발을 하다가 너무 답답해하던 중 루비라는 언어를 접하고, 사랑에 빠져(말 그대로이다. 이는 DHH가 <a href=\\\"https://harfangk.github.io/2017/01/27/quora-qna-session-with-david-heinemeier-hansson-jan-25-2017-ko.html\\\">2017년 1월에 Quora에서 진행한 AMA</a>에서 사용한 표현이다.) 레일즈를 개발하게 되었다는 것 정도를 알고 있었다.</p>\\n<p>그러다 위에 링크한 DHH의 AMA를 읽게 되었고, 글을 다 읽고 나니 ‘이 사람은 대체 어떤 사람이고, 무슨 생각을 하고 있을까? 배울 점이 있다면 배우고 싶다’ 라는 생각이 들었다. 그렇게 접하게 된 대표적인 저서가 이 <strong>Remote</strong>이다.</p>\\n<p>이 책은 ‘원격근무’ 라는 것이 어떤 것인지 소개하면서 흔히 알려진 오해들을 바로잡고, 어떤 방식으로 원격근무를 적용하면 좋을 지 안내하는 가이드 역할을 하는 책이다. 실제로 DHH가 설립한 회사 37signals(현 Basecamp, 이들이 운영하고 있는 원격 근무 서비스의 이름과 같다)는 전면적인 원격 근무 체제를 도입하고 있고, 아주 성공적으로 운영하고 있는 회사 중 하나이다.</p>\\n<p>‘원격 근무는 회사에 가지 않고 집에서 작업하기 때문에 관리자의 통제가 힘들다’라는 게 일반적으로 원격 근무를 바라보는 사람들의 생각일 것이다. 하지만 오히려 관리자의 통제가 정말로 필요한 경우는 어떤 것인지 다시 한번 생각해보아야 한다. 근태 관리인가? 아니면 생산성인가? ‘관리자가 직접 직원을 볼 수 없기 때문에 통제가 힘들다’ 는 것은 근태 위주의 생각이고, 근로자가 자신이 가능한한 최적의 환경에서 최고의 생산성을 낼 수 있는 작업방식으로 회사 일에 기여를 하면 자연스레 회사와 근로자 모두에게 이득이 될 것이다.</p>\\n<p>더불어 출퇴근 시간으로 하루에 일정 시간을 소비하고, 시간 뿐 아니라 출퇴근 지옥 속에서 정신력까지 소모하는 생활을 살아가는 시대에 ‘출퇴근 문제’를 도려내면 삶이 얼마나 편하게 바뀔 지 상상해보라. 저절로 편안한 기분이 든다.</p>\\n<p>요즘은 다양한 도구가 많이 개발되어 있어서(Basecamp, 각종 메신저, 구글 닥스 등) 세계 각지에 떨어진 사람들도 <strong>언어만 통하면</strong> 서로 협력하여 업무를 진행하는데 전혀 무리가 없다. 물론 다시 한번 강조하지만 언어가 통하는게 중요하다. 해외의 회사에 원격근무자로 취직을 한다 하더라도 주로 <strong>영어 쓰기</strong>가 큰 장벽이 될 것이다.</p>\\n<p>원격근무자를 고용하는 회사에서 고려할 사항 뿐 아니라 원격근무로 일하는 사람도 고려해야 할 사항들이 여러가지 있다. 보통 집에서 혹은 근처 카페에서 작업을 한다고 하면 딴 짓을 하거나 게으르게 행동하여 생산성이 떨어질까 걱정하는 경우가 많은데, 오히려 이 책은 ‘과도하게 일에 몰입하지 않도록 주의하라’고 경고한다. 나 자신도 비슷한 일을 경험한 적이 있어서 크게 공감되었다. 간단한 작업을 돕고 마무리 지으려고 했는데, 카페에서 화장실 한번 가지 못하고 5시간을 앉아있던 뒤에야 간신히 일어날 수 있었다. 회사에서 있었다면 어떤 식으로든 몸을 일으켜 움직이는게 쉬웠을 것이다.</p>\\n<p>마지막으로 이 책은 원격근무를 하는데 필요한 중요한 요소 중 하나는 '동기’임을 강조한다. 관리자 입장에서도 원격근무자의 업무 성과가 제대로 나오지 않는 경우에 주어진 업무가 제대로 구성되어있고 동기를 부여하는 업무인지 확인하라고 말하고 있고, 원격근무자에게도 스스로를 탓하기 보다 근무환경을 다시 한 번 살펴보라고 권한다.</p>\\n<p>겉으로 보기엔 형태가 달라 보이지만 거대한 오픈소스 프로젝트도 원격근무의 좋은 예가 될 수 있다. 얼굴도 마주한 적 없는 다양한 사람들이 거대한 프로젝트를 완성시켜나가는 모습은 경이롭다.</p>\\n<blockquote>\\n<p>우리가 개발한 웹프레임워크인 루비온레일스는 십여 년이 넘는 기간 동안 새로운 기능을 넣고 코드 품질을 개선하면서 진화시켜왔다. 이는 전 세계 십여 개 국가, 수백 개 도시에서 3천 명이 넘는 개발자들(이들은 서로 만난 적도 없는 사람들이다)이 오랜 기간 코드를 발전시킨 결과다.</p>\\n<p>원격근무를 도입하는 과정에 의심이 들거나 장애물을 만날 때는 이렇게 생각하면 도움이 된다. “전 세계의 3천 명이 넘는 개발자들을 관리하고 조율하는 프로젝트도 있는데, 이 정도쯤이야!” 아마 골치 아픈 문제가 곧 해결될 수 있으리라는 안도감을 느낄 것이다.</p>\\n<p>--- p183, p184</p>\\n</blockquote>\\n<p>모든 직종이 원격근무를 적극적으로 도입할 수는 없다. 하지만 개발자라는 직업은 지금 시대에 원격근무를 하기에 가장 탁월한 직업이라고 생각한다. 출근하러 집을 나서는 순간부터 '아 집에 돌아가고 싶다’ 라는 생각이 들게 되는 삶 보다 자신이 하는 일을 진정 즐기면서 회사와 함께 상생할 수 있도록 원격근무를 적절히 도입하는 사례가 점점 늘어나는 모습이 기대된다. 나 또한 원격근무라는걸 제대로 해보고 싶다.</p>\\n<hr>\\n<ul>\\n<li>책 링크: <a href=\\\"http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=50265443\\\">알라딘</a></li>\\n</ul>\",\"id\":\"/Users/rinae/Dev/blog/src/pages/posts/2017-02-26-reading-remote/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-02-26\",\"path\":\"/posts/remote-the-book-review\",\"title\":\"‘Remote - 사무실 따윈 필요 없어!’ 를 읽고\",\"tags\":[\"Reading\",\"Remote Job\"],\"category\":\"Review\"}}],\"tagName\":\"Reading\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tags-reading.json\n// module id = 430\n// module chunks = 139332572119730"],"sourceRoot":""}