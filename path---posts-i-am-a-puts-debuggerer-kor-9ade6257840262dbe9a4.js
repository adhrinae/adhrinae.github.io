webpackJsonp([0xafe66de3878a],{410:function(n,a){n.exports={data:{markdownRemark:{html:'<ul>\n<li>본 포스트는 <a href="https://twitter.com/tenderlove">Aaron Patterson</a>의 <a href="https://tenderlovemaking.com/2016/02/05/i-am-a-puts-debuggerer.html">포스트</a>의 번역본입니다.</li>\n<li>기본적인 루비 및 레일즈 지식을 가지고 있는 독자 대상의 글입니다.</li>\n<li>피드백은 언제나 환영합니다.</li>\n</ul>\n<hr>\n<p>저는 콘솔 디버거입니다 <em>(역주1: 원 제목의 \'puts debuggerer\'를 의역하였습니다. 루비의 puts는 전달받은 인자를 표준 출력(stdout)해주는 메서드입니다. 이후에도 puts debugging은 모두 콘솔 디버깅으로 번역하겠습니다)</em>. 진짜 디버거( <code>pry</code> , <code>byebug</code> 등)를 사용하는 사람들을 폄하하고자 이 이야기를 하는게 아닙니다. 진짜 디버거는 아주 좋다고 생각하지만, 저는 하나라도 제대로 배울 시간을 들이지 못했습니다. 매번 한 개라도 써보려고 하다가 결국엔 한동안 사용하지 않고, 다시 사용방법을 배워야만 합니다. 어쨌든, 이번 기회에 여러분에게 콘솔 디버깅을 할 때 사용하는 트릭을 좀 알려드리고자 합니다. 저는 이 트릭들을 무언가가 어떻게 작동하는지 이해가 되지 않을때나 작동 원리를 더 알고싶을 때 사용합니다. 아래에 이야기하게 될 대부분의 것들은 <em>절대로</em> 최선의 방법(best practice)가 아니며 여러분들은 디버깅 세션이 끝나면 절대 이 코드들을 남겨두어선 안됩니다. 그러나 여러분이 <strong>무엇을 디버깅하던지</strong> 아주 유용하다고 생각합니다. 정말로 뭐든지요. 전역 변수, 메서드 재정의, 조건문 추가, 불러오기 경로 수정, 몽키 패칭, 콜 스택 출력 등 <strong>뭐든지요</strong>.</p>\n<p>저는 이 포스트에서 최대한 실제 접하는 예시들을 보여드리고 싶었습니다. 하지만 대부분의 예시들은 제가 레일즈의 보안 이슈를 디버깅하려고 할 때 나온 것들이라서, 이 코드의 테크닉은 재활용하셔도 좋지만 <strong>코드 전체를 그대로 쓰시면 안됩니다.</strong> 제가 디버깅하려는 코드들은 정상적으로 동작하지 않습니다. 거기다 이 코드를 사용하시는걸 원치도 않습니다.</p>\n<p>매 섹션에 제가 겪었던 문제들을 제목으로 적어두었으며, 내용 부분에 제가 사용한 해결책을 적어두었습니다.</p>\n<h2 id="어디에-문제가-있는진-알겠는데-어떻게-거기까지-가야할지-모르겠다"><a href="#%EC%96%B4%EB%94%94%EC%97%90-%EB%AC%B8%EC%A0%9C%EA%B0%80-%EC%9E%88%EB%8A%94%EC%A7%84-%EC%95%8C%EA%B2%A0%EB%8A%94%EB%8D%B0-%EC%96%B4%EB%96%BB%EA%B2%8C-%EA%B1%B0%EA%B8%B0%EA%B9%8C%EC%A7%80-%EA%B0%80%EC%95%BC%ED%95%A0%EC%A7%80-%EB%AA%A8%EB%A5%B4%EA%B2%A0%EB%8B%A4" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>어디에 문제가 있는진 알겠는데, 어떻게 거기까지 가야할지 모르겠다</h2>\n<p>가끔 저는 문제가 어딨는지는 알지만 어떻게 그 부분까지 가는지 모르는 이슈들을 디버깅할 때가 있습니다. 이럴 때마다 저는 <code>puts caller</code> 를 넣어서 콜 스택을 끄집어냅니다.</p>\n<p>예를 들어 제가 이런 코드를 작성했다고 칩시다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-ruby"><code><span class="token constant">LOOKUP</span> <span class="token operator">=</span> <span class="token builtin">Hash</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token punctuation">{</span> <span class="token operator">|</span>h<span class="token punctuation">,</span> k<span class="token operator">|</span> h<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">Type</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token keyword">unless</span> k<span class="token punctuation">.</span>blank<span class="token operator">?</span> <span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>여기서 저는 기본 블록이 어떻게 호출되는지 알고 싶을 때 이렇게 합니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-ruby"><code><span class="token constant">LOOKUP</span>\t\t<span class="token operator">=</span> <span class="token builtin">Hash</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token punctuation">{</span> <span class="token operator">|</span>h<span class="token punctuation">,</span> k<span class="token operator">|</span>\n  puts <span class="token string">"#"</span> <span class="token operator">*</span> <span class="token number">90</span>\n  puts caller\n  puts <span class="token string">"#"</span> <span class="token operator">*</span> <span class="token number">90</span>\n  h<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">Type</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token keyword">unless</span> k<span class="token punctuation">.</span>blank<span class="token operator">?</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>위의 코드는 90개의 해시 태그를 출력하고 콜 스택을 출력한 뒤에, 나머지 90개의 해시 태그를 출력할 겁니다. 해시 태그는 여러번 호출될 때를 대비해서 콜 스택을 쉽게 구분하기 위해 넣어두었습니다. 참고로 이걸 "해시 태그"라고 부르는건 여러분을 골려주려고 그러는 겁니다.</p>\n<p>저는 이 방법을 꽤 자주 사용하기 때문에 Vim 단축키를 지정해두었습니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>" puts the caller\nnnoremap <leader>wtf oputs "#" * 90<c-m>puts caller<c-m>puts "#" * 90<esc></code></pre>\n      </div>\n<p>이렇게 하면 <code>&#x3C;leader>wtf</code> 키 조합으로 커서가 있는 위치 바로 밑에 디버깅 코드를 삽입합니다.</p>\n<h3 id="콜-스택을-한-번만-출력하고-싶어"><a href="#%EC%BD%9C-%EC%8A%A4%ED%83%9D%EC%9D%84-%ED%95%9C-%EB%B2%88%EB%A7%8C-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B3%A0-%EC%8B%B6%EC%96%B4" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>콜 스택을 한 번만 출력하고 싶어</h3>\n<p>그냥 콜 스택을 출력한 뒤에 <code>exit!</code> 를 사용하거나, <code>raise</code> 를 호출하세요. <code>raise</code> 는 예외를 출력할거고, 어쨌든 콜 스택을 볼 수 있을겁니다.</p>\n<h3 id="콜-스택을-특정-경우에만-보고-싶어"><a href="#%EC%BD%9C-%EC%8A%A4%ED%83%9D%EC%9D%84-%ED%8A%B9%EC%A0%95-%EA%B2%BD%EC%9A%B0%EC%97%90%EB%A7%8C-%EB%B3%B4%EA%B3%A0-%EC%8B%B6%EC%96%B4" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>콜 스택을 특정 경우에만 보고 싶어</h3>\n<p>이건 그냥 디버깅 코드니까 여러분이 하고싶은대로 하시면 됩니다. 예를 들어 제가 해시에 무언가를 추가할 때마다 콜 스택을 호출하고 싶다고 한다면, 이렇게 하면 됩니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-ruby"><code><span class="token constant">LOOKUP</span>\t\t<span class="token operator">=</span> <span class="token builtin">Hash</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token punctuation">{</span> <span class="token operator">|</span>h<span class="token punctuation">,</span> k<span class="token operator">|</span>\n  <span class="token keyword">unless</span> k<span class="token punctuation">.</span>blank<span class="token operator">?</span>\n    puts <span class="token string">"#"</span> <span class="token operator">*</span> <span class="token number">90</span>\n    puts caller\n    puts <span class="token string">"#"</span> <span class="token operator">*</span> <span class="token number">90</span>\n    h<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">Type</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>\n  <span class="token keyword">end</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>어차피 전 이 코드를 없애버릴거니까 어떤 이상한 조건문도 마음대로 추가할 수 있지요!</p>\n<h2 id="메서드를-호출했는데-이게-어디에-있는건지-모르겠다"><a href="#%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%ED%98%B8%EC%B6%9C%ED%96%88%EB%8A%94%EB%8D%B0-%EC%9D%B4%EA%B2%8C-%EC%96%B4%EB%94%94%EC%97%90-%EC%9E%88%EB%8A%94%EA%B1%B4%EC%A7%80-%EB%AA%A8%EB%A5%B4%EA%B2%A0%EB%8B%A4" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>메서드를 호출했는데, 이게 어디에 있는건지 모르겠다</h2>\n<p>메서드를 호출했는데 그 메서드가 어디에 구현되어있는지 모를 때, 저는 <code>source_location</code> 메서드와 함께 <code>method</code> 메서드를 사용합니다. 예를 들어 (레일즈) 컨트롤러 안에 있는 액션이 <code>render</code> 메서드를 호출하고 있을 때, 저는 그 메서드를 어디서 호출하는지 알고 싶었습니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-ruby"><code><span class="token keyword">def</span> index\n  render params<span class="token punctuation">[</span><span class="token symbol">:id</span><span class="token punctuation">]</span>\n<span class="token keyword">end</span>\n</code></pre>\n      </div>\n<p>위의 코드를 이렇게 바꿔보겠습니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-ruby"><code><span class="token keyword">def</span> index\n  p <span class="token function">method</span><span class="token punctuation">(</span><span class="token symbol">:render</span><span class="token punctuation">)</span><span class="token punctuation">.</span>source_location\n  render params<span class="token punctuation">[</span><span class="token symbol">:id</span><span class="token punctuation">]</span>\n<span class="token keyword">end</span>\n</code></pre>\n      </div>\n<p>호출해보도록 하지요.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>$ curl http://localhost:3000/users/xxxx</code></pre>\n      </div>\n<p>그러면 로그에는 이렇게 출력됩니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>Processing by UsersController#show as */*\n  Parameters: {"id"=>"xxxx"}\n["/Users/aaron/git/rails/actionpack/lib/action_controller/metal/instrumentation.rb", 40]\nCompleted 500 Internal Server Error in 35ms (ActiveRecord: 0.0ms)</code></pre>\n      </div>\n<p>이제 저는 <code>render</code> 메서드가 <a href="https://github.com/rails/rails/blob/6fcc3c47eb363d0d3753ee284de2fbc68df03194/actionpack/lib/action_controller/metal/instrumentation.rb#L40">instrumentation.rb 파일의 40번째 줄</a>에 있다는 것을 알게 되었습니다.</p>\n<h2 id="super-메서드를-호출했는데-그게-어디에-있는건지-모르겠다"><a href="#super-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%ED%98%B8%EC%B6%9C%ED%96%88%EB%8A%94%EB%8D%B0-%EA%B7%B8%EA%B2%8C-%EC%96%B4%EB%94%94%EC%97%90-%EC%9E%88%EB%8A%94%EA%B1%B4%EC%A7%80-%EB%AA%A8%EB%A5%B4%EA%B2%A0%EB%8B%A4" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>super</code> 메서드를 호출했는데 그게 어디에 있는건지 모르겠다</h2>\n<p><code>render</code> 메서드가 <a href="https://github.com/rails/rails/blob/6fcc3c47eb363d0d3753ee284de2fbc68df03194/actionpack/lib/action_controller/metal/instrumentation.rb#L43">super를 호출한다는 걸</a> 알게 되었습니다만, 저는 그게 어디에 구현되어있는지 모릅니다. 이 경우에 <code>method</code> 의 리턴 값에 <code>super_method</code> 를 사용합니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-ruby"><code><span class="token keyword">def</span> index\n  p <span class="token function">method</span><span class="token punctuation">(</span><span class="token symbol">:render</span><span class="token punctuation">)</span><span class="token punctuation">.</span>source_location\n  render params<span class="token punctuation">[</span><span class="token symbol">:id</span><span class="token punctuation">]</span>\n<span class="token keyword">end</span>\n</code></pre>\n      </div>\n<p>위의 코드를 이렇게 바꿉니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-ruby"><code><span class="token keyword">def</span> index\n  p <span class="token function">method</span><span class="token punctuation">(</span><span class="token symbol">:render</span><span class="token punctuation">)</span><span class="token punctuation">.</span>super_method<span class="token punctuation">.</span>source_location\n  redner params<span class="token punctuation">[</span><span class="token symbol">:id</span><span class="token punctuation">]</span>\n<span class="token keyword">end</span>\n</code></pre>\n      </div>\n<p>같은 요청을 해 보면 이런 결과를 얻을 수 있습니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>Processing by UsersController#show as */*\n  Parameters: {"id"=>"xxxx"}\n["/Users/aaron/git/rails/actionpack/lib/action_controller/metal/rendering.rb", 34]\nCompleted 500 Internal Server Error in 34ms (ActiveRecord: 0.0ms)</code></pre>\n      </div>\n<p>이제야 <code>super</code> 가 <a href="https://github.com/rails/rails/blob/6fcc3c47eb363d0d3753ee284de2fbc68df03194/actionpack/lib/action_controller/metal/rendering.rb#L34">여기로 가는 게</a> 보입니다. 이 메서드는 마찬가지로 <code>super</code> 를 호출하지만, 그냥 위의 작업을 반복하여(아니면 그냥 loop를 쓰면 됩니다!) 제가 진짜 알아보고자 하는 메서드를 찾을 수 있습니다.</p>\n<h2 id="method-메서드의-구현체를-찾고자-한다면"><a href="#method-%EB%A9%94%EC%84%9C%EB%93%9C%EC%9D%98-%EA%B5%AC%ED%98%84%EC%B2%B4%EB%A5%BC-%EC%B0%BE%EA%B3%A0%EC%9E%90-%ED%95%9C%EB%8B%A4%EB%A9%B4" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>method</code> 메서드의 구현체를 찾고자 한다면?</h2>\n<p>때때로 <code>method</code> 를 이용한 트릭이 작동하지 않을 때가 있습니다. 제가 알아보려는 객체가 자신만의 <code>method</code> 메서드를 구현하고 있기 때문입니다. 예를 들어 저는 <code>request</code> 객체에 <code>headers</code> 메서드가 구현된 위치를 찾고자 할 때 이런 코드를 사용했습니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-ruby"><code><span class="token keyword">def</span> index\n  p request<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token symbol">:headers</span><span class="token punctuation">)</span><span class="token punctuation">.</span>source_location\n  <span class="token variable">@users</span> <span class="token operator">=</span> <span class="token constant">User</span><span class="token punctuation">.</span>all\n<span class="token keyword">end</span>\n</code></pre>\n      </div>\n<p>제가 요청을 보내면 이런 에러가 뜹니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>ArgumentError (wrong number of arguments (given 1, expected 0)):\n  app/controllers/users_controller.rb:5:in `index\'</code></pre>\n      </div>\n<p>이 경우는 <code>request</code> 객체가 자신만의 <code>method</code> 를 따로 구현하고 있기 때문입니다. <code>headers</code>  메서드를 찾아내기 위해 메서드를 <code>Kernel</code> 로부터 분리하고 <code>request</code> 객체에 다시 바인드 한 뒤 실행해보겠습니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-ruby"><code><span class="token keyword">def</span> index\n  method <span class="token operator">=</span> <span class="token constant">Kernal</span><span class="token punctuation">.</span><span class="token function">instance_method</span><span class="token punctuation">(</span><span class="token symbol">:method</span><span class="token punctuation">)</span>\n  p method<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token symbol">:headers</span><span class="token punctuation">)</span><span class="token punctuation">.</span>source_location\n  <span class="token variable">@users</span> <span class="token operator">=</span> <span class="token constant">User</span><span class="token punctuation">.</span>all\n<span class="token keyword">end</span>\n</code></pre>\n      </div>\n<p>요청을 다시 해보면 결과가 다르게 나옵니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>Processing by UsersController#index as */*\n["/Users/aaron/git/rails/actionpack/lib/action_dispatch/http/request.rb", 201]</code></pre>\n      </div>\n<p>이제서야 <code>headers</code> 메서드가 <a href="https://github.com/rails/rails/blob/6fcc3c47eb363d0d3753ee284de2fbc68df03194/actionpack/lib/action_dispatch/http/request.rb#L201">여기에</a> 구현되어 있다는 것을 발견했습니다.</p>\n<p>심지어 <code>method</code> 메서드의 구현체를 찾을 수도 있습니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-ruby"><code><span class="token keyword">def</span> index\n  method <span class="token operator">=</span> <span class="token constant">Kernal</span><span class="token punctuation">.</span><span class="token function">instance_method</span><span class="token punctuation">(</span><span class="token symbol">:method</span><span class="token punctuation">)</span>\n  p method<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token symbol">:method</span><span class="token punctuation">)</span><span class="token punctuation">.</span>source_location\n  <span class="token variable">@users</span> <span class="token operator">=</span> <span class="token constant">User</span><span class="token punctuation">.</span>all\n<span class="token keyword">end</span>\n</code></pre>\n      </div>\n<h2 id="또-뭔가-호출했는데-이게-어딨는지-모르겠다"><a href="#%EB%98%90-%EB%AD%94%EA%B0%80-%ED%98%B8%EC%B6%9C%ED%96%88%EB%8A%94%EB%8D%B0-%EC%9D%B4%EA%B2%8C-%EC%96%B4%EB%94%A8%EB%8A%94%EC%A7%80-%EB%AA%A8%EB%A5%B4%EA%B2%A0%EB%8B%A4" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>(또) 뭔가 호출했는데 이게 어딨는지 모르겠다</h2>\n<p>가끔 당장 사용하고 있는 메서드가 실제로는 문제의 본질이 아닐 수 있습니다. 그래서 <code>method</code> 메서드를 사용하는 트릭은 별 도움이 안될 겁니다. 이럴 때엔 저는 <code>TracePoint</code> 라고 하는 더 큰 추적기(a larger hammer)를 사용합니다. <code>render</code> 메서드로부터 호출 된 <em>모든</em> 메서드의 리스트를 추출하기 위해 다시 한번 예를 들어보겠습니다. 리스트에 보이는 메서드들은 <code>render</code> 메서드가 직접 호출한 것은 아니지만 어딘가로부터 호출 된 것입니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-ruby"><code><span class="token comment"># GET /users</span>\n<span class="token comment"># GET /users.json</span>\n<span class="token keyword">def</span> index\n  <span class="token variable">@users</span> <span class="token operator">=</span> <span class="token constant">User</span><span class="token punctuation">.</span>all\n  tp <span class="token operator">=</span> <span class="token constant">TracePoint</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token symbol">:call</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>x<span class="token operator">|</span>\n    p x\n  <span class="token keyword">end</span>\n  tp<span class="token punctuation">.</span>enable\n  render <span class="token string">\'index\'</span>\n<span class="token keyword">ensure</span>\n  tp<span class="token punctuation">.</span>disable\n<span class="token keyword">end</span>\n</code></pre>\n      </div>\n<p>저기 위치한 <code>TracePoint</code> 는 모든 "호출(<code>:call</code>)" 이벤트마다 작동하고, 블록은 메서드 이름과 호출된 위치를 출력할 것입니다. 여기서 "호출" 이라 함은 루비 메서드가 호출되는 경우를 말합니다(C 메서드는 제외). 만약 C 메서드가 호출되는 것을 보고 싶으시다면 <code>:c_call</code> 을 사용하세요. 이 예시는 <em>엄청난 양의</em> 결과가 출력될겁니다. 저는 호출될 메서드가 꽤 적거나, 도대체 어디부터 찾아봐야 할지 모를 때 이 방법을 사용합니다.</p>\n<h2 id="예외가-일어나는-것은-알겠지만-어디서-발생하는지-모르겠다"><a href="#%EC%98%88%EC%99%B8%EA%B0%80-%EC%9D%BC%EC%96%B4%EB%82%98%EB%8A%94-%EA%B2%83%EC%9D%80-%EC%95%8C%EA%B2%A0%EC%A7%80%EB%A7%8C-%EC%96%B4%EB%94%94%EC%84%9C-%EB%B0%9C%EC%83%9D%ED%95%98%EB%8A%94%EC%A7%80-%EB%AA%A8%EB%A5%B4%EA%B2%A0%EB%8B%A4" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>예외가 일어나는 것은 알겠지만, 어디서 발생하는지 모르겠다</h2>\n<p>예외가 발생할 때 <em>실제로</em> 어디서 예외가 발생했는지 모를 때가 있습니다. 이 예시는 레일즈 3.0.0을 기준으로 작성되었지만(참고로 이 문제는 수정되었습니다), 일단 이런 코드가 있다고 해보죠.</p>\n<div class="gatsby-highlight">\n      <pre class="language-ruby"><code><span class="token constant">ActiveRecord</span><span class="token punctuation">:</span><span class="token symbol">:Base</span><span class="token punctuation">.</span>logger <span class="token operator">=</span> <span class="token constant">Logger</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token variable">$stdout</span>\n<span class="token constant">User</span><span class="token punctuation">.</span>connection<span class="token punctuation">.</span>execute <span class="token string">"oh no!"</span>\n</code></pre>\n      </div>\n<p>SQL은 작동하지 않을 테고, 예외가 일어날 겁니다. 그렇다면 예외가 어떻게 발생하는지 보겠습니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>  SQL (0.1ms)  oh no!\nSQLite3::SQLException: near "oh": syntax error: oh no!\nactiverecord-3.0.0/lib/active_record/connection_adapters/abstract_adapter.rb:202:in `rescue in log\': SQLite3::SQLException: near "oh": syntax error: oh no! (ActiveRecord::StatementInvalid)\n\tfrom activerecord-3.0.0/lib/active_record/connection_adapters/abstract_adapter.rb:194:in `log\'\n\tfrom activerecord-3.0.0/lib/active_record/connection_adapters/sqlite_adapter.rb:135:in `execute\'\n\tfrom test.rb:6:in `<top (required)>\'\n\tfrom railties-3.0.0/lib/rails/commands/runner.rb:48:in `eval\'\n\tfrom railties-3.0.0/lib/rails/commands/runner.rb:48:in `<top (required)>\'\n\tfrom railties-3.0.0/lib/rails/commands.rb:39:in `require\'\n\tfrom railties-3.0.0/lib/rails/commands.rb:39:in `<top (required)>\'\n\tfrom script/rails:6:in `require\'\n\tfrom script/rails:6:in `<main>\'</code></pre>\n      </div>\n<p>여러분이 추적 내역(backtrace) 을 읽어보셨다면 <em>(역주2: backtrace하면 역추적 이라는 말이 직역하기는 좋지만, 보통 루비에서 backtrace를 떠올릴 때 콘솔에 뜨는 십수 줄의 추적 내역이 연상될 때가 많아서 추적 내역으로 번역하였습니다)</em>, 예외가 <a href="https://github.com/rails/rails/blob/9891ca8/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb#L202">abstract_adapter.rb의 202번째 줄</a>에서 발생했다는 것을 알 수 있습니다. 그러나 이 코드는 <a href="https://github.com/rails/rails/blob/9891ca8/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb#L199-L202">예외가 발생한 상황에서 다시 예외를 일으키도록</a> 되어있는게 보일 겁니다. 그렇다면 실제로는 어디서 예외가 일어난 걸까요? 정답을 찾기 위해 <code>puts</code> 를 사용하거나 루비의 <code>-d</code> 플래그를 사용할 수 있습니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>[aaron@TC okokok (master)]$ bundle exec ruby -d script/rails runner test.rb</code></pre>\n      </div>\n<p><code>-d</code> 플래그는 경고를 활성화하고 모든 예외 발생을 출력합니다. 네, 실제로는 엄청나게 많은 양의 결과물이 출력되겠지요. 그러나 끝부분을 살펴보시면 이렇게 되어있습니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>Exception `NameError\' at activesupport-3.0.0/lib/active_support/core_ext/module/remove_method.rb:3 - method `_validators\' not defined in Class\nException `SQLite3::SQLException\' at sqlite3-1.3.11/lib/sqlite3/database.rb:91 - near "oh": syntax error\nException `SQLite3::SQLException\' at activesupport-3.0.0/lib/active_support/notifications/instrumenter.rb:24 - near "oh": syntax error\n  SQL (0.1ms)  oh no!\nSQLite3::SQLException: near "oh": syntax error: oh no!\nException `ActiveRecord::StatementInvalid\' at activerecord-3.0.0/lib/active_record/connection_adapters/abstract_adapter.rb:202 - SQLite3::SQLException: near "oh": syntax error: oh no!\nException `ActiveRecord::StatementInvalid\' at railties-3.0.0/lib/rails/commands/runner.rb:48 - SQLite3::SQLException: near "oh": syntax error: oh no!\nactiverecord-3.0.0/lib/active_record/connection_adapters/abstract_adapter.rb:202:in `rescue in log\': SQLite3::SQLException: near "oh": syntax error: oh no! (ActiveRecord::StatementInvalid)\n\tfrom activerecord-3.0.0/lib/active_record/connection_adapters/abstract_adapter.rb:194:in `log\'\n\tfrom activerecord-3.0.0/lib/active_record/connection_adapters/sqlite_adapter.rb:135:in `execute\'\n\tfrom test.rb:6:in `<top (required)>\'\n\tfrom railties-3.0.0/lib/rails/commands/runner.rb:48:in `eval\'\n\tfrom railties-3.0.0/lib/rails/commands/runner.rb:48:in `<top (required)>\'\n\tfrom railties-3.0.0/lib/rails/commands.rb:39:in `require\'\n\tfrom railties-3.0.0/lib/rails/commands.rb:39:in `<top (required)>\'\n\tfrom script/rails:6:in `require\'\n\tfrom script/rails:6:in `<main>\'</code></pre>\n      </div>\n<p>실제 예외는 여기서 발생했습니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>Exception `SQLite3::SQLException\' at sqlite3-1.3.11/lib/sqlite3/database.rb:91 - near "oh": syntax error</code></pre>\n      </div>\n<p>그리고 여기서 다시 예외가 일어났지요.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>Exception `SQLite3::SQLException\' at activesupport-3.0.0/lib/active_support/notifications/instrumenter.rb:24 - near "oh": syntax error</code></pre>\n      </div>\n<p>예외가 발생할 때 래핑된 뒤 다시 예외가 발생하는 경우에는 <em>반드시</em> 본래의 추적 내역을 노출해야 합니다. 그러므로 이 경우는 명백히 버그지만, 실제로 버그는 고쳐졌으며, 우리는 언젠가 또 이런 경우가 발생했을 때 해결하는 법을 알게 되었습니다.</p>\n<h3 id="커맨드-라인-도구를--d-플래그와-함께-사용하여-실행"><a href="#%EC%BB%A4%EB%A7%A8%EB%93%9C-%EB%9D%BC%EC%9D%B8-%EB%8F%84%EA%B5%AC%EB%A5%BC--d-%ED%94%8C%EB%9E%98%EA%B7%B8%EC%99%80-%ED%95%A8%EA%BB%98-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%8B%A4%ED%96%89" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>커맨드 라인 도구를 <code>-d</code> 플래그와 함께 사용하여 실행</h3>\n<p>위의 기술을 RSpec 테스트에 적용하고 싶으시다면 이렇게 하시면 됩니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>$ ruby -d -S rspec</code></pre>\n      </div>\n<h3 id="-d-플래그는-사용하고-싶은데-프로세스를-실행하는-방법을-모르겠다"><a href="#-d-%ED%94%8C%EB%9E%98%EA%B7%B8%EB%8A%94-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B3%A0-%EC%8B%B6%EC%9D%80%EB%8D%B0-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EB%A5%BC-%EC%8B%A4%ED%96%89%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%84-%EB%AA%A8%EB%A5%B4%EA%B2%A0%EB%8B%A4" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>-d</code> 플래그는 사용하고 싶은데 프로세스를 실행하는 방법을 모르겠다</h3>\n<p>Rake 테스트 작업은 기본적으로 <a href="https://github.com/ruby/rake/blob/3c4fe3e25e5ab6b052f9e81bc2920ca4b4fc1094/lib/rake/testtask.rb#L105">서브 프로세스 안에서 당신의 테스트를 실행합니다</a>. 말인 즉슨 <code>ruby -d -S rake</code> 같은 커맨드를 입력해도 서브 프로세스 안에 있는 여러분의 테스트에는 플래그가 적용되지 않는다는 뜻입니다. 이 경우 저는 <code>RUBYOPT</code> 환경 변수를 사용합니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>[aaron@TC okokok (master)]$ RUBYOPT=-d bundle exec rake test</code></pre>\n      </div>\n<p><code>RUBYOPT</code> 환경 변수는 쉘에서 실행된 모든 루비 프로그램에 적용되고, 심지어 rake로부터 호출 된 서브 쉘에도 적용됩니다. 이를 응용하면 <code>rspec</code> 커맨드를 이렇게 다시 써볼 수 있습니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>$ RUBYOPT=-d rspec</code></pre>\n      </div>\n<h2 id="이-객체는-어디에서-온-걸까"><a href="#%EC%9D%B4-%EA%B0%9D%EC%B2%B4%EB%8A%94-%EC%96%B4%EB%94%94%EC%97%90%EC%84%9C-%EC%98%A8-%EA%B1%B8%EA%B9%8C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>이 객체는 어디에서 온 걸까?</h2>\n<p>보통은 콜 스택을 출력하여 객체가 어디에서 왔는지 찾습니다. 하지만 가끔 객체가 콜 스택 바깥에 위치한 경우도 있습니다. 이럴 때는 객체가 어디에서 호출된 건지 찾기 힘듭니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-ruby"><code><span class="token keyword">def</span> foo\n  x <span class="token operator">=</span> baz\n  bar x\n<span class="token keyword">end</span>\n\n<span class="token keyword">def</span> bar x\n  puts <span class="token string">"#"</span> <span class="token operator">*</span> <span class="token number">90</span>\n  puts caller\n  puts <span class="token string">"#"</span> <span class="token operator">*</span> <span class="token number">90</span>\n  p x\n<span class="token keyword">end</span>\n\n<span class="token keyword">def</span> baz<span class="token punctuation">;</span> zot<span class="token punctuation">;</span>\t\t<span class="token keyword">end</span>\n<span class="token keyword">def</span> zot<span class="token punctuation">;</span> <span class="token builtin">Object</span><span class="token punctuation">.</span><span class="token keyword">new</span>\t<span class="token class-name">end</span>\n\nfoo\n</code></pre>\n      </div>\n<p>이전에 "어디에 문제가 있는진 알겠는데, 어떻게 거기까지 가야할지 모르겠다" 파트에서 <code>caller</code> 를 사용하는 방법, "wtf  트릭" <em>(역주3: 글쓴이는 해당 방법을 소개할 때 Vim 단축키를 <code>&#x3C;leader>wtf</code> 으로 설정하였습니다. 그래서 이를 "wtf trick"으로 명명한 것으로 보입니다)</em>을 보여드렸습니다.  여기서 저는 <code>x</code> 라는 값이 어떻게 할당되었는지 신경쓰였는데요, <code>foo</code> 메서드를 따라가다보면 <code>baz</code> 메서드에서 값을 가져오는 것을 볼 수 있습니다. 거대한 코드 베이스에서는 형제 트리에서 모든 호출과 로직을 따라가는게 아주 어렵습니다(코드를 자료구조의 그래프라고 생각한다면, <code>foo</code> 메서드는 두 개의 자손이 있는 겁니다. <code>baz</code> 와 <code>bar</code> 이죠. 그래서 <code>baz</code>가 <code>bar</code> 의 형제라고 여길 수 있습니다). 저는 게으르기 때문에 객체가 어디서 왔는지 찾기 위해 모든 메서드를 뒤지고 싶지 않았습니다. 그래서 저는 루비의 객체 할당 추적기(object allocation tracer)를 사용하는걸 좋아합니다. 루비의 할당 추적기는 루비 2.1버전부터 사용할 수 있습니다(확실한 것은 아닙니다). 제가 이 방법을 사용할 때는 가능한 빨리 <code>require</code> 한 뒤에 활성화합니다. 그러면 제가 찾고자 하는 할당 위치를 찾을 수 있지요.</p>\n<div class="gatsby-highlight">\n      <pre class="language-ruby"><code><span class="token keyword">require</span> <span class="token string">\'objspace\'</span>\n<span class="token constant">ObjectSpace</span><span class="token punctuation">.</span>trace_object_allocations_start\n\n<span class="token keyword">def</span> foo\n  x <span class="token operator">=</span> baz\n  bar x\n<span class="token keyword">end</span>\n\n<span class="token keyword">def</span> bar x\n  p <span class="token constant">ObjectSpace</span><span class="token punctuation">.</span><span class="token function">allocation_sourcefile</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token constant">ObjectSpace</span><span class="token punctuation">.</span><span class="token function">allocation_sourceline</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n<span class="token keyword">end</span>\n\n<span class="token keyword">def</span> baz<span class="token punctuation">;</span> zot<span class="token punctuation">;</span>\t\t<span class="token keyword">end</span>\n<span class="token keyword">def</span> zot<span class="token punctuation">;</span> <span class="token builtin">Object</span><span class="token punctuation">.</span><span class="token keyword">new</span>\t<span class="token class-name">end</span>\n\nfoo\n</code></pre>\n      </div>\n<p>프로그램을 실행하면 이런 결과를 얻습니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>[aaron@TC tlm.com (master)]$ ruby x.rb\n{"x.rb"=>14}\n[aaron@TC tlm.com (master)]$</code></pre>\n      </div>\n<p><code>x</code> 객체가 해당 파일의 14번째 줄에 있다는 것을 알게 되었습니다. 그러면 해당 라인으로 가서 "wtf 트릭" 을 반복하거나 프로그램에 무슨 문제가 있는지 발견할 때 까지 이 방법을 반복합니다.</p>\n<p>저는 보통 객체 추적을 가능한 빠르게 시작합니다. 제 객체가 어디에 할당되었는지 모르니까요. 이런 추적은 프로그램의 속도를 떨어뜨리지만, 디버깅 중에는 신경쓸 필요가 없습니다.</p>\n<h2 id="나는-require-를-진짜-진짜-빨리-하고-싶어"><a href="#%EB%82%98%EB%8A%94-require-%EB%A5%BC-%EC%A7%84%EC%A7%9C-%EC%A7%84%EC%A7%9C-%EB%B9%A8%EB%A6%AC-%ED%95%98%EA%B3%A0-%EC%8B%B6%EC%96%B4" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>나는 <code>require</code> 를 진짜 진짜 빨리 하고 싶어</h2>\n<p>바로 위에 보여드린 기술은 오로지 객체가 <code>trace_object_allocations_start</code> 메서드가 호출되고 난 뒤에 할당된 이후의 정보만 제공합니다. 파일이 <code>require</code> 되는 순간에 객체가 할당되어서, 도대체 무슨 파일이고 <em>어디에 있는지</em> 모를 때가 있습니다. 그래서  프레임워크 안에 있는 어떤 파일이라도 로드되기 전에 코드를 좀 실행시킬 필요가 있습니다. 이럴 때 저는 <code>-r</code> 플래그를 사용한 뒤 스크립트를 작성합니다.</p>\n<p>우리가 <code>User::BLACKLISTED_CLASS_METHODS</code> 의 할당 위치를 찾는 코드를 작성했다고 칩시다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-ruby"><code><span class="token keyword">require</span> <span class="token string">\'active_record\'</span>\n\n<span class="token constant">AciveRecord</span><span class="token punctuation">:</span><span class="token symbol">:Base</span><span class="token punctuation">.</span>establish_connection adapter<span class="token punctuation">:</span> <span class="token string">\'sqlite3\'</span><span class="token punctuation">,</span> databse<span class="token punctuation">:</span> <span class="token string">\':memory:\'</span>\n\n<span class="token constant">ActiveRecord</span><span class="token punctuation">:</span><span class="token symbol">:Base</span><span class="token punctuation">.</span>connection<span class="token punctuation">.</span>instance_eval <span class="token keyword">do</span>\n  create_table <span class="token symbol">:users</span>\n<span class="token keyword">end</span>\n\n<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token operator">&lt;</span> <span class="token constant">ActiveRecord</span><span class="token punctuation">:</span><span class="token symbol">:Base</span><span class="token punctuation">;</span> <span class="token keyword">end</span>\np <span class="token constant">ObjectSpace</span><span class="token punctuation">.</span><span class="token function">allocation_sourcefile</span><span class="token punctuation">(</span><span class="token constant">User</span><span class="token punctuation">:</span><span class="token symbol">:BLACKLISTED_CLASS_METHODS</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token constant">ObjectSpace</span><span class="token punctuation">.</span><span class="token function">allocation_sourceline</span><span class="token punctuation">(</span><span class="token constant">User</span><span class="token punctuation">:</span><span class="token symbol">:BLACKLISTED_CLASS_METHODS</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>그런데 우리는 이 어떤 파일이 이 상수를 할당했는지 모르고, 찾는 방법을 떠올리고 싶지도 않을 때가 있습니다(네, 이건 좀 억지로 꾸며낸 경우입니다). 이럴 때 <code>y.rb</code> 라는 파일을 작성해 보겠습니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-ruby"><code><span class="token keyword">require</span> <span class="token string">\'objspace\'</span>\n<span class="token constant">ObjectSpace</span><span class="token punctuation">.</span>trace_object_allocations_start\n</code></pre>\n      </div>\n<p>그리고 저는 루비의 커맨드 라인 인자를 넣어서 이 파일을 실행할 때 바로 <code>require</code> 하도록 만들었습니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>[aaron@TC tlm.com (master)]$ ruby -I. -ry x.rb\n{"/Users/aaron/.rbenv/versions/ruby-trunk/lib/ruby/gems/2.4.0/gems/activerecord-5.0.0.beta1/lib/active_record/attribute_methods.rb"=>35}\n[aaron@TC tlm.com (master)]$</code></pre>\n      </div>\n<p>인자들을 찬찬히 살펴보면 <code>-I.</code> 는 ". 를 불러오기 경로로 추가하고", <code>-ry</code> 는 <code>require \'y\'</code> 와 같으며, 이후에 <code>x.rb</code> 를 실행하는 겁니다. 그러니 <code>.</code> 가 불러오기 경로로 추가되었고, <code>x.rb</code> 가 실행되기도 전에 <code>y.rb</code> 파일이 <code>require</code> 되었습니다. 그 결과로 <code>BLACKLISTED_CLASS_METHODS</code> 가 <code>attribute_methods.rb</code> 의 35번째 줄에 에 할당되어 있다는 사실을 알 수 있습니다. 만약 서브 프로세스 안에서 실행되는 코드에 이 기술을 적용하고자 한다면 <code>RUBYOPT</code> 를 함께 쓰면 됩니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>$ RUBYOPT=\'-I. -ry\' rake test</code></pre>\n      </div>\n<h2 id="객체가-어딘가에서-수정되었는데mutated-그-위치를-모르겠다"><a href="#%EA%B0%9D%EC%B2%B4%EA%B0%80-%EC%96%B4%EB%94%98%EA%B0%80%EC%97%90%EC%84%9C-%EC%88%98%EC%A0%95%EB%90%98%EC%97%88%EB%8A%94%EB%8D%B0mutated-%EA%B7%B8-%EC%9C%84%EC%B9%98%EB%A5%BC-%EB%AA%A8%EB%A5%B4%EA%B2%A0%EB%8B%A4" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>객체가 어딘가에서 수정되었는데(mutated), 그 위치를 모르겠다</h2>\n<p>객체를 살펴보다 보면 이게 수정되고 있다는건 알겠는데, 어디서 수정되고 있는 지 모를 때가 있습니다. 이 때는 객체에 <code>freeze</code> 를 호출한 뒤에, 테스트를 실행해보고, 어디서 예외가 발생하는지 살펴보면 됩니다. 그 예로, 제가 <a href="https://github.com/rails/rails/blob/38b5af6595338cb2212980062d9aaf51241878cc/activesupport/lib/active_support/concurrency/share_lock.rb#L28">어디에서 특정 변수가 수정되는지 알고 싶을 때</a>가 있습니다. 코드를 살펴보니 이 변수가 수정된다는 것은 알고 있었지만, 어디서부터 수정이 일어나는지 알지 못했습니다. 그래서 코드를 이렇게 수정해봤습니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-ruby"><code><span class="token keyword">def</span> initialize\n  <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n  <span class="token variable">@cv</span> <span class="token operator">=</span> new_cond\n\n  <span class="token variable">@sharing</span> <span class="token operator">=</span> <span class="token builtin">Hash</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token variable">@sharing</span><span class="token punctuation">.</span>freeze\n  <span class="token variable">@waiting</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token variable">@exclusive_thread</span> <span class="token operator">=</span> <span class="token keyword">nil</span>\n  <span class="token variable">@exclusive_depth</span> <span class="token operator">=</span> <span class="token number">0</span>\n<span class="token keyword">end</span>\n</code></pre>\n      </div>\n<p>그리고 나서 레일즈 서버를 실행하면 예외가 발생하며 추적 내역이 보여집니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>active_support/concurrency/share_lock.rb:151:in `delete\': can\'t modify frozen Hash (RuntimeError)\n\tfrom active_support/concurrency/share_lock.rb:151:in `yield_shares\'\n\tfrom active_support/concurrency/share_lock.rb:79:in `block in stop_exclusive\'</code></pre>\n      </div>\n<p>이제 처음에 수정이 발생한 곳을 발견했습니다. 만약 이 부분이 여러분이 찾고자 하는 부분이 아니라면 작성해둔 <code>freeze</code> 를 삭제한 뒤에 내역을 따라가서 수정된 부분 이후에 다시 덧붙이면 됩니다.</p>\n<h2 id="교착-상태deadlock에-빠졌는데-어디서-문제가-생겼는지-모르겠다"><a href="#%EA%B5%90%EC%B0%A9-%EC%83%81%ED%83%9Cdeadlock%EC%97%90-%EB%B9%A0%EC%A1%8C%EB%8A%94%EB%8D%B0-%EC%96%B4%EB%94%94%EC%84%9C-%EB%AC%B8%EC%A0%9C%EA%B0%80-%EC%83%9D%EA%B2%BC%EB%8A%94%EC%A7%80-%EB%AA%A8%EB%A5%B4%EA%B2%A0%EB%8B%A4" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>교착 상태(deadlock)에 빠졌는데, 어디서 문제가 생겼는지 모르겠다</h2>\n<p>저에게 스레드와 관련된 이슈가 발생했고, 문제를 어디에서 해결해야할 지 몰랐을 때, 저는 살아있는 스레드를 검사해보기 위해 코드를 좀 추가했습니다. 예를 들어 저는 <a href="https://github.com/rails/rails/issues/23503">이 이슈를 디버깅하고 있었습니다</a>. 애플리케이션 서버가 막혀있는데, 대체 어디서 문제가 발생했는지 몰랐습니다. 그래서 어디서 스레드가 막혀있는지 찾기 위해 <code>x.rb</code> 라는 파일을 작성했습니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-ruby"><code><span class="token function">trap</span><span class="token punctuation">(</span><span class="token symbol">:INFO</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token builtin">Thread</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>t<span class="token operator">|</span>\n    puts <span class="token string">"#"</span> <span class="token operator">*</span> <span class="token number">90</span>\n    p t\n    puts t<span class="token punctuation">.</span>backtrace\n    puts <span class="token string">"#"</span> <span class="token operator">*</span> <span class="token number">90</span>\n  <span class="token keyword">end</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>그리고 앱 서버를 이렇게 실행했습니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>$ ruby -I. -rx bin/rails s</code></pre>\n      </div>\n<p>이제 앱 서버가 막혔을 때, 컨트롤+T 키를 누르면(죄송하지만 OS X에서만 작동합니다, 리눅스에서는 <code>kill</code> 을 사용해야 합니다), 모든 스레드의 추적 내역을 볼 수 있습니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>##########################################################################################\n#<Thread:0x007f90bc07cb38 run>\nomglolwut/x.rb:7:in `backtrace\'\nomglolwut/x.rb:7:in `block (2 levels) in <top (required)>\'\nomglolwut/x.rb:4:in `each\'\nomglolwut/x.rb:4:in `block in <top (required)>\'\ngems/puma-2.16.0/lib/rack/handler/puma.rb:43:in `join\'\ngems/puma-2.16.0/lib/rack/handler/puma.rb:43:in `run\'\ngems/rack-2.0.0.alpha/lib/rack/server.rb:296:in `start\'\nrails/commands/server.rb:78:in `start\'\nrails/commands/commands_tasks.rb:90:in `block in server\'\nrails/commands/commands_tasks.rb:85:in `tap\'\nrails/commands/commands_tasks.rb:85:in `server\'\nrails/commands/commands_tasks.rb:49:in `run_command!\'\nrails/command.rb:20:in `run\'\nrails/commands.rb:19:in `<top (required)>\'\nbin/rails:4:in `require\'\nbin/rails:4:in `<main>\'\n##########################################################################################\n##########################################################################################\n#<Thread:0x007f90bef3b668@/Users/aaron/.rbenv/versions/ruby-trunk/lib/ruby/gems/2.4.0/gems/puma-2.16.0/lib/puma/reactor.rb:136 sleep>\nlib/puma/reactor.rb:29:in `select\'\nlib/puma/reactor.rb:29:in `run_internal\'\nlib/puma/reactor.rb:138:in `block in run_in_thread\'\n##########################################################################################\n##########################################################################################\n#<Thread:0x007f90bef3b500@/Users/aaron/.rbenv/versions/ruby-trunk/lib/ruby/gems/2.4.0/gems/puma-2.16.0/lib/puma/thread_pool.rb:216 sleep>\nlib/puma/thread_pool.rb:219:in `sleep\'\nlib/puma/thread_pool.rb:219:in `block in start!\'\n##########################################################################################\n##########################################################################################\n#<Thread:0x007f90bef3b3c0@/Users/aaron/.rbenv/versions/ruby-trunk/lib/ruby/gems/2.4.0/gems/puma-2.16.0/lib/puma/thread_pool.rb:187 sleep>\nlib/puma/thread_pool.rb:190:in `sleep\'\nlib/puma/thread_pool.rb:190:in `block in start!\'\n##########################################################################################\n##########################################################################################\n#<Thread:0x007f90bef3b258@/Users/aaron/.rbenv/versions/ruby-trunk/lib/ruby/gems/2.4.0/gems/puma-2.16.0/lib/puma/server.rb:296 sleep>\nlib/puma/server.rb:322:in `select\'\nlib/puma/server.rb:322:in `handle_servers\'\nlib/puma/server.rb:296:in `block in run\'\n##########################################################################################\n##########################################################################################\n#<Thread:0x007f90c1ef9a08@/Users/aaron/.rbenv/versions/ruby-trunk/lib/ruby/gems/2.4.0/gems/puma-2.16.0/lib/puma/thread_pool.rb:61 sleep>\nlib/ruby/2.4.0/monitor.rb:111:in `sleep\'\nlib/ruby/2.4.0/monitor.rb:111:in `wait\'\nlib/ruby/2.4.0/monitor.rb:111:in `wait\'\nlib/ruby/2.4.0/monitor.rb:132:in `wait_until\'\naction_dispatch/http/response.rb:170:in `block in await_commit\'\nlib/ruby/2.4.0/monitor.rb:214:in `mon_synchronize\'\naction_dispatch/http/response.rb:169:in `await_commit\'\naction_controller/metal/live.rb:270:in `process\'\naction_controller/metal.rb:193:in `dispatch\'\naction_controller/metal.rb:265:in `dispatch\'\naction_dispatch/routing/route_set.rb:50:in `dispatch\'\naction_dispatch/routing/route_set.rb:32:in `serve\'\n##########################################################################################\n##########################################################################################\n#<Thread:0x007f90bd1d5f38@/Users/aaron/git/rails/actionpack/lib/action_controller/metal/live.rb:279 sleep>\nlib/ruby/2.4.0/monitor.rb:111:in `sleep\'\nlib/ruby/2.4.0/monitor.rb:111:in `wait\'\nlib/ruby/2.4.0/monitor.rb:111:in `wait\'\nlib/ruby/2.4.0/monitor.rb:123:in `wait_while\'\nactive_support/concurrency/share_lock.rb:57:in `block (2 levels) in start_exclusive\'\nactive_support/concurrency/share_lock.rb:154:in `yield_shares\'\nactive_support/concurrency/share_lock.rb:56:in `block in start_exclusive\'\nlib/ruby/2.4.0/monitor.rb:214:in `mon_synchronize\'\nactive_support/concurrency/share_lock.rb:51:in `start_exclusive\'\nactive_support/concurrency/share_lock.rb:113:in `exclusive\'\nactive_support/dependencies/interlock.rb:12:in `loading\'\nactive_support/dependencies.rb:37:in `load_interlock\'\nactive_support/dependencies.rb:369:in `require_or_load\'\nactive_support/dependencies.rb:529:in `load_missing_constant\'\nactive_support/dependencies.rb:212:in `const_missing\'\nactive_support/dependencies.rb:561:in `load_missing_constant\'\nactive_support/dependencies.rb:212:in `const_missing\'\napp/controllers/users_controller.rb:9:in `index\'\n##########################################################################################</code></pre>\n      </div>\n<p>가독성을 위해 결과물을 조금 잘라냈습니다만, 여러분은 이제 각각의 스레드가 무엇을 하는지 볼 수 있습니다. 그리고 어느 스레드 두 개가 교착 상태에 빠졌는지 쉽게 발견할 수 있습니다(정답은 마지막 두 개입니다).</p>\n<h2 id="특정한-시간에만-언제-메서드가-실행되는지-알고-싶다"><a href="#%ED%8A%B9%EC%A0%95%ED%95%9C-%EC%8B%9C%EA%B0%84%EC%97%90%EB%A7%8C-%EC%96%B8%EC%A0%9C-%EB%A9%94%EC%84%9C%EB%93%9C%EA%B0%80-%EC%8B%A4%ED%96%89%EB%90%98%EB%8A%94%EC%A7%80-%EC%95%8C%EA%B3%A0-%EC%8B%B6%EB%8B%A4" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>특정한 시간에만 언제 메서드가 실행되는지 알고 싶다</h2>\n<p>일정 시간 뒤에 메서드가 언제 실행되었는지 알고 싶을 때가 있습니다. 저는 애플리케이션이 <em>구동된 뒤에</em>  <code>start_exclusive</code> 메서드가 언제 호출되는지 알고 싶었습니다. 이럴 때 위에 보여드린 <code>trap</code> 트릭과 전역 변수를 조합하여 해결했습니다.</p>\n<p>먼저 <code>start_exclusive</code> 를 이렇게 수정했습니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-ruby"><code><span class="token keyword">def</span> <span class="token function">start_exclusive</span><span class="token punctuation">(</span>purpose<span class="token punctuation">:</span> <span class="token keyword">nil</span><span class="token punctuation">,</span> compatible<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> no_wait<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token variable">$foo</span>\n    puts <span class="token string">"#"</span> <span class="token operator">*</span> <span class="token number">90</span>\n    puts caller\n    puts <span class="token string">"#"</span> <span class="token operator">*</span> <span class="token number">90</span>\n  <span class="token keyword">end</span>\n  <span class="token comment"># ..</span>\n<span class="token keyword">end</span>\n</code></pre>\n      </div>\n<p>그리고 <code>x.rb</code> 라는 파일을 작성했습니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-ruby"><code><span class="token function">trap</span><span class="token punctuation">(</span><span class="token symbol">:INFO</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  puts <span class="token string">"turning on debugging!"</span>\n  <span class="token variable">$foo</span> <span class="token operator">=</span> <span class="token keyword">true</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>그리고 앱 서버를 구동하고 모든 요소가 준비되면 컨트롤+T를 눌러서 제 전역 변수를 <code>true</code> 로 바꿉니다. 그리고 로그 메세지들을 살펴볼 수 있게 됩니다.</p>\n<h2 id="끝"><a href="#%EB%81%9D" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>끝</h2>\n<p>이게 제가 지금 생각해 낼 수 있는 방법의 전부입니다. 그리고 <a href="http://www.schneems.com/2016/01/25/ruby-debugging-magic-cheat-sheet.html">Richard의 puts 디버깅에 관한 글도 읽어보세요</a>. 좋은 하루 되시길. 끝.</p>\n<hr>\n<h2 id="번역-후기"><a href="#%EB%B2%88%EC%97%AD-%ED%9B%84%EA%B8%B0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>번역 후기</h2>\n<p>간만에 엄청나게 긴 양의 글을 번역했습니다. 그래도 맘 잡고 하니 생각보다 오래 걸리지도 않고, 초벌번역의 퀄리티도 조금씩 올라가고 있다고 느끼고 있습니다.</p>\n<p>이번에 소개해 드린 글은 콘솔에 디버깅 하는 방법을 소개하는 글입니다. 보통은 디버깅 툴로 <code>byebug</code>, <code>pry-byebug</code> 등을 사용하실 겁니다. 저도 어지간한 디버깅을 그렇게 처리하고 있지만.. 본문의 내용처럼 좀 깊은 부분을 들여다볼 때는 일일히 깊숙하게 파고들기 힘들 때가 많습니다. 좀 더 자신이 사용하고 있는 코드의 깊은 부분을 들여보고자 할 때 아주 유용한 테크닉이 될 것이라 생각합니다.</p>\n<p>번역된 챕터 제목들의 말투가 조금 이상하다고 느끼실텐데, 들어가는 글에서 원 저자가 \'어차피 블로그 포스트니까 신경 안쓰고 말투를 편하게 한다\'는 식으로 쓰여있길래 그 느낌을 가능한 한 살려서 작성해보았습니다.</p>\n<p>글을 읽다 보면 레일즈같은 거대한 오픈 소스에 기여하는 분들은 \'어떻게 이 방대한 코드를 다 고려하면서 개발을 하는걸까?\' 하는 생각에 더욱 존경심이 들더군요. 레일즈 뿐 아니라 다른 오픈소스 프레임웍들도 마찬가지입니다. 언젠가는 오픈소스에 기여했다는 족적을 꼭 남겨 보고 싶습니다.</p>\n<p>현재 Hanami 기반으로 개발을 하고 있다보니 문서화가 덜 되어 \'소스를 까볼\' 일이 많은데 이런 기술을 더 유용하게 사용해볼 수 있겠습니다. 이 글을 보는 다른 분들은 어떻게 \'프로그램의 소스를 살펴 보시는지\' 궁금하기도 하고, 더 유용한 디버깅 팁이 있는지도 궁금해집니다.</p>',
frontmatter:{date:"2017/03/19",path:"/posts/i-am-a-puts-debuggerer-kor",title:"[번역] 나는 'puts' 디버거다",tags:["Ruby","Debugging","Translation"]}},site:{siteMetadata:{siteUrl:"https://emaren84.github.io",disqusShortUrl:"gatsby-blog-1"}}},pathContext:{}}}});
//# sourceMappingURL=path---posts-i-am-a-puts-debuggerer-kor-9ade6257840262dbe9a4.js.map