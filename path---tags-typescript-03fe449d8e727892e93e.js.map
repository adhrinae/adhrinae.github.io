{"version":3,"sources":["webpack:///path---tags-typescript-03fe449d8e727892e93e.js","webpack:///./.cache/json/tags-typescript.json"],"names":["webpackJsonp","499","module","exports","pathContext","postsByTag","excerpt","html","id","frontmatter","date","path","title","tags","category","tagName"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,aAAeC,QAAA,0PAAAC,KAAA,6ozBAAg8mBC,GAAA,wHAAAC,aAAy7OC,KAAA,aAAAC,KAAA,oCAAAC,MAAA,2CAAAC,MAAA,qCAAAC,SAAA,gBAA0LR,QAAA,+JAAAC,KAAA;AAAkgqBC,GAAA,wHAAAC,aAAyuDC,KAAA,aAAAC,KAAA,oCAAAC,MAAA,4BAAAC,MAAA,cAAAC,SAAA,gBAAoJR,QAAA,wGAAAC,KAAA;AAA6xlCC,GAAA,0HAAAC,aAAogPC,KAAA,aAAAC,KAAA,sCAAAC,MAAA,2DAAAC,MAAA,kEAAAC,SAAA,gBAAyOR,QAAA,2MAAAC,KAAA;AAA84kCC,GAAA,6GAAAC,aAAoXC,KAAA,aAAAC,KAAA,yBAAAC,MAAA,iBAAAC,MAAA,4BAAAC,SAAA,eAAyIC,QAAA","file":"path---tags-typescript-03fe449d8e727892e93e.js","sourcesContent":["webpackJsonp([51720743109199],{\n\n/***/ 499:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"postsByTag\":[{\"excerpt\":\"부제: 시행착오를 거쳐 모듈 로딩 순서를 이해하기 Michel Weststrate 의  How to fix nasty circular dependency issues once and for all in JavaScript & TypeScript 를 번역한 글입니다 제가 관리해왔던 많은 프로젝트들은 빠르거나 늦거나 언제나 같은 문제에 부딪혔습니다. 바로 순환 모듈 의존 문제입니다.  (역주: circular module dependency…\",\"html\":\"<p>부제: 시행착오를 거쳐 모듈 로딩 순서를 이해하기</p>\\n<p><strong><a href=\\\"https://twitter.com/mweststrate\\\">Michel Weststrate</a>의 <a href=\\\"https://medium.com/visual-development/how-to-fix-nasty-circular-dependency-issues-once-and-for-all-in-javascript-typescript-a04c987cf0de\\\">How to fix nasty circular dependency issues once and for all in JavaScript &#x26; TypeScript</a>를 번역한 글입니다</strong></p>\\n<hr>\\n<p>제가 관리해왔던 많은 프로젝트들은 빠르거나 늦거나 언제나 같은 문제에 부딪혔습니다. 바로 순환 모듈 의존 문제입니다. <em>(역주: circular module dependency 를 순환 참조로 번역하자니 번역이 조금 이상하게 느껴지는데 일반적으로 많이 사용되고 있는 용어임을 감안하여 앞으로 순환 참조라는 용어를 사용하겠습니다. 피드백 환영합니다.)</em> 순환 참조를 피하는 방법을 설명하는 모범 규약이나 전략들이 많이 있지만, 제대로 지속적이고 예측 가능한 방법으로 문제를 해결하는 방법은 거의 없었습니다. 사람들은 보통 ‘어쩌다 갑자기 작동하기를’ 빌면서 <code class=\\\"language-text\\\">import</code> 문이나 코드 블록을 이리저리 움직여봅니다. 사실 아래의 트윗을 보면 저만 고통받은건 아닌가 봅니다.</p>\\n<blockquote class=\\\"twitter-tweet\\\" data-lang=\\\"en\\\"><p lang=\\\"en\\\" dir=\\\"ltr\\\">&quot;How to fix nasty circular dependency issues for once and for all in javascript / <a href=\\\"https://twitter.com/typescriptlang?ref_src=twsrc%5Etfw\\\">@typescriptlang</a>&quot; is on my to-write list for a long time. Would you be interested in / helped by such a blog post?</p>&mdash; Michel Weststrate (@mweststrate) <a href=\\\"https://twitter.com/mweststrate/status/1018945541424779264?ref_src=twsrc%5Etfw\\\">July 16, 2018</a></blockquote> <script async src=\\\"https://platform.twitter.com/widgets.js\\\" charset=\\\"utf-8\\\"></script> \\n<blockquote class=\\\"twitter-tweet\\\" data-conversation=\\\"none\\\" data-lang=\\\"en\\\"><p lang=\\\"en\\\" dir=\\\"ltr\\\">Yes. Yes. Yes.<br><br>...<br><br>Yes.</p>&mdash; Josh Goldberg 😍 (@JoshuaKGoldberg) <a href=\\\"https://twitter.com/JoshuaKGoldberg/status/1018964066302189568?ref_src=twsrc%5Etfw\\\">July 16, 2018</a></blockquote> <script async src=\\\"https://platform.twitter.com/widgets.js\\\" charset=\\\"utf-8\\\"></script>\\n<p>저는 이 문제를 일관되게 해결하는 방법을 보여드리겠습니다.</p>\\n<h2 id=\\\"예시the-case\\\"><a href=\\\"#%EC%98%88%EC%8B%9Cthe-case\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>예시(The case)</h2>\\n<p>자바스크립트의 모듈 로딩 순서는 결정적(deterministic)입니다. 여전히 거대한 프로젝트에서는 파악하기가 어렵지요. (간접적으로) 순환 참조 문제가 발생하면 여러분의 코드는 반쯤만 불러와진 모듈 때문에 문제가 발생합니다. 이번 예제로 아직 초기화되지 않은 기본 클래스(base class)를 가져오거나 불러온 변수를 읽어들이려 할 때 생기는 문제를 확인하실 수 있습니다.</p>\\n<p>가령 자바스크립트 객체 트리를 YAML 형식으로 바꾸어주는 가상의 애플리케이션이 있다고 해 보겠습니다.</p>\\n<p><img src=\\\"https://cl.ly/30233q260824/fix-circular-dependency-1.png\\\" alt=\\\"예제 - 객체 트리를 문자열로 예쁘게 출력하기\\\"></p>\\n<p>예제 코드는 <a href=\\\"https://codesandbox.io/s/7jp0x7lrjq\\\">codesandbox</a>에서 직접 실험해보실 수 있습니다. 앱의 구현 방식은 직관적입니다. 기본 클래스 <code class=\\\"language-text\\\">AbstractNode</code> 가 있고, 그 클래스에는 기본 구현체와 <code class=\\\"language-text\\\">parent</code> 나 <code class=\\\"language-text\\\">getDepth()</code> 처럼 공통적으로 사용되는 함수를 제공합니다. 그 다음에는 <code class=\\\"language-text\\\">Node</code> 와 <code class=\\\"language-text\\\">Leaf</code> 라는 세부 구현체들이 있습니다. 지금은 잘 동작하지만 세 개의 클래스를 한 파일에서 관리하는 것은 이상적인 방법이 아닙니다. 그러니 개선한 뒤에 어떻게 되나 살펴보겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">AbstractNode</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>parent<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>parent <span class=\\\"token operator\\\">=</span> parent\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">getDepth</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>parent<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>parent<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getDepth</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">0</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token string\\\">'abstract; not implemented'</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">(</span>thing<span class=\\\"token punctuation\\\">,</span> parent<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>thing <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token keyword\\\">typeof</span> thing <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'object'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Node</span><span class=\\\"token punctuation\\\">(</span>parent<span class=\\\"token punctuation\\\">,</span> thing<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Leaf</span><span class=\\\"token punctuation\\\">(</span>parent<span class=\\\"token punctuation\\\">,</span> thing<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Node</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">AbstractNode</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>parent<span class=\\\"token punctuation\\\">,</span> thing<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>parent<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>children <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n    Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>thing<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span>key <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>children<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> AbstractNode<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">(</span>thing<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token string\\\">'\\\\n'</span> <span class=\\\"token operator\\\">+</span>\\n      Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>children<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>\\n          key <span class=\\\"token operator\\\">=></span>\\n            <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">padStart</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getDepth</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>key<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>children<span class=\\\"token punctuation\\\">[</span>\\n              key\\n            <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span>\\n        <span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'\\\\n'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Leaf</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">AbstractNode</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>parent<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>parent<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>value <span class=\\\"token operator\\\">=</span> value\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>value\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"문제\\\"><a href=\\\"#%EB%AC%B8%EC%A0%9C\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>문제</h2>\\n<p>일단 클래스들을 각자의 파일로 분리하면, 똑같이 작동할거라 생각했던 애플리케이션이 확 죽어버립니다. 에러 메세지는 <code class=\\\"language-text\\\">TypeError: Super expression must either be null or a function, not undefined</code> 라고 나옵니다. 너무 모호한 표현이라 문제를 파악할 수 조차 없습니다 ¯_(ツ)_/¯!</p>\\n<p><img src=\\\"https://cl.ly/1r1k010W3W3S/fix-circular-dependency-2.png\\\" alt=\\\"순환 참조로 인해 생긴 예외의 예\\\"></p>\\n<p>아래 코드에서 보시다시피 변경점은 거의 없었습니다. (<a href=\\\"https://codesandbox.io/s/xjyj0ol3mq\\\">여기</a>에 들어가 보시면 깨진 상태의 샌드박스를 보실 수 있습니다)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// -- AbstractNode.js --</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Leaf <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./Leaf'</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Node <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./Node'</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">AbstractNode</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">/* 그대로 */</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// -- Node.js --</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> AbstractNode <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./Node'</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Node</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">AbstractNode</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">/* 그대로 */</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// -- Leaf.js --</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> AbstractNode <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./AbstractNode'</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Leaf</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">AbstractNode</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">/* 그대로 */</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>이정도의 변경만 가해도 애플리케이션은 충분히 고장납니다. <code class=\\\"language-text\\\">Node</code> 와 <code class=\\\"language-text\\\">Leaf</code> 클래스는 <code class=\\\"language-text\\\">AbstractNode.js</code> 파일을 모듈로 불러와서 그 클래스의 <code class=\\\"language-text\\\">from</code> 스태틱 메서드를 사용하고 있습니다.</p>\\n<p>애플리케이션이 동작하지 않는 이유는 <code class=\\\"language-text\\\">AbstractNode</code> 를 <code class=\\\"language-text\\\">Leaf</code> 클래스에서 불러오려고 할 때 아직 정의되지 않았기 때문입니다. 신기하게도 우리는 <code class=\\\"language-text\\\">Leaf</code> 클래스 파일에 <code class=\\\"language-text\\\">import</code> 문을 정확히 써 줬는데도 이런 일이 일어났지요. 실제로 모듈이 로드되는 순서는 이렇습니다.</p>\\n<p><img src=\\\"https://cl.ly/233N0X3A321F/fix-circular-dependency-3.png\\\" alt=\\\"모듈 로딩 순서가 순환 참조를 일으킬 수 있는 경우\\\"></p>\\n<ol>\\n<li><code class=\\\"language-text\\\">index.js</code> 는 <code class=\\\"language-text\\\">AbstractNode.js</code> 파일을 불러옵니다(require).</li>\\n<li>모듈 로더는 <code class=\\\"language-text\\\">AbstractNode.js</code> 파일을 불러오기 시작하고 모듈 코드를 실행합니다. 이 파일에서 처음 맞딱드리는 코드는 <code class=\\\"language-text\\\">Leaf</code> 를 <code class=\\\"language-text\\\">require(import)</code> 하는 구문입니다.</li>\\n<li>그래서 모듈 로더는 <code class=\\\"language-text\\\">Leaf.js</code> 파일을 불러들이기 시작합니다. 그런데 이 파일도 <code class=\\\"language-text\\\">AbstractNode.js</code> 파일을 불러들이는 일부터 시작합니다.</li>\\n<li><code class=\\\"language-text\\\">AbstractNode.js</code> 는 이미 로드되었기 때문에 모듈 캐쉬에서 즉시 리턴해줍니다. 하지만 이 모듈은 <code class=\\\"language-text\\\">Leaf</code> 를 불러오는 첫 번째 줄의 코드가 실행되지 않은 상태이기 때문에 <code class=\\\"language-text\\\">AbstractNode</code> 클래스의 구현부는 실행되지 않았습니다!</li>\\n<li>그래서 <code class=\\\"language-text\\\">Leaf</code> 클래스는 제대로 된 클래스가 아닌 <code class=\\\"language-text\\\">undefined</code> 값을 상속합니다. 그리고 위 그림처럼 예외가 터지겠죠. BAAM!</li>\\n</ol>\\n<h2 id=\\\"해결-시도-1\\\"><a href=\\\"#%ED%95%B4%EA%B2%B0-%EC%8B%9C%EB%8F%84-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>해결 시도 1</h2>\\n<p>이렇게 우리의 순환 참조가 불쾌한 문제를 일으킨다는게 발견되었습니다. 하지만 자세히 들여다보면 원래 어떻게 파일을 불러와야 할 지 결정하는 것은 매우 쉽습니다.</p>\\n<ol>\\n<li><code class=\\\"language-text\\\">AbstractNode</code> 클래스를 먼저 불러온다.</li>\\n<li><code class=\\\"language-text\\\">Node</code> 와 <code class=\\\"language-text\\\">Leaf</code> 클래스를 그 다음에 불러온다.</li>\\n</ol>\\n<p>그러니까 먼저 <code class=\\\"language-text\\\">AbstractNode</code> 클래스를 먼저 불러온 다음 <code class=\\\"language-text\\\">Node</code>, <code class=\\\"language-text\\\">Leaf</code> 클래스를 불러오면 되겠네요. <code class=\\\"language-text\\\">AbstractNode</code> 클래스가 정의될 때 <code class=\\\"language-text\\\">Node</code> 와 <code class=\\\"language-text\\\">Leaf</code> 클래스는 아직 알려질 필요가 없기 때문에 잘 작동할겁니다. <code class=\\\"language-text\\\">AbstractNode.from</code> 가 처음으로 호출 되기 전에 두 클래스가 정의되어 있는 한 문제없이 작동할겁니다. 이렇게 바꿔보죠.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">AbstractNode</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">/* 그대로 */</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Node <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./Node'</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Leaf <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./Leaf'</span></code></pre>\\n      </div>\\n<p>이 방법은 몇 가지 문제가 있습니다.</p>\\n<p>먼저 못생긴데다 확장하기 어렵습니다. 거대한 코드베이스에 이 방법을 적용한다면 어쩌다 작동할때까지 <code class=\\\"language-text\\\">import</code> 문을 이리저리 움직봐야 할 겁니다. 하지만 어디까지나 임시 방편에 불과한게, 조금만 리팩터링을 하거나 <code class=\\\"language-text\\\">import</code> 문의 위치를 바꾸게 되면 미묘하게 모듈 로딩 순서가 바뀌어 또 문제가 일어나게 됩니다.</p>\\n<p>두 번째로 이 방법은 모듈 번들러에 크게 의존하는 방법입니다. 예를 들어 codesandbox 에서 Parcel 로 앱을 번들링할 때(아니면 Webpack 이나 Rollup), 제대로 <a href=\\\"https://codesandbox.io/s/7oxxrqwoq6\\\">작동하지 않습니다</a>. 하지만 로컬 Node.js 환경에서 commonJS 모듈 방식으로 실행하면 잘 동작합니다.</p>\\n<h2 id=\\\"문제를-피하기\\\"><a href=\\\"#%EB%AC%B8%EC%A0%9C%EB%A5%BC-%ED%94%BC%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>문제를 피하기</h2>\\n<p>보아하니 이 문제는 쉽게 해결할 수 없어 보입니다. 문제가 발생하지 않도록 할 순 없을까요? 물론 가능합니다. 몇 가지 방법이 있는데, 먼저 모든 코드를 한 파일에 두는 방법이 있습니다. 예시를 소개할 때 처음 파일처럼요. 모듈 초기화 코드가 실행되는 순서를 완전히 제어할 수 있기 때문에 문제가 해결됩니다.</p>\\n<p>두 번째로, 어떤 사람들은 \\\"클래스를 사용해서는 안된다” 또는 \\\"상속을 사용하지 말라\\\" 같은 주장을 펼치기 위해 위와 같은 문제를 예시로 사용합니다. 그러나 이런 논의는 문제를 너무 단순하게 바라보는 겁니다. 저도 프로그래머가 상속에 너무 빨리 손을 대는 경향이 있다는데 동의하지만, 어떤 문제의 경우 상속을 통해 코드 구조, 재사용 또는 성능면에서 큰 이득을 얻을 수 있습니다. 하지만 가장 중요한 것은 이 문제가 클래스 상속에만 국한되지 않는다는 것입니다. 모듈 초기화 중에 실행되는 모듈 변수와 함수 사이에 순환 참조가 생기는 등 똑같은 문제가 발생할 수 있습니다!</p>\\n<p><code class=\\\"language-text\\\">AbstractNode</code> 를 쪼개서 <code class=\\\"language-text\\\">Node</code> 와 <code class=\\\"language-text\\\">Leaf</code> 를 의존하지 않도록 만들 수도 있습니다. 이 <a href=\\\"https://codesandbox.io/s/6z2rkvj8v3\\\">샌드박스</a>에서 <code class=\\\"language-text\\\">from</code> 메서드는 <code class=\\\"language-text\\\">AbstractNode</code> 클래스로부터 떨어져 별도의 파일로 분리되었습니다. 문제는 해결되었지만 우리의 프로젝트와 API 구조는 달라졌습니다. 거대한 프로젝트에서는 이 방법을 사용하기 매우 어렵거나 불가능할 수도 있습니다! 예를 들어 추가 구현을 하면서 <code class=\\\"language-text\\\">Node#print</code> 메서드가 <code class=\\\"language-text\\\">Node</code> 나 <code class=\\\"language-text\\\">Leaf</code> 에 의존하는 경우가 생길 수도 있겠죠...</p>\\n<p><em>보너스:</em> <a href=\\\"https://github.com/mobxjs/mobx/commit/f75812355d1529f237f7116ad56a199ae5a90252\\\">제가 이런 이상한 방법도 사용해봤습니다.</a> 함수에서 기본 클래스를 리턴하고, 함수 호이스팅을 활용하여 원하는 순서대로 호출될 수 있도록 만듭니다. 이걸 어떻게 적절하게 설명해야 할지도 모르겠네요.</p>\\n<h2 id=\\\"내부-모듈-패턴internal-module-pattern으로-해결하기\\\"><a href=\\\"#%EB%82%B4%EB%B6%80-%EB%AA%A8%EB%93%88-%ED%8C%A8%ED%84%B4internal-module-pattern%EC%9C%BC%EB%A1%9C-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>내부 모듈 패턴(Internal module pattern)으로 해결하기</h2>\\n<p>저는 많은 프로젝트에 걸쳐 순환 참조 문제를 여러 번 겪었습니다. 제가 일하고 있는 <a href=\\\"https://medium.com/@Mendix\\\">Mendix</a>나, MobX, MobX-state-tree 를 비롯하여 일부 개인 프로젝트까지 포함해서요. 심지어 저는 몇년 전에 <a href=\\\"https://github.com/mobxjs/mobx/blob/247c443fcf5210dabf4c850a6312e48c5f1d5d3b/scripts/single-file-build.sh#L17-L29\\\">스크립트를</a> 짜서 모든 소스 파일을 이어붙인 다음 <code class=\\\"language-text\\\">import</code> 문을 없애버리는 방법도 써 봤습니다. 모듈 로딩 순서를 잡기 위한 흙수저판(poor man’s) 모듈 번들러였죠.</p>\\n<p>하지만 문제를 몇 번 해결하고 나서 하나의 패턴을 발견했습니다. 프로젝트를 재구성하거나 이상한 트릭을 쓰지 않고도 모듈 로딩 순서를 전부 컨트롤할 수 있는 방법이죠! 이 패턴은 제가 확인해본 어느 환경에서나 잘 동작했습니다. (Rollup, Webpack, Parcel, Node)</p>\\n<p>이 패턴의 핵심은 <code class=\\\"language-text\\\">index.js</code> 와 <code class=\\\"language-text\\\">internal.js</code> 파일입니다. 주요 규칙은 이렇습니다.</p>\\n<ol>\\n<li><code class=\\\"language-text\\\">internal.js</code> 모듈은 프로젝트 전체의 로컬 모듈을 불러모은 다음 전부 내보내는 역할을 합니다.</li>\\n<li>다른 모듈들은 모두 반드시 <code class=\\\"language-text\\\">internal.js</code> 파일만 불러와서 사용합니다. 다른 모듈을 직접적으로 불러오지 않도록 합니다.</li>\\n<li><code class=\\\"language-text\\\">index.js</code> 파일은 주요 시작점이 됩니다. <code class=\\\"language-text\\\">internal.js</code> 파일에서 내보낸 모든 모듈을 불러온 다음, 외부로 노출하고자 하는 것만 내보냅니다. 이 과정은 다른 사람들이 사용할 라이브러리를 배포할 때만 유효한 방법입니다. 따라서 이번 예제에서는 만들지 않고 넘어가겠습니다.</li>\\n</ol>\\n<p>위의 규칙은 로컬 모듈에만 적용되어야 합니다. 외부 모듈 <code class=\\\"language-text\\\">import</code> 는 순환 참조 문제와 전혀 연관이 없기 때문에 그대로 두시면 됩니다. 우리의 데모 애플리케이션에 적용을 해보면 이렇게 바뀔겁니다.</p>\\n<hr>\\n<p>이 패턴을 처음 적용하면 굉장히 어색하게 느껴지실겁니다. 하지만 익숙해지기만 하면 몇 가지 큰 이득을 얻을 수 있습니다!</p>\\n<ol>\\n<li>당연하지만 우리가 머리를 싸매던 문제가 해결되었습니다! <a href=\\\"https://codesandbox.io/s/oqro83jpk6\\\">여기</a>에 보이는 대로 우리의 앱은 아주 잘 돌아갑니다.</li>\\n<li>문제가 해결된 이유는 <em>이제 우리가 모듈 로딩 순서를 완전히 통제할 수 있기 때문입니다</em>. <code class=\\\"language-text\\\">internal.js</code> 가 파일을 불러오는 것은 순서에 관계 없이 우리의 모듈 로딩 구조 안에 포함됩니다. (아래쪽의 그림을 참고하시거나 위에 말씀드린 모듈 로딩 순서에 대한 내용을 다시 살펴봐주세요)</li>\\n<li>더 이상 <code class=\\\"language-text\\\">require(import)</code> 문을 파일의 바닥으로 옮기는 등 우리가 원치 않는 형태의 리팩터링이나 못생긴 트릭을 쓸 필요가 없습니다. 코드베이스의 설계나 API 를 고민할 때 타협할 필요도 없습니다.</li>\\n<li><em>보너스</em> : 더 적은 파일을 불러올수록 <code class=\\\"language-text\\\">import</code> 구문도 훨씬 적어집니다. 예를 들어 지금 <code class=\\\"language-text\\\">AbstractNode.js</code> 는 오로지 하나의 <code class=\\\"language-text\\\">import</code> 문만 가지고 있습니다. 그 전에는 두개였지만요.</li>\\n<li><em>보너스</em>: <code class=\\\"language-text\\\">index.js</code> 를 통해 우리는 <a href=\\\"https://en.wikipedia.org/wiki/Single_source_of_truth\\\">유일한 중앙 자료(Single source of truth)</a>를 확보했습니다. 그리고 이를 이용해 외부로 내보내고자 하는 모듈을 조절할 수 있습니다.</li>\\n</ol>\\n<p><img src=\\\"https://cl.ly/0E0A3B44270E/fix-circular-dependency-4.png\\\" alt=\\\"internal module pattern을 도입하고 나서 모듈 로딩 순서\\\"></p>\\n<h2 id=\\\"결론\\\"><a href=\\\"#%EA%B2%B0%EB%A1%A0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>결론</h2>\\n<p>지금까지 제가 최근에 순환 참조 문제를 해결하는 방법을 보셨습니다. 기존에 있는 프로젝트에 적용하시려면 <code class=\\\"language-text\\\">import</code> 문을 고치기 위한 작업이 좀 필요하실 겁니다. 하지만 이 단순하고 직관적인 방법을 적용하고 난 뒤에, 여러분들은 모듈 로딩 순서를 완전히 통제하고 앞으로도 발생할 수 있는 어떠한 순환 참조 문제도 해결할 수 있습니다. 위의 방법을 적용하기 위한 리팩터링 예시를 몇 개 보여드리자면</p>\\n<ul>\\n<li><a href=\\\"https://github.com/mobxjs/mobx/commit/e7f32aa0c2f6295b84270587285ab793b52d8643\\\">MobX</a> (큰 변경점이었으나 직관적이라 별 문제가 안됨)</li>\\n<li><a href=\\\"https://github.com/mobxjs/mobx-state-tree/commit/5ae34850f026cab88da826ee97d4e0a623f25108\\\">MobX-state-tree</a> (파일 마지막의 <code class=\\\"language-text\\\">import</code> 문이 어떻게 제거되었는지 봐 주세요)</li>\\n<li>작은 <a href=\\\"https://github.com/mweststrate/remmi/commit/ea3db28dde500e6a61aae330b7abfcbcd5740efb\\\">개인 프로젝트</a></li>\\n</ul>\\n<p>아직까진 이 패턴을 라이브러리에만 적용해봤고 더 큰 프로젝트에 적용해보진 않았습니다. 하지만 거대한 프로젝트에는 순환 참조 문제가 발생하는 특정 하위 폴더에 패턴을 적용하여 별도의 라이브러리마냥 다룰 수 있을겁니다.</p>\\n<p>이 패턴이 잘 적용된다면 저한테도 알려주세요! 그리고 패턴을 좀 더 쉽게 도입하도록 도와주는 도구가 있다면 소개해주세요(힌트라도 좋습니다) :-)</p>\",\"id\":\"/home/circleci/repo/src/pages/posts/2018-07-21-fix-circular-dependency-kr/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-07-21\",\"path\":\"/posts/fix-circular-dependency-kr\",\"title\":\"[번역] 자바스크립트 & 타입스크립트의 순환 참조를 한방에 해결하는 방법\",\"tags\":[\"Typescript\",\"Javascript\",\"Node.js\"],\"category\":\"Typescript\"}},{\"excerpt\":\"타입스크립트를 사용한지 어느덧 6개월정도 지났습니다. 아직 타입을 잘 활용하고 있다는 생각이 들진 않지만, 리액트 + 타입스크립트로 작업하는데 별다른 어려움 없이 작업에는 더 도움이 되고 있다고 생각합니다. 지난 프로젝트에서도 React + Typescript + Next.js…\",\"html\":\"<p>타입스크립트를 사용한지 어느덧 6개월정도 지났습니다. 아직 타입을 잘 활용하고 있다는 생각이 들진 않지만, 리액트 + 타입스크립트로 작업하는데 별다른 어려움 없이 작업에는 더 도움이 되고 있다고 생각합니다. 지난 프로젝트에서도 React + Typescript + Next.js 를 활용하여 만들었는데 몇 가지 설정 면에서 애먹었던 경우를 제외하면 굉장히 만족스러운 작업을 할 수 있었습니다.</p>\\n<p>일을 할 때 다른 팀원들이 불편하게 느낄 수도 있으면서도 중요한 점이 있었는데, 우리가 서버에서 가져오는 데이터의 타입 정의를 최대한 명확하게 하는 것이었습니다. 문제는 한번 서버에 데이터를 요청하면 내려오는 데이터의 양이 어마어마해서 심한 경우 한번에 JSON 1300줄 이상이 내려온 적도 있었습니다. 여기서 우리가 필요한 정보를 추려내는 작업을 하고, 그 결과값에 대한 타입 정의를 해야 정제된 데이터를 쓰는 컴포넌트들에 정확히 어떤 데이터를 심어주어야 할 지 알 수 있겠지요.</p>\\n<p>다행히 백엔드 서버도 타입스크립트 기반으로 되어있어서, 보내주는 데이터에 대한 인터페이스 정의가 되어있었습니다. 우리는 그 인터페이스를 사용하기 위해 npm 패키지를 설치하고 불러올 수 있어서, 데이터 정제 시 기본이 되는 타입을 일일이 손으로 정제할 필요는 없게 되었습니다. 만약 필요하시다면 <a href=\\\"https://quicktype.io\\\">이런 도구</a>를 한번 살펴보시기 바랍니다.</p>\\n<p>하지만 여기서부터 문제가 시작됩니다. 우리가 정의할 타입은 기존에 주어진 타입에서 일부를 <strong>뽑아내고, 덮어써서 만들어야 할 때가 있습니다</strong>. <code class=\\\"language-text\\\">Pick</code> 이라는 타입이 아주 유용하게 사용되기도 하지만 그것만으론 부족해서 실무에 조금 더 유용하게 활용할 수 있는 서브 타입(헬퍼 타입?)을 만들고 활용했습니다. 이번 글에서 그 일부를 안내해드리고, 괜찮으시다면 사용해보시고 댓글로 여러분들이 사용하는 헬퍼 타입을 공유해주시는 것도 좋겠습니다.</p>\\n<p><strong>본문의 헬퍼 타입은 타입스크립트 2.8 이상에서 사용하셔야 합니다. conditional types는 2.8 이상에서만 동작합니다. (최신버전인 2.9.2 권장)</strong></p>\\n<hr>\\n<h2 id=\\\"diff-omit-타입\\\"><a href=\\\"#diff-omit-%ED%83%80%EC%9E%85\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Diff, Omit 타입</h2>\\n<p>가장 간단한 것 부터 시작해보겠습니다. 2.8 버전에서 conditional types(조건부 타입 정의) 덕분에 위 두 타입을 정의하기 아주 쉬워졌습니다. <a href=\\\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html\\\">공식 문서에 따르면</a> 조건부 타입은 이렇게 동작합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">T extends U ? X : Y</code></pre>\\n      </div>\\n<p>삼항연산자랑 같다고 생각하시면 됩니다. 일단 앞의 조건이 맞다면 <code class=\\\"language-text\\\">X</code> 가 정의되는 타입이고, 그렇지 않다면 <code class=\\\"language-text\\\">Y</code> 가 정의되는 타입입니다.</p>\\n<p>이를 활용하여 두 타입 혹은 객체 사이에서 다른 것을 추릴 때 가장 기본이 되는 <code class=\\\"language-text\\\">Diff</code> 타입을 만들어보겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">type</span> Diff<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">U</span><span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">T</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">U</span> <span class=\\\"token operator\\\">?</span> never <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token constant\\\">T</span>\\n\\n<span class=\\\"token comment\\\">// Example</span>\\n<span class=\\\"token keyword\\\">type</span> DiffExample <span class=\\\"token operator\\\">=</span> Diff<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token string\\\">'a'</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'b'</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'c'</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'d'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'a'</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'c'</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'f'</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// 'b' | 'd'</span></code></pre>\\n      </div>\\n<p>위 예제를 보면 바로 이해하실 수 있으리라 생각합니다. 기준이 되는 앞의 타입과 뒤에 정의한 타입 사이에 겹치지 않는 결과물만 정의되었습니다. 아직은 이 <code class=\\\"language-text\\\">Diff</code> 타입만 가지고는 인터페이스를 마음대로 주무를 수 없습니다. 가장 먼저 특정 인터페이스에서 원하지 않는 속성을 제외하는 <code class=\\\"language-text\\\">Omit</code> 타입을 만들어보겠습니다. 그 반대인 <code class=\\\"language-text\\\">Pick</code> 타입은 이미 있으니까요.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">type</span> Omit<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">U</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">keyof</span> <span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span> Pick<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">,</span> Exclude<span class=\\\"token operator\\\">&lt;</span>keyof <span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">U</span><span class=\\\"token operator\\\">>></span>\\n\\n<span class=\\\"token comment\\\">// Example</span>\\n<span class=\\\"token keyword\\\">type</span> OmitExample <span class=\\\"token operator\\\">=</span> Omit<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'string'</span><span class=\\\"token punctuation\\\">,</span>\\n  b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">,</span>\\n  c<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'symbol'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'b'</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'c'</span><span class=\\\"token operator\\\">></span> <span class=\\\"token comment\\\">// { a: 'string' }</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">Exclude</code> 타입도 2.8버전에서 새로 등장한 선탑재(Predefined) 타입입니다. 위에 링크한 공식 문서를 한번 살펴보시면 이해하시는데 많은 도움이 됩니다.</p>\\n<h2 id=\\\"dig-타입\\\"><a href=\\\"#dig-%ED%83%80%EC%9E%85\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Dig 타입</h2>\\n<p><code class=\\\"language-text\\\">Pick</code>  타입은 특정 인터페이스의 원하는 키만 뽑아와서 새 타입을 만들 때 굉장히 유용하지만, 만약에 중첩된 객체 형식으로 있을 때 그 내부를 뽑아 쓰기 힘들 때가 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">const</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    first<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'1'</span><span class=\\\"token punctuation\\\">,</span>\\n    second<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'2'</span><span class=\\\"token punctuation\\\">,</span>\\n    thrid<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'3'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">,</span>\\n  c<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    fourth<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'4'</span><span class=\\\"token punctuation\\\">,</span>\\n    fifth<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'5'</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">type</span> InsideA <span class=\\\"token operator\\\">=</span> Pick<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">typeof</span> obj<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'a'</span><span class=\\\"token operator\\\">></span>\\n<span class=\\\"token comment\\\">/* 결과\\n * a: {\\n *  first: string;\\n *  second: string;\\n *  thrid: string;\\n * };\\n*/</span>\\n\\n<span class=\\\"token comment\\\">/**\\n  * 하지만 내가 원하는건..\\n  * {\\n  *   first: string;\\n  *   second: string;\\n  *   thrid: string;\\n  * }\\n  */</span></code></pre>\\n      </div>\\n<p>지극히 정상적인 동작입니다만, 제가 원하는 결과물은 달랐습니다. 저 위에 <code class=\\\"language-text\\\">a</code> 라는 객체 정의는 필요가 없거든요. 타입스크립트의 타입 정의는 대부분 ‘자바스크립트 객체의 키-값을 어떻게 정의하고 넣어주냐’로 이해하시면 쉽습니다. 그래서 타입을 정의할 때 객체의 값을 뽑아올 때 쓰는 <code class=\\\"language-text\\\">obj[‘key’]</code> 같은 방식의 정의가 잘 작동합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token comment\\\">// 위의 obj에 이어서</span>\\n<span class=\\\"token keyword\\\">type</span> InsideA <span class=\\\"token operator\\\">=</span> Pick<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">typeof</span> obj<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'a'</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token comment\\\">/**\\n  * 결과\\n  * {\\n  *   first: string;\\n  *   second: string;\\n  *   thrid: string;\\n  * }\\n  */</span></code></pre>\\n      </div>\\n<p>이제 원하는 결과가 제대로 나왔습니다. 하지만 저렇게 일일이 <code class=\\\"language-text\\\">[&#39;a&#39;]</code>  라고 붙이는것도 번거롭고 예쁘지가 않으니 하나의 헬퍼 타입으로 정의해보겠습니다. 저는 중첩된 객체를 파낸다는 데 착안해서 Dig라고 정의합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">type</span> Dig<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">U</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">keyof</span> <span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span> Pick<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">U</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token constant\\\">U</span><span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<p>동작 특성상 중첩 객체 탐색용으로 쓰시는걸 권장합니다. 대부분의 경우는 <code class=\\\"language-text\\\">Pick</code> 타입만으로도 충분합니다.</p>\\n<p>(2018/07/11 추가) Facebook에서 장준영님이 지적해 주신 내용인데, <code class=\\\"language-text\\\">Dig</code> 를 굳이 타입으로 정의해서 쓸 필요 없이 제가 원하는 결과를 얻으려면 바로 <code class=\\\"language-text\\\">T[U]</code> 로 타입의 내부를 탐색하면 됩니다. 제가 <code class=\\\"language-text\\\">Pick</code> 을 반드시 활용해야한다는 착각을 하다보니 이렇게 정의하게 되었습니다. 다만 <code class=\\\"language-text\\\">Dig</code> 자체는 다른 용도로 사용할 수 있습니다 :) 지적해주신 장준영님 감사합니다.</p>\\n<h2 id=\\\"overwrite-타입\\\"><a href=\\\"#overwrite-%ED%83%80%EC%9E%85\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Overwrite 타입</h2>\\n<p>주어진 인터페이스를 활용하면서 특정 속성만 새로운 타입으로 덮어씌우고 싶을 땐 어떻게 할까요? <code class=\\\"language-text\\\">extends</code>, <code class=\\\"language-text\\\">&amp;</code> 기호는 제대로 동작하지 않습니다. 인터페이스의 <code class=\\\"language-text\\\">extends</code> 는 애초에 에러가 나며, <code class=\\\"language-text\\\">&amp;</code> 는 예상하지 못한 결과가 나옵니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">type</span> <span class=\\\"token constant\\\">A</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n  b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token constant\\\">B</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">A</span> <span class=\\\"token operator\\\">&amp;</span> <span class=\\\"token punctuation\\\">{</span> b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span> <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> b1<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token constant\\\">B</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'string'</span><span class=\\\"token punctuation\\\">,</span>\\n  b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'string'</span> <span class=\\\"token comment\\\">// Error</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> b2<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token constant\\\">B</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'string'</span><span class=\\\"token punctuation\\\">,</span>\\n  b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">100</span> <span class=\\\"token comment\\\">// Error</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>위의 예시는 <code class=\\\"language-text\\\">b</code> 속성을 <code class=\\\"language-text\\\">&amp;</code> 연산자로 덮어씌워버렸다고 생각했으나 두 조건 모두 충족되지 않는 결과물이 나와버렸습니다. <code class=\\\"language-text\\\">&amp;</code> 연산자를 쓰실 때는 새로운 속성을 덧붙일때만 쓰셔야 한다는 점을 명심하시기 바랍니다.</p>\\n<p>그렇다면 속성을 덮어씌우기 위해 먼저 정의된 타입의 key를 빼 버리고, 우리가 새로 덮어쓸 정의와 합쳐주면 되겠군요. 이 때 앞서 정의한 <code class=\\\"language-text\\\">Diff</code> 타입을 활용하게 됩니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">type</span> Overwrite<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">U</span><span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token constant\\\">P</span> <span class=\\\"token keyword\\\">in</span> Diff<span class=\\\"token operator\\\">&lt;</span>keyof <span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">,</span> keyof <span class=\\\"token constant\\\">U</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token constant\\\">P</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">&amp;</span> <span class=\\\"token constant\\\">U</span>\\n\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token constant\\\">B</span> <span class=\\\"token operator\\\">=</span> Overwrite<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n\\n<span class=\\\"token keyword\\\">const</span> b1<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token constant\\\">B</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'string'</span><span class=\\\"token punctuation\\\">,</span>\\n  b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">100</span> <span class=\\\"token comment\\\">// No Error</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"subtype-타입\\\"><a href=\\\"#subtype-%ED%83%80%EC%9E%85\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>SubType 타입</h2>\\n<p>지금까지 만든 헬퍼 타입은 모두 속성값(혹은 키값)이 중심이 되는 타입 정의였습니다. 이번에는 반대로 <strong>특정 타입을 입력하면 그에 맞는 속성-타입 쌍을 추리는</strong> 헬퍼 타입을 만들어보겠습니다. 만약 아래의 <code class=\\\"language-text\\\">Person</code> 인터페이스에서 <code class=\\\"language-text\\\">string</code> 타입을 가지고 있는 속성만 추릴 땐 어떻게 해야할까요?</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">Person</span> <span class=\\\"token punctuation\\\">{</span>\\n  id<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">;</span>\\n  firstName<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n  lastName<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">load</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> Promise<span class=\\\"token operator\\\">&lt;</span>Person<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// SubType&lt;Person, string>을 써서 원하는 결과</span>\\n<span class=\\\"token keyword\\\">type</span> PersonName <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  firstName<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n  lastName<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>조금 복잡하겠지만 이렇게 됩니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">type</span> SubType<span class=\\\"token operator\\\">&lt;</span>BaseType<span class=\\\"token punctuation\\\">,</span> ConditionType<span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span> Pick<span class=\\\"token operator\\\">&lt;</span>BaseType<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token punctuation\\\">[</span>Key <span class=\\\"token keyword\\\">in</span> keyof BaseType<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> BaseType<span class=\\\"token punctuation\\\">[</span>Key<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">ConditionType</span> <span class=\\\"token operator\\\">?</span> Key <span class=\\\"token punctuation\\\">:</span> never\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">[</span>keyof BaseType<span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">></span></code></pre>\\n      </div>\\n<p>이런 타입은 함수 시그니처도 인식합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">type</span> PersonLoader <span class=\\\"token operator\\\">=</span> SubType<span class=\\\"token operator\\\">&lt;</span>Person<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>_<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">any</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token builtin\\\">any</span><span class=\\\"token operator\\\">></span>\\n<span class=\\\"token comment\\\">/** 결과\\n * {\\n *   load: () => Promise&lt;Person>;\\n * }\\n */</span></code></pre>\\n      </div>\\n<p>만들어지는 과정은 <a href=\\\"https://medium.com/dailyjs/typescript-create-a-condition-based-subset-types-9d902cea5b8c\\\">이 글</a>을 참고해주시기 바랍니다. 조건부 타입 정의에 많은 도움이 됩니다. 이 타입은 <code class=\\\"language-text\\\">null</code> 타입에 대응이 안된다는 문제가 있지만 링크된 글의 댓글을 참고하면 어느정도 유효한 답을 얻을 수 있습니다. 그 답은 각자 필요에 따라 조사해보시기 바랍니다.</p>\\n<hr>\\n<p>본문에 비해 서론이 길긴 했지만 이런 헬퍼 타입들은 필요한 경우가 극히 드물 수 있습니다. 하지만 프로젝트 규모가 커지거나 복잡해질 수록 굉장히 유용하게 사용될 수 있으므로 한번 훑어보시고 기존에 정의해둔 타입에서 중복되는 부분을 줄일 수 있는지 확인해보셔도 좋습니다.</p>\\n<h2 id=\\\"참고자료\\\"><a href=\\\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>참고자료</h2>\\n<ul>\\n<li><a href=\\\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html\\\">TypeScript 2.8 · TypeScript</a></li>\\n<li><a href=\\\"https://levelup.gitconnected.com/advanced-typescript-types-with-examples-1d144e4eda9e\\\">Advanced TypeScript Types with Examples – gitconnected - The Developer Learning Community</a></li>\\n<li><a href=\\\"https://medium.com/dailyjs/typescript-create-a-condition-based-subset-types-9d902cea5b8c\\\">TypeScript: Create a condition-based subset types – DailyJS – Medium</a></li>\\n</ul>\",\"id\":\"/home/circleci/repo/src/pages/posts/2018-07-08-helper-types-in-typescript/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-07-08\",\"path\":\"/posts/helper-types-in-typescript\",\"title\":\"타입스크립트에서 헬퍼 타입을 정의하고 활용하기\",\"tags\":[\"Typescript\"],\"category\":\"Typescript\"}},{\"excerpt\":\"이 포스트는  Nicholas Kariniemi 의  Fear, trust and JavaScript: When types and functional programming fail…\",\"html\":\"<ul>\\n<li>이 포스트는 <a href=\\\"https://twitter.com/nkariniemi\\\">Nicholas Kariniemi</a>의 <a href=\\\"https://www.reaktor.com/blog/fear-trust-and-javascript/\\\">Fear, trust and JavaScript: When types and functional programming fail</a>를 번역한 글입니다</li>\\n<li>번역에 관한 피드백과 내용에 관한 토론은 환영합니다. 댓글로 남겨주세요 :)</li>\\n</ul>\\n<hr>\\n<p><img src=\\\"https://www.reaktor.com/wp-content/uploads/2018/02/reaktor-javascript-reaktor-hero-2800x0-c-default.png\\\"></p>\\n<p>개발자로서 우리는 코드 실패에 대한 두려움을 줄이고 코드가 잘 작동한다는 믿음을 더 높이고 싶을 겁니다. 자바스크립트를 사용하는 많은 개발자는 함수형 프로그래밍 및 강타입(Strongly-typed) 언어에서 유용한 아이디어를 빌려 개발자의 도구와 코드로 신뢰를 얻으면서 두려움을 줄입니다. 선택적 타입과, 함수를 통한 변환 및 불변성과 같은 아이디어는 모두 더 나은 자바스크립트 코드 작성에 도움이 될 수 있습니다. 그러나 이러한 아이디어를 자바스크립트로 가져올 때 상충하는 개념 때문에 제대로 맞물려 작동하지 않으며, 궁극적으로 ‘개발자가 코드와 도구로 (코드가 잘 작동한다는) 믿음을 표현한다’는 목표를 달성하지 못합니다.</p>\\n<p>이 아이디어를 설명하기 위해 자바스크립트에서 데이터를 처리하는 방법을 두 가지 관점에서 살펴보겠습니다. 하나는 데이터의 모양을 이해하는 것이고, 나머지 하나는 데이터를 변경하는 것입니다.</p>\\n<h2 id=\\\"데이터의-형태와-두려움\\\"><a href=\\\"#%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98-%ED%98%95%ED%83%9C%EC%99%80-%EB%91%90%EB%A0%A4%EC%9B%80\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>데이터의 형태와 두려움</h2>\\n<p>자바스크립트같은 동적 언어에서는 데이터가 어떤 모양을 가지고 있는지 알기 어렵습니다. 기본적인 접근 방식은 규약(convention)에 의지하는 겁니다. 다른 개발자나 다른 시스템이 서로 동의한 형식으로 올바른 데이터를 제공하고 코드 내의 특정 규범을 따른다고 믿어야 합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">fetchUser</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>user <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// user를 가져오는데 성공!</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// 그 이후</span>\\n<span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// user는 name이 있을 거야</span></code></pre>\\n      </div>\\n<p>저는 이 방식을 “내가 원하는 것인 척” 하는 접근 방식이라고 말하고 싶습니다. 상호 신뢰가 높은 환경에서는 이 방법이 충분히 유효합니다.</p>\\n<p>하지만 실제로는 여기저기 두려움이 가득 차 있습니다. 코드가 복잡해지면서 여러분은 서로 다른 규칙을 따르는 개발자의 코드와 씨름합니다. 잘못된 형식으로 날아오지만 현재 계층에서는 손댈 수 없는 데이터를 수신하며, 널 포인터(null pointer) 오류가 발생하기 시작합니다. 코드에 대한 신뢰가 깨지고 데이터에 대한 의문을 가질 때 자신감보다는 불안감이 일어나기 시작합니다.</p>\\n<ul>\\n<li>이 데이터가 정말 가지고 있는 값이 뭐지?</li>\\n<li>이 값을 지우면 어디 다른데서 터지지 않을까?</li>\\n<li>이 데이터를 저 함수에다 넘겨도 될까?</li>\\n</ul>\\n<p>위의 두려움을 이런 방식의 코드 베이스에서 발견할 수 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">fetchUser</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>user <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// user를 가져오는데 성공!</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>user <span class=\\\"token operator\\\">||</span> <span class=\\\"token operator\\\">!</span>user<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'뭐 임마'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// 그 이후</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>user <span class=\\\"token operator\\\">&amp;&amp;</span> user<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>'자기 자신의 코드가 더 이상 기대되는 데이터를 적절하게 전달해주지 못한다’며 믿음을 잃을 때 이렇게 방어적인 프로그래밍을 하게 됩니다. 여러분의 아름다운 코드는 방어적인 체크 때문에 어수선해지고, 가독성을 잃으며, 유지보수하기 어려워집니다. 두려움이 커지면서 점점 코드가 제대로 동작하는지 믿기 어려워집니다.</p>\\n<h3 id=\\\"선택적-타입optional-types으로-빡세게-확인하는-척하기\\\"><a href=\\\"#%EC%84%A0%ED%83%9D%EC%A0%81-%ED%83%80%EC%9E%85optional-types%EC%9C%BC%EB%A1%9C-%EB%B9%A1%EC%84%B8%EA%B2%8C-%ED%99%95%EC%9D%B8%ED%95%98%EB%8A%94-%EC%B2%99%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>선택적 타입(Optional types)으로 빡세게 확인하는 척하기</h3>\\n<p>두려움을 사전에 차단하는 방법 중 하나는 <a href=\\\"https://www.typescriptlang.org\\\">Typescript</a>나 <a href=\\\"https://flow.org\\\">Flow</a>의 선택적 타입을 도입하는 겁니다. 사용자를 수신할 때 <code class=\\\"language-text\\\">User</code> 타입을 사전에 선언해두고, 이후에 <code class=\\\"language-text\\\">User</code> 객체로 다루는 방식입니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ts\\\"><code class=\\\"language-ts\\\"><span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">User</span> <span class=\\\"token punctuation\\\">{</span>\\n  id<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span>\\n  name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span>\\n  email<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">fetchUser</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">:</span> User<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// User를 가져오는데 성공!</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// 그 이후</span>\\n<span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 컴파일러가 이 객체는 name 속성이 있다고 보증함</span></code></pre>\\n      </div>\\n<p>이는 정말 ‘빡세게 확인하는 척’ 하는 겁니다. 당신은 코드에 대한 신뢰를 확인하는 부분을 바꿔 놓았습니다. 여전히 다른 시스템이 올바른 모양의 데이터를 제공한다고 믿지만, 코드 안에서 데이터에 부여한 타입을 믿고 해당 데이터를 잘못 사용하면 컴파일러에서 오류가 나게 됩니다. 개발자가 데이터의 모양을 알고 적절하게 사용하는 것을 믿는 대신 개발자가 올바른 타입을 작성하고 관리하리라 믿고, ‘컴파일러가 해당 형식에 대해 거짓말을 하지 않는다’고 믿게 되었습니다. 이 이야기는 나중에 더 하겠습니다.</p>\\n<p>위의 예제에 타입을 추가해도 근본적인 문제는 해결되지 않습니다. 데이터가 일관성있게 사용되도록 보장함으로써 코드의 신뢰도는 향상되었지만 외부로부터 받은 데이터에 대해서는 아무런 말을 하지 않습니다.</p>\\n<h3 id=\\\"유효성-검사-믿지만-검사는-해볼게\\\"><a href=\\\"#%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC-%EB%AF%BF%EC%A7%80%EB%A7%8C-%EA%B2%80%EC%82%AC%EB%8A%94-%ED%95%B4%EB%B3%BC%EA%B2%8C\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>유효성 검사: 믿지만 검사는 해볼게</h3>\\n<p>신뢰도가 낮은 환경에서는 여러 지점에서 데이터의 유효성 검사를 해야 할 수도 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">fetchUser</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>user <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> validationErrors <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">validate</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>validationErrors<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'뭐 임마'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// user를 가져오는데 성공!</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// 그 이후</span>\\n<span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// user는 이름이 있다</span></code></pre>\\n      </div>\\n<p>유효성 검사를 직접 작성할 수도 있지만 임시 방편에다 다루기도 어렵고 오류가 나기도 쉽습니다. 아니면 <a href=\\\"http://json-schema.org\\\">JSON schema</a> 정의를 작성해서 데이터가 스키마에 맞는지 확인하거나, <a href=\\\"https://github.com/epoberezkin/ajv\\\">ajv</a>같은 도구로 유효성 검사를 할 수도 있습니다. 이렇게 하면 임시 방편처럼 보이지도 않고 문서화 등을 할 때 유용하게 쓸 수 있겠지만, 여전히 여러분이 이렇게 직접 스키마를 작성해야 하기 때문에 오류가 날 가능성이 있으며 번거로운 작업이 될 수 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"title\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"User\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"type\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"object\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"properties\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">\\\"id\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token property\\\">\\\"type\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"integer\\\"</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"name\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token property\\\">\\\"type\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"string\\\"</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"age\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token property\\\">\\\"type\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"integer\\\"</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"required\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"id\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h3 id=\\\"선택적-타입--유효성-검사\\\"><a href=\\\"#%EC%84%A0%ED%83%9D%EC%A0%81-%ED%83%80%EC%9E%85--%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>선택적 타입 + 유효성 검사</h3>\\n<p>아니면 타입과 유효성 검사를 함께 사용할 수도 있습니다. 타입을 이용해서 코드 속의 두려움을 걷어내고, 유효성 검사를 통해서 외부로부터 들어오는 데이터를 믿을 수 있게 됩니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ts\\\"><code class=\\\"language-ts\\\"><span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">User</span> <span class=\\\"token punctuation\\\">{</span>\\n  id<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span>\\n  name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span>\\n  email<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">fetchUser</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">:</span> User<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> validationErrors <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">validate</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>validationErrors<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'뭠마 난 널 믿었는데'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// User를 가져오는데 성공!</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// 그 이후</span>\\n<span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 컴파일러가 이 객체는 name 속성이 있다고 보증함</span></code></pre>\\n      </div>\\n<p>선택적 타입과 유효성 검사에 같은 정의를 하는 번거로운 작업을 피하기 위해서 Typescript 와 Flow 컴파일러를 직접 라이브러리로서 사용하거나(역주: 어떻게 하는지 방법은 모르겠습니다), <a href=\\\"https://github.com/pelotom/runtypes\\\">runtypes(TS)</a>, <a href=\\\"https://github.com/seanhess/runtime-types\\\">runtime-types(Flow)</a>, <a href=\\\"https://github.com/YousefED/typescript-json-schema\\\">typescript-json-schema(TS)</a> 같은 별도의 라이브러리를 사용할 수도 있습니다. 몇 개의 장애물을 넘고 나면 여러분의 데이터를 더 믿을 수 있게 됩니다. 하지만 더 깊은 곳에 깔린 문제가 있습니다. 조금 뒤에 살펴보겠습니다.</p>\\n<h2 id=\\\"데이터-변경의-두려움\\\"><a href=\\\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B3%80%EA%B2%BD%EC%9D%98-%EB%91%90%EB%A0%A4%EC%9B%80\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>데이터 변경의 두려움</h2>\\n<p>데이터가 바뀔 때는 어떨까요? 기본적으로 자바스크립트에서 데이터는 아무렇게나(willy-nilly) 바뀔 수 있습니다. 예를 들어 여기 문서를 받는 함수가 있는데 이 함수는 문서의 필드를 적절하게 손보고 새 필드를 삽입합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">formatDocument</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">,</span> source<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">.</span>creationDate<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    doc<span class=\\\"token punctuation\\\">.</span>creationDate <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">convertTimeToUtc</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">.</span>creationDate<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    doc<span class=\\\"token punctuation\\\">.</span>creationDate <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  doc<span class=\\\"token punctuation\\\">.</span>source <span class=\\\"token operator\\\">=</span> source\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>이런 스타일의 코드는 따라가기도 어렵고 곳곳에 두려움이 도사리고 있습니다. 내 데이터가 다른데서 사용된다면? 이미 다른 곳에서 변경되었다면? 이 시점에서 내 데이터가 가지고 있어야 하는 값이 뭐더라? 내가 지금 가지고 있는 데이터와 내가 실제 사용할 때의 데이터가 어떻게 같은 데이터라고 믿을 수 있지? 위의 예는 아주 작은 부분에 불과하지만 높은 동시성이 요구되는 시스템이나 커다란 코드 베이스에서는 훨씬 큰 문제를 야기할 겁니다.</p>\\n<p>선택적 타입을 사용해보지만 별로 도움은 되지 않습니다. Typescript 와 Flow 에서 아래 두 함수는 같은 타입을 가리킵니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">formatDocument</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">:</span> Document<span class=\\\"token punctuation\\\">,</span> source<span class=\\\"token punctuation\\\">:</span> String<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">.</span>creationDate<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    doc<span class=\\\"token punctuation\\\">.</span>creationDate <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">convertTimeToUtc</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">.</span>creationDate<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    doc<span class=\\\"token punctuation\\\">.</span>creationDate <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  doc<span class=\\\"token punctuation\\\">.</span>source <span class=\\\"token operator\\\">=</span> source\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-flow\\\"><code class=\\\"language-flow\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">formatDocument</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">:</span> Document<span class=\\\"token punctuation\\\">,</span> source<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type tag\\\">String</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type tag\\\">void</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">.</span>creationDate<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    doc<span class=\\\"token punctuation\\\">.</span>creationDate <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">convertTimeToUtc</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">.</span>creationDate<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    doc<span class=\\\"token punctuation\\\">.</span>creationDate <span class=\\\"token operator\\\">=</span> <span class=\\\"token type tag\\\">null</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  doc<span class=\\\"token punctuation\\\">.</span>source <span class=\\\"token operator\\\">=</span> source\\n  child_process<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">exec</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"sudo rm -rf /\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token function\\\">launchRocket</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>이 중 하나는 여러분이 원하는 기능을 수행하지만 나머지 하나는 서비스를 불바다로 만들어버릴 겁니다. 타입 시스템을 통해 바라보면 이 함수는 아무것도 안하는 것이나 마찬가지입니다(역주: 리턴 값이 <code class=\\\"language-text\\\">void</code> 라서 그럴까요?).</p>\\n<h3 id=\\\"불변성을-가장한-규약\\\"><a href=\\\"#%EB%B6%88%EB%B3%80%EC%84%B1%EC%9D%84-%EA%B0%80%EC%9E%A5%ED%95%9C-%EA%B7%9C%EC%95%BD\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>불변성을 가장한 규약</h3>\\n<p>이제 여러분은 자바스크립트를 더 잘 다룰 수 있고, 팀 안에서 합의를 이루어서 명시적이고(explicit) 묵시적(implicit)으로 불변성을 가지도록 코드를 작성하기 시작합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">formatDocument</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">,</span> source<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    creationDate<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">sanitizeDate</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">.</span>creationDate<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    source<span class=\\\"token punctuation\\\">:</span> source<span class=\\\"token punctuation\\\">,</span>\\n    text<span class=\\\"token punctuation\\\">:</span> doc<span class=\\\"token punctuation\\\">.</span>text\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// 데이터 변경하지 않기</span>\\n  <span class=\\\"token comment\\\">// 루트 폴더 지우지 않기</span>\\n  <span class=\\\"token comment\\\">// 로켓 쏘지 않기</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">sanitizeDate</span><span class=\\\"token punctuation\\\">(</span>date<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> date <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">convertTimeToUtc</span><span class=\\\"token punctuation\\\">(</span>date<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>점점 <code class=\\\"language-text\\\">var</code> 보단 <code class=\\\"language-text\\\">const</code> 를 선호하며 값을 직접 변경하기 보다 새로운 값을 리턴하도록 만들기 시작합니다. <code class=\\\"language-text\\\">let</code> 은 변경될 수 있는 값을 가리킬 때만 사용하고, 더 짧은 코드를 작성하기 위해 삼항연산자(ternary operator)를 사용하여 <code class=\\\"language-text\\\">if</code> 문을 기능적으로 대체할 수 있다는 사실을 새로이 발견했습니다. <code class=\\\"language-text\\\">map</code>, <code class=\\\"language-text\\\">filter</code>, <code class=\\\"language-text\\\">reduce</code> 나 다른 함수를 사용하여 기존의 데이터를 직접 변경하지 않는 새로운 자료구조를 사용하기도 합니다.</p>\\n<p>규약에 다른 불변성은 편리하고 자연스러운 자바스크립트 코드를 만들어냅니다. 그리고 자바스크립트 에코시스템과도 잘 맞아떨어집니다. 하지만 이 방식은 개발자의 신뢰와 훈련(discipline)에 크게 의존합니다. 여러분은 객체의 직접 변경을 피하고 어디서 변경이 일어나는지 정확히 표현하는 등의 규약을 개발자들이 잘 따른다고 믿어야 합니다. 이쯤 오면 더 강한 규약이 필요하다 생각하게 됩니다.</p>\\n<h3 id=\\\"라이브러리를-사용해서-빡세게-강제하는-척-하기\\\"><a href=\\\"#%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%84%9C-%EB%B9%A1%EC%84%B8%EA%B2%8C-%EA%B0%95%EC%A0%9C%ED%95%98%EB%8A%94-%EC%B2%99-%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>라이브러리를 사용해서 빡세게 강제하는 척 하기</h3>\\n<p>여러분은 데이터 변경이나 불변 자료구조를 위해 라이브러리를 도입해서 오롯이 개발자만 믿어야 하는 부분 일부를 도구 사용에 대한 믿음으로 옮겨올 수 있습니다. 광범위하게 <a href=\\\"http://ramdajs.com\\\">Ramda</a>같은 ‘함수형 올인원 팩’ 같은 라이브러리를 도입할 수도 있고 <a href=\\\"https://github.com/calmm-js/partial.lenses\\\">partial.lenses</a>, <a href=\\\"https://github.com/gcanti/monocle-ts\\\">monocle-ts</a> 같은 렌즈 라이브러리를 도입할 수도 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> <span class=\\\"token constant\\\">R</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'ramda'</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">formatDocument</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">,</span> source<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> creationDate <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">sanitizeDate</span><span class=\\\"token punctuation\\\">(</span>creationDate<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token comment\\\">// 새 데이터를 만들어 반환한다</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token constant\\\">R</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">merge</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> creationDate<span class=\\\"token punctuation\\\">,</span> source <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>이런 종류의 라이브러리의 기본 개념 중 하나는 사용하는 데이터를 마치 불변 데이터인 것 처럼 다룬다는 겁니다. 실제로는 그렇지 않은데도요. <a href=\\\"http://ramdajs.com/docs/#assoc\\\">Ramda 는 얕은 복사(shallow clone)만 합니다.</a> 하지만 불변 데이터에 대한 규약이 충분히 강력하다면 모두들 ‘불변 데이터인 척’ 다루게 됩니다. 약간 퍼포먼스 손해를 보긴 하겠지만 일정 수준의 코드 신뢰도는 얻었습니다. 라이브러리를 광범위하게 사용하고 규약이 잘 잡혀있으면 최상의 효과를 발휘하겠지요.</p>\\n<p>진정한 불변성을 강제하고 데이터 변경 시 퍼포먼스 손해를 최소화하려면 <a href=\\\"https://github.com/facebook/immutable-js\\\">Immutable.js</a>, <a href=\\\"https://github.com/rtfeldman/seamless-immutable\\\">seamless-immutable</a>, <a href=\\\"http://swannodette.github.io/mori/\\\">Mori</a> 같은 불변 자료구조를 활용할 수도 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> <span class=\\\"token constant\\\">I</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'immutablejs'</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">formatDocument</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">,</span> source<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> creationDate <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">sanitizeDate</span><span class=\\\"token punctuation\\\">(</span>creationDate<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token comment\\\">// doc은 직접 수정할 수 없다</span>\\n  <span class=\\\"token keyword\\\">return</span> doc<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">merge</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> creationDate<span class=\\\"token punctuation\\\">,</span> source <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>이렇게 하면 데이터를 직접 변경할 수 없게 되며 외부로 드러난 인터페이스로만 변경할 수 있게 됩니다. 하지만 라이브러리에서 제공하는 특정 자료구조에서만 적용되는 데이터에만 한정됩니다. 대부분의 자바스크립트 코드는 기본적인 자바스크립트 자료구조에 의존하기 때문에, 결국에는 이리저리 데이터를 변환하게 되고(역주: ImmutableJS 의 <code class=\\\"language-text\\\">toJS</code> 를 떠올려보세요) 기본적인 자료구조를 사용할 때마다 기껏 확보한 믿음을 잃어버리게 됩니다.</p>\\n<p>규약을 거는 것과 불변 자료구조를 강제하는 방법 모두 한계가 있지만, 제일 큰 문제는 선택적 타입 시스템과 잘 맞지 않는다는 겁니다.</p>\\n<h2 id=\\\"자바스크립트를-믿기\\\"><a href=\\\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A5%BC-%EB%AF%BF%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>자바스크립트를 믿기</h2>\\n<p>앞서 소개한 예시들은 선택적 타입, 함수를 통한 변형, 불변 데이터 등 더 효과적인 자바스크립트를 작성하기 위한 도구를 꺼내 본 것입니다. 하지만 자바스크립트를 쓰면서 이런 도구들을 도입 할 때 여러가지 한계점이 있으며, 같이 사용하기도 어렵습니다.</p>\\n<h3 id=\\\"선택적-타입은-잘못된-보안-의식을-제공한다\\\"><a href=\\\"#%EC%84%A0%ED%83%9D%EC%A0%81-%ED%83%80%EC%9E%85%EC%9D%80-%EC%9E%98%EB%AA%BB%EB%90%9C-%EB%B3%B4%EC%95%88-%EC%9D%98%EC%8B%9D%EC%9D%84-%EC%A0%9C%EA%B3%B5%ED%95%9C%EB%8B%A4\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>선택적 타입은 잘못된 보안 의식을 제공한다</h3>\\n<p>선택적 타입은 말 그대로 자바스크립트에 선택적으로 도입할 수 있도록 설계되었습니다. 말인즉슨 모든 요소가 타입으로 정의된게 아니기 때문에 모두 유효한 타입을 가지고 있다고 믿는게 불가능합니다. Flow 는 타입이 불분명하며(unsound) Typescript 는 <a href=\\\"https://www.typescriptlang.org/docs/handbook/type-compatibility.html\\\">의도적으로 불분명하게(deliberately unsound)</a> 사용할 수 있습니다. 불분명하다는 의미는 여러 상황에서 타입이 타입이 맞지 않는데도 컴파일러가 알아채지 못하는 것을 뜻합니다.</p>\\n<p>자바스크립트에서 선택적 타입을 사용 할 때 다른 이유로 맞지 않는 경우도 있습니다. 자바스크립트로 작성된 것들 중 일부는 Typescript 나 Flow 로 타입을 정의하기 어렵거나 심지어 불가능하기도 합니다.</p>\\n<ul>\\n<li>\\n<p>고차 함수들</p>\\n<ul>\\n<li>Ramda 의 <a href=\\\"http://ramdajs.com/docs/#call\\\"><code class=\\\"language-text\\\">call</code></a>, <a href=\\\"http://ramdajs.com/docs/#compose\\\"><code class=\\\"language-text\\\">compose</code></a>, <a href=\\\"http://ramdajs.com/docs/#chain\\\"><code class=\\\"language-text\\\">chain</code></a>, <a href=\\\"http://ramdajs.com/docs/#lift\\\"><code class=\\\"language-text\\\">lift</code></a>, <a href=\\\"http://ramdajs.com/docs/#lens\\\"><code class=\\\"language-text\\\">lense</code></a> 계열 함수들</li>\\n<li>partial.lenses 의 <a href=\\\"https://github.com/calmm-js/partial.lenses/issues/55\\\">함수들</a></li>\\n</ul>\\n</li>\\n<li>\\n<p>동적 함수들</p>\\n<ul>\\n<li>Ramda 의 <a href=\\\"http://ramdajs.com/docs/#invert\\\"><code class=\\\"language-text\\\">invert</code></a>, <a href=\\\"http://ramdajs.com/docs/#dissoc\\\"><code class=\\\"language-text\\\">dissoc</code></a>, <a href=\\\"http://ramdajs.com/docs/#mergeWith\\\"><code class=\\\"language-text\\\">mergeWith</code></a></li>\\n<li>ImmutableJS 의 <a href=\\\"https://github.com/facebook/immutable-js/blob/master/type-definitions/Immutable.d.ts\\\">거의 대부분의 함수</a></li>\\n</ul>\\n</li>\\n<li>\\n<p>몽키패칭</p>\\n<ul>\\n<li>AWS SDK 클라이언트의 <a href=\\\"https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/using-promises.html#w2ab1c17c15c14c17\\\">Promise</a></li>\\n<li>Bluebird 의 <a href=\\\"http://bluebirdjs.com/docs/api/promisification.html\\\">프로미스화 API 들</a></li>\\n</ul>\\n</li>\\n<li>\\n<p>아주 동적인 자료구조</p>\\n<ul>\\n<li>ElasticSearch <a href=\\\"https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-get\\\">스키마</a></li>\\n<li>winston <a href=\\\"https://github.com/winstonjs/winston#creating-your-own-logger\\\">커스텀 로거</a></li>\\n</ul>\\n</li>\\n</ul>\\n<p>위의 것들을 Typescript 나 Flow 로 타입을 매기려면 여러분들은 아래 요소들 중 한개 이상은 희생해야 합니다.</p>\\n<ol>\\n<li><strong>타입을 쓰는 이유인 ‘타입 안정성’ 을 희생한다:</strong> <code class=\\\"language-text\\\">any</code> 타입을 매겨서 모든 값을 허용하고 타입 체커가 <code class=\\\"language-text\\\">any</code> 가 들어가는 경로에 있는 값을 확인하지 않게 만듭니다.</li>\\n<li><strong>재사용성을 희생한다:</strong> 더 특정하고 정확한 타입을 제공하는 대신 함수의 재사용성을 낮춥니다.</li>\\n<li><strong>다른 개발자의 시간을 희생한다:</strong> 함수를 사용하는 사람들에게 정확한 타입을 제공하도록 만듭니다. 예를 들자면 이렇게요.</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token constant\\\">R</span><span class=\\\"token punctuation\\\">.</span>pipe<span class=\\\"token operator\\\">&lt;</span>User<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>선택지에 따라 라이브러리를 추가할 때 들쭉날쭉한 정확도를 가진 타입 정의도 함께 추가하게 됩니다. 이 때 라이브러리의 개발자를 향한 믿음 일부를 라이브러리의 ‘타입 정의’를 한 개발자에 대한 믿음으로 옮겨가게 됩니다. 대부분 이런 라이브러리는 <code class=\\\"language-text\\\">any</code> 타입 정의를 포함하고 있고, 이렇게 정의 된 함수를 호출하면 자기도 모르는 새 맞지 않는 타입을 믿는다고 말하는 것이나 다름없습니다. 게다가 Flow 는 <code class=\\\"language-text\\\">@flow</code> 어노테이션이 들어있지 않은 파일을 조용히 무시합니다.</p>\\n<p>암시적이고 명시적으로 <code class=\\\"language-text\\\">any</code> 타입을 허용하지 않도록 하면서, 타입 정의를 광범위하게 적용하고 타입 정의가 없는 파일은 린터가 오류를 뿜어내도록 설정하여 타입 신뢰성 문제를 해결할 수도 있습니다.</p>\\n<p>하지만 이는 물이 새는 배의 구멍을 막는 것이나 마찬가지입니다. 진짜 문제는 여러분이 구축한 시스템의 타입 시스템을 믿지 못하는 것이 아니라 <strong>타입 시스템을 믿을 수 있다고 생각하는 겁니다.</strong> 타입에 기대어 뭔가 변화가 일어날 때 어디가 잘못되었는지 알려주도록 만들어보려 하지만, <code class=\\\"language-text\\\">any</code> 타입 때문에 조용히 지나가거나, 라이브러리 사용 방법 혹은 타입의 정확성 문제 때문에 제대로 이루어지지 못합니다. 자바스크립트에 타입을 적용하는 것은 다른 언어에 적용되어있는 타입과는 다릅니다. 똑같은 수준의 신뢰를 기대할 수 없다는 뜻입니다.</p>\\n<p><img src=\\\"https://www.reaktor.com/wp-content/uploads/2018/01/types_and_js2-768x883.png\\\"></p>\\n<p>궁극적으로 여러분이 정의한 타입의 강점은 타입을 적용하는 팀의 지식 수준과 신념에 달려 있습니다. 팀이 타입에 대해 높은 수준의 믿음과 지식을 보유하고 있다면, 시스템에 대해 높은 신뢰를 이끌어낼 수 있습니다. 그러나 일정 수준의 신뢰도를 유지하기 위한 팀의 관심과 규율에 의존해야 하며, 두려움은 여러 가지 형태로 그 믿음을 망칠 수 있습니다.</p>\\n<h3 id=\\\"함수형-프로그래밍-타입-자바스크립트---이-중-두개를-고르세요\\\"><a href=\\\"#%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%ED%83%80%EC%9E%85-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8---%EC%9D%B4-%EC%A4%91-%EB%91%90%EA%B0%9C%EB%A5%BC-%EA%B3%A0%EB%A5%B4%EC%84%B8%EC%9A%94\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>함수형 프로그래밍, 타입, 자바스크립트 - 이 중 두개를 고르세요</h3>\\n<p>선택적 타입과 <code class=\\\"language-text\\\">map</code>, <code class=\\\"language-text\\\">filter</code>, <code class=\\\"language-text\\\">reduce</code> 를 활용한 기본적인 함수형 프로그래밍은 자바스크립트와 잘 작동합니다. 하지만 더 깊이 들어가려 하면 문제에 봉착하게 됩니다. 두 가지 예를 보여드리죠.</p>\\n<p><a href=\\\"https://github.com/facebook/immutable-js\\\">ImmutableJS</a>는 자바스크립트를 위한 영속적인 불변 자료구조 라이브러리입니다. 이 라이브러리는 내부 데이터 수정에 의존하지 않는 공용 자료구조를 제공합니다. <a href=\\\"https://github.com/facebook/immutable-js/blob/master/type-definitions/Immutable.d.ts\\\">Typescript</a>와 <a href=\\\"https://github.com/facebook/immutable-js/blob/master/type-definitions/immutable.js.flow\\\">Flow</a>를 위한 타입 정의도 포함되어 있습니다만 한번 살펴보시면 타입 체킹을 무효화하는 <code class=\\\"language-text\\\">any</code> 타입이 한가득 들어있습니다. 게다가 어떤 타입은 사용자가 정확한 타입을 제공하도록 책임을 떠넘기기도 합니다. 결과적으로 라이브러리를 사용할 때마다 타입을 도입하지 않을 수도 있고 타입을 도입하기 위해 추가적인 노력을 들일 수도 있습니다. 그러다보면 함수형 프로그래밍을 도입하기 어려워집니다.</p>\\n<p>Ramda 는 자바스크립트를 위한 함수형 유틸리티 라이브러리입니다. 타입 정의는 <a href=\\\"https://github.com/types/npm-ramda#status\\\">여기</a>에서 보실 수 있는데, 아래의 코멘트와 함께 제공됩니다. (중요한 부분은 강조했습니다)</p>\\n<blockquote>\\n<p>유의사항: Ramda 의 많은 함수들은 주로 부분 함수(partial application), 커링(currying), 조합(composition)을 중심으로 하는 문제들 때문에 정확한 타입을 제공하기 어렵습니다. 특히 제네릭이 있을 때 그렇습니다. <strong>그리고 네, 아마 여러분들이 Ramda 를 처음 사용하고자 했던 이유는 이런 기능을 사용하기 위해서겠지요.</strong> 특히 타입스크립트로 Ramda 의 타입을 적용하고자 할 때 문제가 됩니다. TS 에 관련 된 몇가지 이슈는 아래의 링크에서 확인하실 수 있습니다(역주: 링크가 실제 원하는 곳으로 연결되지 않아서 배제했습니다)</p>\\n</blockquote>\\n<p><a href=\\\"https://github.com/gcanti\\\">Giulio Canti</a>같은 분의 엄청난 작업에도 불구하고, 매번 조금이라도 불변 자료구조나 함수 합성, 커링같은 고급 함수형 프로그래밍 기법을 도입하려고 하면 타입 체커를 비활성화하거나 타입이 제대로 동작하도록 만들기 위해 추가로 노력을 들여야 합니다. 여전히 함수형 프로그래밍을 도입하기 어렵게 만드는 요소입니다.</p>\\n<h3 id=\\\"왜-우리는-자바스크립트로-고급진-개념을-사용할-수-없는가\\\"><a href=\\\"#%EC%99%9C-%EC%9A%B0%EB%A6%AC%EB%8A%94-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A1%9C-%EA%B3%A0%EA%B8%89%EC%A7%84-%EA%B0%9C%EB%85%90%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%97%86%EB%8A%94%EA%B0%80\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>왜 우리는 자바스크립트로 고급진 개념을 사용할 수 없는가</h3>\\n<p>불변성은 코드에 골고루 사용될 때 가장 유용합니다. 하지만 자바스크립트라는 언어와 에코시스템 자체가 데이터를 변경하도록 설계되어있고, <a href=\\\"http://tagide.com/blog/research/constraints/\\\">라이브러리 수준에서 불변성을 강제할 수 없습니다.</a> 또한 선택적 타입을 도입한다 한들 라이브러리로 불변성을 다룰 때 표현력이 떨어집니다.</p>\\n<p>타입도 마찬가지로 골고루 사용될 때 최고의 효과를 발휘합니다. 하지만 자바스크립트에 타입을 사용하는 것은 어디까지나 선택적으로 사용할 수 있도록 설계되었으며, 자바스크립트와의 호환성을 유지하기 위해 극단적인 절충안(역주: <code class=\\\"language-text\\\">any</code> 타입 같은 것?)을 취하여 표현력과 유용성을 제한하였습니다.</p>\\n<p>타입, 불변성, 그리고 함수형 프로그래밍은 다른 언어에서도 사용되는 것 처럼 서로를 뒷받침할 수 있습니다. 기반 자료구조가 가변적이거나 런타임에는 (타입이) 존재하지 않더라도 타입이 불변성을 강제하는데 사용될 수 있습니다. 타입은 다른 개발자들이 렌즈를 사용하여 함수 합성을 하거나 데이터를 변형할 때 함수들을 제대로 연결하도록 도울 수 있습니다. 함수를 사용한 변형은 타입과 함께 사용할 때 이해하고 유지보수하기 쉬운데다 기반 자료구조가 불변성을 가지고 있는지 알 수 있을 때 더욱 유용합니다.</p>\\n<h2 id=\\\"두려움을-가지고-코드를-작성하는-법-배우기\\\"><a href=\\\"#%EB%91%90%EB%A0%A4%EC%9B%80%EC%9D%84-%EA%B0%80%EC%A7%80%EA%B3%A0-%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%98%EB%8A%94-%EB%B2%95-%EB%B0%B0%EC%9A%B0%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>두려움을 가지고 코드를 작성하는 법 배우기</h2>\\n<p>그렇다면 어떻게 두려움을 가지고 코드를 작성하는 법을 배울 수 있을까요? 더 나은 자바스크립트 코드를 작성하는 겁니다. 여러분 자신의 코드를 거의 믿을 수 없다는 기본 가정에서 시작하여 함수형 자바스크립트를 작성하고 언어 자체의 나쁜 부분을 피하는 수 많은 기술을 배울 수 있습니다. 필요한 부분에는 타입 유효성 검사를 사용하고 꼭 필요한 경우거나 규약으로 명확히 강제할 때 불변 데이터를 사용합니다. 합당한 이유가 있을 때 선택적 타입을 도입하되, 함수형으로 데이터를 다루거나 불변 데이터를 사용하는 것이 더 나은 이득을 제공한다고 판단되면 타입 사용을 포기합니다. 함수 합성이나 렌즈를 사용하기 위해 의도적으로 타입 체킹을 비활성화 할 수 있습니다.</p>\\n<p>아니면 아예 <a href=\\\"http://www.purescript.org/\\\">PureScript</a>, <a href=\\\"https://bucklescript.github.io/\\\">ReasonML</a>, <a href=\\\"http://elm-lang.org/\\\">Elm</a>, <a href=\\\"https://clojurescript.org/\\\">ClojureScript</a> 등을 사용하여 다른 물에서 노는 방법이 있습니다. 이 언어들은 오늘날 실존하며 실제 프로덕션 앱이 동작하고 있습니다. 필요하다면 자바스크립트 에코시스템과 함께 동작할 수 있습니다. 불변성, 함수형 프로그래밍, 타입(해당되는 경우)이 기본적으로 잘 작동하고, 이 요소들이 함께 작동하는 환경에서 보다 높은 수준의 신뢰를 제공합니다.</p>\\n<p>이런 언어들 중 하나를 선택한다고 모든 문제를 해결할 수는 없습니다. 각자의 언어는 또 문제를 가지고 있습니다. 하지만 기본적으로 자바스크립트에 비해 더 높은 신뢰성이 있으며 필요에 따라 그 신뢰 수준을 끌어올리거나 낮추는 더 나은 도구를 제공합니다. 다음 포스트에서 PureScript 를 활용하여 이런 아이디어가 어떻게 적용되는지 이야기해보겠습니다.</p>\\n<p><strong><em>하지만 자바스크립트를 쓰는 한, 두려움은 언제나 여러분과 함께합니다</em>.</strong></p>\",\"id\":\"/home/circleci/repo/src/pages/posts/2018-03-04-fear-trust-and-javascript-kr/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-03-04\",\"path\":\"/posts/fear-trust-and-javascript-kr\",\"title\":\"[번역] 두려움, 믿음, 그리고 자바스크립트 - 언제 타입 시스템과 함수형 프로그래밍이 먹히지 않는가\",\"tags\":[\"Functional Programming\",\"Javascript\",\"Typescript\",\"Translation\"],\"category\":\"Javascript\"}},{\"excerpt\":\"다음 프로젝트에서 본격적으로 타입스크립트를 사용한 리액트 애플리케이션을 도입하고자 하는데, CSS를 입히기 위한 도구로  TypeStyle 을 활용하는 방안을 검토중이다. 그래서  egghead의 강좌 를 가볍게 따라가며 내용을 정리해보았다. 이 정도면 충분히 도입할 만한 가치가 있어 보인다. 적어도 스타일 속성 이름으로 오타가 날 일은 없어 보이며 JS…\",\"html\":\"<p>다음 프로젝트에서 본격적으로 타입스크립트를 사용한 리액트 애플리케이션을 도입하고자 하는데, CSS를 입히기 위한 도구로 <a href=\\\"https://typestyle.github.io\\\">TypeStyle</a>을 활용하는 방안을 검토중이다.</p>\\n<p>그래서 <a href=\\\"https://egghead.io/courses/maintainable-css-using-typestyle\\\">egghead의 강좌</a>를 가볍게 따라가며 내용을 정리해보았다. 이 정도면 충분히 도입할 만한 가치가 있어 보인다.</p>\\n<p>적어도 스타일 속성 이름으로 오타가 날 일은 없어 보이며 JS를 적극적으로 활용하여 동적인 스타일을 입힐 수 있으리라 기대한다.</p>\\n<p>참고로 아래의 예제 코드는 모두 리액트 애플리케이션을 개발한다는 전제하에 소개하고 있다. 하지만 TypeStyle 자체는 어느 환경에서나 사용 가능하다.</p>\\n<h2 id=\\\"기본-사용법\\\"><a href=\\\"#%EA%B8%B0%EB%B3%B8-%EC%82%AC%EC%9A%A9%EB%B2%95\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>기본 사용법</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> ReactDOM <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span><span class=\\\"token punctuation\\\">,</span>\\n  position<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'relative'</span> \\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>className<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n    Hello TypeStyle<span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">style</code> 함수로 생성된 내용이 스타일이 적용된 임의의 클래스 이름을 만들게 되고 DOM은 바로 클래스 이름을 사용하면 되도록 구성되어 있다.</p>\\n<p>이 과정에서 객체 형식으로 되어있는 key-value 값은 이미 라이브러리에 CSS 스펙에 맞게 정의되어 있기 때문에 오타가 날 시 컴파일러가 친절하게 에러를 잡아준다.</p>\\n<h2 id=\\\"스타일-믹스인\\\"><a href=\\\"#%EC%8A%A4%ED%83%80%EC%9D%BC-%EB%AF%B9%EC%8A%A4%EC%9D%B8\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>스타일 믹스인</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token comment\\\">// 위 코드와 동일한 DOM 랜더링</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fontSize</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> valueStr <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">typeof</span> value <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'string'</span>\\n    <span class=\\\"token operator\\\">?</span> value\\n    <span class=\\\"token punctuation\\\">:</span> value <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'px'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    fontSize<span class=\\\"token punctuation\\\">:</span> valueStr\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> fontColor <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">fontSize</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'3em'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  fontColor\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span></code></pre>\\n      </div>\\n<p>위의 코드 처럼 <code class=\\\"language-text\\\">style</code> 함수는 객체를 믹스인 할 수 있다. 프로퍼티가 맞는 순수 객체가 들어가면 아무 없이 작동하기 때문에 위의 <code class=\\\"language-text\\\">fontSize</code> 함수처럼 상황에 맞게 적절한 객체를 리턴하는 함수를 만들어서 다양한 상황에 맞게 사용할 수 있다.</p>\\n<h2 id=\\\"미디어-쿼리\\\"><a href=\\\"#%EB%AF%B8%EB%94%94%EC%96%B4-%EC%BF%BC%EB%A6%AC\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>미디어 쿼리</h2>\\n<p><code class=\\\"language-text\\\">media</code> 함수로 간단히 미디어 쿼리를 생성할 수 있다. 생성된 쿼리를 <code class=\\\"language-text\\\">style</code> 함수 안에 넣으면 자동으로 Nested 쿼리 형식으로 생성된다. 수동으로 Nested 쿼리를 입력하고자 할 때는 <code class=\\\"language-text\\\">style</code> 함수 안에 넣는 객체에 <code class=\\\"language-text\\\">$nest</code> 속성을 사용하면 된다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style<span class=\\\"token punctuation\\\">,</span> media <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span> \\n    color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span><span class=\\\"token punctuation\\\">,</span>\\n    transition<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'font-size .2s'</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">media</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> minWidth<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">500</span><span class=\\\"token punctuation\\\">,</span> maxWidth<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">700</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'30px'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">media</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> minWidth<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">701</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'50px'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span></code></pre>\\n      </div>\\n<h2 id=\\\"수도-클래스pseudo-class-작성\\\"><a href=\\\"#%EC%88%98%EB%8F%84-%ED%81%B4%EB%9E%98%EC%8A%A4pseudo-class-%EC%9E%91%EC%84%B1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>수도 클래스(pseudo class) 작성</h2>\\n<p>Sass, Less와 유사한 형태로 계층 화된 쿼리를 작성할 수 있다. 위에서 언급한 <code class=\\\"language-text\\\">$nest</code> 속성을 선택하면 해당 클래스의 계층 쿼리를 작성할 수 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span> \\n    color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span><span class=\\\"token punctuation\\\">,</span>\\n    transition<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'font-size .2s'</span><span class=\\\"token punctuation\\\">,</span>\\n    $nest<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token string\\\">'&amp;:focus'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// .class:focus</span>\\n        fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'30px'</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token string\\\">'&amp;&amp;:hover'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// .class.class:focus</span>\\n        fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'50px'</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span></code></pre>\\n      </div>\\n<h2 id=\\\"css-클래스-조합하기\\\"><a href=\\\"#css-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%A1%B0%ED%95%A9%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>CSS 클래스 조합하기</h2>\\n<p>클래스를 조합하는건 <code class=\\\"language-text\\\">style</code> 함수로 만들어진 클래스들을 분기에 따라 추가하고 제거하도록 만들면 된다. 다만 이 과정에서 있는 경우와 없는 경우에 따라 문자열을 조합하는게 번거로울 수 있는데, <code class=\\\"language-text\\\">classes</code> 함수가 귀찮은 부분을 쉽게 해결하도록 도와준다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">const</span> baseClassName <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span> color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'#333'</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> errorClassName <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span> backgroundColor<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">AppProps</span> <span class=\\\"token punctuation\\\">{</span>\\n  className<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n  hasError<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">boolean</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">App</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> className<span class=\\\"token punctuation\\\">,</span> hasError <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">:</span> AppProps<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">classes</span><span class=\\\"token punctuation\\\">(</span>\\n      baseClassName<span class=\\\"token punctuation\\\">,</span>\\n      className<span class=\\\"token punctuation\\\">,</span>\\n      hasError <span class=\\\"token operator\\\">&amp;&amp;</span> errorClassName\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n    Hello world\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// ...</span></code></pre>\\n      </div>\\n<h2 id=\\\"keyframes-함수로-애니메이션-만들기\\\"><a href=\\\"#keyframes-%ED%95%A8%EC%88%98%EB%A1%9C-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98-%EB%A7%8C%EB%93%A4%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Keyframes 함수로 애니메이션 만들기</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style<span class=\\\"token punctuation\\\">,</span> keyframes <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> colorAnimationName <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">keyframes</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token string\\\">'0%'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'black'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token string\\\">'50%'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'blue'</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'20px'</span><span class=\\\"token punctuation\\\">,</span>\\n    animationName<span class=\\\"token punctuation\\\">:</span> colorAnimationName<span class=\\\"token punctuation\\\">,</span>\\n    animationDuration<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'1s'</span><span class=\\\"token punctuation\\\">,</span>\\n    animationIterationCount<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'infinite'</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">colorAnimationName</code> 을 일일이 변수로 분리 할 필요는 없다. 한번만 사용할거면 <code class=\\\"language-text\\\">animationName</code> 속성에 바로 <code class=\\\"language-text\\\">keyframes</code> 를 사용한 객체를 리턴하도록 만들면 된다.</p>\\n<h2 id=\\\"일반-css를-사용하기\\\"><a href=\\\"#%EC%9D%BC%EB%B0%98-css%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>일반 CSS를 사용하기</h2>\\n<p><code class=\\\"language-text\\\">cssRaw</code> 함수를 사용하고 그 안에 일반 CSS를 문자열로 집어넣으면 그대로 글로벌 스타일로 변환된다. 그리고 그 파일안에 있는 컴포넌트에 전부 영향을 준다. 특정 이름을 가진 클래스를 만들고, 간단하게 기존 스타일을 마이그레이션 하거나 NormalizeCSS 등을 바로 가져올 때도 유용하게 사용할 수 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style<span class=\\\"token punctuation\\\">,</span> cssRaw <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">cssRaw</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n.red {\\n  color: red;\\n}\\n`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">cssRaw</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n.bold {\\n  font-weight: bold;\\n}\\n`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span> fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'30px'</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>className <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">' red bold'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span> <span class=\\\"token comment\\\">// red, bold 클래스 사용 가능</span>\\n    Hello world\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h2 id=\\\"구형-브라우저용-속성-사용하기\\\"><a href=\\\"#%EA%B5%AC%ED%98%95-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%9A%A9-%EC%86%8D%EC%84%B1-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>구형 브라우저용 속성 사용하기</h2>\\n<p><code class=\\\"language-text\\\">rgba</code> 같은 구형 브라우저에서 지원되지 않는 속성을 사용하면서 구형 브라우저를 지원하는 용도로 <code class=\\\"language-text\\\">rgb</code> 를 사용하는 경우, CSS 파일에서는 보통 같은 속성을 두번 작성해서 문제를 해결할 수 있다. 하지만 TypeStyle은 객체를 파싱하기 때문에 같은 속성 값을 두번 선언할 수는 없다.</p>\\n<p>하지만 배열을 사용하면 한 속성에 배열의 요소를 순차적으로 따라 스타일을 적용하도록 만들 수 있으며, 비슷한 원리를 vendor prefix에도 적용할 수 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style<span class=\\\"token punctuation\\\">,</span> types <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> scroll<span class=\\\"token punctuation\\\">:</span> types<span class=\\\"token punctuation\\\">.</span>NestedCSSProperties <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token string\\\">'-webkit-overflow-scrolling'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'touch'</span><span class=\\\"token punctuation\\\">,</span>\\n  overflow<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'auto'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  scroll<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'30px'</span><span class=\\\"token punctuation\\\">,</span>\\n    backgroundColor<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token string\\\">'rgb(200, 54, 54)'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 구형 브라우저용</span>\\n      <span class=\\\"token string\\\">'rgba(200, 54, 54, 0.5)'</span> <span class=\\\"token comment\\\">// 요즘 브라우저용</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span></code></pre>\\n      </div>\\n<h2 id=\\\"정적-페이지-만들어보기\\\"><a href=\\\"#%EC%A0%95%EC%A0%81-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>정적 페이지 만들어보기</h2>\\n<p><code class=\\\"language-text\\\">getStyles</code> 함수는 현재 작성된 파일 안에 정의된 TypeStyle 스타일을 문자열로 변환하는 기능을 한다. 이를 이용해서 간단한 HTML 페이지를 만들 수 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token comment\\\">// app.tsx</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> fs <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> ReactDOMServer <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-dom/server'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style<span class=\\\"token punctuation\\\">,</span> getStyles <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span><span class=\\\"token punctuation\\\">,</span>\\n  fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'30px'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">App</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>className<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n    Hello World\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> html <span class=\\\"token operator\\\">=</span> ReactDOMServer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">renderToStaticMarkup</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&lt;</span>App <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> css <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getStyles</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">renderPage</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> html<span class=\\\"token punctuation\\\">,</span> css <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> html<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span> css<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n&lt;html>\\n  &lt;head>\\n    &lt;style></span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>css<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">&lt;/style>\\n  &lt;/head>\\n  &lt;body>\\n    </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>html<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\n  &lt;/body>\\n&lt;/html>\\n`</span></span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> renderedPage <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">renderPage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> html<span class=\\\"token punctuation\\\">,</span> css <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nfs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeFileSync</span><span class=\\\"token punctuation\\\">(</span>__dirname <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'/index.html'</span><span class=\\\"token punctuation\\\">,</span> renderedPage<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\"><span class=\\\"token comment\\\">&lt;!-- 결과물 --></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>html</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>style</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token style language-css\\\"><span class=\\\"token selector\\\">.fyuerk</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span>red<span class=\\\"token punctuation\\\">;</span><span class=\\\"token property\\\">font-size</span><span class=\\\"token punctuation\\\">:</span>30px<span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>style</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>fyuerk<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>Hello World<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>html</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p>위 방식을 응용하여 서버 사이드 랜더링에서도 스타일을 적용할 수 있다. <a href=\\\"https://egghead.io/lessons/css-render-html-css-server-side-using-typestyle\\\">영상 참고.</a></p>\",\"id\":\"/home/circleci/repo/src/pages/posts/2018-01-16-typestyle-basic/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-01-16\",\"path\":\"/posts/typestyle-basic\",\"title\":\"TypeStyle 사용하기\",\"tags\":[\"Typescript\",\"React\",\"CSS\"],\"category\":\"TypeStyle\"}}],\"tagName\":\"Typescript\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tags-typescript-03fe449d8e727892e93e.js","module.exports = {\"pathContext\":{\"postsByTag\":[{\"excerpt\":\"부제: 시행착오를 거쳐 모듈 로딩 순서를 이해하기 Michel Weststrate 의  How to fix nasty circular dependency issues once and for all in JavaScript & TypeScript 를 번역한 글입니다 제가 관리해왔던 많은 프로젝트들은 빠르거나 늦거나 언제나 같은 문제에 부딪혔습니다. 바로 순환 모듈 의존 문제입니다.  (역주: circular module dependency…\",\"html\":\"<p>부제: 시행착오를 거쳐 모듈 로딩 순서를 이해하기</p>\\n<p><strong><a href=\\\"https://twitter.com/mweststrate\\\">Michel Weststrate</a>의 <a href=\\\"https://medium.com/visual-development/how-to-fix-nasty-circular-dependency-issues-once-and-for-all-in-javascript-typescript-a04c987cf0de\\\">How to fix nasty circular dependency issues once and for all in JavaScript &#x26; TypeScript</a>를 번역한 글입니다</strong></p>\\n<hr>\\n<p>제가 관리해왔던 많은 프로젝트들은 빠르거나 늦거나 언제나 같은 문제에 부딪혔습니다. 바로 순환 모듈 의존 문제입니다. <em>(역주: circular module dependency 를 순환 참조로 번역하자니 번역이 조금 이상하게 느껴지는데 일반적으로 많이 사용되고 있는 용어임을 감안하여 앞으로 순환 참조라는 용어를 사용하겠습니다. 피드백 환영합니다.)</em> 순환 참조를 피하는 방법을 설명하는 모범 규약이나 전략들이 많이 있지만, 제대로 지속적이고 예측 가능한 방법으로 문제를 해결하는 방법은 거의 없었습니다. 사람들은 보통 ‘어쩌다 갑자기 작동하기를’ 빌면서 <code class=\\\"language-text\\\">import</code> 문이나 코드 블록을 이리저리 움직여봅니다. 사실 아래의 트윗을 보면 저만 고통받은건 아닌가 봅니다.</p>\\n<blockquote class=\\\"twitter-tweet\\\" data-lang=\\\"en\\\"><p lang=\\\"en\\\" dir=\\\"ltr\\\">&quot;How to fix nasty circular dependency issues for once and for all in javascript / <a href=\\\"https://twitter.com/typescriptlang?ref_src=twsrc%5Etfw\\\">@typescriptlang</a>&quot; is on my to-write list for a long time. Would you be interested in / helped by such a blog post?</p>&mdash; Michel Weststrate (@mweststrate) <a href=\\\"https://twitter.com/mweststrate/status/1018945541424779264?ref_src=twsrc%5Etfw\\\">July 16, 2018</a></blockquote> <script async src=\\\"https://platform.twitter.com/widgets.js\\\" charset=\\\"utf-8\\\"></script> \\n<blockquote class=\\\"twitter-tweet\\\" data-conversation=\\\"none\\\" data-lang=\\\"en\\\"><p lang=\\\"en\\\" dir=\\\"ltr\\\">Yes. Yes. Yes.<br><br>...<br><br>Yes.</p>&mdash; Josh Goldberg 😍 (@JoshuaKGoldberg) <a href=\\\"https://twitter.com/JoshuaKGoldberg/status/1018964066302189568?ref_src=twsrc%5Etfw\\\">July 16, 2018</a></blockquote> <script async src=\\\"https://platform.twitter.com/widgets.js\\\" charset=\\\"utf-8\\\"></script>\\n<p>저는 이 문제를 일관되게 해결하는 방법을 보여드리겠습니다.</p>\\n<h2 id=\\\"예시the-case\\\"><a href=\\\"#%EC%98%88%EC%8B%9Cthe-case\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>예시(The case)</h2>\\n<p>자바스크립트의 모듈 로딩 순서는 결정적(deterministic)입니다. 여전히 거대한 프로젝트에서는 파악하기가 어렵지요. (간접적으로) 순환 참조 문제가 발생하면 여러분의 코드는 반쯤만 불러와진 모듈 때문에 문제가 발생합니다. 이번 예제로 아직 초기화되지 않은 기본 클래스(base class)를 가져오거나 불러온 변수를 읽어들이려 할 때 생기는 문제를 확인하실 수 있습니다.</p>\\n<p>가령 자바스크립트 객체 트리를 YAML 형식으로 바꾸어주는 가상의 애플리케이션이 있다고 해 보겠습니다.</p>\\n<p><img src=\\\"https://cl.ly/30233q260824/fix-circular-dependency-1.png\\\" alt=\\\"예제 - 객체 트리를 문자열로 예쁘게 출력하기\\\"></p>\\n<p>예제 코드는 <a href=\\\"https://codesandbox.io/s/7jp0x7lrjq\\\">codesandbox</a>에서 직접 실험해보실 수 있습니다. 앱의 구현 방식은 직관적입니다. 기본 클래스 <code class=\\\"language-text\\\">AbstractNode</code> 가 있고, 그 클래스에는 기본 구현체와 <code class=\\\"language-text\\\">parent</code> 나 <code class=\\\"language-text\\\">getDepth()</code> 처럼 공통적으로 사용되는 함수를 제공합니다. 그 다음에는 <code class=\\\"language-text\\\">Node</code> 와 <code class=\\\"language-text\\\">Leaf</code> 라는 세부 구현체들이 있습니다. 지금은 잘 동작하지만 세 개의 클래스를 한 파일에서 관리하는 것은 이상적인 방법이 아닙니다. 그러니 개선한 뒤에 어떻게 되나 살펴보겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">AbstractNode</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>parent<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>parent <span class=\\\"token operator\\\">=</span> parent\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">getDepth</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>parent<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>parent<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getDepth</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">0</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token string\\\">'abstract; not implemented'</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">(</span>thing<span class=\\\"token punctuation\\\">,</span> parent<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>thing <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token keyword\\\">typeof</span> thing <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'object'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Node</span><span class=\\\"token punctuation\\\">(</span>parent<span class=\\\"token punctuation\\\">,</span> thing<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Leaf</span><span class=\\\"token punctuation\\\">(</span>parent<span class=\\\"token punctuation\\\">,</span> thing<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Node</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">AbstractNode</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>parent<span class=\\\"token punctuation\\\">,</span> thing<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>parent<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>children <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n    Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>thing<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span>key <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>children<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> AbstractNode<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">(</span>thing<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token string\\\">'\\\\n'</span> <span class=\\\"token operator\\\">+</span>\\n      Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>children<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>\\n          key <span class=\\\"token operator\\\">=></span>\\n            <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">padStart</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getDepth</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>key<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>children<span class=\\\"token punctuation\\\">[</span>\\n              key\\n            <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span>\\n        <span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'\\\\n'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Leaf</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">AbstractNode</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>parent<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>parent<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>value <span class=\\\"token operator\\\">=</span> value\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>value\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"문제\\\"><a href=\\\"#%EB%AC%B8%EC%A0%9C\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>문제</h2>\\n<p>일단 클래스들을 각자의 파일로 분리하면, 똑같이 작동할거라 생각했던 애플리케이션이 확 죽어버립니다. 에러 메세지는 <code class=\\\"language-text\\\">TypeError: Super expression must either be null or a function, not undefined</code> 라고 나옵니다. 너무 모호한 표현이라 문제를 파악할 수 조차 없습니다 ¯_(ツ)_/¯!</p>\\n<p><img src=\\\"https://cl.ly/1r1k010W3W3S/fix-circular-dependency-2.png\\\" alt=\\\"순환 참조로 인해 생긴 예외의 예\\\"></p>\\n<p>아래 코드에서 보시다시피 변경점은 거의 없었습니다. (<a href=\\\"https://codesandbox.io/s/xjyj0ol3mq\\\">여기</a>에 들어가 보시면 깨진 상태의 샌드박스를 보실 수 있습니다)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// -- AbstractNode.js --</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Leaf <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./Leaf'</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Node <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./Node'</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">AbstractNode</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">/* 그대로 */</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// -- Node.js --</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> AbstractNode <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./Node'</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Node</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">AbstractNode</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">/* 그대로 */</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// -- Leaf.js --</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> AbstractNode <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./AbstractNode'</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Leaf</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">AbstractNode</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">/* 그대로 */</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>이정도의 변경만 가해도 애플리케이션은 충분히 고장납니다. <code class=\\\"language-text\\\">Node</code> 와 <code class=\\\"language-text\\\">Leaf</code> 클래스는 <code class=\\\"language-text\\\">AbstractNode.js</code> 파일을 모듈로 불러와서 그 클래스의 <code class=\\\"language-text\\\">from</code> 스태틱 메서드를 사용하고 있습니다.</p>\\n<p>애플리케이션이 동작하지 않는 이유는 <code class=\\\"language-text\\\">AbstractNode</code> 를 <code class=\\\"language-text\\\">Leaf</code> 클래스에서 불러오려고 할 때 아직 정의되지 않았기 때문입니다. 신기하게도 우리는 <code class=\\\"language-text\\\">Leaf</code> 클래스 파일에 <code class=\\\"language-text\\\">import</code> 문을 정확히 써 줬는데도 이런 일이 일어났지요. 실제로 모듈이 로드되는 순서는 이렇습니다.</p>\\n<p><img src=\\\"https://cl.ly/233N0X3A321F/fix-circular-dependency-3.png\\\" alt=\\\"모듈 로딩 순서가 순환 참조를 일으킬 수 있는 경우\\\"></p>\\n<ol>\\n<li><code class=\\\"language-text\\\">index.js</code> 는 <code class=\\\"language-text\\\">AbstractNode.js</code> 파일을 불러옵니다(require).</li>\\n<li>모듈 로더는 <code class=\\\"language-text\\\">AbstractNode.js</code> 파일을 불러오기 시작하고 모듈 코드를 실행합니다. 이 파일에서 처음 맞딱드리는 코드는 <code class=\\\"language-text\\\">Leaf</code> 를 <code class=\\\"language-text\\\">require(import)</code> 하는 구문입니다.</li>\\n<li>그래서 모듈 로더는 <code class=\\\"language-text\\\">Leaf.js</code> 파일을 불러들이기 시작합니다. 그런데 이 파일도 <code class=\\\"language-text\\\">AbstractNode.js</code> 파일을 불러들이는 일부터 시작합니다.</li>\\n<li><code class=\\\"language-text\\\">AbstractNode.js</code> 는 이미 로드되었기 때문에 모듈 캐쉬에서 즉시 리턴해줍니다. 하지만 이 모듈은 <code class=\\\"language-text\\\">Leaf</code> 를 불러오는 첫 번째 줄의 코드가 실행되지 않은 상태이기 때문에 <code class=\\\"language-text\\\">AbstractNode</code> 클래스의 구현부는 실행되지 않았습니다!</li>\\n<li>그래서 <code class=\\\"language-text\\\">Leaf</code> 클래스는 제대로 된 클래스가 아닌 <code class=\\\"language-text\\\">undefined</code> 값을 상속합니다. 그리고 위 그림처럼 예외가 터지겠죠. BAAM!</li>\\n</ol>\\n<h2 id=\\\"해결-시도-1\\\"><a href=\\\"#%ED%95%B4%EA%B2%B0-%EC%8B%9C%EB%8F%84-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>해결 시도 1</h2>\\n<p>이렇게 우리의 순환 참조가 불쾌한 문제를 일으킨다는게 발견되었습니다. 하지만 자세히 들여다보면 원래 어떻게 파일을 불러와야 할 지 결정하는 것은 매우 쉽습니다.</p>\\n<ol>\\n<li><code class=\\\"language-text\\\">AbstractNode</code> 클래스를 먼저 불러온다.</li>\\n<li><code class=\\\"language-text\\\">Node</code> 와 <code class=\\\"language-text\\\">Leaf</code> 클래스를 그 다음에 불러온다.</li>\\n</ol>\\n<p>그러니까 먼저 <code class=\\\"language-text\\\">AbstractNode</code> 클래스를 먼저 불러온 다음 <code class=\\\"language-text\\\">Node</code>, <code class=\\\"language-text\\\">Leaf</code> 클래스를 불러오면 되겠네요. <code class=\\\"language-text\\\">AbstractNode</code> 클래스가 정의될 때 <code class=\\\"language-text\\\">Node</code> 와 <code class=\\\"language-text\\\">Leaf</code> 클래스는 아직 알려질 필요가 없기 때문에 잘 작동할겁니다. <code class=\\\"language-text\\\">AbstractNode.from</code> 가 처음으로 호출 되기 전에 두 클래스가 정의되어 있는 한 문제없이 작동할겁니다. 이렇게 바꿔보죠.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">AbstractNode</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">/* 그대로 */</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Node <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./Node'</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Leaf <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./Leaf'</span></code></pre>\\n      </div>\\n<p>이 방법은 몇 가지 문제가 있습니다.</p>\\n<p>먼저 못생긴데다 확장하기 어렵습니다. 거대한 코드베이스에 이 방법을 적용한다면 어쩌다 작동할때까지 <code class=\\\"language-text\\\">import</code> 문을 이리저리 움직봐야 할 겁니다. 하지만 어디까지나 임시 방편에 불과한게, 조금만 리팩터링을 하거나 <code class=\\\"language-text\\\">import</code> 문의 위치를 바꾸게 되면 미묘하게 모듈 로딩 순서가 바뀌어 또 문제가 일어나게 됩니다.</p>\\n<p>두 번째로 이 방법은 모듈 번들러에 크게 의존하는 방법입니다. 예를 들어 codesandbox 에서 Parcel 로 앱을 번들링할 때(아니면 Webpack 이나 Rollup), 제대로 <a href=\\\"https://codesandbox.io/s/7oxxrqwoq6\\\">작동하지 않습니다</a>. 하지만 로컬 Node.js 환경에서 commonJS 모듈 방식으로 실행하면 잘 동작합니다.</p>\\n<h2 id=\\\"문제를-피하기\\\"><a href=\\\"#%EB%AC%B8%EC%A0%9C%EB%A5%BC-%ED%94%BC%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>문제를 피하기</h2>\\n<p>보아하니 이 문제는 쉽게 해결할 수 없어 보입니다. 문제가 발생하지 않도록 할 순 없을까요? 물론 가능합니다. 몇 가지 방법이 있는데, 먼저 모든 코드를 한 파일에 두는 방법이 있습니다. 예시를 소개할 때 처음 파일처럼요. 모듈 초기화 코드가 실행되는 순서를 완전히 제어할 수 있기 때문에 문제가 해결됩니다.</p>\\n<p>두 번째로, 어떤 사람들은 \\\"클래스를 사용해서는 안된다” 또는 \\\"상속을 사용하지 말라\\\" 같은 주장을 펼치기 위해 위와 같은 문제를 예시로 사용합니다. 그러나 이런 논의는 문제를 너무 단순하게 바라보는 겁니다. 저도 프로그래머가 상속에 너무 빨리 손을 대는 경향이 있다는데 동의하지만, 어떤 문제의 경우 상속을 통해 코드 구조, 재사용 또는 성능면에서 큰 이득을 얻을 수 있습니다. 하지만 가장 중요한 것은 이 문제가 클래스 상속에만 국한되지 않는다는 것입니다. 모듈 초기화 중에 실행되는 모듈 변수와 함수 사이에 순환 참조가 생기는 등 똑같은 문제가 발생할 수 있습니다!</p>\\n<p><code class=\\\"language-text\\\">AbstractNode</code> 를 쪼개서 <code class=\\\"language-text\\\">Node</code> 와 <code class=\\\"language-text\\\">Leaf</code> 를 의존하지 않도록 만들 수도 있습니다. 이 <a href=\\\"https://codesandbox.io/s/6z2rkvj8v3\\\">샌드박스</a>에서 <code class=\\\"language-text\\\">from</code> 메서드는 <code class=\\\"language-text\\\">AbstractNode</code> 클래스로부터 떨어져 별도의 파일로 분리되었습니다. 문제는 해결되었지만 우리의 프로젝트와 API 구조는 달라졌습니다. 거대한 프로젝트에서는 이 방법을 사용하기 매우 어렵거나 불가능할 수도 있습니다! 예를 들어 추가 구현을 하면서 <code class=\\\"language-text\\\">Node#print</code> 메서드가 <code class=\\\"language-text\\\">Node</code> 나 <code class=\\\"language-text\\\">Leaf</code> 에 의존하는 경우가 생길 수도 있겠죠...</p>\\n<p><em>보너스:</em> <a href=\\\"https://github.com/mobxjs/mobx/commit/f75812355d1529f237f7116ad56a199ae5a90252\\\">제가 이런 이상한 방법도 사용해봤습니다.</a> 함수에서 기본 클래스를 리턴하고, 함수 호이스팅을 활용하여 원하는 순서대로 호출될 수 있도록 만듭니다. 이걸 어떻게 적절하게 설명해야 할지도 모르겠네요.</p>\\n<h2 id=\\\"내부-모듈-패턴internal-module-pattern으로-해결하기\\\"><a href=\\\"#%EB%82%B4%EB%B6%80-%EB%AA%A8%EB%93%88-%ED%8C%A8%ED%84%B4internal-module-pattern%EC%9C%BC%EB%A1%9C-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>내부 모듈 패턴(Internal module pattern)으로 해결하기</h2>\\n<p>저는 많은 프로젝트에 걸쳐 순환 참조 문제를 여러 번 겪었습니다. 제가 일하고 있는 <a href=\\\"https://medium.com/@Mendix\\\">Mendix</a>나, MobX, MobX-state-tree 를 비롯하여 일부 개인 프로젝트까지 포함해서요. 심지어 저는 몇년 전에 <a href=\\\"https://github.com/mobxjs/mobx/blob/247c443fcf5210dabf4c850a6312e48c5f1d5d3b/scripts/single-file-build.sh#L17-L29\\\">스크립트를</a> 짜서 모든 소스 파일을 이어붙인 다음 <code class=\\\"language-text\\\">import</code> 문을 없애버리는 방법도 써 봤습니다. 모듈 로딩 순서를 잡기 위한 흙수저판(poor man’s) 모듈 번들러였죠.</p>\\n<p>하지만 문제를 몇 번 해결하고 나서 하나의 패턴을 발견했습니다. 프로젝트를 재구성하거나 이상한 트릭을 쓰지 않고도 모듈 로딩 순서를 전부 컨트롤할 수 있는 방법이죠! 이 패턴은 제가 확인해본 어느 환경에서나 잘 동작했습니다. (Rollup, Webpack, Parcel, Node)</p>\\n<p>이 패턴의 핵심은 <code class=\\\"language-text\\\">index.js</code> 와 <code class=\\\"language-text\\\">internal.js</code> 파일입니다. 주요 규칙은 이렇습니다.</p>\\n<ol>\\n<li><code class=\\\"language-text\\\">internal.js</code> 모듈은 프로젝트 전체의 로컬 모듈을 불러모은 다음 전부 내보내는 역할을 합니다.</li>\\n<li>다른 모듈들은 모두 반드시 <code class=\\\"language-text\\\">internal.js</code> 파일만 불러와서 사용합니다. 다른 모듈을 직접적으로 불러오지 않도록 합니다.</li>\\n<li><code class=\\\"language-text\\\">index.js</code> 파일은 주요 시작점이 됩니다. <code class=\\\"language-text\\\">internal.js</code> 파일에서 내보낸 모든 모듈을 불러온 다음, 외부로 노출하고자 하는 것만 내보냅니다. 이 과정은 다른 사람들이 사용할 라이브러리를 배포할 때만 유효한 방법입니다. 따라서 이번 예제에서는 만들지 않고 넘어가겠습니다.</li>\\n</ol>\\n<p>위의 규칙은 로컬 모듈에만 적용되어야 합니다. 외부 모듈 <code class=\\\"language-text\\\">import</code> 는 순환 참조 문제와 전혀 연관이 없기 때문에 그대로 두시면 됩니다. 우리의 데모 애플리케이션에 적용을 해보면 이렇게 바뀔겁니다.</p>\\n<hr>\\n<p>이 패턴을 처음 적용하면 굉장히 어색하게 느껴지실겁니다. 하지만 익숙해지기만 하면 몇 가지 큰 이득을 얻을 수 있습니다!</p>\\n<ol>\\n<li>당연하지만 우리가 머리를 싸매던 문제가 해결되었습니다! <a href=\\\"https://codesandbox.io/s/oqro83jpk6\\\">여기</a>에 보이는 대로 우리의 앱은 아주 잘 돌아갑니다.</li>\\n<li>문제가 해결된 이유는 <em>이제 우리가 모듈 로딩 순서를 완전히 통제할 수 있기 때문입니다</em>. <code class=\\\"language-text\\\">internal.js</code> 가 파일을 불러오는 것은 순서에 관계 없이 우리의 모듈 로딩 구조 안에 포함됩니다. (아래쪽의 그림을 참고하시거나 위에 말씀드린 모듈 로딩 순서에 대한 내용을 다시 살펴봐주세요)</li>\\n<li>더 이상 <code class=\\\"language-text\\\">require(import)</code> 문을 파일의 바닥으로 옮기는 등 우리가 원치 않는 형태의 리팩터링이나 못생긴 트릭을 쓸 필요가 없습니다. 코드베이스의 설계나 API 를 고민할 때 타협할 필요도 없습니다.</li>\\n<li><em>보너스</em> : 더 적은 파일을 불러올수록 <code class=\\\"language-text\\\">import</code> 구문도 훨씬 적어집니다. 예를 들어 지금 <code class=\\\"language-text\\\">AbstractNode.js</code> 는 오로지 하나의 <code class=\\\"language-text\\\">import</code> 문만 가지고 있습니다. 그 전에는 두개였지만요.</li>\\n<li><em>보너스</em>: <code class=\\\"language-text\\\">index.js</code> 를 통해 우리는 <a href=\\\"https://en.wikipedia.org/wiki/Single_source_of_truth\\\">유일한 중앙 자료(Single source of truth)</a>를 확보했습니다. 그리고 이를 이용해 외부로 내보내고자 하는 모듈을 조절할 수 있습니다.</li>\\n</ol>\\n<p><img src=\\\"https://cl.ly/0E0A3B44270E/fix-circular-dependency-4.png\\\" alt=\\\"internal module pattern을 도입하고 나서 모듈 로딩 순서\\\"></p>\\n<h2 id=\\\"결론\\\"><a href=\\\"#%EA%B2%B0%EB%A1%A0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>결론</h2>\\n<p>지금까지 제가 최근에 순환 참조 문제를 해결하는 방법을 보셨습니다. 기존에 있는 프로젝트에 적용하시려면 <code class=\\\"language-text\\\">import</code> 문을 고치기 위한 작업이 좀 필요하실 겁니다. 하지만 이 단순하고 직관적인 방법을 적용하고 난 뒤에, 여러분들은 모듈 로딩 순서를 완전히 통제하고 앞으로도 발생할 수 있는 어떠한 순환 참조 문제도 해결할 수 있습니다. 위의 방법을 적용하기 위한 리팩터링 예시를 몇 개 보여드리자면</p>\\n<ul>\\n<li><a href=\\\"https://github.com/mobxjs/mobx/commit/e7f32aa0c2f6295b84270587285ab793b52d8643\\\">MobX</a> (큰 변경점이었으나 직관적이라 별 문제가 안됨)</li>\\n<li><a href=\\\"https://github.com/mobxjs/mobx-state-tree/commit/5ae34850f026cab88da826ee97d4e0a623f25108\\\">MobX-state-tree</a> (파일 마지막의 <code class=\\\"language-text\\\">import</code> 문이 어떻게 제거되었는지 봐 주세요)</li>\\n<li>작은 <a href=\\\"https://github.com/mweststrate/remmi/commit/ea3db28dde500e6a61aae330b7abfcbcd5740efb\\\">개인 프로젝트</a></li>\\n</ul>\\n<p>아직까진 이 패턴을 라이브러리에만 적용해봤고 더 큰 프로젝트에 적용해보진 않았습니다. 하지만 거대한 프로젝트에는 순환 참조 문제가 발생하는 특정 하위 폴더에 패턴을 적용하여 별도의 라이브러리마냥 다룰 수 있을겁니다.</p>\\n<p>이 패턴이 잘 적용된다면 저한테도 알려주세요! 그리고 패턴을 좀 더 쉽게 도입하도록 도와주는 도구가 있다면 소개해주세요(힌트라도 좋습니다) :-)</p>\",\"id\":\"/home/circleci/repo/src/pages/posts/2018-07-21-fix-circular-dependency-kr/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-07-21\",\"path\":\"/posts/fix-circular-dependency-kr\",\"title\":\"[번역] 자바스크립트 & 타입스크립트의 순환 참조를 한방에 해결하는 방법\",\"tags\":[\"Typescript\",\"Javascript\",\"Node.js\"],\"category\":\"Typescript\"}},{\"excerpt\":\"타입스크립트를 사용한지 어느덧 6개월정도 지났습니다. 아직 타입을 잘 활용하고 있다는 생각이 들진 않지만, 리액트 + 타입스크립트로 작업하는데 별다른 어려움 없이 작업에는 더 도움이 되고 있다고 생각합니다. 지난 프로젝트에서도 React + Typescript + Next.js…\",\"html\":\"<p>타입스크립트를 사용한지 어느덧 6개월정도 지났습니다. 아직 타입을 잘 활용하고 있다는 생각이 들진 않지만, 리액트 + 타입스크립트로 작업하는데 별다른 어려움 없이 작업에는 더 도움이 되고 있다고 생각합니다. 지난 프로젝트에서도 React + Typescript + Next.js 를 활용하여 만들었는데 몇 가지 설정 면에서 애먹었던 경우를 제외하면 굉장히 만족스러운 작업을 할 수 있었습니다.</p>\\n<p>일을 할 때 다른 팀원들이 불편하게 느낄 수도 있으면서도 중요한 점이 있었는데, 우리가 서버에서 가져오는 데이터의 타입 정의를 최대한 명확하게 하는 것이었습니다. 문제는 한번 서버에 데이터를 요청하면 내려오는 데이터의 양이 어마어마해서 심한 경우 한번에 JSON 1300줄 이상이 내려온 적도 있었습니다. 여기서 우리가 필요한 정보를 추려내는 작업을 하고, 그 결과값에 대한 타입 정의를 해야 정제된 데이터를 쓰는 컴포넌트들에 정확히 어떤 데이터를 심어주어야 할 지 알 수 있겠지요.</p>\\n<p>다행히 백엔드 서버도 타입스크립트 기반으로 되어있어서, 보내주는 데이터에 대한 인터페이스 정의가 되어있었습니다. 우리는 그 인터페이스를 사용하기 위해 npm 패키지를 설치하고 불러올 수 있어서, 데이터 정제 시 기본이 되는 타입을 일일이 손으로 정제할 필요는 없게 되었습니다. 만약 필요하시다면 <a href=\\\"https://quicktype.io\\\">이런 도구</a>를 한번 살펴보시기 바랍니다.</p>\\n<p>하지만 여기서부터 문제가 시작됩니다. 우리가 정의할 타입은 기존에 주어진 타입에서 일부를 <strong>뽑아내고, 덮어써서 만들어야 할 때가 있습니다</strong>. <code class=\\\"language-text\\\">Pick</code> 이라는 타입이 아주 유용하게 사용되기도 하지만 그것만으론 부족해서 실무에 조금 더 유용하게 활용할 수 있는 서브 타입(헬퍼 타입?)을 만들고 활용했습니다. 이번 글에서 그 일부를 안내해드리고, 괜찮으시다면 사용해보시고 댓글로 여러분들이 사용하는 헬퍼 타입을 공유해주시는 것도 좋겠습니다.</p>\\n<p><strong>본문의 헬퍼 타입은 타입스크립트 2.8 이상에서 사용하셔야 합니다. conditional types는 2.8 이상에서만 동작합니다. (최신버전인 2.9.2 권장)</strong></p>\\n<hr>\\n<h2 id=\\\"diff-omit-타입\\\"><a href=\\\"#diff-omit-%ED%83%80%EC%9E%85\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Diff, Omit 타입</h2>\\n<p>가장 간단한 것 부터 시작해보겠습니다. 2.8 버전에서 conditional types(조건부 타입 정의) 덕분에 위 두 타입을 정의하기 아주 쉬워졌습니다. <a href=\\\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html\\\">공식 문서에 따르면</a> 조건부 타입은 이렇게 동작합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">T extends U ? X : Y</code></pre>\\n      </div>\\n<p>삼항연산자랑 같다고 생각하시면 됩니다. 일단 앞의 조건이 맞다면 <code class=\\\"language-text\\\">X</code> 가 정의되는 타입이고, 그렇지 않다면 <code class=\\\"language-text\\\">Y</code> 가 정의되는 타입입니다.</p>\\n<p>이를 활용하여 두 타입 혹은 객체 사이에서 다른 것을 추릴 때 가장 기본이 되는 <code class=\\\"language-text\\\">Diff</code> 타입을 만들어보겠습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">type</span> Diff<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">U</span><span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">T</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">U</span> <span class=\\\"token operator\\\">?</span> never <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token constant\\\">T</span>\\n\\n<span class=\\\"token comment\\\">// Example</span>\\n<span class=\\\"token keyword\\\">type</span> DiffExample <span class=\\\"token operator\\\">=</span> Diff<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token string\\\">'a'</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'b'</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'c'</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'d'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'a'</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'c'</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'f'</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// 'b' | 'd'</span></code></pre>\\n      </div>\\n<p>위 예제를 보면 바로 이해하실 수 있으리라 생각합니다. 기준이 되는 앞의 타입과 뒤에 정의한 타입 사이에 겹치지 않는 결과물만 정의되었습니다. 아직은 이 <code class=\\\"language-text\\\">Diff</code> 타입만 가지고는 인터페이스를 마음대로 주무를 수 없습니다. 가장 먼저 특정 인터페이스에서 원하지 않는 속성을 제외하는 <code class=\\\"language-text\\\">Omit</code> 타입을 만들어보겠습니다. 그 반대인 <code class=\\\"language-text\\\">Pick</code> 타입은 이미 있으니까요.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">type</span> Omit<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">U</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">keyof</span> <span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span> Pick<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">,</span> Exclude<span class=\\\"token operator\\\">&lt;</span>keyof <span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">U</span><span class=\\\"token operator\\\">>></span>\\n\\n<span class=\\\"token comment\\\">// Example</span>\\n<span class=\\\"token keyword\\\">type</span> OmitExample <span class=\\\"token operator\\\">=</span> Omit<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'string'</span><span class=\\\"token punctuation\\\">,</span>\\n  b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">,</span>\\n  c<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'symbol'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'b'</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'c'</span><span class=\\\"token operator\\\">></span> <span class=\\\"token comment\\\">// { a: 'string' }</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">Exclude</code> 타입도 2.8버전에서 새로 등장한 선탑재(Predefined) 타입입니다. 위에 링크한 공식 문서를 한번 살펴보시면 이해하시는데 많은 도움이 됩니다.</p>\\n<h2 id=\\\"dig-타입\\\"><a href=\\\"#dig-%ED%83%80%EC%9E%85\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Dig 타입</h2>\\n<p><code class=\\\"language-text\\\">Pick</code>  타입은 특정 인터페이스의 원하는 키만 뽑아와서 새 타입을 만들 때 굉장히 유용하지만, 만약에 중첩된 객체 형식으로 있을 때 그 내부를 뽑아 쓰기 힘들 때가 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">const</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    first<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'1'</span><span class=\\\"token punctuation\\\">,</span>\\n    second<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'2'</span><span class=\\\"token punctuation\\\">,</span>\\n    thrid<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'3'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">,</span>\\n  c<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    fourth<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'4'</span><span class=\\\"token punctuation\\\">,</span>\\n    fifth<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'5'</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">type</span> InsideA <span class=\\\"token operator\\\">=</span> Pick<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">typeof</span> obj<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'a'</span><span class=\\\"token operator\\\">></span>\\n<span class=\\\"token comment\\\">/* 결과\\n * a: {\\n *  first: string;\\n *  second: string;\\n *  thrid: string;\\n * };\\n*/</span>\\n\\n<span class=\\\"token comment\\\">/**\\n  * 하지만 내가 원하는건..\\n  * {\\n  *   first: string;\\n  *   second: string;\\n  *   thrid: string;\\n  * }\\n  */</span></code></pre>\\n      </div>\\n<p>지극히 정상적인 동작입니다만, 제가 원하는 결과물은 달랐습니다. 저 위에 <code class=\\\"language-text\\\">a</code> 라는 객체 정의는 필요가 없거든요. 타입스크립트의 타입 정의는 대부분 ‘자바스크립트 객체의 키-값을 어떻게 정의하고 넣어주냐’로 이해하시면 쉽습니다. 그래서 타입을 정의할 때 객체의 값을 뽑아올 때 쓰는 <code class=\\\"language-text\\\">obj[‘key’]</code> 같은 방식의 정의가 잘 작동합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token comment\\\">// 위의 obj에 이어서</span>\\n<span class=\\\"token keyword\\\">type</span> InsideA <span class=\\\"token operator\\\">=</span> Pick<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">typeof</span> obj<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'a'</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token comment\\\">/**\\n  * 결과\\n  * {\\n  *   first: string;\\n  *   second: string;\\n  *   thrid: string;\\n  * }\\n  */</span></code></pre>\\n      </div>\\n<p>이제 원하는 결과가 제대로 나왔습니다. 하지만 저렇게 일일이 <code class=\\\"language-text\\\">[&#39;a&#39;]</code>  라고 붙이는것도 번거롭고 예쁘지가 않으니 하나의 헬퍼 타입으로 정의해보겠습니다. 저는 중첩된 객체를 파낸다는 데 착안해서 Dig라고 정의합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">type</span> Dig<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">U</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">keyof</span> <span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span> Pick<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">U</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token constant\\\">U</span><span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<p>동작 특성상 중첩 객체 탐색용으로 쓰시는걸 권장합니다. 대부분의 경우는 <code class=\\\"language-text\\\">Pick</code> 타입만으로도 충분합니다.</p>\\n<p>(2018/07/11 추가) Facebook에서 장준영님이 지적해 주신 내용인데, <code class=\\\"language-text\\\">Dig</code> 를 굳이 타입으로 정의해서 쓸 필요 없이 제가 원하는 결과를 얻으려면 바로 <code class=\\\"language-text\\\">T[U]</code> 로 타입의 내부를 탐색하면 됩니다. 제가 <code class=\\\"language-text\\\">Pick</code> 을 반드시 활용해야한다는 착각을 하다보니 이렇게 정의하게 되었습니다. 다만 <code class=\\\"language-text\\\">Dig</code> 자체는 다른 용도로 사용할 수 있습니다 :) 지적해주신 장준영님 감사합니다.</p>\\n<h2 id=\\\"overwrite-타입\\\"><a href=\\\"#overwrite-%ED%83%80%EC%9E%85\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Overwrite 타입</h2>\\n<p>주어진 인터페이스를 활용하면서 특정 속성만 새로운 타입으로 덮어씌우고 싶을 땐 어떻게 할까요? <code class=\\\"language-text\\\">extends</code>, <code class=\\\"language-text\\\">&amp;</code> 기호는 제대로 동작하지 않습니다. 인터페이스의 <code class=\\\"language-text\\\">extends</code> 는 애초에 에러가 나며, <code class=\\\"language-text\\\">&amp;</code> 는 예상하지 못한 결과가 나옵니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">type</span> <span class=\\\"token constant\\\">A</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n  b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token constant\\\">B</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">A</span> <span class=\\\"token operator\\\">&amp;</span> <span class=\\\"token punctuation\\\">{</span> b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span> <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> b1<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token constant\\\">B</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'string'</span><span class=\\\"token punctuation\\\">,</span>\\n  b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'string'</span> <span class=\\\"token comment\\\">// Error</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> b2<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token constant\\\">B</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'string'</span><span class=\\\"token punctuation\\\">,</span>\\n  b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">100</span> <span class=\\\"token comment\\\">// Error</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>위의 예시는 <code class=\\\"language-text\\\">b</code> 속성을 <code class=\\\"language-text\\\">&amp;</code> 연산자로 덮어씌워버렸다고 생각했으나 두 조건 모두 충족되지 않는 결과물이 나와버렸습니다. <code class=\\\"language-text\\\">&amp;</code> 연산자를 쓰실 때는 새로운 속성을 덧붙일때만 쓰셔야 한다는 점을 명심하시기 바랍니다.</p>\\n<p>그렇다면 속성을 덮어씌우기 위해 먼저 정의된 타입의 key를 빼 버리고, 우리가 새로 덮어쓸 정의와 합쳐주면 되겠군요. 이 때 앞서 정의한 <code class=\\\"language-text\\\">Diff</code> 타입을 활용하게 됩니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">type</span> Overwrite<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">U</span><span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token constant\\\">P</span> <span class=\\\"token keyword\\\">in</span> Diff<span class=\\\"token operator\\\">&lt;</span>keyof <span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">,</span> keyof <span class=\\\"token constant\\\">U</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token constant\\\">P</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">&amp;</span> <span class=\\\"token constant\\\">U</span>\\n\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token constant\\\">B</span> <span class=\\\"token operator\\\">=</span> Overwrite<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n\\n<span class=\\\"token keyword\\\">const</span> b1<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token constant\\\">B</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'string'</span><span class=\\\"token punctuation\\\">,</span>\\n  b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">100</span> <span class=\\\"token comment\\\">// No Error</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"subtype-타입\\\"><a href=\\\"#subtype-%ED%83%80%EC%9E%85\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>SubType 타입</h2>\\n<p>지금까지 만든 헬퍼 타입은 모두 속성값(혹은 키값)이 중심이 되는 타입 정의였습니다. 이번에는 반대로 <strong>특정 타입을 입력하면 그에 맞는 속성-타입 쌍을 추리는</strong> 헬퍼 타입을 만들어보겠습니다. 만약 아래의 <code class=\\\"language-text\\\">Person</code> 인터페이스에서 <code class=\\\"language-text\\\">string</code> 타입을 가지고 있는 속성만 추릴 땐 어떻게 해야할까요?</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">Person</span> <span class=\\\"token punctuation\\\">{</span>\\n  id<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">;</span>\\n  firstName<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n  lastName<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">load</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> Promise<span class=\\\"token operator\\\">&lt;</span>Person<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// SubType&lt;Person, string>을 써서 원하는 결과</span>\\n<span class=\\\"token keyword\\\">type</span> PersonName <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  firstName<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n  lastName<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>조금 복잡하겠지만 이렇게 됩니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">type</span> SubType<span class=\\\"token operator\\\">&lt;</span>BaseType<span class=\\\"token punctuation\\\">,</span> ConditionType<span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span> Pick<span class=\\\"token operator\\\">&lt;</span>BaseType<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token punctuation\\\">[</span>Key <span class=\\\"token keyword\\\">in</span> keyof BaseType<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> BaseType<span class=\\\"token punctuation\\\">[</span>Key<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">ConditionType</span> <span class=\\\"token operator\\\">?</span> Key <span class=\\\"token punctuation\\\">:</span> never\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">[</span>keyof BaseType<span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">></span></code></pre>\\n      </div>\\n<p>이런 타입은 함수 시그니처도 인식합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">type</span> PersonLoader <span class=\\\"token operator\\\">=</span> SubType<span class=\\\"token operator\\\">&lt;</span>Person<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>_<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">any</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token builtin\\\">any</span><span class=\\\"token operator\\\">></span>\\n<span class=\\\"token comment\\\">/** 결과\\n * {\\n *   load: () => Promise&lt;Person>;\\n * }\\n */</span></code></pre>\\n      </div>\\n<p>만들어지는 과정은 <a href=\\\"https://medium.com/dailyjs/typescript-create-a-condition-based-subset-types-9d902cea5b8c\\\">이 글</a>을 참고해주시기 바랍니다. 조건부 타입 정의에 많은 도움이 됩니다. 이 타입은 <code class=\\\"language-text\\\">null</code> 타입에 대응이 안된다는 문제가 있지만 링크된 글의 댓글을 참고하면 어느정도 유효한 답을 얻을 수 있습니다. 그 답은 각자 필요에 따라 조사해보시기 바랍니다.</p>\\n<hr>\\n<p>본문에 비해 서론이 길긴 했지만 이런 헬퍼 타입들은 필요한 경우가 극히 드물 수 있습니다. 하지만 프로젝트 규모가 커지거나 복잡해질 수록 굉장히 유용하게 사용될 수 있으므로 한번 훑어보시고 기존에 정의해둔 타입에서 중복되는 부분을 줄일 수 있는지 확인해보셔도 좋습니다.</p>\\n<h2 id=\\\"참고자료\\\"><a href=\\\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>참고자료</h2>\\n<ul>\\n<li><a href=\\\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html\\\">TypeScript 2.8 · TypeScript</a></li>\\n<li><a href=\\\"https://levelup.gitconnected.com/advanced-typescript-types-with-examples-1d144e4eda9e\\\">Advanced TypeScript Types with Examples – gitconnected - The Developer Learning Community</a></li>\\n<li><a href=\\\"https://medium.com/dailyjs/typescript-create-a-condition-based-subset-types-9d902cea5b8c\\\">TypeScript: Create a condition-based subset types – DailyJS – Medium</a></li>\\n</ul>\",\"id\":\"/home/circleci/repo/src/pages/posts/2018-07-08-helper-types-in-typescript/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-07-08\",\"path\":\"/posts/helper-types-in-typescript\",\"title\":\"타입스크립트에서 헬퍼 타입을 정의하고 활용하기\",\"tags\":[\"Typescript\"],\"category\":\"Typescript\"}},{\"excerpt\":\"이 포스트는  Nicholas Kariniemi 의  Fear, trust and JavaScript: When types and functional programming fail…\",\"html\":\"<ul>\\n<li>이 포스트는 <a href=\\\"https://twitter.com/nkariniemi\\\">Nicholas Kariniemi</a>의 <a href=\\\"https://www.reaktor.com/blog/fear-trust-and-javascript/\\\">Fear, trust and JavaScript: When types and functional programming fail</a>를 번역한 글입니다</li>\\n<li>번역에 관한 피드백과 내용에 관한 토론은 환영합니다. 댓글로 남겨주세요 :)</li>\\n</ul>\\n<hr>\\n<p><img src=\\\"https://www.reaktor.com/wp-content/uploads/2018/02/reaktor-javascript-reaktor-hero-2800x0-c-default.png\\\"></p>\\n<p>개발자로서 우리는 코드 실패에 대한 두려움을 줄이고 코드가 잘 작동한다는 믿음을 더 높이고 싶을 겁니다. 자바스크립트를 사용하는 많은 개발자는 함수형 프로그래밍 및 강타입(Strongly-typed) 언어에서 유용한 아이디어를 빌려 개발자의 도구와 코드로 신뢰를 얻으면서 두려움을 줄입니다. 선택적 타입과, 함수를 통한 변환 및 불변성과 같은 아이디어는 모두 더 나은 자바스크립트 코드 작성에 도움이 될 수 있습니다. 그러나 이러한 아이디어를 자바스크립트로 가져올 때 상충하는 개념 때문에 제대로 맞물려 작동하지 않으며, 궁극적으로 ‘개발자가 코드와 도구로 (코드가 잘 작동한다는) 믿음을 표현한다’는 목표를 달성하지 못합니다.</p>\\n<p>이 아이디어를 설명하기 위해 자바스크립트에서 데이터를 처리하는 방법을 두 가지 관점에서 살펴보겠습니다. 하나는 데이터의 모양을 이해하는 것이고, 나머지 하나는 데이터를 변경하는 것입니다.</p>\\n<h2 id=\\\"데이터의-형태와-두려움\\\"><a href=\\\"#%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98-%ED%98%95%ED%83%9C%EC%99%80-%EB%91%90%EB%A0%A4%EC%9B%80\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>데이터의 형태와 두려움</h2>\\n<p>자바스크립트같은 동적 언어에서는 데이터가 어떤 모양을 가지고 있는지 알기 어렵습니다. 기본적인 접근 방식은 규약(convention)에 의지하는 겁니다. 다른 개발자나 다른 시스템이 서로 동의한 형식으로 올바른 데이터를 제공하고 코드 내의 특정 규범을 따른다고 믿어야 합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">fetchUser</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>user <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// user를 가져오는데 성공!</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// 그 이후</span>\\n<span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// user는 name이 있을 거야</span></code></pre>\\n      </div>\\n<p>저는 이 방식을 “내가 원하는 것인 척” 하는 접근 방식이라고 말하고 싶습니다. 상호 신뢰가 높은 환경에서는 이 방법이 충분히 유효합니다.</p>\\n<p>하지만 실제로는 여기저기 두려움이 가득 차 있습니다. 코드가 복잡해지면서 여러분은 서로 다른 규칙을 따르는 개발자의 코드와 씨름합니다. 잘못된 형식으로 날아오지만 현재 계층에서는 손댈 수 없는 데이터를 수신하며, 널 포인터(null pointer) 오류가 발생하기 시작합니다. 코드에 대한 신뢰가 깨지고 데이터에 대한 의문을 가질 때 자신감보다는 불안감이 일어나기 시작합니다.</p>\\n<ul>\\n<li>이 데이터가 정말 가지고 있는 값이 뭐지?</li>\\n<li>이 값을 지우면 어디 다른데서 터지지 않을까?</li>\\n<li>이 데이터를 저 함수에다 넘겨도 될까?</li>\\n</ul>\\n<p>위의 두려움을 이런 방식의 코드 베이스에서 발견할 수 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">fetchUser</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>user <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// user를 가져오는데 성공!</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>user <span class=\\\"token operator\\\">||</span> <span class=\\\"token operator\\\">!</span>user<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'뭐 임마'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// 그 이후</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>user <span class=\\\"token operator\\\">&amp;&amp;</span> user<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>'자기 자신의 코드가 더 이상 기대되는 데이터를 적절하게 전달해주지 못한다’며 믿음을 잃을 때 이렇게 방어적인 프로그래밍을 하게 됩니다. 여러분의 아름다운 코드는 방어적인 체크 때문에 어수선해지고, 가독성을 잃으며, 유지보수하기 어려워집니다. 두려움이 커지면서 점점 코드가 제대로 동작하는지 믿기 어려워집니다.</p>\\n<h3 id=\\\"선택적-타입optional-types으로-빡세게-확인하는-척하기\\\"><a href=\\\"#%EC%84%A0%ED%83%9D%EC%A0%81-%ED%83%80%EC%9E%85optional-types%EC%9C%BC%EB%A1%9C-%EB%B9%A1%EC%84%B8%EA%B2%8C-%ED%99%95%EC%9D%B8%ED%95%98%EB%8A%94-%EC%B2%99%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>선택적 타입(Optional types)으로 빡세게 확인하는 척하기</h3>\\n<p>두려움을 사전에 차단하는 방법 중 하나는 <a href=\\\"https://www.typescriptlang.org\\\">Typescript</a>나 <a href=\\\"https://flow.org\\\">Flow</a>의 선택적 타입을 도입하는 겁니다. 사용자를 수신할 때 <code class=\\\"language-text\\\">User</code> 타입을 사전에 선언해두고, 이후에 <code class=\\\"language-text\\\">User</code> 객체로 다루는 방식입니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ts\\\"><code class=\\\"language-ts\\\"><span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">User</span> <span class=\\\"token punctuation\\\">{</span>\\n  id<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span>\\n  name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span>\\n  email<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">fetchUser</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">:</span> User<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// User를 가져오는데 성공!</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// 그 이후</span>\\n<span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 컴파일러가 이 객체는 name 속성이 있다고 보증함</span></code></pre>\\n      </div>\\n<p>이는 정말 ‘빡세게 확인하는 척’ 하는 겁니다. 당신은 코드에 대한 신뢰를 확인하는 부분을 바꿔 놓았습니다. 여전히 다른 시스템이 올바른 모양의 데이터를 제공한다고 믿지만, 코드 안에서 데이터에 부여한 타입을 믿고 해당 데이터를 잘못 사용하면 컴파일러에서 오류가 나게 됩니다. 개발자가 데이터의 모양을 알고 적절하게 사용하는 것을 믿는 대신 개발자가 올바른 타입을 작성하고 관리하리라 믿고, ‘컴파일러가 해당 형식에 대해 거짓말을 하지 않는다’고 믿게 되었습니다. 이 이야기는 나중에 더 하겠습니다.</p>\\n<p>위의 예제에 타입을 추가해도 근본적인 문제는 해결되지 않습니다. 데이터가 일관성있게 사용되도록 보장함으로써 코드의 신뢰도는 향상되었지만 외부로부터 받은 데이터에 대해서는 아무런 말을 하지 않습니다.</p>\\n<h3 id=\\\"유효성-검사-믿지만-검사는-해볼게\\\"><a href=\\\"#%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC-%EB%AF%BF%EC%A7%80%EB%A7%8C-%EA%B2%80%EC%82%AC%EB%8A%94-%ED%95%B4%EB%B3%BC%EA%B2%8C\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>유효성 검사: 믿지만 검사는 해볼게</h3>\\n<p>신뢰도가 낮은 환경에서는 여러 지점에서 데이터의 유효성 검사를 해야 할 수도 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">fetchUser</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>user <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> validationErrors <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">validate</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>validationErrors<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'뭐 임마'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// user를 가져오는데 성공!</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// 그 이후</span>\\n<span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// user는 이름이 있다</span></code></pre>\\n      </div>\\n<p>유효성 검사를 직접 작성할 수도 있지만 임시 방편에다 다루기도 어렵고 오류가 나기도 쉽습니다. 아니면 <a href=\\\"http://json-schema.org\\\">JSON schema</a> 정의를 작성해서 데이터가 스키마에 맞는지 확인하거나, <a href=\\\"https://github.com/epoberezkin/ajv\\\">ajv</a>같은 도구로 유효성 검사를 할 수도 있습니다. 이렇게 하면 임시 방편처럼 보이지도 않고 문서화 등을 할 때 유용하게 쓸 수 있겠지만, 여전히 여러분이 이렇게 직접 스키마를 작성해야 하기 때문에 오류가 날 가능성이 있으며 번거로운 작업이 될 수 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"title\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"User\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"type\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"object\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"properties\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">\\\"id\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token property\\\">\\\"type\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"integer\\\"</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"name\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token property\\\">\\\"type\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"string\\\"</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"age\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token property\\\">\\\"type\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"integer\\\"</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"required\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"id\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h3 id=\\\"선택적-타입--유효성-검사\\\"><a href=\\\"#%EC%84%A0%ED%83%9D%EC%A0%81-%ED%83%80%EC%9E%85--%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>선택적 타입 + 유효성 검사</h3>\\n<p>아니면 타입과 유효성 검사를 함께 사용할 수도 있습니다. 타입을 이용해서 코드 속의 두려움을 걷어내고, 유효성 검사를 통해서 외부로부터 들어오는 데이터를 믿을 수 있게 됩니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ts\\\"><code class=\\\"language-ts\\\"><span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">User</span> <span class=\\\"token punctuation\\\">{</span>\\n  id<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span>\\n  name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span>\\n  email<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">fetchUser</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">:</span> User<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> validationErrors <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">validate</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>validationErrors<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'뭠마 난 널 믿었는데'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// User를 가져오는데 성공!</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// 그 이후</span>\\n<span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 컴파일러가 이 객체는 name 속성이 있다고 보증함</span></code></pre>\\n      </div>\\n<p>선택적 타입과 유효성 검사에 같은 정의를 하는 번거로운 작업을 피하기 위해서 Typescript 와 Flow 컴파일러를 직접 라이브러리로서 사용하거나(역주: 어떻게 하는지 방법은 모르겠습니다), <a href=\\\"https://github.com/pelotom/runtypes\\\">runtypes(TS)</a>, <a href=\\\"https://github.com/seanhess/runtime-types\\\">runtime-types(Flow)</a>, <a href=\\\"https://github.com/YousefED/typescript-json-schema\\\">typescript-json-schema(TS)</a> 같은 별도의 라이브러리를 사용할 수도 있습니다. 몇 개의 장애물을 넘고 나면 여러분의 데이터를 더 믿을 수 있게 됩니다. 하지만 더 깊은 곳에 깔린 문제가 있습니다. 조금 뒤에 살펴보겠습니다.</p>\\n<h2 id=\\\"데이터-변경의-두려움\\\"><a href=\\\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B3%80%EA%B2%BD%EC%9D%98-%EB%91%90%EB%A0%A4%EC%9B%80\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>데이터 변경의 두려움</h2>\\n<p>데이터가 바뀔 때는 어떨까요? 기본적으로 자바스크립트에서 데이터는 아무렇게나(willy-nilly) 바뀔 수 있습니다. 예를 들어 여기 문서를 받는 함수가 있는데 이 함수는 문서의 필드를 적절하게 손보고 새 필드를 삽입합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">formatDocument</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">,</span> source<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">.</span>creationDate<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    doc<span class=\\\"token punctuation\\\">.</span>creationDate <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">convertTimeToUtc</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">.</span>creationDate<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    doc<span class=\\\"token punctuation\\\">.</span>creationDate <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  doc<span class=\\\"token punctuation\\\">.</span>source <span class=\\\"token operator\\\">=</span> source\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>이런 스타일의 코드는 따라가기도 어렵고 곳곳에 두려움이 도사리고 있습니다. 내 데이터가 다른데서 사용된다면? 이미 다른 곳에서 변경되었다면? 이 시점에서 내 데이터가 가지고 있어야 하는 값이 뭐더라? 내가 지금 가지고 있는 데이터와 내가 실제 사용할 때의 데이터가 어떻게 같은 데이터라고 믿을 수 있지? 위의 예는 아주 작은 부분에 불과하지만 높은 동시성이 요구되는 시스템이나 커다란 코드 베이스에서는 훨씬 큰 문제를 야기할 겁니다.</p>\\n<p>선택적 타입을 사용해보지만 별로 도움은 되지 않습니다. Typescript 와 Flow 에서 아래 두 함수는 같은 타입을 가리킵니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">formatDocument</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">:</span> Document<span class=\\\"token punctuation\\\">,</span> source<span class=\\\"token punctuation\\\">:</span> String<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">.</span>creationDate<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    doc<span class=\\\"token punctuation\\\">.</span>creationDate <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">convertTimeToUtc</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">.</span>creationDate<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    doc<span class=\\\"token punctuation\\\">.</span>creationDate <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  doc<span class=\\\"token punctuation\\\">.</span>source <span class=\\\"token operator\\\">=</span> source\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-flow\\\"><code class=\\\"language-flow\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">formatDocument</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">:</span> Document<span class=\\\"token punctuation\\\">,</span> source<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type tag\\\">String</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type tag\\\">void</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">.</span>creationDate<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    doc<span class=\\\"token punctuation\\\">.</span>creationDate <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">convertTimeToUtc</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">.</span>creationDate<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    doc<span class=\\\"token punctuation\\\">.</span>creationDate <span class=\\\"token operator\\\">=</span> <span class=\\\"token type tag\\\">null</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  doc<span class=\\\"token punctuation\\\">.</span>source <span class=\\\"token operator\\\">=</span> source\\n  child_process<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">exec</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"sudo rm -rf /\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token function\\\">launchRocket</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>이 중 하나는 여러분이 원하는 기능을 수행하지만 나머지 하나는 서비스를 불바다로 만들어버릴 겁니다. 타입 시스템을 통해 바라보면 이 함수는 아무것도 안하는 것이나 마찬가지입니다(역주: 리턴 값이 <code class=\\\"language-text\\\">void</code> 라서 그럴까요?).</p>\\n<h3 id=\\\"불변성을-가장한-규약\\\"><a href=\\\"#%EB%B6%88%EB%B3%80%EC%84%B1%EC%9D%84-%EA%B0%80%EC%9E%A5%ED%95%9C-%EA%B7%9C%EC%95%BD\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>불변성을 가장한 규약</h3>\\n<p>이제 여러분은 자바스크립트를 더 잘 다룰 수 있고, 팀 안에서 합의를 이루어서 명시적이고(explicit) 묵시적(implicit)으로 불변성을 가지도록 코드를 작성하기 시작합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">formatDocument</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">,</span> source<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    creationDate<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">sanitizeDate</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">.</span>creationDate<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    source<span class=\\\"token punctuation\\\">:</span> source<span class=\\\"token punctuation\\\">,</span>\\n    text<span class=\\\"token punctuation\\\">:</span> doc<span class=\\\"token punctuation\\\">.</span>text\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// 데이터 변경하지 않기</span>\\n  <span class=\\\"token comment\\\">// 루트 폴더 지우지 않기</span>\\n  <span class=\\\"token comment\\\">// 로켓 쏘지 않기</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">sanitizeDate</span><span class=\\\"token punctuation\\\">(</span>date<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> date <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">convertTimeToUtc</span><span class=\\\"token punctuation\\\">(</span>date<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>점점 <code class=\\\"language-text\\\">var</code> 보단 <code class=\\\"language-text\\\">const</code> 를 선호하며 값을 직접 변경하기 보다 새로운 값을 리턴하도록 만들기 시작합니다. <code class=\\\"language-text\\\">let</code> 은 변경될 수 있는 값을 가리킬 때만 사용하고, 더 짧은 코드를 작성하기 위해 삼항연산자(ternary operator)를 사용하여 <code class=\\\"language-text\\\">if</code> 문을 기능적으로 대체할 수 있다는 사실을 새로이 발견했습니다. <code class=\\\"language-text\\\">map</code>, <code class=\\\"language-text\\\">filter</code>, <code class=\\\"language-text\\\">reduce</code> 나 다른 함수를 사용하여 기존의 데이터를 직접 변경하지 않는 새로운 자료구조를 사용하기도 합니다.</p>\\n<p>규약에 다른 불변성은 편리하고 자연스러운 자바스크립트 코드를 만들어냅니다. 그리고 자바스크립트 에코시스템과도 잘 맞아떨어집니다. 하지만 이 방식은 개발자의 신뢰와 훈련(discipline)에 크게 의존합니다. 여러분은 객체의 직접 변경을 피하고 어디서 변경이 일어나는지 정확히 표현하는 등의 규약을 개발자들이 잘 따른다고 믿어야 합니다. 이쯤 오면 더 강한 규약이 필요하다 생각하게 됩니다.</p>\\n<h3 id=\\\"라이브러리를-사용해서-빡세게-강제하는-척-하기\\\"><a href=\\\"#%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%84%9C-%EB%B9%A1%EC%84%B8%EA%B2%8C-%EA%B0%95%EC%A0%9C%ED%95%98%EB%8A%94-%EC%B2%99-%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>라이브러리를 사용해서 빡세게 강제하는 척 하기</h3>\\n<p>여러분은 데이터 변경이나 불변 자료구조를 위해 라이브러리를 도입해서 오롯이 개발자만 믿어야 하는 부분 일부를 도구 사용에 대한 믿음으로 옮겨올 수 있습니다. 광범위하게 <a href=\\\"http://ramdajs.com\\\">Ramda</a>같은 ‘함수형 올인원 팩’ 같은 라이브러리를 도입할 수도 있고 <a href=\\\"https://github.com/calmm-js/partial.lenses\\\">partial.lenses</a>, <a href=\\\"https://github.com/gcanti/monocle-ts\\\">monocle-ts</a> 같은 렌즈 라이브러리를 도입할 수도 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> <span class=\\\"token constant\\\">R</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'ramda'</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">formatDocument</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">,</span> source<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> creationDate <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">sanitizeDate</span><span class=\\\"token punctuation\\\">(</span>creationDate<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token comment\\\">// 새 데이터를 만들어 반환한다</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token constant\\\">R</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">merge</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> creationDate<span class=\\\"token punctuation\\\">,</span> source <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>이런 종류의 라이브러리의 기본 개념 중 하나는 사용하는 데이터를 마치 불변 데이터인 것 처럼 다룬다는 겁니다. 실제로는 그렇지 않은데도요. <a href=\\\"http://ramdajs.com/docs/#assoc\\\">Ramda 는 얕은 복사(shallow clone)만 합니다.</a> 하지만 불변 데이터에 대한 규약이 충분히 강력하다면 모두들 ‘불변 데이터인 척’ 다루게 됩니다. 약간 퍼포먼스 손해를 보긴 하겠지만 일정 수준의 코드 신뢰도는 얻었습니다. 라이브러리를 광범위하게 사용하고 규약이 잘 잡혀있으면 최상의 효과를 발휘하겠지요.</p>\\n<p>진정한 불변성을 강제하고 데이터 변경 시 퍼포먼스 손해를 최소화하려면 <a href=\\\"https://github.com/facebook/immutable-js\\\">Immutable.js</a>, <a href=\\\"https://github.com/rtfeldman/seamless-immutable\\\">seamless-immutable</a>, <a href=\\\"http://swannodette.github.io/mori/\\\">Mori</a> 같은 불변 자료구조를 활용할 수도 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> <span class=\\\"token constant\\\">I</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'immutablejs'</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">formatDocument</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">,</span> source<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> creationDate <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">sanitizeDate</span><span class=\\\"token punctuation\\\">(</span>creationDate<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token comment\\\">// doc은 직접 수정할 수 없다</span>\\n  <span class=\\\"token keyword\\\">return</span> doc<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">merge</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> creationDate<span class=\\\"token punctuation\\\">,</span> source <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>이렇게 하면 데이터를 직접 변경할 수 없게 되며 외부로 드러난 인터페이스로만 변경할 수 있게 됩니다. 하지만 라이브러리에서 제공하는 특정 자료구조에서만 적용되는 데이터에만 한정됩니다. 대부분의 자바스크립트 코드는 기본적인 자바스크립트 자료구조에 의존하기 때문에, 결국에는 이리저리 데이터를 변환하게 되고(역주: ImmutableJS 의 <code class=\\\"language-text\\\">toJS</code> 를 떠올려보세요) 기본적인 자료구조를 사용할 때마다 기껏 확보한 믿음을 잃어버리게 됩니다.</p>\\n<p>규약을 거는 것과 불변 자료구조를 강제하는 방법 모두 한계가 있지만, 제일 큰 문제는 선택적 타입 시스템과 잘 맞지 않는다는 겁니다.</p>\\n<h2 id=\\\"자바스크립트를-믿기\\\"><a href=\\\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A5%BC-%EB%AF%BF%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>자바스크립트를 믿기</h2>\\n<p>앞서 소개한 예시들은 선택적 타입, 함수를 통한 변형, 불변 데이터 등 더 효과적인 자바스크립트를 작성하기 위한 도구를 꺼내 본 것입니다. 하지만 자바스크립트를 쓰면서 이런 도구들을 도입 할 때 여러가지 한계점이 있으며, 같이 사용하기도 어렵습니다.</p>\\n<h3 id=\\\"선택적-타입은-잘못된-보안-의식을-제공한다\\\"><a href=\\\"#%EC%84%A0%ED%83%9D%EC%A0%81-%ED%83%80%EC%9E%85%EC%9D%80-%EC%9E%98%EB%AA%BB%EB%90%9C-%EB%B3%B4%EC%95%88-%EC%9D%98%EC%8B%9D%EC%9D%84-%EC%A0%9C%EA%B3%B5%ED%95%9C%EB%8B%A4\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>선택적 타입은 잘못된 보안 의식을 제공한다</h3>\\n<p>선택적 타입은 말 그대로 자바스크립트에 선택적으로 도입할 수 있도록 설계되었습니다. 말인즉슨 모든 요소가 타입으로 정의된게 아니기 때문에 모두 유효한 타입을 가지고 있다고 믿는게 불가능합니다. Flow 는 타입이 불분명하며(unsound) Typescript 는 <a href=\\\"https://www.typescriptlang.org/docs/handbook/type-compatibility.html\\\">의도적으로 불분명하게(deliberately unsound)</a> 사용할 수 있습니다. 불분명하다는 의미는 여러 상황에서 타입이 타입이 맞지 않는데도 컴파일러가 알아채지 못하는 것을 뜻합니다.</p>\\n<p>자바스크립트에서 선택적 타입을 사용 할 때 다른 이유로 맞지 않는 경우도 있습니다. 자바스크립트로 작성된 것들 중 일부는 Typescript 나 Flow 로 타입을 정의하기 어렵거나 심지어 불가능하기도 합니다.</p>\\n<ul>\\n<li>\\n<p>고차 함수들</p>\\n<ul>\\n<li>Ramda 의 <a href=\\\"http://ramdajs.com/docs/#call\\\"><code class=\\\"language-text\\\">call</code></a>, <a href=\\\"http://ramdajs.com/docs/#compose\\\"><code class=\\\"language-text\\\">compose</code></a>, <a href=\\\"http://ramdajs.com/docs/#chain\\\"><code class=\\\"language-text\\\">chain</code></a>, <a href=\\\"http://ramdajs.com/docs/#lift\\\"><code class=\\\"language-text\\\">lift</code></a>, <a href=\\\"http://ramdajs.com/docs/#lens\\\"><code class=\\\"language-text\\\">lense</code></a> 계열 함수들</li>\\n<li>partial.lenses 의 <a href=\\\"https://github.com/calmm-js/partial.lenses/issues/55\\\">함수들</a></li>\\n</ul>\\n</li>\\n<li>\\n<p>동적 함수들</p>\\n<ul>\\n<li>Ramda 의 <a href=\\\"http://ramdajs.com/docs/#invert\\\"><code class=\\\"language-text\\\">invert</code></a>, <a href=\\\"http://ramdajs.com/docs/#dissoc\\\"><code class=\\\"language-text\\\">dissoc</code></a>, <a href=\\\"http://ramdajs.com/docs/#mergeWith\\\"><code class=\\\"language-text\\\">mergeWith</code></a></li>\\n<li>ImmutableJS 의 <a href=\\\"https://github.com/facebook/immutable-js/blob/master/type-definitions/Immutable.d.ts\\\">거의 대부분의 함수</a></li>\\n</ul>\\n</li>\\n<li>\\n<p>몽키패칭</p>\\n<ul>\\n<li>AWS SDK 클라이언트의 <a href=\\\"https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/using-promises.html#w2ab1c17c15c14c17\\\">Promise</a></li>\\n<li>Bluebird 의 <a href=\\\"http://bluebirdjs.com/docs/api/promisification.html\\\">프로미스화 API 들</a></li>\\n</ul>\\n</li>\\n<li>\\n<p>아주 동적인 자료구조</p>\\n<ul>\\n<li>ElasticSearch <a href=\\\"https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-get\\\">스키마</a></li>\\n<li>winston <a href=\\\"https://github.com/winstonjs/winston#creating-your-own-logger\\\">커스텀 로거</a></li>\\n</ul>\\n</li>\\n</ul>\\n<p>위의 것들을 Typescript 나 Flow 로 타입을 매기려면 여러분들은 아래 요소들 중 한개 이상은 희생해야 합니다.</p>\\n<ol>\\n<li><strong>타입을 쓰는 이유인 ‘타입 안정성’ 을 희생한다:</strong> <code class=\\\"language-text\\\">any</code> 타입을 매겨서 모든 값을 허용하고 타입 체커가 <code class=\\\"language-text\\\">any</code> 가 들어가는 경로에 있는 값을 확인하지 않게 만듭니다.</li>\\n<li><strong>재사용성을 희생한다:</strong> 더 특정하고 정확한 타입을 제공하는 대신 함수의 재사용성을 낮춥니다.</li>\\n<li><strong>다른 개발자의 시간을 희생한다:</strong> 함수를 사용하는 사람들에게 정확한 타입을 제공하도록 만듭니다. 예를 들자면 이렇게요.</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token constant\\\">R</span><span class=\\\"token punctuation\\\">.</span>pipe<span class=\\\"token operator\\\">&lt;</span>User<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>선택지에 따라 라이브러리를 추가할 때 들쭉날쭉한 정확도를 가진 타입 정의도 함께 추가하게 됩니다. 이 때 라이브러리의 개발자를 향한 믿음 일부를 라이브러리의 ‘타입 정의’를 한 개발자에 대한 믿음으로 옮겨가게 됩니다. 대부분 이런 라이브러리는 <code class=\\\"language-text\\\">any</code> 타입 정의를 포함하고 있고, 이렇게 정의 된 함수를 호출하면 자기도 모르는 새 맞지 않는 타입을 믿는다고 말하는 것이나 다름없습니다. 게다가 Flow 는 <code class=\\\"language-text\\\">@flow</code> 어노테이션이 들어있지 않은 파일을 조용히 무시합니다.</p>\\n<p>암시적이고 명시적으로 <code class=\\\"language-text\\\">any</code> 타입을 허용하지 않도록 하면서, 타입 정의를 광범위하게 적용하고 타입 정의가 없는 파일은 린터가 오류를 뿜어내도록 설정하여 타입 신뢰성 문제를 해결할 수도 있습니다.</p>\\n<p>하지만 이는 물이 새는 배의 구멍을 막는 것이나 마찬가지입니다. 진짜 문제는 여러분이 구축한 시스템의 타입 시스템을 믿지 못하는 것이 아니라 <strong>타입 시스템을 믿을 수 있다고 생각하는 겁니다.</strong> 타입에 기대어 뭔가 변화가 일어날 때 어디가 잘못되었는지 알려주도록 만들어보려 하지만, <code class=\\\"language-text\\\">any</code> 타입 때문에 조용히 지나가거나, 라이브러리 사용 방법 혹은 타입의 정확성 문제 때문에 제대로 이루어지지 못합니다. 자바스크립트에 타입을 적용하는 것은 다른 언어에 적용되어있는 타입과는 다릅니다. 똑같은 수준의 신뢰를 기대할 수 없다는 뜻입니다.</p>\\n<p><img src=\\\"https://www.reaktor.com/wp-content/uploads/2018/01/types_and_js2-768x883.png\\\"></p>\\n<p>궁극적으로 여러분이 정의한 타입의 강점은 타입을 적용하는 팀의 지식 수준과 신념에 달려 있습니다. 팀이 타입에 대해 높은 수준의 믿음과 지식을 보유하고 있다면, 시스템에 대해 높은 신뢰를 이끌어낼 수 있습니다. 그러나 일정 수준의 신뢰도를 유지하기 위한 팀의 관심과 규율에 의존해야 하며, 두려움은 여러 가지 형태로 그 믿음을 망칠 수 있습니다.</p>\\n<h3 id=\\\"함수형-프로그래밍-타입-자바스크립트---이-중-두개를-고르세요\\\"><a href=\\\"#%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%ED%83%80%EC%9E%85-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8---%EC%9D%B4-%EC%A4%91-%EB%91%90%EA%B0%9C%EB%A5%BC-%EA%B3%A0%EB%A5%B4%EC%84%B8%EC%9A%94\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>함수형 프로그래밍, 타입, 자바스크립트 - 이 중 두개를 고르세요</h3>\\n<p>선택적 타입과 <code class=\\\"language-text\\\">map</code>, <code class=\\\"language-text\\\">filter</code>, <code class=\\\"language-text\\\">reduce</code> 를 활용한 기본적인 함수형 프로그래밍은 자바스크립트와 잘 작동합니다. 하지만 더 깊이 들어가려 하면 문제에 봉착하게 됩니다. 두 가지 예를 보여드리죠.</p>\\n<p><a href=\\\"https://github.com/facebook/immutable-js\\\">ImmutableJS</a>는 자바스크립트를 위한 영속적인 불변 자료구조 라이브러리입니다. 이 라이브러리는 내부 데이터 수정에 의존하지 않는 공용 자료구조를 제공합니다. <a href=\\\"https://github.com/facebook/immutable-js/blob/master/type-definitions/Immutable.d.ts\\\">Typescript</a>와 <a href=\\\"https://github.com/facebook/immutable-js/blob/master/type-definitions/immutable.js.flow\\\">Flow</a>를 위한 타입 정의도 포함되어 있습니다만 한번 살펴보시면 타입 체킹을 무효화하는 <code class=\\\"language-text\\\">any</code> 타입이 한가득 들어있습니다. 게다가 어떤 타입은 사용자가 정확한 타입을 제공하도록 책임을 떠넘기기도 합니다. 결과적으로 라이브러리를 사용할 때마다 타입을 도입하지 않을 수도 있고 타입을 도입하기 위해 추가적인 노력을 들일 수도 있습니다. 그러다보면 함수형 프로그래밍을 도입하기 어려워집니다.</p>\\n<p>Ramda 는 자바스크립트를 위한 함수형 유틸리티 라이브러리입니다. 타입 정의는 <a href=\\\"https://github.com/types/npm-ramda#status\\\">여기</a>에서 보실 수 있는데, 아래의 코멘트와 함께 제공됩니다. (중요한 부분은 강조했습니다)</p>\\n<blockquote>\\n<p>유의사항: Ramda 의 많은 함수들은 주로 부분 함수(partial application), 커링(currying), 조합(composition)을 중심으로 하는 문제들 때문에 정확한 타입을 제공하기 어렵습니다. 특히 제네릭이 있을 때 그렇습니다. <strong>그리고 네, 아마 여러분들이 Ramda 를 처음 사용하고자 했던 이유는 이런 기능을 사용하기 위해서겠지요.</strong> 특히 타입스크립트로 Ramda 의 타입을 적용하고자 할 때 문제가 됩니다. TS 에 관련 된 몇가지 이슈는 아래의 링크에서 확인하실 수 있습니다(역주: 링크가 실제 원하는 곳으로 연결되지 않아서 배제했습니다)</p>\\n</blockquote>\\n<p><a href=\\\"https://github.com/gcanti\\\">Giulio Canti</a>같은 분의 엄청난 작업에도 불구하고, 매번 조금이라도 불변 자료구조나 함수 합성, 커링같은 고급 함수형 프로그래밍 기법을 도입하려고 하면 타입 체커를 비활성화하거나 타입이 제대로 동작하도록 만들기 위해 추가로 노력을 들여야 합니다. 여전히 함수형 프로그래밍을 도입하기 어렵게 만드는 요소입니다.</p>\\n<h3 id=\\\"왜-우리는-자바스크립트로-고급진-개념을-사용할-수-없는가\\\"><a href=\\\"#%EC%99%9C-%EC%9A%B0%EB%A6%AC%EB%8A%94-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A1%9C-%EA%B3%A0%EA%B8%89%EC%A7%84-%EA%B0%9C%EB%85%90%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%97%86%EB%8A%94%EA%B0%80\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>왜 우리는 자바스크립트로 고급진 개념을 사용할 수 없는가</h3>\\n<p>불변성은 코드에 골고루 사용될 때 가장 유용합니다. 하지만 자바스크립트라는 언어와 에코시스템 자체가 데이터를 변경하도록 설계되어있고, <a href=\\\"http://tagide.com/blog/research/constraints/\\\">라이브러리 수준에서 불변성을 강제할 수 없습니다.</a> 또한 선택적 타입을 도입한다 한들 라이브러리로 불변성을 다룰 때 표현력이 떨어집니다.</p>\\n<p>타입도 마찬가지로 골고루 사용될 때 최고의 효과를 발휘합니다. 하지만 자바스크립트에 타입을 사용하는 것은 어디까지나 선택적으로 사용할 수 있도록 설계되었으며, 자바스크립트와의 호환성을 유지하기 위해 극단적인 절충안(역주: <code class=\\\"language-text\\\">any</code> 타입 같은 것?)을 취하여 표현력과 유용성을 제한하였습니다.</p>\\n<p>타입, 불변성, 그리고 함수형 프로그래밍은 다른 언어에서도 사용되는 것 처럼 서로를 뒷받침할 수 있습니다. 기반 자료구조가 가변적이거나 런타임에는 (타입이) 존재하지 않더라도 타입이 불변성을 강제하는데 사용될 수 있습니다. 타입은 다른 개발자들이 렌즈를 사용하여 함수 합성을 하거나 데이터를 변형할 때 함수들을 제대로 연결하도록 도울 수 있습니다. 함수를 사용한 변형은 타입과 함께 사용할 때 이해하고 유지보수하기 쉬운데다 기반 자료구조가 불변성을 가지고 있는지 알 수 있을 때 더욱 유용합니다.</p>\\n<h2 id=\\\"두려움을-가지고-코드를-작성하는-법-배우기\\\"><a href=\\\"#%EB%91%90%EB%A0%A4%EC%9B%80%EC%9D%84-%EA%B0%80%EC%A7%80%EA%B3%A0-%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%98%EB%8A%94-%EB%B2%95-%EB%B0%B0%EC%9A%B0%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>두려움을 가지고 코드를 작성하는 법 배우기</h2>\\n<p>그렇다면 어떻게 두려움을 가지고 코드를 작성하는 법을 배울 수 있을까요? 더 나은 자바스크립트 코드를 작성하는 겁니다. 여러분 자신의 코드를 거의 믿을 수 없다는 기본 가정에서 시작하여 함수형 자바스크립트를 작성하고 언어 자체의 나쁜 부분을 피하는 수 많은 기술을 배울 수 있습니다. 필요한 부분에는 타입 유효성 검사를 사용하고 꼭 필요한 경우거나 규약으로 명확히 강제할 때 불변 데이터를 사용합니다. 합당한 이유가 있을 때 선택적 타입을 도입하되, 함수형으로 데이터를 다루거나 불변 데이터를 사용하는 것이 더 나은 이득을 제공한다고 판단되면 타입 사용을 포기합니다. 함수 합성이나 렌즈를 사용하기 위해 의도적으로 타입 체킹을 비활성화 할 수 있습니다.</p>\\n<p>아니면 아예 <a href=\\\"http://www.purescript.org/\\\">PureScript</a>, <a href=\\\"https://bucklescript.github.io/\\\">ReasonML</a>, <a href=\\\"http://elm-lang.org/\\\">Elm</a>, <a href=\\\"https://clojurescript.org/\\\">ClojureScript</a> 등을 사용하여 다른 물에서 노는 방법이 있습니다. 이 언어들은 오늘날 실존하며 실제 프로덕션 앱이 동작하고 있습니다. 필요하다면 자바스크립트 에코시스템과 함께 동작할 수 있습니다. 불변성, 함수형 프로그래밍, 타입(해당되는 경우)이 기본적으로 잘 작동하고, 이 요소들이 함께 작동하는 환경에서 보다 높은 수준의 신뢰를 제공합니다.</p>\\n<p>이런 언어들 중 하나를 선택한다고 모든 문제를 해결할 수는 없습니다. 각자의 언어는 또 문제를 가지고 있습니다. 하지만 기본적으로 자바스크립트에 비해 더 높은 신뢰성이 있으며 필요에 따라 그 신뢰 수준을 끌어올리거나 낮추는 더 나은 도구를 제공합니다. 다음 포스트에서 PureScript 를 활용하여 이런 아이디어가 어떻게 적용되는지 이야기해보겠습니다.</p>\\n<p><strong><em>하지만 자바스크립트를 쓰는 한, 두려움은 언제나 여러분과 함께합니다</em>.</strong></p>\",\"id\":\"/home/circleci/repo/src/pages/posts/2018-03-04-fear-trust-and-javascript-kr/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-03-04\",\"path\":\"/posts/fear-trust-and-javascript-kr\",\"title\":\"[번역] 두려움, 믿음, 그리고 자바스크립트 - 언제 타입 시스템과 함수형 프로그래밍이 먹히지 않는가\",\"tags\":[\"Functional Programming\",\"Javascript\",\"Typescript\",\"Translation\"],\"category\":\"Javascript\"}},{\"excerpt\":\"다음 프로젝트에서 본격적으로 타입스크립트를 사용한 리액트 애플리케이션을 도입하고자 하는데, CSS를 입히기 위한 도구로  TypeStyle 을 활용하는 방안을 검토중이다. 그래서  egghead의 강좌 를 가볍게 따라가며 내용을 정리해보았다. 이 정도면 충분히 도입할 만한 가치가 있어 보인다. 적어도 스타일 속성 이름으로 오타가 날 일은 없어 보이며 JS…\",\"html\":\"<p>다음 프로젝트에서 본격적으로 타입스크립트를 사용한 리액트 애플리케이션을 도입하고자 하는데, CSS를 입히기 위한 도구로 <a href=\\\"https://typestyle.github.io\\\">TypeStyle</a>을 활용하는 방안을 검토중이다.</p>\\n<p>그래서 <a href=\\\"https://egghead.io/courses/maintainable-css-using-typestyle\\\">egghead의 강좌</a>를 가볍게 따라가며 내용을 정리해보았다. 이 정도면 충분히 도입할 만한 가치가 있어 보인다.</p>\\n<p>적어도 스타일 속성 이름으로 오타가 날 일은 없어 보이며 JS를 적극적으로 활용하여 동적인 스타일을 입힐 수 있으리라 기대한다.</p>\\n<p>참고로 아래의 예제 코드는 모두 리액트 애플리케이션을 개발한다는 전제하에 소개하고 있다. 하지만 TypeStyle 자체는 어느 환경에서나 사용 가능하다.</p>\\n<h2 id=\\\"기본-사용법\\\"><a href=\\\"#%EA%B8%B0%EB%B3%B8-%EC%82%AC%EC%9A%A9%EB%B2%95\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>기본 사용법</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> ReactDOM <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span><span class=\\\"token punctuation\\\">,</span>\\n  position<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'relative'</span> \\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>className<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n    Hello TypeStyle<span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">style</code> 함수로 생성된 내용이 스타일이 적용된 임의의 클래스 이름을 만들게 되고 DOM은 바로 클래스 이름을 사용하면 되도록 구성되어 있다.</p>\\n<p>이 과정에서 객체 형식으로 되어있는 key-value 값은 이미 라이브러리에 CSS 스펙에 맞게 정의되어 있기 때문에 오타가 날 시 컴파일러가 친절하게 에러를 잡아준다.</p>\\n<h2 id=\\\"스타일-믹스인\\\"><a href=\\\"#%EC%8A%A4%ED%83%80%EC%9D%BC-%EB%AF%B9%EC%8A%A4%EC%9D%B8\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>스타일 믹스인</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token comment\\\">// 위 코드와 동일한 DOM 랜더링</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fontSize</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> valueStr <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">typeof</span> value <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'string'</span>\\n    <span class=\\\"token operator\\\">?</span> value\\n    <span class=\\\"token punctuation\\\">:</span> value <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'px'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    fontSize<span class=\\\"token punctuation\\\">:</span> valueStr\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> fontColor <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">fontSize</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'3em'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  fontColor\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span></code></pre>\\n      </div>\\n<p>위의 코드 처럼 <code class=\\\"language-text\\\">style</code> 함수는 객체를 믹스인 할 수 있다. 프로퍼티가 맞는 순수 객체가 들어가면 아무 없이 작동하기 때문에 위의 <code class=\\\"language-text\\\">fontSize</code> 함수처럼 상황에 맞게 적절한 객체를 리턴하는 함수를 만들어서 다양한 상황에 맞게 사용할 수 있다.</p>\\n<h2 id=\\\"미디어-쿼리\\\"><a href=\\\"#%EB%AF%B8%EB%94%94%EC%96%B4-%EC%BF%BC%EB%A6%AC\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>미디어 쿼리</h2>\\n<p><code class=\\\"language-text\\\">media</code> 함수로 간단히 미디어 쿼리를 생성할 수 있다. 생성된 쿼리를 <code class=\\\"language-text\\\">style</code> 함수 안에 넣으면 자동으로 Nested 쿼리 형식으로 생성된다. 수동으로 Nested 쿼리를 입력하고자 할 때는 <code class=\\\"language-text\\\">style</code> 함수 안에 넣는 객체에 <code class=\\\"language-text\\\">$nest</code> 속성을 사용하면 된다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style<span class=\\\"token punctuation\\\">,</span> media <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span> \\n    color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span><span class=\\\"token punctuation\\\">,</span>\\n    transition<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'font-size .2s'</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">media</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> minWidth<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">500</span><span class=\\\"token punctuation\\\">,</span> maxWidth<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">700</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'30px'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">media</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> minWidth<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">701</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'50px'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span></code></pre>\\n      </div>\\n<h2 id=\\\"수도-클래스pseudo-class-작성\\\"><a href=\\\"#%EC%88%98%EB%8F%84-%ED%81%B4%EB%9E%98%EC%8A%A4pseudo-class-%EC%9E%91%EC%84%B1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>수도 클래스(pseudo class) 작성</h2>\\n<p>Sass, Less와 유사한 형태로 계층 화된 쿼리를 작성할 수 있다. 위에서 언급한 <code class=\\\"language-text\\\">$nest</code> 속성을 선택하면 해당 클래스의 계층 쿼리를 작성할 수 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span> \\n    color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span><span class=\\\"token punctuation\\\">,</span>\\n    transition<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'font-size .2s'</span><span class=\\\"token punctuation\\\">,</span>\\n    $nest<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token string\\\">'&amp;:focus'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// .class:focus</span>\\n        fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'30px'</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token string\\\">'&amp;&amp;:hover'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// .class.class:focus</span>\\n        fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'50px'</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span></code></pre>\\n      </div>\\n<h2 id=\\\"css-클래스-조합하기\\\"><a href=\\\"#css-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%A1%B0%ED%95%A9%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>CSS 클래스 조합하기</h2>\\n<p>클래스를 조합하는건 <code class=\\\"language-text\\\">style</code> 함수로 만들어진 클래스들을 분기에 따라 추가하고 제거하도록 만들면 된다. 다만 이 과정에서 있는 경우와 없는 경우에 따라 문자열을 조합하는게 번거로울 수 있는데, <code class=\\\"language-text\\\">classes</code> 함수가 귀찮은 부분을 쉽게 해결하도록 도와준다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">const</span> baseClassName <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span> color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'#333'</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> errorClassName <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span> backgroundColor<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">AppProps</span> <span class=\\\"token punctuation\\\">{</span>\\n  className<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n  hasError<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">boolean</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">App</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> className<span class=\\\"token punctuation\\\">,</span> hasError <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">:</span> AppProps<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">classes</span><span class=\\\"token punctuation\\\">(</span>\\n      baseClassName<span class=\\\"token punctuation\\\">,</span>\\n      className<span class=\\\"token punctuation\\\">,</span>\\n      hasError <span class=\\\"token operator\\\">&amp;&amp;</span> errorClassName\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n    Hello world\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// ...</span></code></pre>\\n      </div>\\n<h2 id=\\\"keyframes-함수로-애니메이션-만들기\\\"><a href=\\\"#keyframes-%ED%95%A8%EC%88%98%EB%A1%9C-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98-%EB%A7%8C%EB%93%A4%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Keyframes 함수로 애니메이션 만들기</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style<span class=\\\"token punctuation\\\">,</span> keyframes <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> colorAnimationName <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">keyframes</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token string\\\">'0%'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'black'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token string\\\">'50%'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'blue'</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'20px'</span><span class=\\\"token punctuation\\\">,</span>\\n    animationName<span class=\\\"token punctuation\\\">:</span> colorAnimationName<span class=\\\"token punctuation\\\">,</span>\\n    animationDuration<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'1s'</span><span class=\\\"token punctuation\\\">,</span>\\n    animationIterationCount<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'infinite'</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">colorAnimationName</code> 을 일일이 변수로 분리 할 필요는 없다. 한번만 사용할거면 <code class=\\\"language-text\\\">animationName</code> 속성에 바로 <code class=\\\"language-text\\\">keyframes</code> 를 사용한 객체를 리턴하도록 만들면 된다.</p>\\n<h2 id=\\\"일반-css를-사용하기\\\"><a href=\\\"#%EC%9D%BC%EB%B0%98-css%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>일반 CSS를 사용하기</h2>\\n<p><code class=\\\"language-text\\\">cssRaw</code> 함수를 사용하고 그 안에 일반 CSS를 문자열로 집어넣으면 그대로 글로벌 스타일로 변환된다. 그리고 그 파일안에 있는 컴포넌트에 전부 영향을 준다. 특정 이름을 가진 클래스를 만들고, 간단하게 기존 스타일을 마이그레이션 하거나 NormalizeCSS 등을 바로 가져올 때도 유용하게 사용할 수 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style<span class=\\\"token punctuation\\\">,</span> cssRaw <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">cssRaw</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n.red {\\n  color: red;\\n}\\n`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">cssRaw</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n.bold {\\n  font-weight: bold;\\n}\\n`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span> fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'30px'</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>className <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">' red bold'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span> <span class=\\\"token comment\\\">// red, bold 클래스 사용 가능</span>\\n    Hello world\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h2 id=\\\"구형-브라우저용-속성-사용하기\\\"><a href=\\\"#%EA%B5%AC%ED%98%95-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%9A%A9-%EC%86%8D%EC%84%B1-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>구형 브라우저용 속성 사용하기</h2>\\n<p><code class=\\\"language-text\\\">rgba</code> 같은 구형 브라우저에서 지원되지 않는 속성을 사용하면서 구형 브라우저를 지원하는 용도로 <code class=\\\"language-text\\\">rgb</code> 를 사용하는 경우, CSS 파일에서는 보통 같은 속성을 두번 작성해서 문제를 해결할 수 있다. 하지만 TypeStyle은 객체를 파싱하기 때문에 같은 속성 값을 두번 선언할 수는 없다.</p>\\n<p>하지만 배열을 사용하면 한 속성에 배열의 요소를 순차적으로 따라 스타일을 적용하도록 만들 수 있으며, 비슷한 원리를 vendor prefix에도 적용할 수 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style<span class=\\\"token punctuation\\\">,</span> types <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> scroll<span class=\\\"token punctuation\\\">:</span> types<span class=\\\"token punctuation\\\">.</span>NestedCSSProperties <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token string\\\">'-webkit-overflow-scrolling'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'touch'</span><span class=\\\"token punctuation\\\">,</span>\\n  overflow<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'auto'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span>\\n  scroll<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'30px'</span><span class=\\\"token punctuation\\\">,</span>\\n    backgroundColor<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token string\\\">'rgb(200, 54, 54)'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 구형 브라우저용</span>\\n      <span class=\\\"token string\\\">'rgba(200, 54, 54, 0.5)'</span> <span class=\\\"token comment\\\">// 요즘 브라우저용</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span></code></pre>\\n      </div>\\n<h2 id=\\\"정적-페이지-만들어보기\\\"><a href=\\\"#%EC%A0%95%EC%A0%81-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EA%B8%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>정적 페이지 만들어보기</h2>\\n<p><code class=\\\"language-text\\\">getStyles</code> 함수는 현재 작성된 파일 안에 정의된 TypeStyle 스타일을 문자열로 변환하는 기능을 한다. 이를 이용해서 간단한 HTML 페이지를 만들 수 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token comment\\\">// app.tsx</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> fs <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> ReactDOMServer <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-dom/server'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> style<span class=\\\"token punctuation\\\">,</span> getStyles <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'typestyle'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">style</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span><span class=\\\"token punctuation\\\">,</span>\\n  fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'30px'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">App</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>className<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n    Hello World\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> html <span class=\\\"token operator\\\">=</span> ReactDOMServer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">renderToStaticMarkup</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&lt;</span>App <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> css <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getStyles</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">renderPage</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> html<span class=\\\"token punctuation\\\">,</span> css <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> html<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span> css<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n&lt;html>\\n  &lt;head>\\n    &lt;style></span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>css<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">&lt;/style>\\n  &lt;/head>\\n  &lt;body>\\n    </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>html<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\n  &lt;/body>\\n&lt;/html>\\n`</span></span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> renderedPage <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">renderPage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> html<span class=\\\"token punctuation\\\">,</span> css <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nfs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeFileSync</span><span class=\\\"token punctuation\\\">(</span>__dirname <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'/index.html'</span><span class=\\\"token punctuation\\\">,</span> renderedPage<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\"><span class=\\\"token comment\\\">&lt;!-- 결과물 --></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>html</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>style</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token style language-css\\\"><span class=\\\"token selector\\\">.fyuerk</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span>red<span class=\\\"token punctuation\\\">;</span><span class=\\\"token property\\\">font-size</span><span class=\\\"token punctuation\\\">:</span>30px<span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>style</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>fyuerk<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>Hello World<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>html</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p>위 방식을 응용하여 서버 사이드 랜더링에서도 스타일을 적용할 수 있다. <a href=\\\"https://egghead.io/lessons/css-render-html-css-server-side-using-typestyle\\\">영상 참고.</a></p>\",\"id\":\"/home/circleci/repo/src/pages/posts/2018-01-16-typestyle-basic/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-01-16\",\"path\":\"/posts/typestyle-basic\",\"title\":\"TypeStyle 사용하기\",\"tags\":[\"Typescript\",\"React\",\"CSS\"],\"category\":\"TypeStyle\"}}],\"tagName\":\"Typescript\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tags-typescript.json\n// module id = 499\n// module chunks = 51720743109199"],"sourceRoot":""}